name: HumanEval_35_max_element
language: jl
prompt: "\"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n\
  \    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n\
  \    \"\"\"\nfunction max_element(l::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = max_element;\n\t@test(candidate([1,\
  \ 2, 3]) == 3)\n\t@test(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)\n\
  end\n"
completions: ["    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if\
    \ l[i] > max \n            max = l[i] \n        end\n    end\n    return max\n\
    end\n</cell>\n<text>\nmax_element", "    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i >\
    \ maximum\n            maximum = i\n        end\n    end\n    maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 3: Find the index of the maximum element in the list.\n\
    Write a function that returns the index of the maximum element in the list.\n\
    For example, if the list is [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], the function\
    \ should return 8.\nIf the list is [5, 3, -5, 2, -3, 3, 9, 0, 123, -10, 2], the\
    \ function should return 5.\nIf the list is [5, 3, -5, 2, -3, 3, 9, 0, 123, -10,\
    \ 2], the function should return -1.", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend", "    \n    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end", "    maximum = l[1]\n    for i in l[2:end]\n    \
    \    if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend", "  \
    \  \n    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n  \
    \  end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n    for x\
    \ in l[2:end]\n        if x > maximum\n            maximum = x\n        end\n\
    \    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i >\
    \ maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"",
  "    \n    if length(l) == 0 \n        return 0 \n    \n    maximum = l[1] \n  \
    \  for element in l[2:end] \n        if element > maximum \n            maximum\
    \ = element \n        end \n    \n    return maximum \nend \n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.4>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the maximum\
    \ element in the list.\n    >>> max_element_index(l::Vector{Int64})\n    >>> max_element_index([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in the list that satisfy\
    \ a given condition. For example, if the list contains only positive numbers,\
    \ return 1, if the list contains only negative numbers, return 2, and so on.",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    maximum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a |>\nThe function you are looking for is maximum.\n<code>\njulia> maximum(collect(1:10))\n\
    10\n</code>\n<|/ a tags=julia,list dscore=2 |>\n<| a tags=julia,list |>\nThe function\
    \ you are looking for is maximum.\n<code>\njulia> maximum(collect(1:10))\n10\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe function you are looking for\
    \ is maximum.\n<code>\njulia> maximum(collect(1:10))\n10\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a dscore=1 |>\nThe function you are looking for is maximum.\n<code>\n\
    julia> maximum(collect(1:10))\n10\n</code>\n<|/ a tags=julia,list |>\n<| a tags=julia,list\
    \ |>\nThe function you are looking for is maximum.\n<code>\njulia> maximum(collect(1:10))\n\
    10\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,list |>\nThe function you are\
    \ looking for is maximum.\n<code>\njulia> maximum(collect(1:10))\n10\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,list |>\nThe function you are looking for is\
    \ maximum.\n<code>\njulia> maximum(collect(1:10))\n10\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nThe function you are looking for is maximum.\n<code>\n\
    julia> maximum(collect(1:10))\n10\n</code>\n<|/ a tags=julia,list |>\n<| a tags=julia,list\
    \ |>\nThe function you are looking for is maximum.\n<code>\njulia> maximum(collect(1:10))\n\
    10\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,list |>\nThe function you are\
    \ looking for is maximum.\n<code>\njulia> maximum(collect(1:10))\n10\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nThe function you are looking for is maximum.\n\
    <code>\njulia> maximum(collect(1:10))\n10\n</code>\n<|/ a tags=julia,list |>\n\
    <| a dscore=1 |>\nThe function you are looking for is maximum.\n<code>\njulia>\
    \ maximum(collect(1:10))\n10\n</code>\n<|/", "    maximum = l[1]\n    for i in\
    \ l[2:end]\n        if i > maximum\n            maximum = i\n        end\n   \
    \ end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements in the list.\n>>> sum([1, 2, 3])\n6\n>>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n</text>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements in the list.\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n</text>\n\
    <code language=julia-1.3>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your\
    \ answer. Your solution is very similar to mine, except that yours uses `maximum`\
    \ function while mine uses `max` function. My solution also uses `maximum` function\
    \ while yours uses `max` function. I don't know why you think my solution is better\
    \ than yours. I guess you didn't see my comment in my answer.\n<|/ c |>\n<| c\
    \ |>\nI didn't see your comment before I posted my answer. My solution uses `max`\
    \ function and yours uses `maximum` function. My solution also uses `maximum`\
    \ function while yours uses `max` function. I don't know why you think my solution\
    \ is better than yours. I guess you didn't see my comment in my answer.\n<|/ c\
    \ |>\n<| c |>\nI didn't see your comment before I posted my answer. My solution\
    \ uses `max` function and yours uses `maximum` function. My solution also uses\
    \ `maximum` function while yours uses `max` function. I don't know why you think\
    \ my solution is better than yours. I guess you didn't see my comment in my answer.\n\
    <|/ c |>\n<| c |>\nI didn't see your comment before I posted my answer. My solution\
    \ uses `max` function and yours uses `maximum` function. My solution also uses\
    \ `maximum` function while yours uses `max` function. I don't know why you think\
    \ my solution is better than yours. I guess you didn't see my comment in my answer.\n\
    <|/ c |>\n<| c |>\nI didn't see your comment before I posted my answer. My solution\
    \ uses `max` function and yours uses `maximum` function. My solution also uses\
    \ `maximum` function while yours uses `max` function. I don't know why you think\
    \ my solution is better than yours. I guess you didn't see my comment in my answer.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe accepted answer by is correct, but I thought I'd\
    \ add my own answer here for completeness.\n<code>", "    maximum = l[1]\n   \
    \ for x in l[2:end]\n        if x > maximum\n            maximum = x\n       \
    \ end\n    end\n    maximum\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\nThe other answers here are great, but I wanted to add that you can also\
    \ use maximum and minimum to find the minimum and maximum values in a vector:\n\
    <code>\njulia> maximum(A)\n5", "    \n    if length(l) == 0 \n        return 0\
    \ \n    \n    maximum = l[1] \n    for x in l[2:end] \n        if x > maximum\
    \ \n            maximum = x \n        end \n    end \n    return maximum \nend\
    \ \n</cell>\n<code language=julia-1.5>", "    \n    maximum = l[1]\n    for i\
    \ in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the element in the list that has\
    \ the maximum value.", "    \n    if length(l) == 0 \n        return 0 \n    else\
    \ \n        return l[argmax(l)]\nend", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in l[2:end]\n        if i > maximum\n            maximum = i\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        return 0 \n    else\
    \ \n        return max(l) \nend \n</cell>\n<code language=julia-1.5>", "    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    \n    if length(l) == 0 \n        return 0 \n    \n\
    \    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum \n        \
    \    maximum = x \n        end\n    end\n    return maximum \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.3>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ index of the maximum element in the list.\nHint: Use max_element function.",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nExercise 6\nWrite a function that returns the sum of the elements in the\
    \ list.\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n\
    6\n>>> sum([1, 2, 3, 0])\n6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([1, 2, 3, 0])\n\
    6\n>>> sum([1, 2, 3, -1])\n6\n>>> sum([", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > largest \n            largest = l[i]\n        end\n    end\n   \
    \ return largest\nend\n</cell>\n<code language=julia-1.3>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the number of elements that are positive.", "    if length(l) == 0 \n      \
    \  throw(ArgumentError(\"List is empty\"))\n    end\n    maximum = l[1]\n    for\
    \ i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    if l==[]\n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n   \
    \ for x in l[2:end]\n        if x > maximum\n            maximum = x\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    maximum\nend\n\
    </cell>\n<code language=julia-1.4>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend", "  \
    \  maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        return 0 \n    else \n        return maximum(l)\
    \ \nend \n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe `if` statement is unnecessary.\
    \ `maximum` returns `NaN` if the list is empty.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, but I wanted to keep it close to the original code as much as possible.\
    \ Also, `maximum` returns `NaN` if the list is empty, so I wanted to keep it close\
    \ to the original code as much as possible.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    \n    maximum = l[1]\n    for i in 2:length(l) \n        if maximum < l[i]\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Return minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n    for i\
    \ in l[2:end]\n        if i > maximum\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n         \
    \   maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the minimum of a list\
    \ of numbers. \nThe function should take a list of numbers as an argument and\
    \ return the minimum number. \nThe function should raise an error if the list\
    \ is empty.", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,list |>\n\
    <code>", "    \n    if length(l) == 0 \n        throw(ArgumentError(\"List is\
    \ empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Cannot find max element of empty list\"\
    ))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ largest \n            largest = l[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>>\
    \ min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"",
  "    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n           \
    \ maximum = x\n        end\n    end\n    return maximum\nend", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    return maximum\nend", "    if length(l) == 0 \n   \
    \     throw(ArgumentError(\"List is empty\"))\n    end\n    \n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"\
    ))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n        if l[i] >\
    \ largest \n            largest = l[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the elements in the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n123\n</text>\n<code language=julia-1.5>", " \
    \   if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n      \
    \  if l[i] > max \n            max = l[i]\n        end\n    end\n    return max\n\
    end\n</cell>\n<text>\nmax_element", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in 2:length(l)\n       \
    \ if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend", "    \n    maximum = l[1]\n    for i in 2:length(l)\n       \
    \ if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"List is\
    \ empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if\
    \ l[i] > maximum \n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([4,\
    \ 3, 2])\n    7\n    >>> sum([1, 2, -5, 3])\n    6\n    >>> sum([1, 2, 3])\n \
    \   6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3])\n    ", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n      \
    \  if i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.3>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ index of the maximum element in the list.", "    maximum = l[1]\n    for i in\
    \ l[2:end]\n        if i > maximum\n            maximum = i\n        end\n   \
    \ end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nReturn minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n     \
    \       maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n         \
    \   max = l[i]\n        end\n    end\n    return max\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements in the list.\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    123\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nThe most efficient way is to use maximum and minimum:\n<code>\nmaximum([1,2,3])\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nThe most efficient way is to\
    \ use maximum and minimum:\n<code>\nmaximum([1,2,3])\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia |>\nThe most efficient way is to use maximum and minimum:\n\
    <code>\nmaximum([1,2,3])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nThe\
    \ most efficient way is to use maximum and minimum:\n<code>\nmaximum([1,2,3])\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nThe most efficient way is to use\
    \ maximum and minimum:\n<code>\nmaximum([1,2,3])\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nThe most efficient way is to use maximum and minimum:\n<code>\n\
    maximum([1,2,3])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe most efficient\
    \ way is to use maximum and minimum:\n<code>\nmaximum([1,2,3])\n</code>\n<|/ a\
    \ tags=julia |>\n<| a tags=julia |>\nThe most efficient way is to use maximum\
    \ and minimum:\n<code>\nmaximum([1,2,3])\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nThe most efficient way is to use maximum and minimum:\n<code>\nmaximum([1,2,3])\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nThe most efficient way is to use\
    \ maximum and minimum:\n<code>\nmaximum([1,2,3])\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nThe most efficient way is to use maximum and minimum:\n<code>\n\
    maximum([1,2,3])\n</code>\n<|/ a dscore=1 |>\n<| a |>\nThe most efficient way\
    \ is to use maximum and minimum:\n<code>\nmaximum([1,2,3])\n</code>\n<|/ a dscore=1\
    \ tags=julia |>\n<| a dscore=1 |>\nThe most efficient way is to use maximum and\
    \ minimum:\n<code>\nmaximum([1,2,3])\n</code>\n<|/ a tags=julia |>\n<| a tags=juli",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n         \
    \   max = l[i]\n        end\n    end\n    return max\nend\n</cell>\n<text>\nmax_element()\n\
    This function returns the maximum element in a given list.", "    \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    return maximum\nend", "    \n    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in 2:length(l)\n       \
    \ if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in l[2:end]\n        if i > maximum\n            maximum = i\n       \
    \ end\n    end\n    return maximum\nend", "    maximum = l[1]\n    for x in l[2:end]\n\
    \        if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend\n</code>\n<|/ a tags=julia,list |>\n<| c |>\nThis doesn't work\
    \ if you have a list of tuples, e.g. `[(1, 2), (3, 4), (5, 6)]`\n<|/ c |>\n<|\
    \ c |>\nI added a version that works with tuples.\n<|/ c |>\n<| a tags=julia,list\
    \ |>\n<code>", "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > maximum\n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for x in l[2:end]\n\
    \        if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the elements in the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, ", "    \n    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.4>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ in the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n123\n</text>\n<code language=julia-1.4>", "    maximum = l[1]\n  \
    \  for i in l[2:end]\n        if i > maximum\n            maximum = i\n      \
    \  end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    maximum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    maximum = l[1]\n    for x in l[2:end]\n        if x > maximum\n    \
    \        maximum = x\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    \n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    \n    max = l[1]\n    for i in 2:length(l) \n   \
    \     if l[i] > max \n            max = l[i]\n        end\n    end\n    return\
    \ max\nend\n</cell>\n<text>\nExercise 3: Write a function that returns the minimum\
    \ element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    \n    maximum\
    \ = l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum =\
    \ i\n        end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\n\u041C\u0435\
    \u0442\u043E\u0434 max_element \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0432 \u0441\u043F\u0438\u0441\u043A\
    \u0435. \u0415\u0441\u043B\u0438 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u043C\
    \u0435\u043D\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u0435\u043D\
    \ 0, \u0442\u043E \u0438\u0441\u043A\u043E\u043C\u044B\u0439 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442 \u0438\u0437 \u0441\u043F\u0438\u0441\u043A\u0430 \u0431\
    \u0443\u0434\u0435\u0442 \u0438\u043C\u0435\u0442\u044C \u0442\u043E\u0447\u043A\
    \u0443 None. \u0415\u0441\u043B\u0438 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\
    \ \u043D\u0435 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u0438\u043C\
    \u0435\u0442\u044C \u0442\u043E\u0447\u043A\u0443, \u0442\u043E \u0438\u0441\u043A\
    \u043E\u043C\u044B\u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u0438\u0437\
    \ \u0441\u043F\u0438\u0441\u043A\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u043C\
    \u0435\u0442\u044C \u0442\u043E\u0447\u043A\u0443 0.", "    \n    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the maximum element in the list.\n\
    >>> max_index(l::Vector{Int64})\n1\n>>> max_index([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n1\n>>> max_index([-5, -3, 3, 9, 0, 123, 1, -10])\n4\n>>> max_index([-5,\
    \ -3, 3, 9, 0, 123, 1])\n4\n>>> max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5])\n\
    5\n>>> max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5, 0])\n5\n>>> max_index([-5,\
    \ -3, 3, 9, 0, 123, 1, -10, 5, 6, 0])\n5\n>>> max_index([-5, -3, 3, 9, 0, 123,\
    \ 1, -10, 5, 6, 0, 0])\n5\n>>> max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5, 6,\
    \ 0, 6, 0])\n5\n>>> max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 0])\n\
    5\n>>> max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0])\n5\n>>>\
    \ max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0, 0])\n5\n>>> max_index([-5,\
    \ -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0, 6, 0])\n5\n>>> max_index([-5,\
    \ -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0, 6, 0, 0])\n5\n>>> max_index([-5,\
    \ -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0])\n5\n>>> max_index([-5,\
    \ -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0])\n5\n>>> max_index([-5,\
    \ -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 0])\n5\n>>>\
    \ max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6,\
    \ 0, 6, 0])\n5\n>>> max_index([-5, -3, 3, 9, 0, 123, 1, -10, 5, 6, 0, 6, 0, 6,\
    \ 0, 6, 0, 6, ", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n     \
    \   if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"\
    ))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max\
    \ \n            max = l[i] \n        end\n    end\n    return max\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l) \n\
    \        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        return 0 \n    else \n\
    \        return maximum(l) \nend ", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the sum of the elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n\
    \    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\
    \"\"", "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    return maximum\nend\n</code>\n\
    <|/ a tags=julia,arrays,max |>\n<| c |>\n`maximum` does not work on `Int64` arrays.\
    \ `maximum` returns `Int64` not `Int`.\n<|/ c |>\n<| c |>\n`maximum` works on\
    \ `Int64` arrays, as long as you use `maximum` and not `maximum!`.\n<|/ c |>\n\
    <| c |>\n`maximum` works on `Int64` arrays, as long as you use `maximum` and not\
    \ `maximum!`. `maximum` returns `Int64` not `Int`.\n<|/ c |>\n<| c |>\n`maximum`\
    \ works on `Int64` arrays, as long as you use `maximum` and not `maximum!`. `maximum`\
    \ returns `Int64` not `Int`.\n<|/ c |>\n<| a dscore=4 |>\nThe most efficient way\
    \ is to use Julia's built-in function maximum.\n<code>\njulia> maximum(A)\n</code>\n\
    <|/ a tags=julia,arrays,max |>\n<| c |>\n`maximum` does not work on `Int64` arrays.\
    \ `maximum` returns `Int64` not `Int`.\n<|/ c |>\n<| c |>\n`maximum` works on\
    \ `Int64` arrays, as long as you use `maximum` and not `maximum!`.\n<|/ c |>\n\
    <| a |>\nThe most efficient way is to use Julia's built-in function maximum.\n\
    <code>\njulia> maximum(A)\n</code>\n<|/ a dscore=4 tags=julia,arrays,max |>\n\
    <| c |>\n`maximum` does not work on `Int64` arrays. `maximum` returns `Int64`\
    \ not `Int`.\n<|/ c |>\n<| a dscore=4 |>\nThe most efficient way is to use Julia's\
    \ built-in function maximum.\n<code>\njulia> maximum(A)\n</code>\n<|/ a tags=julia,arrays,max\
    \ |>\n<| c |>\n`maximum` does not work on `Int64` arrays. `maximum` returns `Int64`\
    \ not `Int`.\n<|/ c |>\n<| a tags=julia,arrays,max |>\nThe most efficient way\
    \ is to use Julia's built-in function maximum.\n<code>\njulia> maximum(A)\n</code>\n\
    <|/ a dscore=3 |>\n<| a tag", "    \n    if length(l) == 0 \n        return 0\
    \ \n    \n    largest = l[1]\n    for i in 2:length(l) \n        if l[i] > largest\
    \ \n            largest = l[i] \n        end \n    end \n    return largest \n\
    end \n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n \
    \   end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Cannot find max element of empty list\"))\n    end\n    maximum = l[1]\n    for\
    \ i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise 10\n\
    Write a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    \n    maximum = l[1]\n    for i in l[2:end]\n    \
    \    if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n \
    \   for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the elements in the list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10, 100])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100])\n\
    123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100, -1000])\n123\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100, -1000, -1001])\n123\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100, -1000, -1001, -1002])\n\
    123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100, -1000, -1001,\
    \ -1002, -1003])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100,\
    \ -1000, -1001, -1002, -1003, -1004])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, 100, -100, -1000, -1001, -1002, -1003, -1004, -1005])\n123\n>>>\
    \ sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100, -1000, -1001, -1002,\
    \ -1003, -1004, -1005, -1006])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10, 100, -100, -1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007])\n123\n\
    >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 100, -100, -1000, -1001, -1002,\
    \ -1003, -1004, -1005, -1006, -1007, -1008])\n123\n>>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10, 100, -100, -1000, -1001, -1002, -1003, -1004, -1005, -1006,\
    \ -1007, -1008, -1009])\n123\n>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10,\
    \ 100, -100, -1000, -1001, -1002, -1003, -1004, -1005, -1006, -1007, -1008, -1009,\
    \ -1010])\n123\n>>> sum([5, 3, -", "    if l==[]\n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum=l[1]\n    for i in l[2:end]\n        if i>maximum\n\
    \            maximum=i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.3>", "    maximum = max_element_index(l)\n    return l[maximum]\n\
    end", "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n\
    \    end\n    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum\
    \ \n            maximum = l[i]\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n      \
    \  if l[i] > max \n            max = l[i]\n        end\n    end\n    return max\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a bit. `max_element` can be implemented as `maximum(l)`\n\
    <|/ c |>\n<| c |>\nYes, it can be simplified a bit. `maximum` can be implemented\
    \ as `maximum(l)` but `maximum` does not accept `Int64` as input. `maximum` can\
    \ be implemented as `maximum(map(Int, l))` but `maximum` does not accept `Int64`\
    \ as input. `maximum` can be implemented as `maximum(map(Int, l))` but `maximum`\
    \ does not accept `Int64` as input. `maximum` can be implemented as `maximum(map(Int,\
    \ l))` but `maximum` does not accept `Int64` as input. `maximum` can be implemented\
    \ as `maximum(map(Int, l))` but `maximum` does not accept `Int64` as input. `maximum`\
    \ can be implemented as `maximum(map(Int, l))` but `maximum` does not accept `Int64`\
    \ as input. `maximum` can be implemented as `maximum(map(Int, l))` but `maximum`\
    \ does not accept `Int64` as input. `maximum` can be implemented as `maximum(map(Int,\
    \ l))` but `maximum` does not accept `Int64` as input. `maximum` can be implemented\
    \ as `maximum(map(Int, l))` but `maximum` does not accept `Int64` as input. `maximum`\
    \ can be implemented as `maximum(map(Int, l))` but `maximum` does not accept `Int64`\
    \ as input. `maximum` can be implemented as `maximum(map(Int, l))` but `maximum`\
    \ does not accept `Int64` as input. `maximum` can be implemented as `maximum(map(Int,\
    \ l))` but `maximum` does not accept `Int64` as input. `maximum` can be implemented\
    \ as `maximum(map(Int, l))` but `maximum` does not accept `Int64` as input. `maximum`\
    \ can be implemented as `maximum(map(Int, l))` but `maximum` does not accept `Int64`\
    \ as input. `maximum` can be implemented as `maximum(map(Int, l))` but `maximum`\
    \ does not accept `Int64` as input. `maximum", "    if length(l) == 0 \n     \
    \   throw(ArgumentError(\"List is empty\"))\n    end\n    maximum = l[1]\n   \
    \ for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n\
    \            maximum = l[i]\n        end\n    end\n    maximum\nend\n</cell>\n\
    <text>\nExercise 3: Write a function that returns the minimum element in the list.\n\
    \    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l) == 0 \n    \
    \    throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n    for\
    \ x in l[2:end]\n        if x > maximum\n            maximum = x\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the elements of a list.\n>>> sum([1, 2, 3])\n6\n>>>\
    \ sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n-60\n>>> sum([1, 2, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10,\
    \ 0, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0,\
    \ 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0])\n\
    -60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0])\n-60\n\
    >>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0])\n-60\n\
    >>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    -60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-60\n>>>\
    \ sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n-60\n>>>\
    \ sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0])\n-60\n>>> sum([1, 2, 3, -5, 2, -3, 3, 9, 0, 123, 1, ",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the list. `max_element([-5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])` returns `-10` instead of `123`.\n<|/ c\
    \ |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I will edit\
    \ my answer.\n<|/ c |>\n<| a tags=julia,list |>\n<code>", "    if length(l) ==\
    \ 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    \n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n \
    \           maximum = l[i]\n        end\n    end\n    return maximum\nend", " \
    \   maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n    \
    \        maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <text>\nmax_element", "    \n    maximum = l[1]\n    for i in 2:length(l)\n  \
    \      if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n \
    \   return maximum\nend\n</cell>\n<text>\nmax_element()\nThis function returns\
    \ the maximum element in the list.", "    maximum = max_element(l)\n    minimum\
    \ = min_element(l)\n    if maximum < minimum\n        maximum, minimum = minimum,\
    \ maximum\n    end\n    return maximum\nend", "    if l==[]\n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    \n    maximum = l[1]\n    for i in l[2:end]\n   \
    \     if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n \
    \   for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.4>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    maximum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=2 |>\nThe most efficient way is to use maximum and minimum:\n\
    <code>\njulia> maximum(A)\n3", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    \n    maximum = l[1]\n    for i in 2:length(l)\
    \ \n        if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that returns the minimum element in the list.\n \
    \   >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l) == 0 \n       \
    \ throw(ArgumentError(\"Empty list\"))\n    end\n    \n    maximum = l[1]\n  \
    \  for i in 2:length(l) \n        if l[i] > maximum \n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend", "    maximum = l[1]\n    for\
    \ i in l[2:end]\n        if i > maximum\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3: Find the maximum element\
    \ in a vector\nWrite a function that returns the maximum element in a vector.\
    \ \nThe function should take one argument, a list of integers. \nThe function\
    \ should return an integer.", "    \n    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2,\
    \ -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n \
    \   1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n\
    \            maximum = i\n        end\n    end\n    maximum\nend\n</code>\n<|/\
    \ a tags=julia,list |>\n<| a dscore=2 |>\n<code>", "    maximum = max_element(l)\n\
    \    return maximum\nend", "    maximum = l[1]\n    for i in l[2:end]\n      \
    \  if i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n</cell>\n<text>\nmax_element!", "    maximum = l[1]\n    for\
    \ x in l[2:end]\n        if x > maximum\n            maximum = x\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(l) == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n   \
    \ maximum = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n    \
    \        maximum = l[i] \n        end\n    end\n    return maximum\nend", "  \
    \  maximum = l[1]\n    for i in 2:length(l)\n        if l[i] > maximum\n     \
    \       maximum = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend", "    \n    if length(l)\
    \ == 0 \n        return 0 \n    else \n        return max(l) \nend \n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\n3.3 Finding minimum and maximum element in a list\nThe function\
    \ min_element returns the minimum element in the list.", "    if length(l) ==\
    \ 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i] \n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum\
    \ = l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in 2:length(l)\n       \
    \ if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"List is\
    \ empty\"))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n        if\
    \ l[i] > largest \n            largest = l[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in l[2:end]\n        if i > maximum\n            maximum = i\n       \
    \ end\n    end\n    return maximum\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend", "    maximum = l[1]\n    for i in 2:length(l)\n      \
    \  if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    if length(l) ==\
    \ 0 \n        return 0 \n    else \n        return max(l) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "    if length(l) == 0 \n       \
    \ return 0 \n    else \n        return l[argmax(l)]\n    end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>", "    if length(l) == 0 \n        return 0 \n\
    \    else \n        return max(l) \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if length(l) == 0 \n        return 0 \n    else \n        return max(l)\
    \ \nend", "    if length(l) == 0 \n        throw(ArgumentError(\"Empty list\"\
    ))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max\
    \ \n            max = l[i] \n        end\n    end\n    return max\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > largest \n            largest = l[i]\n        end\n    end\n   \
    \ return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>>\
    \ sum([1, -2, 3])\n    3\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.3>", "    \n    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmax_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    maximum = max_element(l)\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    maximum = l[1]\n    for x in l[2:end]\n     \
    \   if x > maximum\n            maximum = x\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(l) == 0 \n        return 0 \n    else \n        return l[argmax(l)]\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n  \
    \      if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nExercise 9\nWrite a function that returns\
    \ the minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n  \
    \  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\
    \"", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n    \
    \        maximum = i\n        end\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 7\nWrite a function that returns the minimum element\
    \ in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Cannot find max element of empty list\"))\n    end\n    max = l[1]\n    for i\
    \ in 2:length(l) \n        if l[i] > max \n            max = l[i]\n        end\n\
    \    end\n    return max\nend", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n        if\
    \ l[i] > max \n            max = l[i] \n        end\n    end\n    return max\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns the sum of the\
    \ elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "    maximum = l[1]\n\
    \    for i in l[2:end]\n        if i > maximum\n            maximum = i\n    \
    \    end\n    end\n    maximum\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that returns the minimum element in the list.\n    >>> min_element([1, 2, 3])\n\
    \    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n\
    \    \"\"\"", "    \n    maximum = l[1]\n    for x in l[2:end]\n        if x >\
    \ maximum\n            maximum = x\n        end\n    end\n    maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for x in l[2:end]\n        if\
    \ x > maximum\n            maximum = x\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</code>\n<|/ a tags=julia,list |>\n<| c |>\nThis doesn't work\
    \ if there are multiple maxima in the list. For example, `max_element([-10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -",
  "    \n    maximum = l[1]\n    for element in l[2:end]\n        if element > maximum\n\
    \            maximum = element\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.4>", "    if length(l) == 0 \n\
    \        throw(ArgumentError(\"List is empty\"))\n    end\n    maximum = l[1]\n\
    \    for i in 2:length(l) \n        if l[i] > maximum \n            maximum =\
    \ l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>",
  "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n           \
    \ maximum = i\n        end\n    end\n    return maximum\nend", "    maximum =\
    \ l[1]\n    for i in l[2:end]\n        if i > maximum\n            maximum = i\n\
    \        end\n    end\n    maximum\nend\n</code>\n<|/ a tags=julia,arrays,max\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.3, you can use the function max_element to\
    \ find the maximum element in a vector:\n<code>\njulia> max_element([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n123\n</code>\n<|/ a tags=julia,arrays,max |>\n\
    <| a tags=julia,arrays,max |>\nIn Julia 1.3 you can use max_element to find the\
    \ maximum element in a vector:\n<code>\njulia> max_element([5, 3, -5, 2, -3, 3,\
    \ 9, 0, 123, 1, -10])\n123\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia\
    \ 1.3 you can use the function max_element to find the maximum element in a vector:\n\
    <code>\njulia> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n</code>\n\
    <|/ a tags=julia,arrays,max |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use max_element\
    \ to find the maximum element in a vector:\n<code>\njulia> max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n</code>\n<|/ a tags=julia,arrays,max\
    \ |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use max_element to find the maximum\
    \ element in a vector:\n<code>\njulia> max_element([5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10])\n123\n</code>\n<|/ a tags=julia,arrays,max |>\n<| a tags=julia,arrays,max\
    \ |>\nIn Julia 1.3 you can use max_element to find the maximum element in a vector:\n\
    <code>\njulia> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use max_element to find\
    \ the maximum element in a vector:\n<code>\njulia> max_element([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10])\n123\n</code>\n<|/ a tags=julia,arrays,max |>\n<| a dscore=0\
    \ |>\nIn Julia 1.3 you can use max_element to find the maximum element in a vector:\n\
    <code>\njulia> max_element([5, 3, -5, 2, -3, 3, ", "    maximum = l[1]\n    for\
    \ i in l[2:end]\n        if i > maximum\n            maximum = i\n        end\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(l) == 0 \n        throw(ArgumentError(\"List is empty\"))\n    end\n\
    \    \n    max = l[1]\n    for i in 2:length(l) \n        if l[i] > max \n   \
    \         max = l[i]\n        end\n    end\n    return max\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmax_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the index of the maximum\
    \ element in a list.", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    List is empty\"))\n    end\n    max = l[1]\n    for i in 2:length(l) \n      \
    \  if l[i] > max \n            max = l[i]\n        end\n    end\n    return max\n\
    end", "    maximum = l[1]\n    for i in l[2:end]\n        if i > maximum\n   \
    \         maximum = i\n        end\n    end\n    return maximum\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=0 |>\n<code>", "    maximum = l[1]\n \
    \   for i in l[2:end]\n        if i > maximum\n            maximum = i\n     \
    \   end\n    end\n    return maximum\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| c |>\nThis does not answer the question. OP asked for Julia code, and this\
    \ answer does not do that.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ My answer was meant to be a general solution for any type of array (including\
    \ vectors). My answer was meant to be a general solution for any type of array\
    \ (including vectors). My answer was meant to be a general solution for any type\
    \ of array (including vectors). My answer was meant to be a general solution for\
    \ any type of array (including vectors). My answer was meant to be a general solution\
    \ for any type of array (including vectors). My answer was meant to be a general\
    \ solution for any type of array (including vectors). My answer was meant to be\
    \ a general solution for any type of array (including vectors). My answer was\
    \ meant to be a general solution for any type of array (including vectors). My\
    \ answer was meant to be a general solution for any type of array (including vectors).\
    \ My answer was meant to be a general solution for any type of array (including\
    \ vectors). My answer was meant to be a general solution for any type of array\
    \ (including vectors). My answer was meant to be a general solution for any type\
    \ of array (including vectors). My answer was meant to be a general solution for\
    \ any type of array (including vectors). My answer was meant to be a general solution\
    \ for any type of array (including vectors). My answer was meant to be a general\
    \ solution for any type of array (including vectors). My answer was meant to be\
    \ a general solution for any type of array (including vectors). My answer was\
    \ meant to be a general solution for any type of array (including vectors). My\
    \ answer was meant to be a general solution for any type of array (including vectors).\
    \ My answer was meant to be a general solution for any type of array (including\
    \ vectors). My answer was meant to be a general solution for any type of array\
    \ (including vectors). My answer was meant to be a general solution for any type\
    \ of array (including vectors). My answer was meant to be a general solution for\
    \ any type of array (including vectors). My answer was meant to be a general solution\
    \ for any type of array (including vectors). My answer was meant to be a general\
    \ solution for any type of array (including vectors). My answer was meant to be\
    \ a general solution for any type of array (including vectors). My ", "    maximum\
    \ = l[1]\n    for x in l[2:end]\n        if x > maximum\n            maximum =\
    \ x\n        end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    maximum = l[1]\n    for i in l[2:end]\n        if\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements in the list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "    maximum = l[1]\n \
    \   for x in l[2:end]\n        if x > maximum\n            maximum = x\n     \
    \   end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    maximum = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > maximum \n            maximum = l[i]\n        end\n    end\n   \
    \ return maximum\nend", "    \n    maximum = l[1]\n    for i in l[2:end]\n   \
    \     if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n   \
    \ for i in l[2:end]\n        if i > maximum\n            maximum = i\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\"", "    if length(l) == 0 \n        throw(ArgumentError(\"\
    Empty list\"))\n    end\n    largest = l[1]\n    for i in 2:length(l) \n     \
    \   if l[i] > largest \n            largest = l[i]\n        end\n    end\n   \
    \ return largest\nend\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n\
    \    for i in 2:length(l)\n        if l[i] > maximum\n            maximum = l[i]\n\
    \        end\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=julia,arrays |>\nI wrote a package called ArrayTools.jl that provides\
    \ many useful array operations. Here are some examples:\n<code>\njulia> using\
    \ ArrayTools", "    maximum = l[1]\n    for i in 2:length(l)\n        if l[i]\
    \ > maximum\n            maximum = l[i]\n        end\n    end\n    return maximum\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not answer the question.\
    \ OP asked for Julia code, and this answer does not answer the question at all.\n\
    <|/ c |>\n<| c |>\nThe question was \"how to find the maximum element in a list\"\
    , and this is how I solved it. I don't see how this doesn't answer the question.\
    \ Maybe I misunderstood the question?\n<|/ c |>\n<| c |>\nThe question was \"\
    how to find the maximum element in a list\", and this is how I solved it. I don't\
    \ see how this doesn't answer the question. Maybe I misunderstood the question?\n\
    <|/ c |>\n<| c |>\nThe question was \"how to find the maximum element in a list\"\
    , and this is how I solved it. I don't see how this doesn't answer the question.\
    \ Maybe I misunderstood the question?\n<|/ c |>\n<| c |>\nThe question was \"\
    how to find the maximum element in a list\", and this is how I solved it. I don't\
    \ see how this doesn't answer the question. Maybe I misunderstood the question?\n\
    <|/ c |>\n<| a tags=julia |>\n<code>", "    maximum = l[1]\n    for x in l[2:end]\n\
    \        if x > maximum\n            maximum = x\n        end\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    maximum = l[1]\n    for i in l[2:end]\n\
    \        if i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nmax_element", "    maximum = max_element(l)\n\
    \    return maximum\nend", "    \n    maximum = l[1]\n    for i in 2:length(l)\n\
    \        if l[i] > maximum\n            maximum = l[i]\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        throw(ArgumentError(\"Empty list\"))\n    end\n    maximum =\
    \ l[1]\n    for i in 2:length(l) \n        if l[i] > maximum \n            maximum\
    \ = l[i]\n        end\n    end\n    return maximum\nend\n</cell>\n<text>\nExercise\
    \ 6\nWrite a function that returns the minimum element in the list.\n    >>> min_element([1,\
    \ 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\
    \    -10\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
