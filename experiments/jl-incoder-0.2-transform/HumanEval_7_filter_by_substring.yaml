name: HumanEval_7_filter_by_substring
language: jl
prompt: "\"\"\" Filter an input list of strings only for ones that contain given substring\n\
  \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
  abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
  ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    strings = strings[findall(strings, substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that filters an input list of strings\
    \ only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]\n",
  "    \n    strings = strings[findall(strings, substring .== true)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\nWe can\
    \ also filter by substrings, for example, by checking if one string contains another\
    \ substring. Let's see how we can do that.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3: Filter a list of strings\
    \ based on a regular expression\nWrite a function that filters a list of strings\
    \ based on a regular expression. \nThe function should return a list of strings\
    \ that match the regular expression. \nThe function should ignore case when matching.",
  "    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end", "    strings = filter( x -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for those that contain all\
    \ given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\n\
    Hint: use filter_by_substring", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter( x -> contains(x, substring), strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    \n\
    \    strings = strings[:]\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            remove!(strings, string)\n        end\n    end\n   \
    \ \n    return strings\nend", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input list of\
    \ strings only for ones that do not contain given substring\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"bacd\", \"cde\", \"array\"]\n</text>\n<code language=julia-1.4>",
  "    \n    strings = filter( x -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring()", "    \n\
    \    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end", "    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
