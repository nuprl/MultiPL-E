name: HumanEval_7_filter_by_substring
language: jl
prompt: "\"\"\" Filter an input list of strings only for ones that contain given substring\n\
  \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
  abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
  ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    strings = strings[findall(strings, substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that filters an input list of strings\
    \ only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]\n",
  "    \n    strings = strings[findall(strings, substring .== true)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\nWe can\
    \ also filter by substrings, for example, by checking if one string contains another\
    \ substring. Let's see how we can do that.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3: Filter a list of strings\
    \ based on a regular expression\nWrite a function that filters a list of strings\
    \ based on a regular expression. \nThe function should return a list of strings\
    \ that match the regular expression. \nThe function should ignore case when matching.",
  "    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end", "    strings = filter( x -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for those that contain all\
    \ given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\n\
    Hint: use filter_by_substring", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter( x -> contains(x, substring), strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    \n\
    \    strings = strings[:]\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            remove!(strings, string)\n        end\n    end\n   \
    \ \n    return strings\nend", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input list of\
    \ strings only for ones that do not contain given substring\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"bacd\", \"cde\", \"array\"]\n</text>\n<code language=julia-1.4>",
  "    \n    strings = filter( x -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring()", "    \n\
    \    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end", "    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_not_substring([], \"a\")\n    []\n    >>>\
    \ filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n  \
    \  [\"cde\", \"array\"]\n    \"\"\"", "    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring!\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for ones that\
    \ contain given substring\nModify an input list of strings only for one", "  \
    \  \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of strings and a substring and returns the list of strings that\
    \ do not contain that substring. Test your function with some test cases.", " \
    \   \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the string occurs in the string. For example, if the string is \"abcabc\", the\
    \ function should return 3.", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a string with only the first letter\
    \ capitalized.", "    \n    strings = strings[findall(strings, substring .==.)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a string for substrings containing only a given character.\
    \ For example, filter_by_character([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\") should return [\"abc\", \"bacd\"].", "    \n    strings = strings[:]\n  \
    \  \n    strings = filter((x) -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    return strings\nend", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    []\n    \"\"\"", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    return strings\n\
    end", "    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\ne.g. filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\nshould return [\"abc\", \"bacd\"\
    ]\nHint: use filter_by_substring", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring",
  "    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ filters an input list of strings only for those that contain given substring\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\
    \    [\"abc\", \"bacd\", \"array\"]\n    \"\"\"", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a substring\
    \ and returns all strings that contain the substring. \nWrite a second function\
    \ that takes a vector of strings and a substring and returns the strings that\
    \ do not contain the substring. \nWrite a third function that takes a vector of\
    \ strings and a substring and returns the strings that contain the substring and\
    \ do not contain the substring. \nWrite a fourth function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a fifth function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a sixth function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a seventh function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a eighth function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a ninth function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a tenth function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a eleventh function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a twelfth function that takes a vector\
    \ of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a thirteenth function that takes a\
    \ vector of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a fourteenth function that takes a\
    \ vector of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a fifteenth function that takes a\
    \ vector of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a sixteenth function that takes a\
    \ vector of strings and a substring and returns the strings that contain the substring\
    \ and do not contain the substring. \nWrite a seventeenth function that takes\
    \ a vector of strings and a substring and returns the strings that contain the\
    \ substring and do not contain the substring. \nWrite a eighteenth function that\
    \ takes a vector of strings and a substring and returns the strings that contain\
    \ the substring and do not contain the substring. \nWrite a nineteenth ", "  \
    \  \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a string with all the characters in lowercase and\
    \ with spaces replaced by underscores.", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that filters an input list of strings only for ones that do not\
    \ contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"g\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"m\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array", "    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters input list of strings only for those that contain given\
    \ substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \"\"\"", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2: Filter a DataFrame for rows that contain a given substring\n\
    Write a function that filters a DataFrame for rows that contain a given substring.\
    \ For example, given the following DataFrame:", "    \n    strings = filter(x->contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that filters an input list of strings only for ones that\
    \ do not contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend",
  "    \n    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filtering by substring\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substring\nWrite a test that checks that your function works as expected\n\
    Write a function that filters an input list of strings only for ones that do not\
    \ contain given substring\nWrite a test that checks that your function works as\
    \ expected", "    strings = filter((x) -> contains(x, substring), strings)\n \
    \   return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a list of all characters that are\
    \ not in the given string. For example, given \"abc\", it should return [\"b\"\
    , \"c\", \"d\"].", "    strings = filter( x -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \"\"\"", "    \n    filtered_strings = Vector{String}()\n  \
    \  for string in strings\n        if contains(string, substring)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n[\"abc\", \"bacd\", \"cde\",\
    \ \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"bacd\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filtering by substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a boolean indicating whether it contains only letters.",
  "    \n    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end", "    \n    strings = filter( x -> contains(x,substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<text>\nExercise 3: Filtering by substring\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n    [\"bacd\", \"cde\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\"\
    )\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"bacd\")\n    [\"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\")\n    []\n    >>> filter_by_substring([\"\
    abc", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the substring.", "    \n    filtered_strings =\
    \ Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and a vector of substrings and returns a vector of strings that only\
    \ contain substrings.", "    strings = filter( x -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a boolean indicating whether that\
    \ string is a valid Julia identifier. \nThe function should return false for invalid\
    \ identifiers and true for valid identifiers.", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend", "    strings = strings[findall(strings,\
    \ substring .== 1)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters input list for strings that\
    \ do not contain given substring\n>>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    d\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    i\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    n\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ strings by a substring that appears at least twice in a row. For example, given\
    \ [\"abc\", \"bacd\", \"cde\", \"array\", \"ab\", \"ab\", \"ab\"], return [\"\
    abc\", \"bacd\", \"array\"].", "    \n    strings = filter( x -> contains(substring,x),\
    \ strings)\n    \n    return strings\nend", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input\
    \ list of strings only for ones that do not contain given substring\nThe opposite\
    \ of filter_by_substring", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n    []\n", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ by length\nHint: use filter_by_substring", "    \n    strings = strings[findall(x\
    \ -> contains(x, substring), strings)]\n    return strings\nend", "    \n    strings\
    \ = strings[findall(strings,substring)]\n    return strings\nend", "    \n   \
    \ strings = strings[:]\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    strings = filter( x -> contains(substring,x), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings containing only the strings that contain the substring. \nFor example,\
    \ if the input vector is [\"abc\", \"bacd\", \"cde\", \"array\"] and the substring\
    \ is \"a\", then the output vector should be [\"abc\", \"bacd\"].", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter by substring", "    \n    strings\
    \ = filter(x->contains(x, substring), strings)\n    \n    return strings\nend",
  "    \n    strings = filter(x->contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings,substring)]\n  \
    \  return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter\
    \ a DataFrame for rows that contain a given substring\nWrite a function that filters\
    \ a DataFrame for rows that contain a given substring. \nThe function should return\
    \ a new DataFrame containing only rows that contain the given substring. \nThe\
    \ function should take as input a DataFrame and a substring as strings and return\
    \ a DataFrame containing only rows that contain the given substring.", "    \n\
    \    filtered_strings = copy(strings)\n    \n    for string in strings\n     \
    \   if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that filters an input list of strings only for ones\
    \ that do not contain given substring\n    >>> filter_by_substring([], \"a\")\n\
    \    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n    []\n    \"\"\"", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    \n    strings = strings[findall(strings, substring)]\n    \n    return strings\n\
    end", "    strings = filter( x -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input list of strings only for ones that do not contain given substring\n>>>\
    \ filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"t\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"u\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"v\")\n[]", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"cde\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"array\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a list of strings and\
    \ a substring and returns all strings that contain that substring. Test your function\
    \ with different inputs.", "    \n    strings = strings[:]\n    \n    for s in\
    \ strings\n        if contains(s, substring)\n            delete!(s, substring)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters strings by a substring and returns\
    \ the number of strings that satisfy the filter. For example, given [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"], \"a\", the function should return 3.", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    strings\
    \ = strings[findall(strings,substring)]\n    return strings\nend", "    \n   \
    \ strings = strings[findall(strings,substring)]\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.contains(substring)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string with all\
    \ the characters in lowercase and uppercase removed. \nFor example, if the input\
    \ string is \"Hello World\", the output should be \"hEllo wOrlD\".", "    \n \
    \   strings = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\nNow let's filter our\
    \ input list of strings by the substrings we already have in our dictionary. We'll\
    \ use filter_by_substring() to do this.", "    \n    strings = strings[:]\n  \
    \  \n    for string in strings\n        if contains(string, substring)\n     \
    \       delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a substring and returns the number of times the substring occurs in the input\
    \ list. Test it on a list of strings that contains only \"a\" and \"b\". Test\
    \ it on a list of strings that contains \"a\", \"b\", \"c\" and \"d\".", "   \
    \ \n    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend", "    \n    strings = strings[:]\n    \n\
    \    strings = filter((x) -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings, substring .==)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\"\
    )\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"e\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"g\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"h\")\n    []\n    >>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"i\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"j\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a regular expression. \nThe function should take two arguments:\
    \ a string and a regular expression. \nThe function should return a list of strings\
    \ that match the regular expression. \nThe function should ignore case. \nThe\
    \ function should ignore leading and trailing whitespace. \nThe function should\
    \ ignore leading and trailing punctuation. \nThe function should ignore leading\
    \ and trailing digits. \nThe function should ignore leading and trailing alphanumeric\
    \ characters. \nThe function should ignore leading and trailing whitespace. \n\
    The function should ignore leading and trailing punctuation. \nThe function should\
    \ ignore leading and trailing digits. \nThe function should ignore leading and\
    \ trailing alphanumeric characters. \nThe function should ignore leading and trailing\
    \ whitespace. \nThe function should ignore leading and trailing punctuation. \n\
    The function should ignore leading and trailing digits. \nThe function should\
    \ ignore leading and trailing alphanumeric characters. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing digits. \nThe\
    \ function should ignore leading and trailing alphanumeric characters. \nThe function\
    \ should ignore leading and trailing whitespace. \nThe function should ignore\
    \ leading and trailing punctuation. \nThe function should ignore leading and trailing\
    \ digits. \nThe function should ignore leading and trailing alphanumeric characters.\
    \ \nThe function should ignore leading and trailing whitespace. \nThe function\
    \ should ignore leading and trailing punctuation. \nThe function should ignore\
    \ leading and trailing digits. \nThe function should ignore leading and trailing\
    \ alphanumeric characters. \nThe function should ignore leading and trailing whitespace.\
    \ \nThe function should ignore leading and trailing punctuation. \nThe function\
    \ should ignore leading and trailing digits. \nThe function should ignore leading\
    \ and trailing alphanumeric characters. \nThe function should ignore leading and\
    \ trailing whitespace. \nThe function should ignore leading and trailing punctuation.\
    \ \nThe function should ignore leading and trailing digits. \nThe function should\
    \ ignore leading and trailing alphanumeric characters. \nThe function should ignore\
    \ leading and trailing whitespace. \nThe function should ignore leading and trailing\
    \ punctuation. \nThe function should ignore leading and trailing digits. \nThe\
    \ function should ignore leading and trailing alphanumeric characters. \nThe function\
    \ should ignore leading and trailing whitespace. \nThe function should ignore\
    \ leading and trailing punctuation. \n", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a substring and returns a vector of strings\
    \ that only contain the substring.", "    strings = strings[findall(strings, substring\
    \ .== true)]\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.contains(substring)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings that do not contain\
    \ the substring. Test it on some examples:", "    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  return strings\nend", "    \n    strings = strings[findall(x -> contains(x,\
    \ substring), strings)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.", "    \n \
    \   strings = strings[:]\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            remove!(strings, string)\n        end\n    end\n   \
    \ \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a regular expression\nThe function should\
    \ take two arguments: a list of strings and a regular expression\nThe function\
    \ should return a list of strings that match the regular expression\nThe function\
    \ should ignore case when matching strings\nThe function should ignore whitespace\
    \ when matching strings\nThe function should ignore non-printable characters when\
    \ matching strings\nThe function should ignore non-ASCII characters when matching\
    \ strings\nThe function should ignore non-printable characters when matching strings\n\
    The function should ignore non-ASCII characters when matching strings\nThe function\
    \ should ignore non-printable characters when matching strings\nThe function should\
    \ ignore non-ASCII characters when matching strings\nThe function should ignore\
    \ non-printable characters when matching strings\nThe function should ignore non-ASCII\
    \ characters when matching strings\nThe function should ignore non-printable characters\
    \ when matching strings\nThe function should ignore non-ASCII characters when\
    \ matching strings\nThe function should ignore non-printable characters when matching\
    \ strings\nThe function should ignore non-ASCII characters when matching strings\n\
    The function should ignore non-printable characters when matching strings\nThe\
    \ function should ignore non-ASCII characters when matching strings\nThe function\
    \ should ignore non-printable characters when matching strings\nThe function should\
    \ ignore non-ASCII characters when matching strings\nThe function should ignore\
    \ non-printable characters when matching strings\nThe function should ignore non-ASCII\
    \ characters when matching strings\nThe function should ignore non-printable characters\
    \ when matching strings\nThe function should ignore non-ASCII characters when\
    \ matching strings\nThe function should ignore non-printable characters when matching\
    \ strings\nThe function should ignore non-ASCII characters when matching strings\n\
    The function should ignore non-printable characters when matching strings\nThe\
    \ function should ignore non-ASCII characters when matching strings\nThe function\
    \ should ignore non-printable characters when matching strings\nThe function should\
    \ ignore non-ASCII characters when matching strings\nThe function should ignore\
    \ non-printable characters when matching strings\nThe function should ignore non-ASCII\
    \ characters when matching strings\nThe function should ignore non-printable characters\
    \ when matching strings\nThe function should ignore non-ASCII characters when\
    \ matching strings\nThe function should ignore non-printable characters when matching\
    \ strings\nThe function should ignore non-ASCII characters when matching strings\n\
    The function should ignore non-printable characters when matching strings\nThe\
    \ function should ignore non-ASCII ", "    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\"\
    )\n    [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"bc\")\n    []\n    >>> filter_by_substring([\"abc\",\
    \ \"bacd\", \"cde\", \"array\"], \"d\")\n    []\n    \"\"\"", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring()\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings, substring)]\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter an input list of\
    \ strings only for ones that do not contain given substring\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> ", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(x -> contains(x, substring), strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"ab\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"ba\")\n    [\"abc\", \"bacd\", \"cde\", \"array\"]\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n\
    \    [\"abc\", \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"cd\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"de\")\n    [\"abc\", \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"array\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \"\"\"", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\n>>> filter_by_not_substring([], \"a\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"cde\", \"array\"]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\"]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.contains(substring)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of strings and a substring and returns\
    \ a vector of strings containing only the strings that contain the substring.\
    \ Test your function with some example strings.", "    strings = filter((x) ->\
    \ contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    strings = filter( x -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and a vector of strings as inputs and returns\
    \ a vector containing the number of times the strings in the first vector appear\
    \ in the second vector. For example, given the following input:", "    strings\
    \ = filter(x->contains(x,substring), strings)\n    return strings\nend", "   \
    \ \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    strings = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n\
    <text>\nExercise 3: Write a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = filter( x -> contains(x, substring), strings)\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 9: filter_by_substring\nWrite a function that filters\
    \ an input list of strings only for ones that contain given substring\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    f\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"i\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    k\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"n\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    p\")\n[\"abc\", \"bacd\", \"cde\", \"array", "    \n    strings = filter( x ->\
    \ contains(substring,x), strings)\n    \n    return strings\nend", "    \n   \
    \ strings = strings[findall(strings, substring)]\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], \"a\"\
    )", "    \n    strings = strings[findall(strings, substring .== true)]\n    \n\
    \    return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.contains(substring)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that filters input list for strings\
    \ that do not contain given substring", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filtering\
    \ by substring\nWrite a function that filters an input list of strings only for\
    \ ones that contain given substring\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\"\
    , \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"", "    \n    strings = strings[findall(strings,substring)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings containing only those strings that contain the substring. Test your\
    \ function with some example strings.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n  \
    \  \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as arguments\
    \ and returns a vector of the same length with all strings containing all strings\
    \ in the first vector. For example, if the first vector is [\"a\", \"b\", \"c\"\
    ] and the second vector is [\"a\", \"b\", \"c\", \"d\"], then the function should\
    \ return [\"a\", \"b\", \"c\", \"d\"].", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters an input list of strings only\
    \ for those that contain given substring\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n\
    \    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ba\")\n    [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\")\n    [\"bacd\", \"array\"]\n \
    \   >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bacdc\"\
    )\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"bacdca\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"bacdcaa\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacdcaaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaab\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaaba\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaab\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaaba\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaabaa\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacdcaaaabaaabaaa\")\n    []\n    >>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.contains(substring)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by their length. \nFor example, given a list of strings:", " \
    \   \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ all given substrings\ne.g. filter_by_all_substrings([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\", \"array\"\
    ]", "    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if string.contains(substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if contains(string, substring)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(substring(x),\
    \ x), strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(substring(x), ", "    \n\
    \    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            remove!(strings, string)\n        end\n    end\n   \
    \ \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = strings[findall(strings, x -> contains(x, substring))]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring. \nFor example, given [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"], \"a\", the function should return [\"abc\", \"\
    bacd\"].", "    \n    strings = filter( x -> contains(x, substring), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    strings = filter((", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters input strings\
    \ based on whether they contain given substrings\nHint: Use filter_by_substring",
  "    \n    strings = filter( x -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings, substring)]\n \
    \   return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\ne.g. filter_by_not_containing([\"abc\", \"bacd\", \"cde\",\
    \ \"array\"], \"a\")", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3],\
    \ \"a\")", "    \n    strings = strings[findall(strings,substring)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns a new string where all occurrences\
    \ of \"a\" have been replaced by \"b\".", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend", "    \n    strings = filter(\
    \ x -> contains(substring,x), strings)\n    return strings\nend", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain all given substrings\n\
    e.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\nHint: use filter_by_substring",
  "    \n    strings = strings[findall(strings, substring)]\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings,substring)]\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    e.g. filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")", " \
    \   \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings = strings[:]\n    \n\
    \    substring = lowercase(substring)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings containing only those\
    \ strings that end with a given suffix. For example, given [\"abc\", \"bacd\"\
    , \"cde\", \"array\", \"abd\"], return [\"abc\", \"bacd\", \"array\"].", "   \
    \ strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"v\")\n[]\n\
    >>> ", "    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters input strings\
    \ based on whether they contain any of a list of substrings.", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.contains(substring)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3: Filter a list for strings that do\
    \ not contain given substring\nWrite a function that filters a list for strings\
    \ that do not contain given substring. For example, given a list of strings:",
  "    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n  \
    \  return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the number of times the substring appears in the string.\
    \ For example, if the input string is \"abcabc\", the output should be 3.", " \
    \   \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for those that contain all given substrings\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\")\n[\"abc\", \"bacd\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\", \"b\", \"c\", \"d\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\")\n[\"abc\", \"bacd\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    )\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    c\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    h\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"i\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    m\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"n\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[\"\
    abc\", \"bacd\", \"c", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    This function filters an input list of strings only for ones that contain given\
    \ substring\nThe function filter_by_substring() takes in two arguments:", "  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end", "    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings,substring)]\n    return strings\nend", " \
    \   strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end", "    \n    strings = filter(x->contains(x, substring), strings)\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ all given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\", \"array\"\
    ]", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.contains(substring)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times the\
    \ string appears in the input string. \nFor example, the string \"abcabc\" appears\
    \ 3 times in the input string. \nThe string \"abcabc\" appears 4 times in the\
    \ input string. \nThe string \"abcabc\" appears 0 times in the input string. \n\
    The string \"abcabc\" appears 0 times in the input string. \nThe string \"abcabc\"\
    \ appears 0 times in the input string. \nThe string \"abcabc\" appears 0 times\
    \ in the input string. \nThe string \"abcabc\" appears 0 times in the input string.\
    \ \nThe string \"abcabc\" appears 0 times in the input string. \nThe string \"\
    abcabc\" appears 0 times in the input string. \nThe string \"abcabc\" appears\
    \ 0 times in the input string. \nThe string \"abcabc\" appears 0 times in the\
    \ input string. \nThe string \"abcabc\" appears 0 times in the input string. \n\
    The string \"abcabc\" appears 0 times in the input string. \nThe string \"abcabc\"\
    \ appears 0 times in the input string. \nThe string \"abcabc\" appears 0 times\
    \ in the input string. \nThe string \"abcabc\" appears 0 times in the input string.\
    \ \nThe string \"abcabc\" appears 0 times in the input string. \nThe string \"\
    abcabc\" appears 0 times in the input string. \nThe string \"abcabc\" appears\
    \ 0 times in the input string. \nThe string \"abcabc\" appears 0 times in the\
    \ input string. \nThe string \"abcabc\" appears 0 times in the input string. \n\
    The string \"abcabc\" appears 0 times in the input string. \nThe string \"abcabc\"\
    \ appears 0 times in the input string. \nThe string \"abcabc\" appears 0 times\
    \ in the input string. \nThe string \"abcabc\" appears 0 times in the input string.\
    \ \nThe string \"abcabc\" appears 0 times in the input string. \nThe string \"\
    abcabc\" appears 0 times in the input string. \nThe string \"abcabc\" appears\
    \ 0 times in the input ", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the substring.", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a substring\
    \ that occurs at the beginning of the string. For example, given [\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", the function should return [\"abc\", \"bacd\"\
    , \"array\"].", "    \n    strings = strings[:]\n    \n    strings = filter( x\
    \ -> contains(x, substring), strings)\n    \n    return strings\nend", "    \n\
    \    strings = filter((x) -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter a\
    \ list of strings by a predicate function\nWrite a predicate function filter_by_predicate\
    \ that filters a list of strings based on a predicate function p (that takes an\
    \ element of the list and returns true or false).", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that filters input strings based on whether they contain any of a list of substrings.",
  "    \n    strings = strings[:]\n    \n    strings = filter(x->contains(x, substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns a new string with all the characters\
    \ in lowercase and all the characters in uppercase.", "    \n    strings = strings[:]\n\
    \    \n    strings = filter( x -> contains(x,substring), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    i = 0\n    while i\
    \ < length(strings)\n        if contains(strings[i], substring)\n            i\
    \ += 1\n        else\n            deleteat!(strings, i)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes an input list of strings and a substring and returns a\
    \ list of all strings in the input list that contain the substring.", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter( x -> contains(x, substring), strings)\n\
    \    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters input list for strings that contain a given substring and are longer\
    \ than a given length. \nFor example, filter_by_length_and_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\", 2) should return [\"abc\", \"bacd\", \"\
    array\"].", "    strings = filter((x) -> contains(x, substring), strings)\n  \
    \  return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of substrings and returns\
    \ a vector of strings that only contain substrings.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    strings = strings[findall(x -> contains(x,\
    \ substring), strings)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2: Filtering by substrings\nWrite a function that filters an\
    \ input list of strings only for ones that contain given substrings\ne.g. filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\")\nshould return [\"\
    abc\", \"bacd\", \"array\"]\nHint: use filter_by_substring", "    \n    filtered_strings\
    \ = Set()\n    for string in strings\n        if string.contains(substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return collect(filtered_strings)\nend\n</cell>\n<text>\nExercise 3: Filtering\
    \ by substrings\nWrite a function that filters an input list of strings only for\
    \ ones that contain given substrings\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that do not contain given\
    \ substrings\nWrite a function that filters an input list of strings only for\
    \ ones that contain given substrings\nWrite a function that filters an input list\
    \ of strings only for ones that contain given substrings\nWrite a function that\
    \ filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ given substrings\nWrite a function that filters an input list of strings only\
    \ for ones that contain given substrings\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substrings\nWrite a function\
    \ that filters an input list of strings only for ones that contain given substrings\n\
    Write "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
