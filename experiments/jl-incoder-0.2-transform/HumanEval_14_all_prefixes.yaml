name: HumanEval_14_all_prefixes
language: jl
prompt: "\"\"\" Return list of all prefixes from shortest to longest of the input\
  \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\
  \nfunction all_prefixes(string::String)::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
  \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
  asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\",\
  \ \"WW\", \"WWW\"])\nend\n"
completions: ["    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend", "   \
    \ prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to\
    \ length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 2: Write a function that returns the longest prefix\
    \ of a given string.", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefix_lengths(string::String)", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the string. For example, for the string \"abcde\", the\
    \ longest prefix is \"abc\", since \"abcde\" is a substring of \"abc\".", "  \
    \  prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})",
  "    \n    prefix_list = Vector{String}()\n    \n    for prefix in string.split(\"\
    \")\n        prefix_list += prefix\n    end\n    \n    return prefix_list\nend",
  "    \n    prefix_list = Vector{String}()\n    \n    for prefix in string.split(\"\
    \")\n        prefix_list += prefixes_of(prefix)\n    end\n    \n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefg\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgj\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjh\"\
    )\n</", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n   \
    \ for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a palindrome. For example, if the input string\
    \ is \"racecar\", the longest palindrome prefix is \"race\".", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefixes_of_string(string::String)",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    \n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a palindrome. For example, all_prefixes(\"\
    abba\") should return \"ab\".", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n\
    \    return prefix_list\nend", "    \n    prefix_list = Vector{String}()\n   \
    \ prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list\
    \ + ", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefghi\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefghi",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in range(1, length(string))]\n    prefix_list = prefix_list + [string",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabacaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabacabac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabacabaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacabacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacabacaba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacabacabac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabacabacabaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabacabacabacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    prefixes = []\n    \n    for c in string\n\
    \        prefixes += all_prefixes(c)\n    end\n    \n    return prefixes\nend",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    prefix_count(string::String)::Int64", " \
    \   prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string\n\
    \    >>> longest_prefix(\"abc\")\n    \"abc\"\n    >>> longest_prefix(\"abcabc\"\
    )\n    \"abc\"\n    >>> longest_prefix(\"abcab\")\n    \"abc\"\n    >>> longest_prefix(\"\
    ab\")\n    \"ab\"\n    >>> longest_prefix(\"a\")\n    \"a\"\n    \"\"\"", "  \
    \  prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ [string]\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    \n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the longest prefix\
    \ of a given string. For example, for the string \"abc\", the longest prefix is\
    \ \"abc\". For the string \"abcabc\", the longest prefix is \"abc\".", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the given string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    \n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the string \"abc\", the\
    \ longest prefix is \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2 to length(prefix_list)\n        prefix_list[i] = prefix_list[i-2]\
    \ + prefix_list[i-1]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ [string]\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in length(string)]\n    prefix_list\
    \ = prefix_list ++ [string[i+1::] for i in length(string)]\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, for the input string \"abcabc\", the longest prefix that is a substring\
    \ of the input string is \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + prefixes(string)\n    prefix_list = prefix_list + prefixes(string.reverse)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, if the input is \"abc\", the longest prefix is \"abc\".", "    prefix_list\
    \ = Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ for the input string \"abc\" the longest prefix is \"abc\".", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ [string[1:i] for i in length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in length(string)]\n  \
    \  return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++\
    \ [string]\n    for i = 2:length(string)\n        prefix_list = prefix_list ++\
    \ [string[i-1:i]]\n    end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>", "    prefixes = []\n    for c in string\n        prefixes\
    \ += all_prefixes(c)\n    end\n    prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise: Write a function that returns\
    \ all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \"\"\"", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    prefix_sum(string::String)::String", "    \n\
    \    prefixes = []\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ \n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n", "    prefixes = []\n    for c in\
    \ string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\nend", " \
    \   \n    prefix_list = Vector{String}()\n    prefix_list[1] = string[1]\n   \
    \ prefix_list[2] = string[2]\n    prefix_list[3] = string[3]\n    prefix_list[4]\
    \ = string[4]\n    prefix_list[5] = string[5]\n    prefix_list[6] = string[6]\n\
    \    prefix_list[7] = string[7]\n    prefix_list[8] = string[8]\n    prefix_list[9]\
    \ = string[9]\n    prefix_list[10] = string[10]\n    prefix_list[11] = string[11]\n\
    \    prefix_list[12] = string[12]\n    prefix_list[13] = string[13]\n    prefix_list[14]\
    \ = string[14]\n    prefix_list[15] = string[15]\n    prefix_list[16] = string[16]\n\
    \    prefix_list[17] = string[17]\n    prefix_list[18] = string[18]\n    prefix_list[19]\
    \ = string[19]\n    prefix_list[20] = string[20]\n    prefix_list[21] = string[21]\n\
    \    prefix_list[22] = string[22]\n    prefix_list[23] = string[23]\n    prefix_list[24]\
    \ = string[24]\n    prefix_list[25] = string[25]\n    prefix_list[26] = string[26]\n\
    \    prefix_list[27] = string[27]\n    prefix_list[28] = string[28]\n    prefix_list[29]\
    \ = string[29]\n    prefix_list[30] = string[30]\n    prefix_list[31] = string[31]\n\
    \    prefix_list[32] = string[32]\n    prefix_list[33] = string[33]\n    prefix_list[34]\
    \ = string[34]\n    prefix_list[35] = string[35]\n    prefix_list[36] = string[36]\n\
    \    prefix_list[37] = string[37]\n    prefix_list[38] = string[38]\n    prefix_list[39]\
    \ = string[39]\n    prefix_list[40] = string[40]\n    prefix_list[41] = string[41]\n\
    \    prefix_list[42] = string[42]\n    prefix_list[43] = string[43]\n    prefix_list[44]\
    \ = string[44]\n    prefix_list[45] = string[45]\n    prefix_list[46] = string[46]\n\
    \    prefix_list[47] = string[47]\n    prefix_list[48] = string[48]\n    prefix_list[49]\
    \ = string[49]\n    prefix_list[50] = string[50]\n    prefix_list[51] = string[51]\n\
    \    prefix_list[52] = string[52]\n    prefix_list[53] = string[53]", "    prefix_list\
    \ = Vector{String}()\n    prefix_list.append(\"\")\n    for prefix in prefix_list\n\
    \        prefix_list.extend(prefixes_of_string(string))\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    \n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)::Dict{String,\
    \ Int}\n    \n    Count number of occurrences of each prefix of a given string.\n\
    \    \n    >>> prefix_counts(\"abcabcbb\")\n    Dict(\"ab\" => 3, \"abc\" => 3,\
    \ \"b\" => 2, \"c\" => 2, \"bb\" => 2)\n    \"\"\"", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the longest prefix that is a palindrome.\
    \ For example, all_prefixes(\"abba\") should return \"ab\".", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    for prefix\
    \ in string.split(\"\")\n        prefix_list += all_prefixes(prefix) \n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghij\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijk\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefghijkl\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefghijklm\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell", "    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ \n    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string. \nWrite a function that takes a string and returns the number of words\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of sentences in the string. \nWrite a function that takes a string and returns\
    \ the number of characters in the string divided by the number of words in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string divided by the number of sentences in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string divided\
    \ by the number of words in the string divided by the number of sentences in the\
    \ string. ", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return\
    \ prefix_list\nend", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += prefixes_of(prefix)\n    return prefix_list\nend",
  "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n   \
    \     prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the longest prefix of a given string\n    >>>\
    \ longest_prefix(\"abc\")\n    \"a\"\n    >>> longest_prefix(\"abcab\")\n    \"\
    abc\"\n    \"\"\"", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbabab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaaabbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaaabb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbab", "    prefixes = Vector{String}()\n\
    \    \n    for i = length(string)..1 do\n        prefixes += string[i..i]\n  \
    \  end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>", " \
    \   prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    for i = 3:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c) \n    end\n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end+2])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list ++ all_prefixes(string[end+5:end+6])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list ++ all_prefixes(string[end+9:end+10])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list ++ all_prefixes(string[end+13:end+14])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list ++ all_prefixes(string[end+17:end+18])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list ++ all_prefixes(string[end+21:end+22])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list ++ all_prefixes(string[end+25:end+26])\n\
    \    prefix_", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2 to length(prefix_list)\n        prefix_list[i] = prefix_list[i-2]\
    \ + prefix_list[i-1]\n    end\n    return prefix_list\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, if\
    \ the input string is \"abcde\", the longest prefix that is a substring of the\
    \ input string is \"abc\".", "    prefix_list = Vector{String}()\n    for c in\
    \ string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64",
  "    \n    prefixes = []\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba", "    \n  \
    \  prefix_list = Vector{String}()\n    prefix_list[1] = string[1]\n    for i =\
    \ 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n  \
    \  end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ prefix of a given string.", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in a string and returns the longest prefix that is\
    \ a palindrome. For example, for the string \"racecar\", the longest palindrome\
    \ would be \"racecar\". The function should return nothing if the input string\
    \ is not a palindrome.", "    prefix_list = Vector{String}()\n    for prefix in\
    \ string.split(\"\")\n        prefix_list += all_prefixes(prefix) \n    end\n\
    \    prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list =\
    \ all_prefixes_helper(string, prefix_list)\n    return prefix_list\nend", "  \
    \  \n    prefixes = Vector{String}()\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(c)\n    end\n    \n    return prefixes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    return prefix_list\nend", "    \n    prefix_list = Vector{String}()\n   \
    \ prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>", "    prefix_list\
    \ = Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string[1]\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. For example, all_palindromes(\"abba\") should return \"\
    ab\".", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list =\
    \ prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ prefix of a given string. For example, for the string \"abc\", the longest prefix\
    \ is \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefixes_count(string::String)::Int64",
  "    prefix_list = Vector{String}()\n    prefix_list.append(\"\")\n    for prefix\
    \ in prefix_list\n        prefix_list.append(prefix[1:end-1] + prefix)\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list =\
    \ prefix_list ++ [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ + all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end:])\n    return prefix_list\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 2:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 3:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 4:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 5:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 6:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 7:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 8:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 9:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 10:length(string)]\n \
    \   prefix_list = prefix_list ++ [string[i+1::] for i in 11:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 12:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 13:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 14:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 15:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 16:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 17:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 18:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 19:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 20:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 21:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 22:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 23:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 24:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 25:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 26:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 27:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 28:length(string)]\n\
    \    prefix_list = prefix_list ++ ", "    prefix_list = Vector{String}()\n   \
    \ prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)", "    prefix_list\
    \ = Vector{String}()\n    for s in string\n        prefix_list += all_prefixes(s)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the original string. For example,\
    \ all_prefixes(\"abc\") should return [\"a\", \"ab\", \"abc\"]", "    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].", "    prefix_list\
    \ = Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefixes << string\n    \n    for i = length(string)-1 downto 1 do\n    \
    \    prefixes << string[i : end]\n    end\n    return prefixes\nend", "    \n\
    \    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    prefix_list = Vector{String}()\n    \n    for prefix in string.split(\"\
    \")\n        prefix_list += prefix\n    end\n    \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\n", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"]. Assume that all_prefixes\
    \ is defined above as all_prefixes.", "    \n    prefixes = []\n    for c in string\n\
    \        prefixes += all_prefixes(c) \n    end\n    prefixes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)::Vector{Int}\n\
    \    \n    Get list of all prefix lengths from shortest to longest of the input\
    \ string\n    >>> prefix_lengths(\"abc\")\n    [3, 1, 2, 1]\n    \"\"\"", "  \
    \  prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2\
    \ to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n \
    \   end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n \
    \   prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.4>", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += prefixes_of_string(prefix)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_", "    prefix_list = Vector{String}()\n    for prefix\
    \ in string.split(\"\")\n        prefix_list += all_prefixes(prefix) \n    end\n\
    \    prefix_list\nend", "    prefix_list = Vector{String}()\n    for c in string\n\
    \        prefix_list += all_prefixes(c)\n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a string where all characters are capitalized.", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefix", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n   \
    \ \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbd\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbdab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbdaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbdabac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbdabacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbdabacabac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbdabacabaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbdabacabacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbdabacabacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacabacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacabacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacabacacabac\")\n</cell>\n<code language=julia-1.5>", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3: Write a recursive function all_prefixes_iter\
    \ that returns all prefixes from shortest to longest of the input string\n   \
    \ >>> all_prefixes_iter(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"", " \
    \   prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcdef\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes", "    prefix_list = Vector{String}()\n    prefix_list[1] =\
    \ string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    prefix_list[4]\
    \ = string\n    prefix_list[5] = string\n    prefix_list[6] = string\n    prefix_list[7]\
    \ = string\n    prefix_list[8] = string\n    prefix_list[9] = string\n    prefix_list[10]\
    \ = string\n    prefix_list[11] = string\n    prefix_list[12] = string\n    prefix_list[13]\
    \ = string\n    prefix_list[14] = string\n    prefix_list[15] = string\n    prefix_list[16]\
    \ = string\n    prefix_list[17] = string\n    prefix_list[18] = string\n    prefix_list[19]\
    \ = string\n    prefix_list[20] = string\n    prefix_list[21] = string\n    prefix_list[22]\
    \ = string\n    prefix_list[23] = string\n    prefix_list[24] = string\n    prefix_list[25]\
    \ = string\n    prefix_list[26] = string\n    prefix_list[27] = string\n    prefix_list[28]\
    \ = string\n    prefix_list[29] = string\n    prefix_list[30] = string\n    prefix_list[31]\
    \ = string\n    prefix_list[32] = string\n    prefix_list[33] = string\n    prefix_list[34]\
    \ = string\n    prefix_list[35] = string\n    prefix_list[36] = string\n    prefix_list[37]\
    \ = string\n    prefix_list[38] = string\n    prefix_list[39] = string\n    prefix_list[40]\
    \ = string\n    prefix_list[41] = string\n    prefix_list[42] = string\n    prefix_list[43]\
    \ = string\n    prefix_list[44] = string\n    prefix_list[45] = string\n    prefix_list[46]\
    \ = string\n    prefix_list[47] = string\n    prefix_list[48] = string\n    prefix_list[49]\
    \ = string\n    prefix_list[50] = string\n    prefix_list[51] = string\n    prefix_list[52]\
    \ = string\n    prefix_list[53] = string\n    prefix_list[54] = string\n    prefix_list[55]\
    \ = string\n    prefix_list[56] = string\n    prefix_list[57] = string\n    prefix_list[58]\
    \ = string\n    prefix_list[59] = string\n    prefix_list[60] = string\n    prefix_list[61]\
    \ = string\n    prefix_list[62] = string\n    prefix_list[63] = string\n    prefix_list[64]\
    \ = string\n    prefix_list[65] = string\n    prefix_list[66] = string\n    prefix_list[67]\
    \ = string\n    prefix_list[68] = string\n    prefix_list[69] = string\n    prefix_list[70]\
    \ = string\n    prefix_list[71] = string\n    prefix_list[72] = string\n    prefix_",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string\nHint: use the function length", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"a\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefix", "    \n    prefixes = []\n    \n    for c in string\n\
    \        prefixes += all_prefixes(string[1:end-1]) + [c]\n    end\n    \n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the longest\
    \ prefix that is a substring of the input string. For example, all_prefixes(\"\
    abcabc\") should return [\"abc\"].", "    prefix_list = Vector{String}()\n   \
    \ prefix_list = prefix_list + all_prefixes_helper(string)\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    for c in string\n        prefix_list +=\
    \ all_prefixes(c) \n    end\n    prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are uppercase letters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are lowercase\
    \ letters.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits or are letters.", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \"\"\"", "   \
    \ prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. For example, all_prefixes(\"abba\") returns \"ab\".",
  "    prefix_list = Vector{String}()\n    for s in string\n        prefix_list +=\
    \ all_prefixes(s)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a string and returns the longest prefix that is a substring of the input\
    \ string. For example, if the input string is \"abc\", the longest prefix that\
    \ is a substring of the input string is \"abc\".", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) + [c]\n    end\n\
    \    \n    return prefixes\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list + all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list + all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list + all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list + all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list + all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list + all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+25:end+26])\n", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the longest prefix of a given string.", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string[1:i] for i in 1:length(string)]\n  \
    \  prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n  \
    \  return prefix_list\nend", "    \n    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    \n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend", "    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for character in string\n        if character == prefixes[prefix_length]\n\
    \            prefix_length += 1\n        else\n            prefix_length = 0\n\
    \            prefixes << character\n        end\n    end\n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    prefixes = []\n    \n   \
    \ for c in string\n        prefixes += all_prefixes(c) \n    end\n    \n    return\
    \ prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    prefix_list[4]\
    \ = string\n    prefix_list[5] = string\n    prefix_list[6] = string\n    prefix_list[7]\
    \ = string\n    prefix_list[8] = string\n    prefix_list[9] = string\n    prefix_list[10]\
    \ = string\n    prefix_list[11] = string\n    prefix_list[12] = string\n    prefix_list[13]\
    \ = string\n    prefix_list[14] = string\n    prefix_list[15] = string\n    prefix_list[16]\
    \ = string\n    prefix_list[17] = string\n    prefix_list[18] = string\n    prefix_list[19]\
    \ = string\n    prefix_list[20] = string\n    prefix_list[21] = string\n    prefix_list[22]\
    \ = string\n    prefix_list[23] = string\n    prefix_list[24] = string\n    prefix_list[25]\
    \ = string\n    prefix_list[26] = string\n    prefix_list[27] = string\n    prefix_list[28]\
    \ = string\n    prefix_list[29] = string\n    prefix_list[30] = string\n    prefix_list[31]\
    \ = string\n    prefix_list[32] = string\n    prefix_list[33] = string\n    prefix_list[34]\
    \ = string\n    prefix_list[35] = string\n    prefix_list[36] = string\n    prefix_list[37]\
    \ = string\n    prefix_list[38] = string\n    prefix_list[39] = string\n    prefix_list[40]\
    \ = string\n    prefix_list[41] = string\n    prefix_list[42] = string\n    prefix_list[43]\
    \ = string\n    prefix_list[44] = string\n    prefix_list[45] = string\n    prefix_list[46]\
    \ = string\n    prefix_list[47] = string\n    prefix_list[48] = string\n    prefix_list[49]\
    \ = string\n    prefix_list[50] = string\n    prefix_list[51] = string\n    prefix_list[52]\
    \ = string\n    prefix_list[53] = string\n    prefix_list[54] = string\n    prefix_list[55]\
    \ = string\n    prefix_list[56] = string\n    prefix_list[57] = string\n    prefix_list[58]\
    \ = string\n    prefix_list[59] = string\n    prefix_list[60] = string\n    prefix_list[61]\
    \ = string\n    prefix_list[62] = string\n    prefix_list[63] = string\n    prefix_list[64]\
    \ = string\n    prefix_list[65] = string\n    prefix_list[66] = string\n    prefix_list[67]\
    \ = string\n    prefix_list[68] = string\n    prefix_list[69] = string\n    prefix_list[70]\
    \ = string\n    prefix_list[71] = string\n    prefix_list[72] = string\n    prefix_",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.0>", "    prefix_list = Vector{String}()\n\
    \    prefix_list.append(\"\")\n    for prefix in prefix_list\n        prefix_list.append(prefix[1:end-1]\
    \ + prefix)\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefix_length(prefix::String)::Int",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2\
    \ to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns a list of all suffixes from shortest to longest of the input string\n\
    \    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \"\"\"", "   \
    \ \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string[1:end-1]\n    prefix_list[3] = string[2:end]\n    prefix_list[4] =\
    \ string[3:end]\n    prefix_list[5] = string[4:end]\n    prefix_list[6] = string[5:end]\n\
    \    prefix_list[7] = string[6:end]\n    prefix_list[8] = string[7:end]\n    prefix_list[9]\
    \ = string[8:end]\n    prefix_list[10] = string[9:end]\n    prefix_list[11] =\
    \ string[10:end]\n    prefix_list[12] = string[11:end]\n    prefix_list[13] =\
    \ string[12:end]\n    prefix_list[14] = string[13:end]\n    prefix_list[15] =\
    \ string[14:end]\n    prefix_list[16] = string[15:end]\n    prefix_list[17] =\
    \ string[16:end]\n    prefix_list[18] = string[17:end]\n    prefix_list[19] =\
    \ string[18:end]\n    prefix_list[20] = string[19:end]\n    prefix_list[21] =\
    \ string[20:end]\n    prefix_list[22] = string[21:end]\n    prefix_list[23] =\
    \ string[22:end]\n    prefix_list[24] = string[23:end]\n    prefix_list[25] =\
    \ string[24:end]\n    prefix_list[26] = string[25:end]\n    prefix_list[27] =\
    \ string[26:end]\n    prefix_list[28] = string[27:end]\n    prefix_list[29] =\
    \ string[28:end]\n    prefix_list[30] = string[29:end]\n    prefix_list[31] =\
    \ string[30:end]\n    prefix_list[32] = string[31:end]\n    prefix_list[33] =\
    \ string[32:end]\n    prefix_list[34] = string[33:end]\n    prefix_list[35] =\
    \ string[34:end]\n    prefix_list[36] = string[35:end]\n    prefix_list[37] =\
    \ string[36:end]\n    prefix_list[38] = string[37:end]\n    prefix_list[39] =\
    \ string[38:end]\n    prefix_list[40] = string[39:end]\n    prefix_list[41] =\
    \ string[40:end]\n    prefix_list[42] = string[41:end]\n    prefix_list[43] =\
    \ string[42:end]\n    prefix_list[44] = string[43:end]\n    prefix_list[45] =\
    \ string[44:end]\n    prefix_list[46] = string[45:end]\n    prefix_list[47] =\
    \ string[46:end]\n    prefix_list[48] = string[47:end]\n    prefix_list[49] =\
    \ string[48:end]", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>", " \
    \   prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2\
    \ to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of times each character appears in the string. \nFor example\
    \ \"abcabc\" should return [('a', 3), ('b', 3), ('c', 3)]", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_", "    \n    prefixes =\
    \ Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c) + [c]\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ for the input string \"abcabc\", the longest prefix is \"abc\".", "    prefixes\
    \ = Vector{String}()\n    for s in string\n        prefixes += all_prefixes(s)\n\
    \    end\n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ if the input string is \"abcde\", the longest prefix is \"abc\".", "    \n \
    \   prefix_list = Vector{String}()\n    \n    for prefix in string.split(\"\"\
    )\n        prefix_list += all_prefixes(prefix) \n    end\n    \n    return prefix_list\n\
    end", "    \n    prefixes = Vector{String}()\n    \n    for c in string\n    \
    \    prefixes += all_prefixes(c) + [c]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return [\"abc\"].", "    prefix_list = Vector{String}()\n    for c in string\n\
    \        prefix_list = prefix_list + all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string[1]\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return [\"abc\"].", "    prefix_list = Vector{String}()\n    for s in\
    \ string\n        prefix_list += all_prefixes(s)\n    end\n    prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    prefix_list = prefix_list + all_prefixes(string[2:end])\
    \ + [string[2:end]]\n    prefix_list = prefix_list + all_prefixes(string[3:end])\
    \ + [string[3:end]]\n    prefix_list = prefix_list + all_prefixes(string[4:end])\
    \ + [string[4:end]]\n    prefix_list = prefix_list + all_prefixes(string[5:end])\
    \ + [string[5:end]]\n    prefix_list = prefix_list + all_prefixes(string[6:end])\
    \ + [string[6:end]]\n    prefix_list = prefix_list + all_prefixes(string[7:end])\
    \ + [string[7:end]]\n    prefix_list = prefix_list + all_prefixes(string[8:end])\
    \ + [string[8:end]]\n    prefix_list = prefix_list + all_prefixes(string[9:end])\
    \ + [string[9:end]]\n    prefix_list = prefix_list + all_prefixes(string[10:end])\
    \ + [string[10:end]]\n    prefix_list = prefix_list + all_prefixes(string[11:end])\
    \ + [string[11:end]]\n    prefix_list = prefix_list + all_prefixes(string[12:end])\
    \ + [string[12:end]]\n    prefix_list = prefix_list + all_prefixes(string[13:end])\
    \ + [string[13:end]]\n    prefix_list = prefix_list + all_prefixes(string[14:end])\
    \ + [string[14:end]]\n    prefix_list = prefix_list + all_prefixes(string[15:end])\
    \ + [string[15:end]]\n    prefix_list = prefix_list + all_prefixes(string[16:end])\
    \ + [string[16:end]]\n    prefix_list = prefix_list + all_prefixes(string[17:end])\
    \ + [string[17:end]]\n    prefix_list = prefix_list + all_prefixes(string[18:end])\
    \ + [string[18:end]]\n    prefix_list = prefix_list + all_prefixes(string[19:end])\
    \ + [string[19:end]]\n    prefix_list = prefix_list + all_prefixes(string[20:end])\
    \ + [string[20:end]]\n    prefix_list = prefix_list + all_prefixes(string[21:end])\
    \ + [string[21:end]]\n    prefix_list = prefix_list + all_prefixes(string[22:end])\
    \ + [string[22:end]]\n    prefix_list = prefix_list + all_prefixes(string[23:end])\
    \ + [string[23:end]]\n    prefix_list = prefix_list + all_prefixes(string[24:end])\
    \ + [string[24:", "    \n    prefix_list = Vector{String}()\n    prefix_list =\
    \ prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end+2])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+2:end+3])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+3:end+4])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list + all_prefixes(string[end+5:end+6])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+6:end+7])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+7:end+8])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list + all_prefixes(string[end+9:end+10])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+10:end+11])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+11:end+12])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list + all_prefixes(string[end+13:end+14])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+14:end+15])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+15:end+16])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list + all_prefixes(string[end+17:end+18])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+18:end+19])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+19:end+20])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list + all_prefixes(string[end+21:end+22])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+22:end+23])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+23:end+24])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list + all_prefixes(string[end+25:end+26])\n",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the string \"abc\" the\
    \ longest prefix is \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list ++ all_prefixes(string[end:])\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".", "    \n    prefixes = Vector{String}()\n\
    \    \n    for s in string\n        prefixes << s\n    end\n    \n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return \"abc\".", "    prefix_list = Vector{String}()\n    for s in string\n\
    \        prefix_list += all_prefixes(s)\n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabc\");\n\
    </cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabc\");\n\
    </cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefixes_from_longest(string::String)::Vector{String}\n\
    \    \n    Find all prefixes from longest to shortest of the input string\n  \
    \  >>> prefixes_from_longest(\"abc\")\n    [\"abc\"]\n    \"\"\"", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string\nHint: Use length()",
  "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    prefix_list[3] = string\n    \n    for i = 4 to length(string)\n\
    \        prefix_list[i] = string[i-4:i]\n    end\n    \n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+25:end+26])\n    prefix_", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    prefix_list = prefix_list + all_prefixes(string[2:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[3:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[4:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[5:end])\n    prefix_list = prefix_list + all_prefixes(string[6:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[7:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[8:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[9:end])\n    prefix_list = prefix_list + all_prefixes(string[10:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[11:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[12:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[13:end])\n    prefix_list = prefix_list + all_prefixes(string[14:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[15:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[16:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[17:end])\n    prefix_list = prefix_list + all_prefixes(string[18:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[19:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[20:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[21:end])\n    prefix_list = prefix_list + all_prefixes(string[22:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[23:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[24:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[25:end])\n    prefix_list = prefix_list + all_prefixes(string[26:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[27:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[28:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[29:end])\n    prefix_list = prefix_list + all_prefixes(string[31:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[32:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[33:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(", "    prefix_list = Vector{String}()\n    prefix_list[1] =\
    \ string\n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefixes_of_strings(string::String)::Vector{String}\n    \n    Find\
    \ all prefixes of string\n    \n    >>> prefixes_of_strings(\"abc\")\n    [\"\
    a\", \"ab\", \"abc\"]\n    \"\"\"", "    prefix_list = Vector{String}()\n    for\
    \ prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix) \n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.0>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ if the input string is \"abc\", the longest prefix is \"abc\". If the input\
    \ string is \"abcabc\", the longest prefix is \"abc\".", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    for i = length(prefix_list)\
    \ downto 2 do\n        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\nend", "    \n\
    \    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\");\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in that string that are uppercase letters.", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefixes = Vector{String}()\n \
    \   prefixes << string\n    prefixes << string[1:end]\n    prefixes << string[2:end]\n\
    \    prefixes << string[3:end]\n    prefixes << string[4:end]\n    prefixes <<\
    \ string[5:end]\n    prefixes << string[6:end]\n    prefixes << string[7:end]\n\
    \    prefixes << string[8:end]\n    prefixes << string[9:end]\n    prefixes <<\
    \ string[10:end]\n    prefixes << string[11:end]\n    prefixes << string[12:end]\n\
    \    prefixes << string[13:end]\n    prefixes << string[14:end]\n    prefixes\
    \ << string[15:end]\n    prefixes << string[16:end]\n    prefixes << string[17:end]\n\
    \    prefixes << string[18:end]\n    prefixes << string[19:end]\n    prefixes\
    \ << string[20:end]\n    prefixes << string[21:end]\n    prefixes << string[22:end]\n\
    \    prefixes << string[23:end]\n    prefixes << string[24:end]\n    prefixes\
    \ << string[25:end]\n    prefixes << string[26:end]\n    prefixes << string[27:end]\n\
    \    prefixes << string[28:end]\n    prefixes << string[29:end]\n    prefixes\
    \ << string[30:end]\n    prefixes << string[31:end]\n    prefixes << string[32:end]\n\
    \    prefixes << string[33:end]\n    prefixes << string[34:end]\n    prefixes\
    \ << string[35:end]\n    prefixes << string[36:end]\n    prefixes << string[37:end]\n\
    \    prefixes << string[38:end]\n    prefixes << string[39:end]\n    prefixes\
    \ << string[40:end]\n    prefixes << string[41:end]\n    prefixes << string[42:end]\n\
    \    prefixes << string[43:end]\n    prefixes << string[44:end]\n    prefixes\
    \ << string[45:end]\n    prefixes << string[46:end]\n    prefixes << string[47:end]\n\
    \    prefixes << string[48:end]\n    prefixes << string[49:end]\n    prefixes\
    \ << string[50:end]\n    prefixes << string[51:end]\n    prefixes << string[52:end]\n\
    \    prefixes << string[53:end]\n    ", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2: all_suffixes\nWrite a function that returns\
    \ all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
