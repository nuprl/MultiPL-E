name: HumanEval_162_string_to_md5
language: jl
prompt: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
  \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
  \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
  \ Nothing} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
  Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
  ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
  )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
completions: ["    if text == \"\" \n        then return None \n    else \n      \
    \  md5_hash = digests.MD5()\n        md5_hash.update(text)\n        return md5_hash.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5_hash(string)",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string if it starts with 'http',\
    \ otherwise returns None.", "    if text == \"\" \n        return None \n    else\
    \ \n        digest = Digest.new(\"md5\") \n        digest.update(text) \n    \
    \    return digest.hexdigest \nend\n</cell>\n<code language=julia-1.4>", "   \
    \ if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    md5(text::String)", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ text == \"\" \n        then return None \n    else \n        md5_hash = digest.MD5()\n\
    \        md5_hash.update(text)\n        return md5_hash.digest()\nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello\
    \ world\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the md5 hash equivalent of the string in hexadecimal format.\
    \ If 'text' is an empty string, return None.", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ string of the string.", "    if text == \"\"\n        Nothing\n    else\n  \
    \      md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        return Nothing\n    else \n        return md5(text)\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</code>\n<|/ a |>\n<| c |>\nI believe this should be the accepted\
    \ answer. Using `md5` directly is unsafe and should be avoided.\n<|/ c |>\n<|\
    \ a |>\nI believe this should work:\n<code>", "    if text == \"\" \n        then\
    \ return None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return Nothing\n    else \n        md5 = digest.MD5()\n        md5.update(text)\n\
    \        return md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  return Nothing \n    else \n        digest = Digest.new(\"md5\") \n       \
    \ digest.update(text) \n        return digest.hexdigest \nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\" \n        None \n    else \n        md5(text) \nend\n</cell>\n\
    <code language=julia-1.3>", "    if text == \"\" \n        then return None \n\
    \        else return md5(text) \n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nI believe this should be `md5(text)` instead of `md5(string(text))`\n\
    <|/ c |>\n<| a dscore=2 |>\nFor those who prefer to use packages, you can use\
    \ the following package:\n<code>\nusing MD5", "    if text == \"\" \n        then\
    \ return None \n        else return md5(text) \n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your answer, but this does not answer the question.\
    \ Your answer does not explain how to convert a string to md5 hash. Your answer\
    \ does not explain how to convert a md5 hash to a string. Your answer does not\
    \ explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a md5 hash to a string. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to ", "    if text == \"\" \n       \
    \ then return None \n        else return md5(text) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if text == \"\"\n        Nothing\n    else\n    \
    \    md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if text\
    \ == \"\" \n        return None \n    else \n        digest = digest(text) \n\
    \        return digest.hex \nend ", "    if text == \"\"\n        Nothing\n  \
    \  else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        then return None \n        else\
    \ return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\" \n        return Nothing\n\
    \    else \n        digest = md5(text) \n        return digest.hexdigest() \n\
    end", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n   \
    \ end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI believe this should be `md5(text)`,\
    \ not `md5(text::String)`.\n<|/ c |>\n<| c |>\nThanks, I fixed the typo.\n<|/\
    \ c |>\n<| a |>\nThe accepted answer doesn't work for me in Julia 1.5.1. I got\
    \ this error:\n<code>\nERROR: LoadError: MethodError: no method matching md5(::String)\n\
    Closest candidates are:\n  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::AbstractString) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::AbstractString) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::AbstractString) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9",
  "    if text == \"\" \n        return None \n    else \n        digest = Digest(MD5())\
    \ \n        digest.update(text) \n        return digest.hexdigest() \nend ", " \
    \   if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\")\n        md5.update(text.encode())\n        return md5.digest()\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n \
    \   If 'text' is an empty string, return None.", "    if text == \"\"\n      \
    \  Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5(text) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.1>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        Digest(text, \"md5\")\n\
    \    end\nend\n</code>\n<|/ a tags=julia,md5 |>\n<| c |>\nThe `Digest` function\
    \ has been deprecated in favor of `Digest.md5`\n<|/ c |>\n<| a tags=julia,md5\
    \ |>\nThe accepted answer does not work for me in Julia 1.5.1. I got an error\
    \ when trying to use Digest.md5(\"Hello world\"). \nThe solution I found was to\
    \ use Digest.update(\"Hello world\") instead. \n<code>\njulia> using Digest",
  "    if text == \"\" \n        return Nothing \n    else \n        md5 = Digest::MD5.hexdigest(text)\
    \ \n        return md5\nend\n</cell>\n<code language=julia-1.5>", "    if text\
    \ == \"\" \n        then return None \n        else return md5(text) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the md5 hash of that string as a\
    \ hexadecimal string.", "    if text == \"\" \n        return Nothing\n    else\
    \ \n        return md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5(text) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        return None \n    else \n    \
    \    digest = Digest.new(\"md5\") \n        digest.update(text) \n        return\
    \ digest.hexdigest \nend ", "    if text == \"\" \n        then return None \n\
    \        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if text == \"\" \n        then return\
    \ None \n        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a string to a md5 hash equivalent string and returns the md5 hash\
    \ equivalent string if text is an empty string.", "    if text == \"\" \n    \
    \    then return None \n    else \n        md5 = Digest.new(\"md5\")\n       \
    \ md5.update(text)\n        return md5.digest().hex\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n    \
    \    Digest(text)\n    end\nend", "    if text == \"\" \n        then return None\
    \ \n        else return md5(text) \n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,md5 |>\nThe answer by is correct, but I wanted to add that you\
    \ can also use MD5 in Julia directly (without using any packages). \n<code>\n\
    julia> MD5(\"Hello world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nMD5 is now deprecated in Julia 1.1. Use Digest instead.\n\
    <|/ c |>\n<| a tags=julia,md5 |>\nThe answer by is correct, but I wanted to add\
    \ that you can also use MD5 in Julia directly (without using any packages). \n\
    <code>\njulia> MD5(\"Hello world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nusing MD5", "    if text == \"\"\n       \
    \ Nothing\n    else\n        Digest(text).hexdigest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === ", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n \
    \   If 'text' is an empty string, return None.", "    if text == \"\" \n     \
    \   then return None \n    else \n        md5 = Digest.new(\"md5\")\n        md5.update(text)\n\
    \        return md5.digest() \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\") \n        md5.update(text) \n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return its sha1\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.", " \
    \   if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    \")\n</cell>\n<text>\nExercise 3\nWrite a function that converts a string to a\
    \ md5 hash equivalent string and returns the md5 hash equivalent string if the\
    \ input string is an empty string.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\" \n        return Nothing \n    else \n        return md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n \
    \   else\n        Digest(text).hexdigest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\" \n  \
    \      return Nothing\n    else \n        digest = Digest.new(\"md5\")\n     \
    \   digest.update(text)\n        return digest.hexdigest() \nend", "    if text\
    \ == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.4>\nstring_to_md5(\"\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string in hexadecimal format. For example, string_to_hexdigest(\"Hello world\"\
    ) should return \"3e25960a79dbc69b674cd4ec67a72c62\".", "    if text == \"\"\n\
    \        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  return None \n    else \n        digest = md5(text) \n        return digest.hexdigest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the md5 hash equivalent of its\
    \ lowercase version. \nWrite a function that takes a string and returns the md5\
    \ hash equivalent of its uppercase version. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of its titlecase version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its capitalized version.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ its lowercase and uppercase version. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of its titlecase and capitalized version.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its lowercase, titlecase\
    \ and capitalized version. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its lowercase, uppercase,\
    \ titlecase and capitalized version. \nWrite a function that takes a string and\
    \ returns the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its lowercase, uppercase,\
    \ titlecase and capitalized version. \nWrite a function that takes a string and\
    \ returns the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its lowercase, uppercase,\
    \ titlecase and capitalized version. \nWrite a function that takes a string and\
    \ returns the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string ", "    if text == \"\"\n        Nothing\n    else\n   \
    \     md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        Digest.MD5(string_to_bytes(text))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n    \
    \    md5(text)\n    end\nend", "    if text == \"\" \n        then return None\
    \ \n    else \n        md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n \
    \   else\n        Digest.MD5(string_to_bytes(text))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if text == \"\"\n        Nothing\n    else\n    \
    \    md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n   \
    \ Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5(text) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        Digest(text).hexdigest\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,md5 |>\nThe accepted answer doesn't work for\
    \ me in Julia 1.5.1\n<code>\njulia> Digest(\"Hello world\").hexdigest\nERROR:\
    \ MethodError: no method matching Digest(::String)\nClosest candidates are:\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/", " \
    \   if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,md5 |>\nIn Julia\
    \ 1.5 you can use the MD5 package to compute MD5 hashes.\n<code>\nusing MD5",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nI like your answer but I think it would be\
    \ better to return `nothing` instead of `nothing` as `nothing` is an `enum` type.\
    \ `nothing` can be used in `if` statements.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ `nothing` can be used in `if` statements. But `nothing` cannot be used in `if`\
    \ statements because `nothing` is an `enum` type. `nothing` can only be used in\
    \ `if` statements because `nothing` is an `enum` type. `nothing` can only be used\
    \ in `if` statements because `nothing` is an `enum` type. `nothing` can only be\
    \ used in `if` statements because `nothing` is an `enum` type. `nothing` can only\
    \ be used in `if` statements because `nothing` is an `enum` type. `nothing` can\
    \ only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because ", "    if text == \"\" \n     \
    \   return Nothing\n    else \n        return md5(text)\nend\n</cell>\n<code language=julia-1.3>",
  "    if text == \"\" \n        then return None \n    else \n        md5 = digest.MD5()\n\
    \        md5.update(text)\n        return md5.digest()\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\" \n        then return None \n    else \n        md5 = digest.MD5()\n\
    \        md5.update(text)\n        return md5.digest()\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    if text == \"\" \n        Nothing \n    else\
    \ \n        Digest(text) \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string in hexadecimal.",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I\
    \ did some research and found that `md5` was deprecated in Julia v0.6, so I used\
    \ `hash` instead. Your code works perfectly fine. Thanks again!\n<|/ c |>\n<|\
    \ a tags=julia,md5 |>\nI used the code below to generate MD5 hash in Julia v0.6.\n\
    <code>\nusing MD5", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        then return None \n        else\
    \ return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n \
    \   If 'text' is an empty string, return None.", "    if text == \"\" \n     \
    \   return None \n    else \n        md5 = Digest.new(\"md5\") \n        md5.update(text)\
    \ \n        return md5.digest() \nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"\n    Given a string 'text', return its md5 hash equivalent string.\n    If\
    \ 'text' is an empty string, return None.", "    if text == \"\" \n        then\
    \ return None \n    else \n        md5_hash = digests.MD5()\n        md5_hash.update(text)\n\
    \        return md5_hash.digest()\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        return Nothing\n    else \n        md5 = Digests.md5(text)\n\
    \        return md5\nend\n</cell>\n<code language=julia-1.5>", "    if text ==\
    \ \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite ", "    if text == \"\" \n        then return None \n\
    \    else \n        md5 = digest.MD5()\n        md5.update(text)\n        return\
    \ md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if text\
    \ == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\")\n        md5.update(text)\n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.4>", "    if text == \"\" \n        return None \n    else\
    \ \n        digest = Digest.new(\"md5\") \n        digest.update(text) \n    \
    \    return digest.hexdigest \nend ", "    if text == \"\" \n        return Nothing\n\
    \    else \n        digest = md5(text) \n        return digest.hexdigest() \n\
    end\n</cell>\n<code language=julia-1.1>", "    if text == \"\" \n        return\
    \ Nothing \n    else \n        md5 = digests.md5(text) \n        return md5.hex\
    \ \nend \n</cell>\n<code language=julia-1.4>", "    if text == \"\" \n       \
    \ Nothing \n    else \n        md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        Digest(text).hexdigest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return its md5 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.", "    if\
    \ text == \"\" \n        then return None \n    else \n        md5(text) \n  \
    \  end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\" \n        return None \n    else \n        md5 = Digest.new(\"\
    md5\") \n        md5.update(text) \n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.3>", "    if text == \"\"\n        Nothing\n    else\n\
    \        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    md5(text::String)", "    if text == \"\"\n        Nothing\n    else\n   \
    \     Digest.MD5.hexdigest(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  then return None \n        else return md5(text) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if text == \"\"\n        Nothing\n    else\n\
    \        Digest(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.", "    if text == \"\"\n        Nothing\n \
    \   else\n        Digest(text).hexdigest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the md5 hash of that string. \nFor example string_to_md5(\"\
    Hello world\") should return \"3e25960a79dbc69b674cd4ec67a72c62\".", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend", "    if\
    \ text == \"\" \n        then return None \n        else return md5(text) \n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the md5 hash equivalent of the string. \nIf the input is an empty\
    \ string, return None.", "    if text == \"\"\n        Nothing\n    else\n   \
    \     md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if text\
    \ == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    if text == \"\" \n        then return None \n\
    \        else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n \
    \   If 'text' is an empty string, return None.", "    if text == \"\"\n      \
    \  Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string", "    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string and returns the md5 hash equivalent of the string. \nWrite a\
    \ function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \n", "    if text == \"\" \n        then return None \n    else\
    \ \n        md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return\
    \ md5.digest().hex\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    md5(text::String)", "    if text == \"\"\
    \ \n        return Nothing \n    else \n        digest = digest.MD5()\n      \
    \  digest.update(text)\n        return digest.hexdigest()\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    string_to_md5(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a\
    \ string and returns the md5 hash equivalent of the string in hexadecimal.", " \
    \   if text == \"\"\n        Nothing\n    else\n        Digest.MD5.hexdigest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        Nothing \n    else \n        md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    \")\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the md5 hash equivalent of its lowercase version. Test it on several examples:",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend",
  "    if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\")\n        md5.update(text)\n        return md5.digest().hex\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5 = digest.MD5()\n        md5.update(text)\n   \
    \     return md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise: Write a function that\
    \ converts a string to a md5 hash. Test it on several examples. What is the output?",
  "    if text == \"\" \n        return Nothing\n    else \n        hash = md5(text)\n\
    \        return hash.hexdigest()\nend", "    if text == \"\" \n        then return\
    \ None \n    else \n        md5 = Digest.new(\"md5\")\n        md5.update(text)\n\
    \        return md5.digest() \nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if text == \"\"\n        Nothing\n    else\n        Digest(text)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        return Nothing\n    else \n        return md5(text)\n\
    \    end\nend", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend", "    if text == \"\"\
    \ \n        then return None \n        else return md5(text) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    \")\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input\
    \ and returns the md5 hash of the string converted to lowercase. \nWrite a function\
    \ that takes a string as input and returns the md5 hash of the string converted\
    \ to uppercase.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend", "    if text == \"\" \n        then return None \n    else \n\
    \        md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer 'n' and returns the first n prime\
    \ numbers.", "    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend", "    if text == \"\" \n \
    \       Nothing\n    else \n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\" \n  \
    \      None \n    else \n        md5(text) \nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a binary 'data' string,\
    \ return its md5 hash equivalent string.\n    If 'data' is an empty string, return\
    \ None.", "    if text == \"\" \n        then return None \n    else \n      \
    \  md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend", "    if text == \"\" \n        None \n    else \n        md5(text) \n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>", "    if text == \"\"\n\
    \        Nothing\n    else\n        Digest(text) |> Digest.new\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\" \n        Nothing\n    else \n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>", "    if text == \"\"\n   \
    \     Nothing\n    else\n        md5(text)\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nI used the answer from to create a function that will\
    \ return the md5 hash of a given string. \n<code>", "    if text == \"\" \n  \
    \      Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.", "    if text == \"\"\n        Nothing\n    else\n        Digest(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n\
    \        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </code>\n<|/ a tags=julia,md5 |>\n<| a tags=julia,md5 |>\nThe accepted answer\
    \ does not work for me on Julia 1.5.1. I used the following to get the same result\
    \ as the accepted answer:\n<code>\nusing MD5", "    if text == \"\"\n        Nothing\n\
    \    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string and returns the md5 hash equivalent of its lowercase version.\
    \ Test it by printing the result of the function on a few strings.", "    if text\
    \ == \"\"\n        Nothing\n    else\n        Digest(text, \"md5\")\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text', return\
    \ its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        return Nothing \n    else \n        digest = Digest.new(\"\
    md5\") \n        digest.update(text) \n        return digest.hexdigest \nend \n\
    </cell>\n<code language=julia-1.4>", "    if text == \"\" \n        Nothing \n\
    \    else \n        Digest(text) \nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If\
    \ 'text' is an empty string, return None.", "    if text == \"\" \n        then\
    \ return Nothing\n    else \n        md5 = digest.MD5()\n        md5.update(text)\n\
    \        return md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n    else \n        md5(text) \n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if text == \"\" \n  \
    \      then return None \n    else \n        md5 = digest.MD5()\n        md5.update(text)\n\
    \        return md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return Nothing\n    else\n        hash::String\
    \ = md5(text)\n        return hash\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n \
    \   If 'text' is an empty string, return None.", "    if text == \"\" \n     \
    \   return Nothing\n    else \n        return md5(text)\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\"\n       \
    \ Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\"\n        Nothing\n    else\n        md5(text)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.",
  "    if text == \"\" \n        then return None \n    else \n        md5 = Digest.new(\"\
    md5\") \n        md5.update(text) \n        return md5.digest() \nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a string 'text', return its sha1\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.", " \
    \   if text == \"\" \n        then return None \n    else \n        md5_hash =\
    \ md5(text) \n        return md5_hash.hexdigest \nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        then return None \n        else return md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n\
    \        Nothing\n    else\n        md5(text)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if text == \"\"\n        Nothing\n\
    \    else\n        Digest(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.", "    if text == \"\" \n      \
    \  return Nothing \n    else \n        digest = Digest.new(\"md5\") \n       \
    \ digest.update(text) \n        return digest.hexdigest \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if text == \"\" \n        then return None \n   \
    \     else return md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if text == \"\" \n        return Nothing\n    else\n        md5 = Digest.new(\"\
    md5\")\n        md5.update(text)\n        return md5.digest().hex\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
