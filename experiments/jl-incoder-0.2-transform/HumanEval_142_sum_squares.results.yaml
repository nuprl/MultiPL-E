language: jl
name: HumanEval_142_sum_squares
results:
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj96az60y.jl:25\nin expression starting at\
    \ /tmp/tmpj96az60y.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the entries in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqdg1mxt.jl:27\nin expression starting at\
    \ /tmp/tmptqdg1mxt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and will\
    \ return the sum of the squares of the entries in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_fpzrdx.jl:27\nin expression starting at\
    \ /tmp/tmp5_fpzrdx.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the integers squared. \n    \n   \
    \ Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n  \
    \  [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwd93657.jl:27\nin expression starting at\
    \ /tmp/tmpwwd93657.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a tags=julia |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78sga720.jl:27\nin expression starting at\
    \ /tmp/tmp78sga720.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a new list with the entries that are divisible\
    \ by 3 removed.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4kg2kigk.jl:27\nin expression starting at\
    \ /tmp/tmp4kg2kigk.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgc16ngyd.jl:27\nin expression starting at\
    \ /tmp/tmpgc16ngyd.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a tags=julia,list |>\n<| a tags=julia,list\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw77vbjnj.jl:27\nin expression starting at\
    \ /tmp/tmpw77vbjnj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are divisible\
    \ by 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4 or 5.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzn7foim.jl:27\nin expression starting at\
    \ /tmp/tmpbzn7foim.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum += x * x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_v8w_a2.jl:25\nin expression starting at\
    \ /tmp/tmpz_v8w_a2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a new list where all entries are multiplied by 2 except for the entries\
    \ whose indexes are a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci208dqz.jl:28\nin expression starting at\
    \ /tmp/tmpci208dqz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of all entries in the list. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv042txtm.jl:27\nin expression starting at\
    \ /tmp/tmpv042txtm.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns a list of all integers that are divisible by\
    \ 3 or 4. The function shall not change the list passed as argument. \nThe function\
    \ shall not change the order of the elements in the list. \nThe function shall\
    \ not change the list passed as argument if the list passed as argument contains\
    \ negative numbers.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03fg6564.jl:27\nin expression starting at\
    \ /tmp/tmp03fg6564.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ the sum of all entries in the list that are a multiple of 3. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the sum of all entries. \nExamples:\n>>> lst\n\
    [1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> sum_squares(lst)\n25\n\
    </text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipt5cvw0.jl:27\nin expression starting at\
    \ /tmp/tmpipt5cvw0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 7: Write a function that will take a list of integers and return\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9k6cbzf.jl:27\nin expression starting at\
    \ /tmp/tmpj9k6cbzf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the product of all entries in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxye25lh.jl:27\nin expression starting at\
    \ /tmp/tmpgxye25lh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and will return the sum of the squares of the entries\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63tylyqt.jl:27\nin expression starting at\
    \ /tmp/tmp63tylyqt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are divisible\
    \ by 3 or 4. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltx2vk8w.jl:27\nin expression starting at\
    \ /tmp/tmpltx2vk8w.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list of integers and returns the sum of the squares of the integers in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6wsenh6.jl:23\nin expression starting at\
    \ /tmp/tmpp6wsenh6.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the entries in the list that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 4 or 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8u3gogf.jl:25\nin expression starting at\
    \ /tmp/tmpa8u3gogf.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of integers whose entries are all positive. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9q45ir_n.jl:27\nin expression starting at\
    \ /tmp/tmp9q45ir_n.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j0ryvry.jl:27\nin expression starting at\
    \ /tmp/tmp5j0ryvry.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 5. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 6. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 7. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 8. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 9. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 10. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 11. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 12. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 13. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 14. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 15. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 16. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 17. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 18. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 19. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 20\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnah2eg5u.jl:27\nin expression starting at\
    \ /tmp/tmpnah2eg5u.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are divisible by 3. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppneh03k0.jl:27\nin expression starting at\
    \ /tmp/tmppneh03k0.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49dvgpd6.jl:27\nin expression starting at\
    \ /tmp/tmp49dvgpd6.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return the sum of the squares of the integers in\
    \ the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n \
    \   []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0yk6ch4.jl:27\nin expression starting at\
    \ /tmp/tmpv0yk6ch4.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all integers whose square is less than or equal to 100. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n  \
    \  [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn8oomyw.jl:27\nin expression starting at\
    \ /tmp/tmpzn8oomyw.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x * x\n        elseif x % 4 == 0\n\
    \            sum += x * x\n        else\n            sum += x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> sum_squares(lst)\n    25\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8o0gsq5.jl:27\nin expression starting at\
    \ /tmp/tmpy8o0gsq5.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a new list where all entries are multiplied by\
    \ 2 except for the entries whose index is \na multiple of 3. For example, if the\
    \ list contains [1,2,3,4,5,6,7,8,9,10], the function should return [2,4,6,8,10,12,14,16,18,20].\
    \ \nThe function shall not change the original list.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpithewm09.jl:23\nin expression starting at\
    \ /tmp/tmpithewm09.jl:23\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dw23_y8.jl:27\nin expression starting at\
    \ /tmp/tmp4dw23_y8.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all integers whose square is less than or equal to 100. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3, 10, 11, 12, 13]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-5, -10, -15, -20, -25, -35, -45]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbbcguca.jl:23\nin expression starting at\
    \ /tmp/tmpjbbcguca.jl:23\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_0im5un.jl:27\nin expression starting at\
    \ /tmp/tmpb_0im5un.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and will return\
    \ the sum of the integers squared if they are a multiple of 3 and will return\
    \ the sum of the integers cube if they are a multiple of 4. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dnv30jf.jl:25\nin expression starting at\
    \ /tmp/tmp8dnv30jf.jl:25\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxsau329.jl:27\nin expression starting at\
    \ /tmp/tmpsxsau329.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x * x\n        else\n            sum += x * x * x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and will return the sum of the squares of the integers in the list. The function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa2ad7p6.jl:27\nin expression starting at\
    \ /tmp/tmpqa2ad7p6.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will\
    \ take a list of integers and will return the sum of all entries in the list that\
    \ are a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 5. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 6. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 7. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 8. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 9. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 10. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 11. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 12. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 13. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 14. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 15. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 16. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 17. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 18. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 19. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 20. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplft_fpkb.jl:27\nin expression starting at\
    \ /tmp/tmplft_fpkb.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and a number as input. The function shall then return the\
    \ number of entries in the list whose index is less than or equal to that number.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> num = 2\n    >>> num\n    2\n    >>>\
    \ num\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfrg697j.jl:28\nin expression starting at\
    \ /tmp/tmpjfrg697j.jl:28\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list if the integer is a multiple\
    \ of 3 and \n    raised to the power of 2 if the integer is a multiple of 4. The\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5byjlr3.jl:23\nin expression starting at\
    \ /tmp/tmpw5byjlr3.jl:23\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and return a list of integers whose\
    \ entries are all positive.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71665h1g.jl:25\nin expression starting at\
    \ /tmp/tmp71665h1g.jl:25\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif x % 4\
    \ == 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphduprr9.jl:28\nin expression starting at\
    \ /tmp/tmpphduprr9.jl:28\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the integers squared. \n    \n   \
    \ Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n  \
    \  [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zpirt_e.jl:27\nin expression starting at\
    \ /tmp/tmp4zpirt_e.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will\
    \ take a list of integers and return a new list where all entries are squared\
    \ except for those entries whose indexes are a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnris660t.jl:27\nin expression starting at\
    \ /tmp/tmpnris660t.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum += x * x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 7\nWrite a function that will take a list of integers and return\
    \ a new list with all the even entries removed. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n    [2,\
    \ 4, 6]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps53hoe6x.jl:27\nin expression starting at\
    \ /tmp/tmps53hoe6x.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and will return the number of entries in the list that\
    \ are a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are a multiple of 3. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the number of entries in the list that are a multiple of 3.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the number of entries in the\
    \ list that are a multiple of 3. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3. \nThe function shall then return\
    \ the number of entries in the list that are a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are a multiple\
    \ of 3. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the number of entries\
    \ in the list that are a multiple of 3. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the number of entries in the list that are a multiple of 3. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the number of entries in the list that are\
    \ a multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are a multiple of 3. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the number of entries in the list that are a multiple of 3.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the number of entries in the\
    \ list that are a multiple of 3. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3. \nThe function shall then return\
    \ the number of entries in the list that are a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are a multiple\
    \ of 3. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the number of entries\
    \ in the list that are a multiple of 3. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the number of entries in the list that are a multiple of 3. \nThe function\
    \ shall not \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_gf6shi.jl:27\nin expression starting at\
    \ /tmp/tmp9_gf6shi.jl:27\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of all entries in the list that are a multiple of 3. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 4 or 5.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3cufk2x.jl:27\nin expression starting at\
    \ /tmp/tmp_3cufk2x.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum += x*x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a list of integers and return a new list that contains\
    \ the squared entries of the original list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_0x7229.jl:25\nin expression starting at\
    \ /tmp/tmp2_0x7229.jl:25\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum -= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 7: Write a\
    \ function that will take a list of integers and return a list of all odd integers\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n\
    \    [1, 3, 5]\n    >>> lst\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtuicz5d.jl:25\nin expression starting at\
    \ /tmp/tmpgtuicz5d.jl:25\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all integers that are not divisible by 3. The function shall not change\
    \ the entries in the list whose indexes are not divisible by 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not divisible by 3 or 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv14_q249.jl:27\nin expression starting at\
    \ /tmp/tmpv14_q249.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum += x * x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bz7yvak.jl:27\nin expression starting at\
    \ /tmp/tmp9bz7yvak.jl:27\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for e in lst\n\
    \        if mod(e, 3) == 0\n            sum += e^2\n        elseif mod(e, 4) ==\
    \ 0\n            sum += e^3\n        else\n            sum += e^4\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of integers whose entries are\
    \ all positive.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86lhp5iw.jl:27\nin expression starting at\
    \ /tmp/tmp86lhp5iw.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27825818)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to write\
    \ a function which would do what he wants. He also asked for help on how to write\
    \ this function. I believe this answers the question perfectly. He also provided\
    \ an example of how he would call this function. I believe this answers the question\
    \ perfectly. He also provided an example of how he would call this function. I\
    \ believe this answers the question perfectly. He also provided an example of\
    \ how he would call this function. I believe this answers the question perfectly.\
    \ He also provided an example of how he would call this function. I believe this\
    \ answers the question perfectly.\n<|/ c |>\n<| c |>\nI believe this answers the\
    \ question perfectly. He also provided an example of how he would call this function.\
    \ I believe this answers the question perfectly. He also provided an example of\
    \ how he would call this function. I believe this answers the question perfectly.\
    \ He also provided an example of how he would call this function. I believe this\
    \ answers the question perfectly. He also provided an example of how he would\
    \ call this function. I believe this answers the question perfectly.\n<|/ c |>\n\
    <| c |>\nI believe this answers the question perfectly. He also provided an example\
    \ of how he would call this function. I believe this answers the question perfectly.\
    \ He also provided an example of how he would call this function. I believe this\
    \ answers the question perfectly. He also provided an example of how he would\
    \ call this function. I believe this answers the question perfectly. He also provided\
    \ an example of how he would call this function. I believe this answers the question\
    \ perfectly.\n<|/ c |>\n<| c |>\nI believe this answers the question perfectly.\
    \ He also provided an example of how he would call this function. I believe this\
    \ answers the question perfectly. He also provided an example of how he would\
    \ call this function. I believe this answers the question perfectly. H\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp5w2q2b.jl:27\nin expression starting at\
    \ /tmp/tmpyp5w2q2b.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the product of the entries in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4f8k77m.jl:27\nin expression starting at\
    \ /tmp/tmpb4f8k77m.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of all entries in the list that are a\
    \ multiple of 3. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1v3ax_v7.jl:27\nin expression starting at\
    \ /tmp/tmp1v3ax_v7.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmcz7bqm.jl:28\nin expression starting at\
    \ /tmp/tmphmcz7bqm.jl:28\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i\n        elseif i%4 == 0\n   \
    \         sum = sum + i*i\n        else\n            sum = sum + i*i*i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstfq0_xx.jl:27\nin expression starting at\
    \ /tmp/tmpstfq0_xx.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ even numbers. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5, 4]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc_65hge.jl:27\nin expression starting at\
    \ /tmp/tmpzc_65hge.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x * x\n        else\n            sum += x * x * x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and will return the sum of all entries in the list\
    \ that are a multiple of 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ sum of all entries. \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n\
    [-1, -5, 2, -1, -5]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27bs32hc.jl:27\nin expression starting at\
    \ /tmp/tmp27bs32hc.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of all entries in the list that are a\
    \ multiple of 3. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 5. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 6. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 7. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 8. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 9. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 10. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 11. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 12. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 13. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 14. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 15. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 16. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 17. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 18. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 19. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 20. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7a34ppl.jl:27\nin expression starting at\
    \ /tmp/tmpg7a34ppl.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a new list with the integers squared. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bjniovx.jl:27\nin expression starting at\
    \ /tmp/tmp1bjniovx.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and a number as input. The function will then return a list\
    \ of integers whose entries are all multiples of that number. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, -4, -3, -2, -1]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1esumit5.jl:25\nin expression starting at\
    \ /tmp/tmp1esumit5.jl:25\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the product of\
    \ all entries in the list. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jeg5cec.jl:25\nin expression starting at\
    \ /tmp/tmp7jeg5cec.jl:25\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the sum of the integers in the list that are\
    \ a multiple of 3. The function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of 3. \nThe function shall not change the list passed as argument.\
    \ \nThe function shall then return the sum of the integers in the list that are\
    \ a multiple of \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo511a4re.jl:27\nin expression starting at\
    \ /tmp/tmpo511a4re.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers except for those that are multiples of\
    \ 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7dorxjw.jl:27\nin expression starting at\
    \ /tmp/tmpr7dorxjw.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the sum of the integers squared. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuswrpdg5.jl:27\nin expression starting at\
    \ /tmp/tmpuswrpdg5.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are divisible\
    \ by 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ajbnmtp.jl:27\nin expression starting at\
    \ /tmp/tmp3ajbnmtp.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all integers whose squares are\
    \ less than or equal to 100. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3,\
    \ -5, 6, -7, 8, -9, 10]\n    >>> lst\n    [-5, 6, -7, 8, -9, 10]\n    >>> lst\n\
    \    [-5, 6, -7, 8, -9, 10, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62h0lpfd.jl:27\nin expression starting at\
    \ /tmp/tmp62h0lpfd.jl:27\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers where the integers in\
    \ the original vector are replaced by their squares and cubes.\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05n4gu6f.jl:27\nin expression starting at\
    \ /tmp/tmp05n4gu6f.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ the sum of the squares of the integers in the list. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyevqvyh.jl:27\nin expression starting at\
    \ /tmp/tmpkyevqvyh.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a list of integers and return\
    \ a list of all integers that are divisible by 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0zwqz8f.jl:27\nin expression starting at\
    \ /tmp/tmpf0zwqz8f.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and will return the sum of all entries in the list that\
    \ are a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76nmdo33.jl:27\nin expression starting at\
    \ /tmp/tmp76nmdo33.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of all entries in the list\
    \ that are a multiple of 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 5. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 6. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 7. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 8. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 9. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 10. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 11. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 12. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 13. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 14. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 15. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 16. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 17. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 18. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 19. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 20. The function shall then return the sum of all entries. \nThe function \n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_o6cfnk.jl:27\nin expression starting at\
    \ /tmp/tmp2_o6cfnk.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a new list where all entries are multiplied\
    \ by 2 except for the entries whose indexes are a multiple of 3 or 4. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgdzsy8c.jl:27\nin expression starting at\
    \ /tmp/tmpcgdzsy8c.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and will\
    \ return the sum of the squares of the entries in the list if the entry is \n\
    a multiple of 3 and will return the sum of the cubes of the entries in the list\
    \ if the entry is a multiple of 4 and not a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj9jvumb.jl:27\nin expression starting at\
    \ /tmp/tmpmj9jvumb.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entrie\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjyksnm2v.jl:27\nin expression starting at\
    \ /tmp/tmpjyksnm2v.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmfms3lz.jl:27\nin expression starting at\
    \ /tmp/tmpdmfms3lz.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfyadzkzy.jl:25\nin expression starting at\
    \ /tmp/tmpfyadzkzy.jl:25\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and return the number of entries in the list that are not\
    \ a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdol4vk5.jl:25\nin expression starting at\
    \ /tmp/tmpmdol4vk5.jl:25\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the product of the entries in the list. \n  \
    \  \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sb8r5_x.jl:27\nin expression starting at\
    \ /tmp/tmp3sb8r5_x.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0r2cdbwk.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp0r2cdbwk.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0r2cdbwk.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0r2cdbwk.jl:31\ntest set: Test Failed at /tmp/tmp0r2cdbwk.jl:33\n\
    \  Expression: candidate([1, 4, 9]) == 14\n   Evaluated: 146 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r2cdbwk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r2cdbwk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0r2cdbwk.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0r2cdbwk.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp0r2cdbwk.jl:31\ntest set: Test Failed at /tmp/tmp0r2cdbwk.jl:38\n\
    \  Expression: candidate([-1, -5, 2, -1, -5]) == -126\n   Evaluated: -10 == -126\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0r2cdbwk.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0r2cdbwk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0r2cdbwk.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inli"
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j0ryvry.jl:27\nin expression starting at\
    \ /tmp/tmp5j0ryvry.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdzq4c0r.jl:28\nin expression starting at\
    \ /tmp/tmptdzq4c0r.jl:28\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will\
    \ take a list of integers and will return the sum of the squares of the entries\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgafpnx0.jl:27\nin expression starting at\
    \ /tmp/tmptgafpnx0.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55y6_dr0.jl:25\nin expression starting at\
    \ /tmp/tmp55y6_dr0.jl:25\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the entries in the list that are a multiple of 3.\
    \ The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. The function shall then return the sum of all entries. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07a7yt_u.jl:27\nin expression starting at\
    \ /tmp/tmp07a7yt_u.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1ofj0zd.jl:27\nin expression starting at\
    \ /tmp/tmpo1ofj0zd.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of all entries in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib0l2hln.jl:27\nin expression starting at\
    \ /tmp/tmpib0l2hln.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 7: Write\
    \ a function that takes a list of integers and returns the sum of the squares\
    \ of all entries in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1m_eqnxl.jl:28\nin expression starting at\
    \ /tmp/tmp1m_eqnxl.jl:28\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 5. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 6. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 7. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 8. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 9. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 10. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 11. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 12. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 13. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 14. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 15. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 16. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 17. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 18. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 19. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 20. The function shall then return the sum of all entries. \n\
    The function shall not \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswm350jp.jl:23\nin expression starting at\
    \ /tmp/tmpswm350jp.jl:23\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlvh5m5h.jl:27\nin expression starting at\
    \ /tmp/tmptlvh5m5h.jl:27\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,list\
    \ |>\nThe simplest way is to use filter:\n<code>\njulia> filter(x -> x % 3 ==\
    \ 0 || x % 4 == 0, 1:10)\n10-element Vector{Int64}:\n 3\n 9\n 16\n 25\n 36\n 49\n\
    \ 64\n 81\n 100\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,list |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjykubxvu.jl:27\nin expression starting at\
    \ /tmp/tmpjykubxvu.jl:27\n"
  stdout: ''
  timestamp: 1659823003
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns a list of all entries that are greater than or\
    \ equal to 10. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68mwhci7.jl:27\nin expression starting at\
    \ /tmp/tmp68mwhci7.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if mod(x,3) == 0\n            sum+=x*x\n        elseif mod(x,4) == 0\n\
    \            sum+=x*x\n        else\n            sum+=x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo31g16no.jl:27\nin expression starting at\
    \ /tmp/tmpo31g16no.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum += x * x\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7hpc3cy9.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp7hpc3cy9.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hpc3cy9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hpc3cy9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7hpc3cy9.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7hpc3cy9.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7hpc3cy9.jl:31\ntest set: Test Failed at /tmp/tmp7hpc3cy9.jl:38\n\
    \  Expression: candidate([-1, -5, 2, -1, -5]) == -126\n   Evaluated: 56 == -126\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7hpc3cy9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7hpc3cy9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp7hpc3cy9.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -150 == 3030\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7hpc3cy9.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7hpc3cy9.jl:31\ntest set: Test Failed at /tmp/tmp7hpc3cy9.jl:40\n\
    \  Expression: candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0\n   Evaluated: 2\
    \ == 0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl"
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> sum_squares(lst)\n    25\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglzd04xf.jl:27\nin expression starting at\
    \ /tmp/tmpglzd04xf.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and return a list of all entries\
    \ that are divisible by 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries\
    \ that are divisible by 3. \nThe function shall then return the sum of all entries\
    \ that are divisible by 4. The function shall then return the sum of all entries\
    \ that are divisible by 5. \nThe function shall then return the sum of all entries\
    \ that are divisible by 6. The function shall then return the sum of all entries\
    \ that are divisible by 7. \nThe function shall then return the sum of all entries\
    \ that are divisible by 8. The function shall then return the sum of all entries\
    \ that are divisible by 9. \nThe function shall then return the sum of all entries\
    \ that are divisible by 10. The function shall then return the sum of all entries\
    \ that are divisible by 11. \nThe function shall then return the sum of all entries\
    \ that are divisible by 12. The function shall then return the sum of all entries\
    \ that are divisible by 13. \nThe function shall then return the sum of all entries\
    \ that are divisible by 14. The function shall then return the sum of all entries\
    \ that are divisible by 15. \nThe function shall then return the sum of all entries\
    \ that are divisible by 16. The function shall then return the sum of all entries\
    \ that are divisible by 17. \nThe function shall then return the sum of all entries\
    \ that are divisible by 18. The function shall then return the sum of all entries\
    \ that are divisible by 19. \nThe function shall then return the sum of all entries\
    \ that are divisible by 20. The function shall then return the sum of all entries\
    \ that are divisible by 21. \nThe function shall then return the sum of all entries\
    \ that are divisible by 22. The function shall then return the sum of all entries\
    \ that are divisible by 23. \nThe function shall then return the sum of all entries\
    \ that are divisible by 24. The function shall then return the sum of all entries\
    \ that are divisible by 25. \nThe function shall then return the sum of all entries\
    \ that are divisible by 26. The function shall then return the sum of all entries\
    \ that are divisible by 27. \nThe function shall then return the sum of all entries\
    \ that are divisible by 28. The function shall then return the sum of all entries\
    \ that are divisible by 29. \nThe function shall then return the sum of all entries\
    \ that are divisible by 30. The function shall then return the sum of all entries\
    \ that are divisible by 31. \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_g877su2.jl:25\nin expression starting at\
    \ /tmp/tmp_g877su2.jl:25\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the entries in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hqlpas5.jl:25\nin expression starting at\
    \ /tmp/tmp6hqlpas5.jl:25\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bq70h1j.jl:27\nin expression starting at\
    \ /tmp/tmp0bq70h1j.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite a function that will\
    \ take a list of integers and return a new list where all entries are squared\
    \ except for the entries whose indexes are a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5dvswdb.jl:27\nin expression starting at\
    \ /tmp/tmpt5dvswdb.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and a number as input. The function shall\
    \ then return the number of entries in the list whose index is \n    a multiple\
    \ of number and the function shall not change the entries in the list whose indexes\
    \ are not a multiple of number. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> number\
    \ = 2\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e2tfiti.jl:27\nin expression starting at\
    \ /tmp/tmp9e2tfiti.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of integers whose entries are all positive.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvax9i3c.jl:27\nin expression starting at\
    \ /tmp/tmpnvax9i3c.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and return the sum of the squares\
    \ of the integers in the list. The function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3eyoa9e.jl:25\nin expression starting at\
    \ /tmp/tmps3eyoa9e.jl:25\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49dvgpd6.jl:27\nin expression starting at\
    \ /tmp/tmp49dvgpd6.jl:27\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the odd entries in the vector. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 4.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 5 or\
    \ 6. \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 7 or\
    \ 8. \nThe function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 9 or\
    \ 10. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 11 or 12. \nThe function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the vector whose indexes are not a\
    \ multiple of 13 or 14. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ not a multiple of 15 or 16. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the vector whose indexes\
    \ are not a multiple of 17 or 18. \nThe function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the vector whose\
    \ indexes are not a multiple of 19 or 20. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 21 or 22. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 23. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 24. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 25. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 26. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the vector\
    \ whose indexes are not a multiple of 27. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lbtnl0y.jl:27\nin expression starting at\
    \ /tmp/tmp3lbtnl0y.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of all entries in the list\
    \ that are a multiple of 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw81mjgx.jl:27\nin expression starting at\
    \ /tmp/tmpcw81mjgx.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of integers whose entries are all positive.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvax9i3c.jl:27\nin expression starting at\
    \ /tmp/tmpnvax9i3c.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 4 or 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6q4_fpc2.jl:25\nin expression starting at\
    \ /tmp/tmp6q4_fpc2.jl:25\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovxywchs.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpovxywchs.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpovxywchs.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpovxywchs.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test Failed at /tmp/tmpovxywchs.jl:32\n\
    \  Expression: candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3\n   Evaluated:\
    \ 0 == -3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpovxywchs.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] "
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4b285c6.jl:25\nin expression starting at\
    \ /tmp/tmpd4b285c6.jl:25\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if mod(x, 3) == 0\n            sum = sum + x^2\n        elseif mod(x,\
    \ 4) == 0\n            sum = sum + x^3\n        else\n            sum = sum +\
    \ x^4\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and will return the sum of the integers squared that are\
    \ divisible by 5. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppl71ci0m.jl:27\nin expression starting at\
    \ /tmp/tmppl71ci0m.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers whose entries are the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpasftozrz.jl:27\nin expression starting at\
    \ /tmp/tmpasftozrz.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of all positive integers less than or equal\
    \ to the sum of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf86aav3x.jl:25\nin expression starting at\
    \ /tmp/tmpf86aav3x.jl:25\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i^2\n        else\n         \
    \   sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__uogz33.jl:25\nin expression starting at\
    \ /tmp/tmp__uogz33.jl:25\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the integers squared. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9o80397.jl:27\nin expression starting at\
    \ /tmp/tmpq9o80397.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ divisible by 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfv0dg98.jl:27\nin expression starting at\
    \ /tmp/tmpxfv0dg98.jl:27\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of all entries in the list that are a\
    \ multiple of 3. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42e326in.jl:27\nin expression starting at\
    \ /tmp/tmp42e326in.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and a number k. The function will then return a list\
    \ of integers whose entries are all integers whose \n    sum is equal to k. For\
    \ example, if the list is [5, 3, 6, 7] and k is 7, then the function should return\
    \ [5, 6, 7].\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnk6v0mpt.jl:27\nin expression starting at\
    \ /tmp/tmpnk6v0mpt.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return the sum of the squares of the entries in\
    \ the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n \
    \   []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf66t67rd.jl:27\nin expression starting at\
    \ /tmp/tmpf66t67rd.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum += x*x\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2zak2pll.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp2zak2pll.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 14 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2zak2pll.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2zak2pll.jl:29\ntest set: Test Failed at /tmp/tmp2zak2pll.jl:31\n\
    \  Expression: candidate([1, 4, 9]) == 14\n   Evaluated: 98 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zak2pll.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zak2pll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2zak2pll.jl:34\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2zak2pll.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp2zak2pll.jl:29\ntest set: Test Failed at /tmp/tmp2zak2pll.jl:36\n\
    \  Expression: candidate([-1, -5, 2, -1, -5]) == -126\n   Evaluated: 56 == -126\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2zak2pll.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2zak2pll.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp2zak2pll.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: 12942 == 3030\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n"
  timestamp: 1659823007
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy57tmna8.jl:23\nin expression starting at\
    \ /tmp/tmpy57tmna8.jl:23\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the product of all entries\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpws0owv3n.jl:25\nin expression starting at\
    \ /tmp/tmpws0owv3n.jl:25\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list that are a multiple of 3.\
    \ The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqecp4pz7.jl:27\nin expression starting at\
    \ /tmp/tmpqecp4pz7.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbu6bfuid.jl:27\nin expression starting at\
    \ /tmp/tmpbu6bfuid.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> sum_squares(lst)\n    25\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwcte5tv.jl:27\nin expression starting at\
    \ /tmp/tmptwcte5tv.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2b6xgfs.jl:27\nin expression starting at\
    \ /tmp/tmpn2b6xgfs.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return the sum of the integers squared. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqfzw3zh.jl:27\nin expression starting at\
    \ /tmp/tmptqfzw3zh.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,list |>\n<| c |>\n\
    This does not answer the question. The question was how to avoid the loop and\
    \ how to avoid the if/elseif/else statements.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to avoid the loop and how to avoid the if/elseif/else statements. I\
    \ answered the question by providing two solutions. One solution is based on a\
    \ loop and the other is based on if/elseif/else.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to avoid the loop and how to avoid the if/elseif/else statements. I\
    \ answered the question by providing two solutions. One solution is based on a\
    \ loop and the other is based on if/elseif/else.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to avoid the loop and how to avoid the if/elseif/else statements. I\
    \ answered the question by providing two solutions. One solution is based on a\
    \ loop and the other is based on if/elseif/else.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to avoid the loop and how to avoid the if/elseif/else statements. I\
    \ answered the question by providing two solutions. One solution is based on a\
    \ loop and the other is based on if/elseif/else.\n<|/ c |>\n<| a tags=julia,list\
    \ |>\nThis can be done with mapslices:\n<code>\njulia> mapslices(x -> x^2 if x%3==0\
    \ || x%4==0 else x^3, 1:10)\n10-element Array{Int64,1}:\n 1  4  9  16  25  36\
    \  49  64  81 100\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis does not answer the\
    \ question. The question was how to avoid the loop and how to avoid the if/elseif/else\
    \ statements.\n<|/ c |>\n<| a tags=julia,list |>\nThe other answers here are great,\
    \ but I thought I'd add my own solution as an alternative to mapslices.\n<code>\n\
    julia> function f(x::Int64)\n           if x % 3 == 0 || x % 4 == 0\n        \
    \       x^2\n           \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk056z6bz.jl:27\nin expression starting at\
    \ /tmp/tmpk056z6bz.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the entries in the list. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxyvd3y1.jl:27\nin expression starting at\
    \ /tmp/tmpwxyvd3y1.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x*x\n        elseif x % 4 == 0\n  \
    \          sum += x*x\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers except for those that are multiples of\
    \ 3 or 4. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n  \
    \  []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnv5_qa6.jl:27\nin expression starting at\
    \ /tmp/tmplnv5_qa6.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all even numbers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk_bmxdm.jl:27\nin expression starting at\
    \ /tmp/tmpdk_bmxdm.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThank you for your\
    \ answer. Your solution is very elegant and I learned a lot from it. I will try\
    \ to implement it on my own and see how it goes. I appreciate your help.\n<|/\
    \ c |>\n<| c |>\nI implemented your solution and it works perfectly. Thank you\
    \ very much for your help.\n<|/ c |>\n<| a |>\nYou can use the filter function\
    \ to filter out elements that don't meet the criteria you want:\n<code>\njulia>\
    \ filter(x -> x % 3 == 0 || x % 4 == 0, 1:10)\n3-element Vector{Int64}:\n 3\n\
    \ 9\n 15\n</code>\n<|/ a dscore=1 tags=julia |>\n<| c |>\nThank you for your answer.\
    \ Your solution is very elegant and I learned a lot from it. I will try to implement\
    \ it on my own and see how it goes. I appreciate your help.\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib2v12e3.jl:27\nin expression starting at\
    \ /tmp/tmpib2v12e3.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of integers whose entries are the\
    \ sum of the entries in the original list \n    multiplied by the square of the\
    \ entries in the original list. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_z4yjoc.jl:27\nin expression starting at\
    \ /tmp/tmp8_z4yjoc.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 7\nWrite a function that will take\
    \ a list of integers and will return the sum of the integers squared. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tel634x.jl:25\nin expression starting at\
    \ /tmp/tmp9tel634x.jl:25\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6reupdj8.jl:25\nin expression starting at\
    \ /tmp/tmp6reupdj8.jl:25\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the product of the integers in the list. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xwr5397.jl:27\nin expression starting at\
    \ /tmp/tmp7xwr5397.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a list of integers and return\
    \ a new list where all entries are squared except for the entries whose indexes\
    \ are a multiple of 3 and a multiple of 4. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall then return the sum\
    \ of all entries. \nThe function shall then return the sum of all entries. \n\
    The function shall then return the sum of all entries. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall then return the sum\
    \ of all entries. \nThe function shall then return the sum of all entries. \n\
    The function shall then return the sum of all entries. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall then return the sum\
    \ of all entries. \nThe function shall then return the sum of all entries. \n\
    The function shall then return the sum of all entries. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0be2tnn.jl:27\nin expression starting at\
    \ /tmp/tmpy0be2tnn.jl:27\n"
  stdout: ''
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i*i\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of integers whose entries are\
    \ all positive.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy64hbvf1.jl:28\nin expression starting at\
    \ /tmp/tmpy64hbvf1.jl:28\n"
  stdout: ''
  timestamp: 1659823007
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if mod(x,3) == 0\n            sum += x^2\n        elseif mod(x,4) ==\
    \ 0\n            sum += x^3\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a list of integers\
    \ and return a new list with only the even entries in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n    [2, 4, 6,\
    \ 8, 10]\n    >>> lst\n    [2, 4, 6, 8, 10]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcfurrfr.jl:27\nin expression starting at\
    \ /tmp/tmpfcfurrfr.jl:27\n"
  stdout: ''
  timestamp: 1659823007
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list if the integer is even, \n\
    otherwise it returns the sum of the squares of the integers in the list if the\
    \ integer is odd.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48motaqy.jl:27\nin expression starting at\
    \ /tmp/tmp48motaqy.jl:27\n"
  stdout: ''
  timestamp: 1659823007
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and will\
    \ return the number of entries in the list that are not a multiple of 3. The function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the number of entries in the list that are\
    \ not a multiple of 3. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ number of entries in the list that are not a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are not\
    \ a multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_n8wizi.jl:27\nin expression starting at\
    \ /tmp/tmpp_n8wizi.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i^2\n        else\n         \
    \   sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and will return the number of entries in the list that are\
    \ negative.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_gqd9kr.jl:25\nin expression starting at\
    \ /tmp/tmpk_gqd9kr.jl:25\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all even entries in the list. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ao9ve1f.jl:27\nin expression starting at\
    \ /tmp/tmp1ao9ve1f.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of all integers that are divisible by 3\
    \ or 4. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpel1w9crz.jl:28\nin expression starting at\
    \ /tmp/tmpel1w9crz.jl:28\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxb4vgou.jl:27\nin expression starting at\
    \ /tmp/tmpdxb4vgou.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of all even numbers in the list. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunyvybtf.jl:27\nin expression starting at\
    \ /tmp/tmpunyvybtf.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will take a list of integers and return a list of all entries\
    \ that are a multiple of 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 4. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 5. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 6. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 7. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 8. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 9. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 10. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 11. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 12. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 13. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 14. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 15. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 16. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 17. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 18. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 19. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 20. The function shall then return the sum of all entries. \n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt72th57l.jl:28\nin expression starting at\
    \ /tmp/tmpt72th57l.jl:28\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the squared values of all entries in the vector. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjl7ohz70.jl:25\nin expression starting at\
    \ /tmp/tmpjl7ohz70.jl:25\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of integers whose entries are all\
    \ positive.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndo1rku6.jl:27\nin expression starting at\
    \ /tmp/tmpndo1rku6.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and will\
    \ return the sum of the squares of the entries in the list. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3 or\
    \ 4. The function shall then return the sum of all entries. \nThe function shall\
    \ then return the sum of all entries of the list whose entries are a multiple\
    \ of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4evce2y.jl:27\nin expression starting at\
    \ /tmp/tmpx4evce2y.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a list of integers\
    \ and will return the number of entries in the list that are negative.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbw6b8tma.jl:27\nin expression starting at\
    \ /tmp/tmpbw6b8tma.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a new list with only the even entries in the list. The function shall not change\
    \ the original list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_wrqh8o.jl:23\nin expression starting at\
    \ /tmp/tmp8_wrqh8o.jl:23\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1my52ppz.jl:27\nin expression starting at\
    \ /tmp/tmp1my52ppz.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns a list of all positive integers less than or\
    \ equal to 100. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 100, 200]\n\
    \    >>> lst\n    [1, 2, 3, 100, 200]\n    >>> lst\n    [1, 2, 3, 100, 200]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fb78f0y.jl:27\nin expression starting at\
    \ /tmp/tmp2fb78f0y.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the product of the entries in the list whose indexes are multiples of 3 and\
    \ 4. The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89clvg4p.jl:27\nin expression starting at\
    \ /tmp/tmp89clvg4p.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum += x*x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of all entries in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0z5s4t4.jl:25\nin expression starting at\
    \ /tmp/tmpv0z5s4t4.jl:25\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a new list with all the even entries removed. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> lst\n    [2, 3, 4, 5, 6, 7, 8,\
    \ 9]\n    >>> lst\n    [2, 4, 6, 8, 9]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjilsqvw9.jl:27\nin expression starting at\
    \ /tmp/tmpjilsqvw9.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list that are multiples of 3 or\
    \ 4. The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_xw1v9t.jl:27\nin expression starting at\
    \ /tmp/tmpd_xw1v9t.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27859765)\n\
    <|/ c |>\n<| c |>\nThe question was \"how do I do this\", not \"how do I do this\"\
    . I provided a solution that solves the problem in the question. How does it not\
    \ answer the question?\n<|/ c |>\n<| c |>\nThe question was \"how do I do this\"\
    , not \"how do I do this\". I provided a solution that solves the problem in the\
    \ question. How does it not answer the question?\n<|/ c |>\n<| c |>\nThe question\
    \ was \"how do I do this\", not \"how do I do this\". I provided a solution that\
    \ solves the problem in the question. How does it not answer the question?\n<|/\
    \ c |>\n<| c |>\nThe question was \"how do I do this\", not \"how do I do this\"\
    . I provided a solution that solves the problem in the question. How does it not\
    \ answer the question?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiorn15_r.jl:27\nin expression starting at\
    \ /tmp/tmpiorn15_r.jl:27\n"
  stdout: ''
  timestamp: 1659823008
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of all entries in the list that are a\
    \ multiple of 3. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n\
    >>> sum_squares(lst)\n25\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tvfynog.jl:27\nin expression starting at\
    \ /tmp/tmp9tvfynog.jl:27\n"
  stdout: ''
  timestamp: 1659823009
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x\n        elseif x % 4 ==\
    \ 0\n            sum += x * x\n        else\n            sum += x * x * x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list. \nThe function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hzhfaeq.jl:28\nin expression starting at\
    \ /tmp/tmp_hzhfaeq.jl:28\n"
  stdout: ''
  timestamp: 1659823009
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of integers whose entries are all even numbers. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n    [2, 4, 6, 8]\n\
    \    >>> lst\n    [2, 4, 6, 8]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0u_7eg3w.jl:27\nin expression starting at\
    \ /tmp/tmp0u_7eg3w.jl:27\n"
  stdout: ''
  timestamp: 1659823009
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum += x * x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the product of the entries in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the product of all entries. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzro1sk5.jl:27\nin expression starting at\
    \ /tmp/tmplzro1sk5.jl:27\n"
  stdout: ''
  timestamp: 1659823009
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that will take a list of integers and will\
    \ return the number of integers in the list that are divisible by 3. The function\
    \ shall not change the list entries. \n    \n    Examples:\n    >>> lst\n    [1,\
    \ 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn17q3j94.jl:27\nin expression starting at\
    \ /tmp/tmpn17q3j94.jl:27\n"
  stdout: ''
  timestamp: 1659823009
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qmmh61l.jl:25\nin expression starting at\
    \ /tmp/tmp8qmmh61l.jl:25\n"
  stdout: ''
  timestamp: 1659823009
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of all entries that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n\
    >>> lst\n[4, -6, 3, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5,\
    \ -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7,\
    \ -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4,\
    \ -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6,\
    \ -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5,\
    \ -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7,\
    \ -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4,\
    \ -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6,\
    \ -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5,\
    \ -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7,\
    \ -5, -6, -4, -7, -5, \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodsu8r4n.jl:28\nin expression starting at\
    \ /tmp/tmpodsu8r4n.jl:28\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8n6kpsi.jl:23\nin expression starting at\
    \ /tmp/tmpk8n6kpsi.jl:23\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and will return the sum of the squares of the entries\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63tylyqt.jl:27\nin expression starting at\
    \ /tmp/tmp63tylyqt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list whose\
    \ index is \n    a multiple of 3 and a multiple of 4. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgmf1jz86.jl:25\nin expression starting at\
    \ /tmp/tmpgmf1jz86.jl:25\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkxdwvn1.jl:25\nin expression starting at\
    \ /tmp/tmpqkxdwvn1.jl:25\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers and returns the product\
    \ of all entries in the list. \nThe function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the product of all entries. \nThe function shall not change the entries in the\
    \ list whose indexes are a multiple of 3 or 4. The function shall then return\
    \ the product of all entries. \nThe function shall not change the entries in the\
    \ list whose indexes are a multiple of 3 or 4 and a multiple of 3. The function\
    \ shall then return the product of all entries. \nThe function shall not change\
    \ the entries in the list whose indexes are a multiple of 3 or 4 and a multiple\
    \ of 4. The function shall then return the product of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 4 and not a multiple of 3. The function shall then return\
    \ the product of all entries. \nThe function shall not change the entries in the\
    \ list whose indexes are a multiple of 3 or 4 and a multiple of 4 and not a multiple\
    \ of 4. The function shall then return the product of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 4 and not a multiple of 4 and not a multiple of 3. The function\
    \ shall then return the product of all entries. \nThe function shall not change\
    \ the entries in the list whose indexes are a multiple of 3 or 4 and a multiple\
    \ of 4 and not a multiple of 4 and not a multiple of 4. The function shall then\
    \ return the product of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are a multiple of 3 or 4 and a multiple of 4 and not\
    \ a multiple of 4 and not a multiple of 4 and not a multiple of 3. The function\
    \ shall then return the product of all entries. \nThe function shall not change\
    \ the entries in the list whose indexes are a multiple of 3 or 4 and a multiple\
    \ of 4 and not a multiple of 4 and not a multiple of 4 and not a multiple of 4.\
    \ The function shall then return the product of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are a multiple of 3 or 4 and\
    \ a multiple of 4 and not a multiple of 4 and not a multiple of 4 and not a multiple\
    \ of 4. The function shall then return the product of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 4 and not a multiple of 4 and not a multiple of 4 and not\
    \ a multiple of 4 and not a multiple of 3. The function shall then return the\
    \ product of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and a multiple of 4 and \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4w_ghq8.jl:25\nin expression starting at\
    \ /tmp/tmph4w_ghq8.jl:25\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> sum_squares(lst)\n    25\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqe3di1t0.jl:27\nin expression starting at\
    \ /tmp/tmpqe3di1t0.jl:27\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of all even entries in the vector. \nWrite a\
    \ function that takes a vector of integers and returns the sum of all odd entries\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of all entries in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the maximum of the vector. \nWrite a function that takes\
    \ a vector of integers and returns the minimum of the vector. \nWrite a function\
    \ that takes a vector of integers and returns the sum of all entries in the vector\
    \ that are greater than or equal to 0. \nWrite a function that takes a vector\
    \ of integers and returns the sum of all entries in the vector that are less than\
    \ or equal to 0. \nWrite a function that takes a vector of integers and returns\
    \ the product of all entries in the vector that are greater than or equal to 0.\
    \ \nWrite a function that takes a vector of integers and returns the product of\
    \ all entries in the vector that are less than or equal to 0. \nWrite a function\
    \ that takes a vector of integers and returns the maximum of the vector that is\
    \ greater than or equal to 0. \nWrite a function that takes a vector of integers\
    \ and returns the maximum of the vector that is less than or equal to 0. \nWrite\
    \ a function that takes a vector of integers and returns the minimum of the vector\
    \ that is greater than or equal to 0. \nWrite a function that takes a vector of\
    \ integers and returns the minimum of the vector that is less than or equal to\
    \ 0. \nWrite a function that takes a vector of integers and returns the sum of\
    \ all entries in the vector that are greater than or equal to 0 and less than\
    \ or equal to 10. \nWrite a function that takes a vector of integers and returns\
    \ the sum of all entries in the vector that are greater than or equal to 0 and\
    \ less than or equal to 10. \nWrite a function that takes a vector of integers\
    \ and returns the product of all entries in the vector that are greater than or\
    \ equal to 0 and less than or equal to 10. \nWrite a function that takes a vector\
    \ of integers and returns the product of all entries in the vector that are greater\
    \ than or equal to 0 and less than or equal to 10. \nWrite a function that takes\
    \ a vector of integers and returns the maximum of the vector that is greater than\
    \ or equal to 0 and less than or equal to 10. \nWrite a function that takes a\
    \ vector of integers and returns the maximum of the vector that is greater than\
    \ or equal to 0 and less than or equal to 10. \nWrite a function that takes a\
    \ vector of integers and returns the minimum of the vector that is greater than\
    \ or equal to 0 and less than or equal to 10. \nWrite a function that takes a\
    \ vector of integers and returns the minimum of the vector that is greater than\
    \ or equal to 0 and less than or equal to 10. \nWrite a function that takes a\
    \ vector of integers and returns the sum of all entries in the vector that are\
    \ greater than or equal to 0 and less than or equal to 10 and are divisible by\
    \ 3. \nWrite a function that takes a vector of integers and returns the sum of\
    \ all entries in the vector that are greater than or \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mbhjtkl.jl:25\nin expression starting at\
    \ /tmp/tmp7mbhjtkl.jl:25\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0e3ht1g.jl:27\nin expression starting at\
    \ /tmp/tmpc0e3ht1g.jl:27\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all integers whose square is less than or equal to 100. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n  \
    \  [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7tbiw97b.jl:27\nin expression starting at\
    \ /tmp/tmp7tbiw97b.jl:27\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 5. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 6. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 7. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 8. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 9. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 10. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 11. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 12. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 13. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 14. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 15. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 16. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 17. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 18. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 19. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 20. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptksrfmm4.jl:27\nin expression starting at\
    \ /tmp/tmptksrfmm4.jl:27\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that will take\
    \ a list of integers and a number as input. The function shall then return the\
    \ sum of the integers in the list whose indexes are a multiple of 3 or 4 and less\
    \ than the number input. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> num\n    10\n\
    \    >>> num\n    10\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtr3hjm9.jl:25\nin expression starting at\
    \ /tmp/tmpqtr3hjm9.jl:25\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the entries in the vector. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_2wgins.jl:27\nin expression starting at\
    \ /tmp/tmpb_2wgins.jl:27\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers whose entries are the sum of the squares of the entries\
    \ in the original vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1,\
    \ 2, 3, 4, 5]\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgykqdby9.jl:27\nin expression starting at\
    \ /tmp/tmpgykqdby9.jl:27\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpovxywchs.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpovxywchs.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpovxywchs.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpovxywchs.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test Failed at /tmp/tmpovxywchs.jl:32\n\
    \  Expression: candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -3\n   Evaluated:\
    \ 0 == -3\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpovxywchs.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpovxywchs.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpovxywchs.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] "
  timestamp: 1659823006
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ a multiple of 3 or 4. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bkrxcq9.jl:27\nin expression starting at\
    \ /tmp/tmp6bkrxcq9.jl:27\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1bw8n36t.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp1bw8n36t.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test Failed at /tmp/tmp1bw8n36t.jl:33\n\
    \  Expression: candidate([1, 4, 9]) == 14\n   Evaluated: 146 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1bw8n36t.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test Failed at /tmp/tmp1bw8n36t.jl:38\n\
    \  Expression: candidate([-1, -5, 2, -1, -5]) == -126\n   Evaluated: -10 == -126\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1bw8n36t.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inli"
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a list of integers\
    \ and return the sum of all entries in the list whose index is less than or equal\
    \ to 10. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxip8pvv.jl:24\nin expression starting at\
    \ /tmp/tmpwxip8pvv.jl:24\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n\
    \            sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and will return the sum of the\
    \ squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt90yx20c.jl:26\nin expression starting at\
    \ /tmp/tmpt90yx20c.jl:26\n"
  stdout: ''
  timestamp: 1659823010
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose squares are less than or equal to 100.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, -4, -5, 6]\n    >>> lst\n\
    \    [1, 2, 3, -4, -5, 6, -7, -8]\n    >>> lst\n    [1, 2, 3, -4, -5, 6, -7, -8,\
    \ 9]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9zts4cy.jl:27\nin expression starting at\
    \ /tmp/tmpd9zts4cy.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list if they are a multiple of\
    \ 3 and \nthe sum of the cubes of the integers in the list if they are a multiple\
    \ of 4. Do not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the squares and cubes of the integers in the list. \nThe function\
    \ shall \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32grgzfi.jl:27\nin expression starting at\
    \ /tmp/tmp32grgzfi.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ a multiple of 3 and a multiple of 4. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8a38atu.jl:27\nin expression starting at\
    \ /tmp/tmpc8a38atu.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze7nexlh.jl:27\nin expression starting at\
    \ /tmp/tmpze7nexlh.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i^2\n        else\n         \
    \   sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of integers\
    \ whose entries are all even.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxasdyfp.jl:25\nin expression starting at\
    \ /tmp/tmpqxasdyfp.jl:25\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum += x*x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list as an argument and returns a list where all entries are multiplied by\
    \ 2 except for the entries that are multiples of 3. \n    \n    Examples:\n  \
    \  >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_u53k3le.jl:27\nin expression starting at\
    \ /tmp/tmp_u53k3le.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    \n    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a list of integers and return a list of integers whose entries are\
    \ all positive.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksgzg26b.jl:28\nin expression starting at\
    \ /tmp/tmpksgzg26b.jl:28\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 7: Write a function that will\
    \ take a list of integers and will return the sum of all entries in the list \n\
    \    that are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ye_gpvt.jl:27\nin expression starting at\
    \ /tmp/tmp2ye_gpvt.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the entries in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqdg1mxt.jl:27\nin expression starting at\
    \ /tmp/tmptqdg1mxt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the product of all entries in the list. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_b7tnca6.jl:27\nin expression starting at\
    \ /tmp/tmp_b7tnca6.jl:27\n"
  stdout: ''
  timestamp: 1659823012
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9gw8age.jl:27\nin expression starting at\
    \ /tmp/tmpz9gw8age.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1bw8n36t.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmp1bw8n36t.jl:32\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:32 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test Failed at /tmp/tmp1bw8n36t.jl:33\n\
    \  Expression: candidate([1, 4, 9]) == 14\n   Evaluated: 146 == 14\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1bw8n36t.jl:36\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test Failed at /tmp/tmp1bw8n36t.jl:38\n\
    \  Expression: candidate([-1, -5, 2, -1, -5]) == -126\n   Evaluated: -10 == -126\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1bw8n36t.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1bw8n36t.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1bw8n36t.jl:39\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inli"
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n \
    \           sum = sum + i^3\n        else\n            sum = sum + i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all entries that are a multiple of 3. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the sum of all entries. \nThe function shall then\
    \ return the sum of all entries squared. \nThe function shall then return the\
    \ product of all entries. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ cubed. \nThe function shall then return the product of all entries cubed. \n\
    The function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries squared. \nThe function shall then\
    \ return the product of all entries squared. \nThe function shall then return\
    \ the product of all entries squared. \nThe function shall then return the product\
    \ of all entries squared. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ squared. \nThe function shall then return the product of all entries squared.\
    \ \nThe function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries squared. \nThe function shall then\
    \ return the product of all entries squared. \nThe function shall then return\
    \ the product of all entries squared. \nThe function shall then return the product\
    \ of all entries squared. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ squared. \nThe function shall then return the product of all entries squared.\
    \ \nThe function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries squared. \nThe function shall then\
    \ return the product of all entries squared. \nThe function shall then return\
    \ the product of all entries squared. \nThe function shall then return the product\
    \ of all entries squared. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ squared. \nThe function shall then return the product of all entries squared.\
    \ \nThe function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries squared. \nThe function shall then\
    \ return the product of all entries squared. \nThe function shall then return\
    \ the product of all entries squared\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdllln7fc.jl:27\nin expression starting at\
    \ /tmp/tmpdllln7fc.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and a number\
    \ as input. The function will then return a list of integers whose entries are\
    \ \n    equal to the square of the entries in the list whose indexes are a multiple\
    \ of $number$. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> number = 2\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1,\
    \ 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1,\
    \ 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1,\
    \ 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1,\
    \ 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb7xjgtw.jl:27\nin expression starting at\
    \ /tmp/tmpcb7xjgtw.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a new list with only the even entries of\
    \ the original list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n\
    \    >>> lst\n    [2, 4, 6]\n    >>> lst\n    []\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpax2xuflp.jl:27\nin expression starting at\
    \ /tmp/tmpax2xuflp.jl:27\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i^2\n        else\n         \
    \   sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. The function shall then return\
    \ the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jn23s41.jl:25\nin expression starting at\
    \ /tmp/tmp8jn23s41.jl:25\n"
  stdout: ''
  timestamp: 1659823011
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the sum of all entries in the list that are a\
    \ multiple of 3. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 5. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 6. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 7. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 8. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 9. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 10. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 11. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 12. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 13. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 14. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 15. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 16. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 17. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 18. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 19. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 20. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qtbpsp8.jl:27\nin expression starting at\
    \ /tmp/tmp5qtbpsp8.jl:27\n"
  stdout: ''
  timestamp: 1659823012
- exit_code: 1
  program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n\
    function sum_squares(lst::Vector{Int64})::Int64 \n    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum -= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return the\
    \ sum of all entries in the list whose index is divisible by 3. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vi2zpqp.jl:25\nin expression starting at\
    \ /tmp/tmp5vi2zpqp.jl:25\n"
  stdout: ''
  timestamp: 1659823012
