name: HumanEval_119_match_parens
language: jl
prompt: "\"\"\"\n    You are given a list of two strings, both strings consist of\
  \ open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check\
  \ if it is possible to concatenate the two strings in\n    some order, that the\
  \ resulting string will be good.\n    A string S is considered to be good if and\
  \ only if all parentheses in S\n    are balanced. For example: the string '(())()'\
  \ is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens([\"\
  ()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\")\", \")\"])\n    \"No\"\n\
  \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
  ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
  (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) ==\
  \ \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
  ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
  )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\"\
  , \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"\
  (\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
completions: ["    \n    stack = Stack()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns a string with all the letters capitalized.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"", "    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>", "    \n    if length(lst) ==\
    \ 0 \n        return \"No\"\n    end1 = lst[end-1]\n    if end1 == \"(\" \n  \
    \      return \"Yes\"\n    end2 = lst[end-2]\n    if end2 == \")\" \n        return\
    \ \"Yes\"\n    end3 = lst[end-3]\n    if end3 == \"(\" \n        return \"Yes\"\
    \n    end4 = lst[end-4]\n    if end4 == \")\" \n        return \"Yes\"\n    end5\
    \ = lst[end-5]\n    if end5 == \"(\" \n        return \"Yes\"\n    end6 = lst[end-6]\n\
    \    if end6 == \")\" \n        return \"Yes\"\n    end7 = lst[end-7]\n    if\
    \ end7 == \"(\" \n        return \"Yes\"\n    end8 = lst[end-8]\n    if end8 ==\
    \ \")\" \n        return \"Yes\"\n    end9 = lst[end-9]\n    if end9 == \"(\"\
    \ \n        return \"Yes\"\n    end10 = lst[end-10]\n    if end10 == \")\" \n\
    \        return \"Yes\"\n    end11 = lst[end-11]\n    if end11 == \"(\" \n   \
    \     return \"Yes\"\n    end12 = lst[end-12]\n    if end12 == \")\" \n      \
    \  return \"Yes\"\n    end13 = lst[end-13]\n    if end13 == \"(\" \n        return\
    \ \"Yes\"\n    end14 = lst[end-14]\n    if end14 == \")\" \n        return \"\
    Yes\"\n    end15 = lst[end-15]\n    if end15 == \"(\" \n        return \"Yes\"\
    \n    end16 = lst[end-16]\n    if end16 == \")\" \n        return \"Yes\"\n  \
    \  end17 = lst[end-17]\n    if end17 == \"(\" \n        return \"Yes\"\n    end18\
    \ = lst[end-18]\n    if end18 == \")\" \n        return \"Yes\"\n    end19 = lst[end-19]\n\
    \    if end19 == \"(\" \n        return \"Yes\"\n    end20 = lst[end-20]\n   \
    \ if end20 == \")\" \n        return \"Yes\"\n    end21 = lst[end-21]\n    if\
    \ end21 == \"(\" \n        return \"Yes\"\n    end22 = lst[end-22]\n    if end22\
    \ == \")\" \n        return \"Yes\"\n    end23 = lst[end-23]\n    if end23 ==\
    \ \"(\" \n        return \"Yes\"\n    end24 = lst[end-24]\n    if end24 == \"\
    )\" \n        return \"Yes\"\n    end25 = lst[end-25]\n    if end25 == \"(\" \n\
    \        return \"Yes\"\n    end26 = lst[end-26]\n    if end26 == \")\" ", " \
    \   stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.0>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns a new string where all occurrences of \"(\" have been replaced by\
    \ \"(\" and all occurrences of \")\" have been replaced by \")\".", "    stack\
    \ = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in lst\n     \
    \   if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n  \
    \          if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis doesn't work\
    \ if the strings are of different lengths. For example, `match_parens([\"()(\"\
    , \")\"])` returns `\"No\"` instead of `\"Yes\"`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the problem you mentioned\n<|/ c |>\n<| a tags=string,julia |>\nHere is a solution\
    \ using regular expressions:\n<code>", "    \n    stack = Stack()\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of parentheses.", "    stack = Stack()\n    stack.append(lst)\n \
    \   \n    while !isempty(stack)\n        str = pop!(stack)\n        if str ==\
    \ \"(\"\n            push!(stack, str)\n        elseif str == \")\"\n        \
    \    if isempty(stack)\n                return \"Yes\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return \"\
    No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a binary tree is balanced.", "   \
    \ stack = Stack{String}()\n    for s in lst\n        if s == \"(\"\n         \
    \   push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Stack()\n    \n  \
    \  for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if and only if it is a whole number greater than 1.\nThe\
    \ function should take one argument and return a boolean.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nPart III: Matching Parentheses\nNow let's try to solve the\
    \ problem using Julia's built-in string manipulation functions. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defining a function which can match parentheses in a string. We'll start by\
    \ defin", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    stack = Vector{String}()\n    stack\
    \ = push!(stack, \"\")\n    stack = push!(stack, \"\")\n    \n    for i in lst\n\
    \        if i == \"(\"\n            push!(stack, \"\")\n        elseif i == \"\
    )\"\n            if length(stack) == 0 \n                return \"No\"\n     \
    \       else\n                pop!(stack)\n            end\n        elseif i ==\
    \ \"\"\n            if length(stack) == 0 \n                return \"No\"\n  \
    \          else\n                pop!(stack)\n            end\n        else\n\
    \            push!(stack, i)\n        end\n    end\n    return \"Yes\"\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a number is prime. \nA prime number is a\
    \ natural number greater than 1 that has no positive divisors other than 1 and\
    \ itself.\nA prime number is not divisible by any number other than 1 and itself.\n\
    A prime number is not divisible by any other number other than 1 and itself.\n\
    A prime number is called a prime number if its only positive divisor is 1 and\
    \ itself.\nA prime number is called a prime number if its only positive divisor\
    \ is 1 and itself.\nA prime number is called a prime number if its only positive\
    \ divisor is 1 and itself.\nA prime number is called a prime number if its only\
    \ positive divisor is 1 and itself.\nA prime number is called a prime number if\
    \ its only positive divisor is 1 and itself.\nA prime number is called a prime\
    \ number if its only positive divisor is 1 and itself.\nA prime number is called\
    \ a prime number if its only positive divisor is 1 and itself.\nA prime number\
    \ is called a prime number if its only positive divisor is 1 and itself.\nA prime\
    \ number is called a prime number if its only positive divisor is 1 and itself.\n\
    A prime number is called a prime number if its only positive divisor is 1 and\
    \ itself.\nA prime number is called a prime number if its only positive divisor\
    \ is 1 and itself.\nA prime number is called a prime number if its only positive\
    \ divisor is 1 and itself.\nA prime number is called a prime number if its only\
    \ positive divisor is 1 and itself.\nA prime number is called a prime number if\
    \ its only positive divisor is 1 and itself.\nA prime number is called a prime\
    \ number if its only positive divisor is 1 and itself.\nA prime number is called\
    \ a prime number if its only positive divisor is 1 and itself.\nA prime number\
    \ is called a prime number if its only positive divisor is 1 and itself.\nA prime\
    \ number is called a prime ", "    \n    stack = Vector{String}()\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.", "    stack = Vector{String}()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a given string is a valid mathematical expression. \nThe string can\
    \ contain any characters, including parentheses.", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    stack = push!(stack, \"\")\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            stack = push!(stack, s)\n     \
    \   elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n        if s\
    \ == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n         \
    \   if isempty(stack)\n                return \"No\"\n            else\n     \
    \           pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"", "    \n    stack = Vector{String}()\n    \n   \
    \ for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()", "    \n    stack\
    \ = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in it.", "    stack = Stack()\n    stack.append(lst[1])\n\
    \    \n    for i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n\
    \        elseif i == \")\"\n            if stack.pop() != i\n                return\
    \ \"No\"\n            else\n                stack.pop()\n            end\n   \
    \     end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nA number is prime if and only if it is a whole number greater\
    \ than 1.\nThe number 2 is considered a prime number.\nThe number 3 is considered\
    \ a prime number.\nThe number 5 is considered a prime number.\nThe number 7 is\
    \ considered a prime number.\nThe number 11 is considered a prime number.\nThe\
    \ number 13 is considered a prime number.\nThe number 17 is considered a prime\
    \ number.\nThe number 19 is considered a prime number.\nThe number 23 is considered\
    \ a prime number.\nThe number 29 is considered a prime number.\nThe number 31\
    \ is considered a prime number.\nThe number 37 is considered a prime number.\n\
    The number 41 is considered a prime number.\nThe number 43 is considered a prime\
    \ number.\nThe number 47 is considered a prime number.\nThe number 53 is considered\
    \ a prime number.\nThe number 59 is considered a prime number.\nThe number 61\n\
    The number 67 is considered a prime number.\nThe number 71 is considered a prime\
    \ number.\nThe number 73 is considered a prime number.\nThe number 79 is considered\
    \ a prime number.\nThe number 83 is considered a prime number.\nThe number 89\
    \ is considered a prime number.\nThe number 97 is considered a prime number.\n\
    The number 101\nThe number 103 is considered a prime number.\nThe number 107 is\
    \ considered a prime number.\nThe number 109 is considered a prime number.\nThe\
    \ number 113 is considered a prime number.\nThe number 127 is considered a prime\
    \ number.\nThe number 131 is considered a prime number.\nThe number 137 is considered\
    \ a prime number.\nThe number 139 is considered a prime number.\nThe number 149\
    \ is considered a prime number.\nThe number 151 is considered a prime number.\n\
    The number 157 is considered a prime number.\nThe number 163 is considered a prime\
    \ number.\nThe number 167 is considered a prime number.\nThe number 173 is considered\
    \ a prime number.\nThe number 179 is considered a prime number.\nThe number 181\
    \ is considered a prime number.\nThe number 191 is ", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that checks if a binary tree is\
    \ balanced.", "    \n    if lst.size == 0\n        return \"No\"\n    \n    if\
    \ lst.size == 1\n        if lst[0] == \"(\"\n            return \"Yes\"\n    \
    \    else\n            return \"No\"\n    end\n    \n    stack = Vector{String}()\n\
    \    \n    for x in lst\n        if x == \"(\"\n            push!(stack, x)\n\
    \        elseif x == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"No\"\n    else\n\
    \        return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", "    \n    if\
    \ length(lst) == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n \
    \       if lst[1] == \"(\" \n            return \"Yes\"\n        else \n     \
    \       return \"No\"\n    end\n    \n    if lst[1] == \"(\" \n        if lst[2]\
    \ == \")\" \n            return \"Yes\"\n        else \n            return \"\
    No\"\n    end\n    \n    if lst[2] == \")\" \n        if lst[1] == \")\" \n  \
    \          return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"(\" and lst[2] == \")\" \n        return \"Yes\"\n \
    \   end\n    \n    if lst[1] == \")\" and lst[2] == \"(\" \n        return \"\
    Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \")\" \n        return\
    \ \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2] == \"(\" \n      \
    \  return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \"(\" \n\
    \        return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2] == \"\
    )\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2]\
    \ == \")\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and\
    \ lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"\
    )\" and lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if lst[1]\
    \ == \"(\" and lst[2] == \")\" \n        return \"Yes\"\n    end\n    \n    if\
    \ lst[1] == \")\" and lst[2] == \")\" \n        return \"Yes\"\n    end\n    \n\
    \    if lst[1] == \"(\" and lst[2] == \"(\" \n        return \"Yes\"\n    end\n\
    \    \n    if lst[1] == \")\" and lst[2] == \"(\" \n        return \"Yes\"\n \
    \   end\n    \n    if lst[1] == \"(\" and lst[2] == \")\" \n        return \"\
    Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \")\" \n        return\
    \ \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2] == \"(\" \n      \
    \  return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2] == \"(\" \n\
    \        return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and lst[2] == \"\
    )\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \")\" and lst[2]\
    \ == \")\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"(\" and\
    \ lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if lst[1] == \"\
    )\" and lst[2] == \"(\" \n        return \"Yes\"\n    end\n    \n    if lst[1]\
    \ == \"(\" and lst", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"", "    stack = Vector{String}()\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime\
    \ or not. \nThe function should take one integer number as input and return 'Yes'\
    \ if it's prime and 'No' otherwise.", "    \n    stack = Vector{String}()\n  \
    \  \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n  \
    \      elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of occurrences of its first character in that string.",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nA prime number is not divisible by any number\
    \ other than 1 and itself.\nA prime number is not divisible by any other number.\n\
    A prime number is called a prime number if all prime factors of the number are\
    \ also prime.\nA prime number is called a prime number if all prime factors of\
    \ the number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if all prime factors of the number are also prime and\
    \ their sum is equal to the number.\nA prime number is called a prime number if\
    \ all prime factors of the number are also prime and their sum is equal to the\
    \ number.\nA prime number is called a prime number if all prime factors of the\
    \ number are also prime and their sum is equal to the number.\nA prime number\
    \ is called a prime number if ", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime.\
    \ You may use any number theoretic function you like.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime.\
    \ You may use any number as input.", "    \n    stack = Stack()\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    \n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    stack.append(lst[1])\n    for i in lst[2:end]\n      \
    \  if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\n   \
    \         if stack.pop() != i\n                return \"No\"\n            else\n\
    \                return \"Yes\"\n        end\n    end\n    return \"No\"\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis code doesn't work. Try it with `match_parens([\"\
    ()(\", \")\"])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the test\
    \ case you mentioned.\n<|/ c |>\n<| c |>\nThe test case you mentioned doesn't\
    \ work. Try it with `match_parens([\"()(\", \")\"])`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case you mentioned.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. I added the test case you mentioned.\n<|/ c |>\n<| a\
    \ tags=string,julia,recursion |>\nI believe this can be solved using regular expressions:\n\
    <code>", "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack\
    \ = push!(stack, \"\")\n    for i in lst\n        if i == \"(\"\n            push!(stack,\
    \ \"\")\n        elseif i == \")\"\n            if isempty(stack)\n          \
    \      return \"No\"\n            else\n                pop!(stack)\n        \
    \    end\n        else\n            push!(stack, i)\n        end\n    end\n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree is\
    \ a binary search tree. Assume that the tree is balanced.", "    \n    stack =\
    \ Stack()\n    \n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\
    \n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_paren", "    \n    stack = Stack()\n    \n    for s in lst\n        if s\
    \ == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n         \
    \   if isempty(stack)\n                return \"No\"\n            else\n     \
    \           pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. You may use any number as input.", "    stack =\
    \ Vector{String}()\n    stack = push!(stack, \"\")\n    stack = push!(stack, \"\
    \")\n    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            pop!(stack)\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            push!(stack, s)\n        end\n   \
    \ end\n    \n    if isempty(stack)\n        return \"No\"\n    else\n        return\
    \ \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"", " \
    \   stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n      \
    \      push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell", "    \n    stack = Stack()\n    for s\
    \ in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s\
    \ == \")\"\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        else\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.0>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.0>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime or not. Your function should take in a number as\
    \ an argument and return a string \"Yes\" or \"No\".", "    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a binary tree is balanced.", "    \n    if\
    \ length(lst) == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n \
    \       if lst[1] == \"(\" \n            return \"Yes\"\n        else \n     \
    \       return \"No\"\n    end\n    \n    if lst[1] == \"(\" \n        match_parens(lst[2:end])\n\
    \    else \n        match_parens(lst[1:end-1])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</", "    \n    stack = Vector{String}()\n    \n    for s in lst\n       \
    \ if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of occurrences of every character\
    \ in the string. For example, the string \"abcabc\" should return [('a', 3), ('b',\
    \ 3), ('c', 3)]", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n\
    \    for elem in lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n\
    \        elseif elem == \")\"\n            if stack.pop() == elem\n          \
    \      return \"Yes\"\n            else\n                return \"No\"\n     \
    \   end\n    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nThe function should take one argument, an integer number. \nThe function should\
    \ return 'Yes' if number is prime and 'No' otherwise.", "    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in lower case.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()",
  "    \n    if lst.size == 0\n        return \"No\"\n    \n    if lst.size == 1\n\
    \        if lst[0] == \"()\"\n            return \"Yes\"\n        else\n     \
    \       return \"No\"\n    end\n    \n    stack = Vector{String}()\n    \n   \
    \ for x in lst\n        if x == \"(\"\n            push!(stack, x)\n        elseif\
    \ x == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"No\"\n    else\n        return \"Yes\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()", "    \n    stack = Vector{String}()\n    \n    for s\
    \ in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s\
    \ == \")\"\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        else\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ You may want to use the\nisqrt function from the MATH package. You may want\
    \ to check out this discussion.", "    stack = Vector{String}()\n    stack = push!(stack,\
    \ \"\")\n    stack = push!(stack, \"\")\n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. Recall\
    \ that prime numbers are only divisible by 1 and themselves.", "    \n    stack\
    \ = Stack()\n    \n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of occurrences of 'a' in the string.", "    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()",
  "    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=juli", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a palindrome. Palindromes are strings that read the same backward\
    \ as forward.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", "   \
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n\
    \        if elem == \"(\"\n            stack.append(elem)\n        elseif elem\
    \ == \")\"\n            if stack.pop() != elem\n                return \"No\"\n\
    \            else\n                stack.pop()\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    stack = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n\
    \    \n    for paren in lst[1]\n        if paren == \"(\" \n            stack.append(paren)\n\
    \        elseif paren == \")\"\n            if stack.pop() == \"(\"\n        \
    \        stack.pop()\n            else\n                return \"No\"\n      \
    \      end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is prime. \nA prime number is a natural number greater\
    \ than 1 that has no positive divisors other than 1 and itself.", "    \n    stack\
    \ = Stack()\n    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n    \
    \    if elem == \"(\"\n            stack.append(elem)\n        elseif elem ==\
    \ \")\"\n            if stack.pop() != elem\n                return \"No\"\n \
    \           else\n                stack.pop()\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ You may use the\nfollowing definition of a prime:", "    \n    if lst.length==0\n\
    \        return \"No\"\n    \n    if lst.length==1\n        return \"Yes\"\n \
    \   \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n    if\
    \ lst[1]=='('\n        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n    if lst[1]==')'\n\
    \        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n        return\
    \ match_parens(lst[2:end])\n    \n    if lst[1]==')'\n        return match_parens(lst[2:end])\n\
    \    \n    if lst[1]=='('\n        return match_parens(lst[2:end])\n    \n   \
    \ if lst[1]==')'\n        return match_parens(lst[2:end])\n    \n    if lst[1]=='('\n\
    \        return match_parens(lst", "    \n    stack = Vector{String}()\n    \n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given string\
    \ is a palindrome or not.", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. Your function should take in a number as\
    \ its only argument. Your function should return 'Yes' if a number is prime and\
    \ 'No' otherwise.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. You may want to use the following formula to check if a number is\
    \ prime:", "    \n    stack = Vector{String}()\n    \n    for s in lst\n     \
    \   if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n  \
    \          if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack{String}()\n    for s in lst\n       \
    \ if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n\
    \    for i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n\
    \        elseif i == \")\"\n            if stack.pop() == \"(\"\n            \
    \    stack.pop()\n            else\n                return \"No\"\n          \
    \  end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is even.",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string and returns the number of words in the string. \nWrite a function\
    \ that takes a string and returns the number of lines in the string. \nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not spaces. \nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces that do not end with a period. \nWrite a function\
    \ that takes a string and returns the number of words in the string that are not\
    \ spaces that do not end with a period. \nWrite a function that takes a string\
    \ and returns the number of lines in the string that are not spaces that do not\
    \ end with a period. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces that do not end with a period\
    \ and that do not start with a period. \nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces that do not\
    \ end with a period and that do not start with a period. \nWrite a function that\
    \ takes a string and returns the number of lines in the string that are not spaces\
    \ that do not end with a period and that do not start with a period. \nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces that do not end with a period and that do not start with\
    \ a period and that do not end with a period. \nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces that\
    \ do not end with a period and that do not start with a period and that do not\
    \ end with a period. \nWrite a function that takes a string and returns the number\
    \ of lines in the string that are not spaces that do not end with a period and\
    \ that do not start with a period and that do not end with a period. \nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not spaces that do not end with a period and that do not start with\
    \ a period and that do not end with a period and that do not start with a ", " \
    \   stack = Vector{String}()\n    stack = push!(stack, \"\")\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ You may assume that all numbers are positive.", "    stack = Stack()\n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string where all occurrences of \"(\" have been replaced by \"((\", and all\
    \ occurrences of \")\" have been replaced by \")(\". For example, given \"(())()\"\
    , the function should return \"(()())\".", "    stack = Stack()\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. Your function should take in a number as input and output \"Yes\" if\
    \ it's a prime number, and \"No\" otherwise.", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    for s in lst\n        if s == \"(\"\n   \
    \         push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", "   \
    \ \n    stack = Stack()\n    for s in lst\n        if s == \"(\"\n           \
    \ push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise: Write a function that checks if a binary\
    \ tree is balanced.", "    stack = Vector{String}()\n    for s in lst\n      \
    \  if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n   \
    \         if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime or not.\
    \ You may use the\nfollowing algorithm:", "    \n    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    \n    for s in lst\n        if s == \"(\"\
    \n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        elseif isempty(stack)\n            return \"No\"\n \
    \       else\n            pop!(stack)\n            push!(stack, s)\n        end\n\
    \    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"", "    stack = Vector{String}()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. You may use any number as input.", "    \n    stack\
    \ = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n        \n\
    \        str = pop(stack)\n        \n        if str == \"(\"\n            push!(stack,\
    \ str)\n        elseif str == \")\"\n            if !isempty(stack)\n        \
    \        pop!(stack)\n            else\n                return \"No\"\n      \
    \      end\n        else\n            return \"No\"\n        end\n    end\n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n   \
    \ for i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n  \
    \      elseif i == \")\"\n            if stack.size == 0\n                return\
    \ \"No\"\n            else\n                popped = stack.pop()\n           \
    \     if popped != \"(\"\n                    return \"No\"\n                else\n\
    \                    stack.append(i)\n            end\n        else\n        \
    \    if stack.size == 0\n                return \"No\"\n            else\n   \
    \             popped = stack.pop()\n                if popped != i\n         \
    \           return \"No\"\n                else\n                    stack.append(i)\n\
    \                end\n            end\n        end\n    end\n    return \"Yes\"\
    \nend\n</cell>\n<code language=julia-1.5>", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.", "    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>", "    \n    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. Your function should take in a number as\
    \ an argument and return a boolean value.", "    stack = Stack()\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing algorithm:", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n        if elem ==\
    \ \"(\"\n            stack.append(elem)\n        elseif elem == \")\"\n      \
    \      if stack.pop() != elem\n                return \"No\"\n            else\n\
    \                return \"Yes\"\n        end\n    end\n    return \"No\"\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. You may\
    \ want to use the\nfollowing functions:", "    \n    stack = Stack()\n    \n \
    \   for s in lst\n        if s == \"(\"\n            push!(stack, s)\n       \
    \ elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"()\"])\n</cell", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    \n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. You may\
    \ use any number as input.", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing formula to determine whether a number is\
    \ prime or not:", "    \n    if length(lst) == 0 \n        return \"No\"\n   \
    \ \n    if length(lst) == 1 \n        if lst[1] == \"(\" \n            return\
    \ \"Yes\"\n        else \n            return \"No\"\n    end", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is even.", "    stack = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n\
    \    \n    while !isempty(stack)\n        top = stack.pop()\n        if top ==\
    \ \"(\"\n            stack.append(top)\n        elseif top == \")\"\n        \
    \    if isempty(stack)\n                return \"Yes\"\n            else\n   \
    \             stack.pop()\n            end\n        else\n            return \"\
    No\"\n        end\n    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. Your function should take one integer number as input and return 'Yes'\
    \ if it's prime and 'No' otherwise.", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise: Write a function that checks if a binary tree is balanced.",
  "    stack = Stack{String}()\n    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n\
    \        if elem == \"(\"\n            stack.append(elem)\n        elseif elem\
    \ == \")\"\n            if stack.pop() != elem\n                return \"No\"\n\
    \            else\n                stack.pop()\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime.\
    \ Your function should take in a number as an argument and return a boolean.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nThe function should take one integer number as input and return\
    \ 'Yes' if it is prime and 'No' otherwise.", "    stack = Stack()\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. Your function should take in a single number as an argument and return\
    \ a boolean value.", "    \n    if lst.size == 0\n        return \"No\"\n    \n\
    \    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise\nWrite a function that takes a list of\
    \ strings as input and returns a list of strings as output. \nThe function should\
    \ return a list of strings that satisfy the conditions described above. \nThe\
    \ function should return an empty list if there are no strings that satisfy the\
    \ conditions.", "    stack = Stack()\n    stack.append(\"\")\n    stack.append(\"\
    \")\n    for i in lst\n        if i == \"(\"\n            stack.append(\"\")\n\
    \        elseif i == \")\"\n            if stack.pop() == \"\"\n             \
    \   return \"No\"\n            else\n                stack.pop()\n        end\n\
    \        stack[end] = i\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself. \nThe number 5 is considered a prime number.",
  "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack = push!(stack,\
    \ \"\")\n    for i in lst\n        if i == \"(\"\n            push!(stack, \"\"\
    )\n        elseif i == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            push!(stack, i)\n        end\n    end\n    if isempty(stack)\n\
    \        return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `match_parens([\")\", \"\
    )\"])` returns `\"No\"`, but `match_parens([\"()(\", \")\"])` returns `\"Yes\"\
    `.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Did you copy and paste my\
    \ code exactly?\n<|/ c |>\n<| c |>\nYes, I did. I'm running Julia 0.6.0.\n<|/\
    \ c |>\n<| c |>\nI tested it on 0.6.0 as well. Maybe the problem is with your\
    \ version of Julia?\n<|/ c |>\n<| c |>\nI tested it on 0.6.0 as well. Maybe the\
    \ problem is with your version of Julia?\n<|/ c |>\n<| a tags=julia,string |>\n\
    <code>", "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may use the\nfollowing algorithm:", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing algorithm:", "    \n    if length(lst) ==\
    \ 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n        if lst[1]\
    \ == \"(\" \n            return \"Yes\"\n        else \n            return \"\
    No\"\n    end\n    \n    stack = Stack()\n    \n    for x in lst\n        if x\
    \ == \"(\" \n            push!(stack, x)\n        else \n            if x == \"\
    (\" \n                pop!(stack)\n            else\n                if stack\
    \ == [] \n                    return \"No\"\n                else\n          \
    \          pop!(stack)\n                end\n            end\n        end\n  \
    \  end\n    \n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of occurrences of 'a' in that string.", "    \n    stack\
    \ = Stack()\n    stack.append(lst[1])\n    \n    for x in lst[2:end]\n       \
    \ if x == \"(\"\n            stack.append(x)\n        elseif x == \")\"\n    \
    \        if stack.pop() == \"(\"\n                return \"Yes\"\n           \
    \ else\n                return \"No\"\n        end\n    end\n    return \"No\"\
    \nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is prime or not. Your function should\
    \ take one integer number as input and return a string \"Yes\" or \"No\".", " \
    \   \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n   \
    \         push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Vector{String}()\n    stack = push!(stack,\
    \ \"\")\n    stack = push!(stack, \"\")\n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may want to use isPrime() from the Base package.", "  \
    \  stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as an argument and return\
    \ a boolean value.", "    stack = Vector{String}()\n    for s in lst\n       \
    \ if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ You may use the\nfollowing definition of a prime:", "    stack = Stack()\n \
    \   stack.append(lst)\n    \n    while !isempty(stack)\n        str = pop!(stack)\n\
    \        if str == \"(\"\n            push!(stack, str)\n        elseif str ==\
    \ \")\"\n            if isempty(stack)\n                return \"Yes\"\n     \
    \       else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise: Write a function that checks if a binary tree is\
    \ balanced.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as an argument and return\
    \ a boolean value.", "    stack = Vector{String}()\n    stack = push!(stack, \"\
    \")\n    stack = push!(stack, \"\")\n    for s in lst\n        if s == \")\"\n\
    \            stack = pop!(stack)\n        elseif s == \"(\"\n            stack\
    \ = push!(stack, \"\")\n        else\n            stack = push!(stack, s)\n  \
    \      end\n    end\n    if stack[1] == \"\"\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n   \
    \         push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nA prime number is not divisible by any other\
    \ natural number.\nA prime number is not divisible by 1 and itself.\nA prime number\
    \ is not divisible by 1 and itself.\nA prime number is not divisible by 1 and\
    \ itself.\nA prime number is not divisible by 1 and itself.\nA prime number is\
    \ not divisible by 1 and itself.\nA prime number is not divisible by 1 and itself.\n\
    A prime number is not divisible by 1 and itself.\nA prime number is not divisible\
    \ by 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime\
    \ number is not divisible by 1 and itself.\nA prime number is not divisible by\
    \ 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime number\
    \ is not divisible by 1 and itself.\nA prime number is not divisible by 1 and\
    \ itself.\nA prime number is not divisible by 1 and itself.\nA prime number is\
    \ not divisible by 1 and itself.\nA prime number is not divisible by 1 and itself.\n\
    A prime number is not divisible by 1 and itself.\nA prime number is not divisible\
    \ by 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime\
    \ number is not divisible by 1 and itself.\nA prime number is not divisible by\
    \ 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime number\
    \ is not divisible by 1 and itself.\nA prime number is not divisible by 1 and\
    \ itself.\nA prime number is not divisible by 1 and itself.\nA prime number is\
    \ not divisible by 1 and itself.\nA prime number is not divisible by 1 and itself.\n\
    A prime number is not divisible by 1 and itself.\nA prime number is not divisible\
    \ by 1 and itself.\nA prime number is not divisible by 1 and itself.\nA prime\
    \ number is not di", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a given string is a valid mathematical expression.\nA valid mathematical\
    \ expression is one that has only numbers and operators (+, -, *, /).\nThe function\
    \ should return 'Yes' if it is valid, and 'No' otherwise.", "    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise: Write a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a number as input, and return\
    \ 'Yes' if it is prime and 'No' otherwise.", "    stack = Stack()\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis code does not\
    \ work for the example given in the question. `match_parens([\"()(\", \")\"])`\
    \ returns `\"No\"` instead of `\"Yes\"`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code accordingly.\n<|/ c |>\n<| a tags=string,julia |>\n\
    I wrote a recursive solution that works for any number of parentheses:\n<code>",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. Hint: use\
    \ Sieve of Eratosthenes.", "    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a binary tree is balanced.", "   \
    \ stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a valid phone number.\nA valid phone number has the following properties:",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. You may want to use the\nfollowing functions:", "    \n    stack =\
    \ Stack()\n    \n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing definition of a prime:", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.length() == 0\n                return \"No\"\n        \
    \    else\n                popped = stack.pop()\n                if popped ==\
    \ \"(\"\n                    stack.append(i)\n                else\n         \
    \           return \"No\"\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is prime. You may want to use the\n\
    following algorithm:", "    \n    stack = Stack()\n    stack.append(lst[1])\n\
    \    \n    for elem in lst[2:end]\n        if elem == \"(\"\n            stack.append(elem)\n\
    \        elseif elem == \")\"\n            if stack.size == 0\n              \
    \  return \"No\"\n            else\n                stack.pop()\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in that string.", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. Your function should take in a single integer number as an\
    \ argument, and return 'Yes' if it is prime and 'No' otherwise.", "    stack =\
    \ Vector{String}()\n    stack = push!(stack, \"\")\n    for i in lst\n       \
    \ if i == \"(\"\n            push!(stack, \"\")\n        elseif i == \")\"\n \
    \           if length(stack) == 0\n                return \"No\"\n           \
    \ else\n                pop!(stack)\n            end\n        else\n         \
    \   push!(stack, i)\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Stack()\n    \n  \
    \  for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n \
    \       str = pop!(stack)\n        if str == \"(\"\n            push!(stack, str)\n\
    \        elseif str == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of occurrences of the character 'a' in that\
    \ string.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n    \
    \    if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. Your function should take in a number as an argument and return a\
    \ boolean indicating whether it is prime or not.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nA number is prime if and only if it is a whole number greater than\
    \ 1.\nThe number 2 is considered a prime number.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    stack = Vector{String}()\n    stack = push!(stack, \"\"\
    )\n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n    \
    \    elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.3>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    ()(\", \")\"])\n</", "    stack = Stack()\n    stack.append(lst[1])\n    stack.append(lst[2])\n\
    \    \n    for i in 1:length(lst)\n        if stack.length() == 0\n          \
    \  return \"No\"\n        if lst[i] == \"(\"\n            stack.append(lst[i])\n\
    \        elseif lst[i] == \")\"\n            if stack.pop() != lst[i]\n      \
    \          return \"No\"\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_parens(lst::Vector{String})::String\
    \ \n    match_parens(lst::Vector{String})::String \n    match_paren", "    \n\
    \    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\nA simple\
    \ recursive function will do the trick:\n<code>", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for s in lst[2:end]\n        if s == \"(\"\
    \n            stack.append(s)\n        elseif s == \")\"\n            if stack.length()\
    \ == 0\n                return \"No\"\n            else\n                stack.pop()\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a palindrome.", "    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take in a number as input and return a boolean value.", "    \n    stack\
    \ = Stack()\n    \n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. Recall that prime numbers are only divisible by 1 and themselves.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    stack = push!(stack, \"\")\n    for i in\
    \ lst\n        if i == \"(\"\n            push!(stack, \"\")\n        elseif i\
    \ == \")\"\n            if length(stack) == 0\n                return \"No\"\n\
    \            else\n                pop!(stack)\n            end\n        else\n\
    \            push!(stack, i)\n        end\n    end\n    return \"Yes\"\nend\n\
    </code>\n<|/ a tags=string,julia,regex |>\n<| a tags=string,julia,regex |>\n<code>",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.0>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.0>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. \nThe function should take one argument,\
    \ an integer number. \nThe function should return 'Yes' if and only if the number\
    \ is prime, and return 'No' otherwise.", "    stack = Stack()\n    stack.append(lst[1])\n\
    \    stack.append(lst[2])\n    \n    while !isempty(stack)\n        top = stack.pop()\n\
    \        if top == \"(\"\n            stack.append(lst[1])\n            stack.append(lst[2])\n\
    \        elseif top == \")\"\n            if isempty(stack)\n                return\
    \ \"Yes\"\n            else\n                stack.pop()\n            end\n  \
    \      else\n            push!(stack, top)\n        end\n    end\n    return \"\
    No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime. You may want to\
    \ use the\nfollowing functions:", "    \n    stack = Stack()\n    \n    for s\
    \ in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s\
    \ == \")\"\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        else\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. Recall\
    \ that prime numbers are only divisible by 1 and themselves.", "    stack = Stack()\n\
    \    stack.append(lst)\n    \n    while !isempty(stack)\n        str = pop!(stack)\n\
    \        if str == \"(\"\n            push!(stack, str)\n        elseif str ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        return \"No\"\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"", "    \n    stack =\
    \ Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n          \
    \  push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    stack.append(lst[1])\n \
    \   \n    for i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n\
    \        elseif i == \")\"\n            if stack.length() == 0\n             \
    \   return \"No\"\n            else\n                popped = stack.pop()\n  \
    \              if popped != i\n                    return \"No\"\n           \
    \     end\n            end\n        else\n            if stack.length() == 0\n\
    \                return \"No\"\n            else\n                popped = stack.pop()\n\
    \                if popped != i\n                    return \"No\"\n         \
    \       end\n            end\n        end\n    end\n    return \"Yes\"\nend\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>", "    stack = Stack()\n  \
    \  for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime.\
    \ You may use any number theoretic function you like.", "    \n    if lst.length\
    \ != 2 \n        return \"No\"\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing algorithm:", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is a binary search tree.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    stack = Stack()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. You may want to use isPrime() from Julia's\
    \ Base package.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\
    \n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.", "    stack = Vector{String}()\n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in it.", "    \n    stack = Stack()\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ where all occurrences of '(' and ')' have been replaced by '-'.", "    stack\
    \ = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime. Hint: use Julia's isa() function.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()", "   \
    \ \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n\
    \        if elem == \"(\"\n            stack.append(elem)\n        elseif elem\
    \ == \")\"\n            if stack.pop() != elem\n                return \"No\"\n\
    \            else\n                stack.pop()\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \")\", \"(\",\
    \ \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", ", "    \n    stack = Stack()\n    \n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Stack()\n    stack.append(lst[1])\n\
    \    \n    for x in lst[2:end]\n        if x == \"(\"\n            stack.append(x)\n\
    \        elseif x == \")\"\n            if stack.pop() == \"(\"\n            \
    \    return \"Yes\"\n            else\n                return \"No\"\n       \
    \ end\n    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given string\
    \ is a palindrome or not.", "    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a given string is a valid mathematical expression.\
    \ \nA valid mathematical expression is one that does not contain any unbalanced\
    \ parentheses.", "    \n    stack = Stack()\n    stack.append(lst)\n    \n   \
    \ while !isempty(stack)\n        \n        str = pop!(stack)\n        \n     \
    \   if str == \"(\"\n            push!(stack, str)\n        elseif str == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            return\
    \ \"No\"\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a valid mathematical expression. For example, the string \"(1+2)\"\
    \ is a valid expression, but \"(1+2+3)\" isn't.", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>", "    \n    stack = Vector{String}()\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"", "    \n    stack = Stack()\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
