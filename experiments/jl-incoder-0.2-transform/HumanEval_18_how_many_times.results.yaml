language: jl
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7e4qqe34.jl:24\nin expression starting at\
    \ /tmp/tmp7e4qqe34.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmvf5bqp.jl:23\nin expression starting at\
    \ /tmp/tmpcmvf5bqp.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    return how_many_times(string[1:], substring) + how_many_times(string[:-1],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring as arguments\
    \ and returns the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbptuhp8g.jl:14\nin expression\
    \ starting at /tmp/tmpbptuhp8g.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1:],\
    \ substring[-1:])\n    \n    return how_many_times(string[1:], substring) + how_many_times(string[-1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that counts the number of times a given substring\
    \ appears in a given string. Count overlaping cases.\n>>> count_substring(\"abcabc\"\
    , \"b\")\n2\n>>> count_substring(\"abcabc\", \"bc\")\n1\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_substring(\"\
    abcabc\", \"a\")\n0\n>>> count_substring(\"abcabc\", \"acb\")\n0\n>>> count_substring(\"\
    abcabc\", \"abc\")\n0\n>>> count_substring(\"abcabc\", \"ac\")\n0\n>>> count_\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalpzw5w8.jl:14\nin expression\
    \ starting at /tmp/tmpalpzw5w8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += 1\n            \n            if count == substring.length\n             \
    \   return count\n            \n            if count > substring.length\n    \
    \            return substring.length\n            \n            if substring.length\
    \ == 1\n                return count\n            \n            if substring.length\
    \ == 2\n                return count + 1\n            \n            if substring.length\
    \ == 3\n                return count + 2\n            \n            if substring.length\
    \ == 4\n                return count + 3\n            \n            if substring.length\
    \ == 5\n                return count + 4\n            \n            if substring.length\
    \ == 6\n                return count + 5\n            \n            if substring.length\
    \ == 7\n                return count + 6\n            \n            if substring.length\
    \ == 8\n                return count + 7\n            \n            if substring.length\
    \ == 9\n                return count + 8\n            \n            if substring.length\
    \ == 10\n                return count + 9\n            \n            if substring.length\
    \ == 11\n                return count + 10\n            \n            if substring.length\
    \ == 12\n                return count + 11\n            \n            if substring.length\
    \ == 13\n                return count + 12\n            \n            if substring.length\
    \ == 14\n                return count + 13\n            \n            if substring.length\
    \ == 15\n                return count + 14\n            \n            if substring.length\
    \ == 16\n                return count + 15\n            \n            if substring.length\
    \ == 17\n                return count + 16\n            \n            if substring.length\
    \ == 18\n                return count + 17\n            \n            if substring.length\
    \ == 19\n                return count + 18\n            \n            if substring.length\
    \ == 20\n                return count + 19\n            \n            if substring.length\
    \ == 21\n                return count + 20\n            \n            if substring.length\
    \ == 22\n                return count + 21\n            \n            if substring.length\
    \ == 23\n                return count + 22\n            \n            if substring.length\
    \ == 24\n                return count + 23\n            \n            if substring.length\
    \ == 25\n                return count + 24\n            \n            if substring.length\
    \ == 26\n                return count + 25\n            \n            if substring.length\
    \ == 27\n                return count + 26\n            \n            if substring.length\
    \ == 28\n                return count + 27\n            \n            if substring.length\
    \ == 29\n                return count + 28\n            \n            if substring.length\
    \ == 30\n                return count + 29\n            \n            if substring.length\
    \ == 31\n                return count + 30\n            \n            if substring.length\
    \ == 32\n                return count + 31\n            \n            if substring.length\
    \ == 33\n                return count + 32\n            \n            if substring.length\
    \ == 34\n                return count + 33\n            \n            if substring.length\
    \ == 35\n                return count + 34\n            \n            if substring.length\
    \ == 36\n                return count + 35\n            \n            if substring.length\
    \ == 37\n                return count + \nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4knglw1.jl:1\nin expression starting at /tmp/tmpn4knglw1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1:],\
    \ substring[-1:])\n    \n    if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[-1:], substring[-1:])\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1:],\
    \ substring[-1:])\n    \n    return how_many_times(string[1:], substring) + how_many_times(string[-1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpky9hht_q.jl:14\nin expression\
    \ starting at /tmp/tmpky9hht_q.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwvvxle3.jl:1\nin expression starting at /tmp/tmpdwvvxle3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aa\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"aaa\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"aaaa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaaa\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaaaaaaaa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"aaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaa\" appears in the string. \nWrite a\
    \ function that takes a string and returns the number of times the string \"aaaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaaa\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"\
    aaaaaaaaaaaaaa\" appears in the string. \nWrite a function that takes a string\
    \ and returns the number of times the string \"aaaaaaaaaaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaaaaaaaaaa\" appears in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string \"aaaaaaaaaaaaaaa\"\
    \ appears in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string \"aaaaaaaaaaaaaaa\" appears in the string. \nWrite\
    \ a function that takes a string and returns the number of times the string \"\
    aaaaaaaaaaaaaaa\" appears in the string. \nWrite a function that takes a string\
    \ and returns the number of times the string \"\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurj250b6.jl:12\nin expression starting at\
    \ /tmp/tmpurj250b6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ with all the characters in lowercase and with all the characters in uppercase\
    \ removed. \nFor example \"hello\" -> \"hEllo\"\nFor example \"hello\" -> \"HeLLo\"\
    \nFor example \"hello\" -> \"HellO\"\nFor example \"hello\" -> \"Hello\"\nFor\
    \ example \"hello\" -> \"hello\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"\
    HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\
    \nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor\
    \ example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"\
    HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\
    \nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor\
    \ example \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example\
    \ \"hello\" -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \"hello\"\
    \ -> \"HELLO\"\nFor example \"hello\" -> \"HELLO\"\nFor example \nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfac7c7nm.jl:12\nin expression starting at\
    \ /tmp/tmpfac7c7nm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of times the substring appears within the string.\
    \ Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zh_qfkx.jl:12\nin expression starting at\
    \ /tmp/tmp1zh_qfkx.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwvvxle3.jl:1\nin expression starting at /tmp/tmpdwvvxle3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ substring == string\n        return 1 \n    else if string[1..] == substring\n\
    \        return 1 + how_many_times(string[1..], substring)\n    else\n       \
    \ return how_many_times(string[1..], substring) + how_many_times(string, substring[1..])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dezx1bv.jl:12\nin expression starting at\
    \ /tmp/tmp8dezx1bv.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length == string.length\n        return string.count(substring)\n\
    \    else\n        return how_many_times(string.substring(0,substring.length),\
    \ substring) + how_many_times(string.substring(substring.length), substring)\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd_i_t58.jl:12\nin expression starting at\
    \ /tmp/tmptd_i_t58.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0c_0jbh.jl:12\nin expression starting at\
    \ /tmp/tmpp0c_0jbh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count::Int64\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            if count == substring.length\n                return\
    \ count\n            \n            if substring.length == 1 && substring[0] !=\
    \ char\n                count = 0\n            \n            if substring.length\
    \ == 2 && substring[0] != char\n                count = 0\n            \n    \
    \        if substring.length == 3 && substring[0] != char\n                count\
    \ = 0\n            \n            if substring.length == 4 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 5\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 6 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 7 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 8\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 9 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 10 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 11\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 12 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 13 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 14\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 15 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 16 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 17\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 18 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 19 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 20\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 21 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 22 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 23\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 24 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 25 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 26\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 27 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 28 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 29\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring.length == 30 && substring[0] != char\n                count =\
    \ 0\n            \n            if substring.length == 31 && substring[0] != char\n\
    \                count = 0\n            \n            if substring.length == 32\
    \ && substring[0] != char\n                count = 0\n            \n         \
    \   if substring\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmd4mbbzd.jl:1\nin expression starting at /tmp/tmpmd4mbbzd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyivg1mfg.jl:12\nin expression starting at\
    \ /tmp/tmpyivg1mfg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string[i]\n\
    \            i += 1\n        else\n            i += 1\n            \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl52qc0zi.jl:23\nin expression starting at\
    \ /tmp/tmpl52qc0zi.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n                if char ==\
    \ substring[2]\n                    count = count + 1\n                \n    \
    \                if char == substring[3]\n                        count = count\
    \ + 1\n            \n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0x9yp75t.jl:29\nin expression starting at\
    \ /tmp/tmp0x9yp75t.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += how_many_times(string[1..end], substring)\n        else\n     \
    \       count += how_many_times(string[1..end], substring[1:])\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a substring appears in a string. Count overlaping cases.\n \
    \   >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaa\")\n    3\n    >>>\
    \ how_many_times(\"aaaa\", \"aaaaa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aaaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaa\")\n    3\n \
    \   >>> how_many_times(\"aaaa\", \"aaaaaaab\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbb\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbb\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n    3\n    >>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n    3\n  \
    \  >>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbbbaaaaaaaab\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaaaaaabbbb\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2bsnkjqd.jl:19\nin expression\
    \ starting at /tmp/tmp2bsnkjqd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwvvxle3.jl:1\nin expression starting at /tmp/tmpdwvvxle3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\n>>> how_many_times(\"aaa\",\
    \ \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\"\
    , \"aaa\")\n3\n>>> how_many_times(\"aaaaa\", \"aa\")\n4\n>>> how_many_times(\"\
    aaaaa\", \"aaa\")\n4\n>>> how_many_times(\"aaaaaa\", \"aa\")\n5\n>>> how_many_times(\"\
    aaaaaa\", \"aaa\")\n5\n>>> how_many_times(\"aaaaaaa\", \"aa\")\n6\n>>> how_many_times(\"\
    aaaaaaa\", \"aaa\")\n6\n>>> how_many_times(\"aaaaaaa\", \"aaaa\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaa\")\n7\n>>>\
    \ how_many_times(\"aaaaaaa\", \"aaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaa\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaa\")\n\
    7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaaaa\")\n7\n>>>\
    \ how_many_times(\"aaaaaaa\", \"aaaaaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaaaaa\")\n7\n>>>\
    \ how_many_times(\"\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppl5jo476.jl:24\nin expression starting at\
    \ /tmp/tmppl5jo476.jl:24\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of times a substring\
    \ appears in a given string. Count overlaping cases.\nHint: Use a recursive function.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph83mcshp.jl:12\nin expression starting at\
    \ /tmp/tmph83mcshp.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += how_many_times(string[1..end], substring)\n        elseif char\
    \ == substring[1]\n            count += how_many_times(string[1..end-1], substring)\n\
    \        else\n            count += 1\n    end\n    \n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4yzj705v.jl:26\nin expression starting at\
    \ /tmp/tmp4yzj705v.jl:26\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times a substring appears in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2aeriyz.jl:12\nin expression starting at\
    \ /tmp/tmpk2aeriyz.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuo23cy0b.jl:12\nin expression starting at\
    \ /tmp/tmpuo23cy0b.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(substring)\n        if string[i] == substring[i]\n\
    \            i += 1\n        else\n            i = 0\n        end\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp361dualv.jl:28\nin expression starting at\
    \ /tmp/tmp361dualv.jl:28\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars()\n        if i == substring[0]\n     \
    \       count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_pxcknp.jl:24\nin expression starting at\
    \ /tmp/tmpz_pxcknp.jl:24\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if substring(i, 1) == string\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7v_0716.jl:25\nin expression starting at\
    \ /tmp/tmpv7v_0716.jl:25\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 0, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqac8gcro.jl:1\nin expression starting at /tmp/tmpqac8gcro.jl:1\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a given substring can be found in the original string. Count\
    \ overlaping cases.\n>>> how_many_times_2(\"\", \"a\")\n0\n>>> how_many_times_2(\"\
    aaa\", \"a\")\n3\n>>> how_many_times_2(\"aaaa\", \"aa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaab\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaaba\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaabaaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaab\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaabaaaba\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaabaaabaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaa\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaabaaabaaab\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaabaaabaaaba\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaabaa\")\n\
    3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaabaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaabaaabaaabaaab\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n3\n>>> how_many_times_2(\"aaaa\", \"aaabaaabaaabaaabaa\")\n3\n>>> how_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppl5wd0vq.jl:12\nin expression starting at\
    \ /tmp/tmppl5wd0vq.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnmxybjt.jl:12\nin expression starting at\
    \ /tmp/tmpqnmxybjt.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    substring\
    \ = substring(substring)\n    \n    count = 0\n    \n    for c in string\n   \
    \     if c == substring\n            count += 1\n        else\n            count\
    \ = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpih0owpu9.jl:35\nin expression starting at\
    \ /tmp/tmpih0owpu9.jl:35\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_substring\
    \ > len_string\n        return how_many_times(substring(string, 0, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4pp0f0l.jl:27\nin expression starting at\
    \ /tmp/tmpk4pp0f0l.jl:27\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count::Int64\
    \ = 0\n    \n    i = 0\n    \n    while i < length(substring)\n        if substring(i,\
    \ 1) == string[i]\n            count += 1\n            i += 1\n        else\n\
    \            i = 0\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndn90h5s.jl:28\nin expression starting at\
    \ /tmp/tmpndn90h5s.jl:28\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times the substring appears consecutively.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h38m4t6.jl:12\nin expression starting at\
    \ /tmp/tmp2h38m4t6.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 0, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n<code language=\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdle4irz.jl:27\nin expression starting at\
    \ /tmp/tmpgdle4irz.jl:27\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp846ejji.jl:1\nin expression starting at /tmp/tmpp846ejji.jl:1\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwvvxle3.jl:1\nin expression starting at /tmp/tmpdwvvxle3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>>\
    \ how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"aaa\")\n\
    3\n>>> how_many_times(\"aaaa\", \"aaab\")\n3\n>>> how_many_times(\"aaaa\", \"\
    aaaba\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaab\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaaba\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaa\")\n3\n>>>\
    \ how_many_times(\"aaaa\", \"aaabaaabaaa\")\n3\n>>> how_many_times(\"aaaa\", \"\
    aaabaaabaaab\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaaba\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaa\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaab\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaaaba\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaaabaaab\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0ly6x_b.jl:23\nin expression starting at\
    \ /tmp/tmpp0ly6x_b.jl:23\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count::Int64\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise: Write a function that counts the number of times\
    \ a substring appears in a string. Count overlaping cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxggx9trw.jl:23\nin expression starting at\
    \ /tmp/tmpxggx9trw.jl:23\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \n>>> how_many_times(\"aaaa\", \"a\")\n3\n>>> how_many_times(\"aaa\", \"a\"\
    )\n3\n>>> how_many_times(\"a\", \"a\")\n0\n>>> how_many_times(\"aaaa\", \"b\"\
    )\n0\n>>> how_many_times(\"a\", \"b\")\n0\n>>> how_many_times(\"ab\", \"a\")\n\
    1\n>>> how_many_times(\"ab\", \"b\")\n1\n>>> how_many_times(\"ab\", \"c\")\n0\n\
    >>> how_many_times(\"ab\", \"d\")\n0\n>>> how_many_times(\"ab\", \"e\")\n0\n>>>\
    \ how_many_times(\"ab\", \"f\")\n0\n>>> how_many_times(\"ab\", \"g\")\n0\n>>>\
    \ how_many_times(\"ab\", \"h\")\n0\n>>> how_many_times(\"ab\", \"i\")\n0\n>>>\
    \ how_many_times(\"ab\", \"j\")\n0\n>>> how_many_times(\"ab\", \"k\")\n0\n>>>\
    \ how_many_times(\"ab\", \"l\")\n0\n>>> how_many_times(\"ab\", \"m\")\n0\n>>>\
    \ how_many_times(\"ab\", \"n\")\n0\n>>> how_many_times(\"ab\", \"o\")\n0\n>>>\
    \ how_many_times(\"ab\", \"p\")\n0\n>>> how_many_times(\"ab\", \"q\")\n0\n>>>\
    \ how_many_times(\"ab\", \"r\")\n0\n>>> how_many_times(\"ab\", \"s\")\n0\n>>>\
    \ how_many_times(\"ab\", \"t\")\n0\n>>> how_many_times(\"ab\", \"u\")\n0\n>>>\
    \ how_many_times(\"ab\", \"v\")\n0\n>>> how_many_times(\"ab\", \"w\")\n0\n>>>\
    \ how_many_times(\"ab\", \"x\")\n0\n>>> how_many_times(\"ab\", \"y\")\n0\n>>>\
    \ how_many_times(\"ab\", \"z\")\n0\n>>> how_man\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zzur64z.jl:12\nin expression starting at\
    \ /tmp/tmp6zzur64z.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnl87oaxm.jl:12\nin expression starting at\
    \ /tmp/tmpnl87oaxm.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbfxzovp.jl:24\nin expression starting at\
    \ /tmp/tmpgbfxzovp.jl:24\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3u1dsxn.jl:12\nin expression starting at\
    \ /tmp/tmpp3u1dsxn.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and\
    \ returns a string where all occurrences of \"a\" have been replaced with \"b\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsqjtph2.jl:12\nin expression starting at\
    \ /tmp/tmpwsqjtph2.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0\n        return len_substring\n    \n    if len_substring == 0\n      \
    \  return len_string\n    \n    if substring(0,1) == substring(1,1)\n        return\
    \ how_many_times(substring(1,len_string), substring(1,len_string))\n    \n   \
    \ if substring(0,len_substring-1) == substring(len_substring-1,len_substring)\n\
    \        return how_many_times(substring(1,len_string), substring(len_substring+1,len_string))\n\
    \    \n    if substring(0,len_substring-1) == substring(len_substring-1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(len_substring+1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(1,len_string))\n\
    \    \n    if substring(0,1) == substring(1,len_substring-1)\n        return how_many_times(substring(1,len_string),\
    \ substring(1,len_string))\n    \n    if substring(0,1) == substring(1,len_substring-1)\n\
    \        return how_many_times(substring(1,len_string), substring(\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a7twyx5.jl:68\nin expression starting at\
    \ /tmp/tmp3a7twyx5.jl:68\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring as arguments and returns the number of times the substring appears\
    \ in the string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwe3pa0om.jl:12\nin expression starting at\
    \ /tmp/tmpwe3pa0om.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, if the input string is \"abcabc\", the output should be [('a', 3),\
    \ ('b', 2), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_j1lmmdc.jl:12\nin expression starting at\
    \ /tmp/tmp_j1lmmdc.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaps(string, substring)\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1hk9d_2.jl:1\nin expression starting at /tmp/tmpq1hk9d_2.jl:1\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    j = 0\n    \n    while i < len(string) && j < len(substring)\n        if\
    \ string[i] == substring[j]\n            i += 1\n            j += 1\n        else\n\
    \            if string[i] < substring[j]\n                i += 1\n           \
    \ else\n                j += 1\n        end\n    end\n    \n    return j - i\n\
    end\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a new string where all characters have been\
    \ converted to lowercase and all spaces have been removed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdym6jnpd.jl:33\nin expression starting at\
    \ /tmp/tmpdym6jnpd.jl:33\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvtfgbiw3.jl:1\nin expression starting at /tmp/tmpvtfgbiw3.jl:1\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else if string[1..] == substring\n\
    \        return 1 + how_many_times(string[..-1], substring)\n    else\n      \
    \  return how_many_times(string[1..], substring) + how_many_times(string, substring[1..])\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of times a substring appears within that string.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa89ahxef.jl:12\nin expression starting at\
    \ /tmp/tmpa89ahxef.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6uptj4hf.jl:12\nin expression starting at\
    \ /tmp/tmp6uptj4hf.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vog1ao2.jl:12\nin expression starting at\
    \ /tmp/tmp0vog1ao2.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptfwerbu.jl:12\nin expression starting at\
    \ /tmp/tmpptfwerbu.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ in string\n            i += 1\n        else\n            i = 0\n        end\n\
    \    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaj_ydvk4.jl:25\nin expression starting at\
    \ /tmp/tmpaj_ydvk4.jl:25\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nHint: Use a for loop to iterate\
    \ over the string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidxl0luv.jl:24\nin expression starting at\
    \ /tmp/tmpidxl0luv.jl:24\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    \n    if string[1] == substring[0]\n        return 1 + how_many_times(string[2:],\
    \ substring[1:])\n    \n    if string[1] == substring[1]\n        return 1 + how_many_times(string[2:],\
    \ substring[2:])\n    \n    return how_many_times(string[1:], substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times a substring appears consecutively\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp4e4liz0.jl:14\nin expression\
    \ starting at /tmp/tmpp4e4liz0.jl:14\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else if string[1] == substring[0]\n        return 1 + how_many_times(string[2:],\
    \ substring[1:])\n    else if string[1] == substring[1]\n        return 1 + how_many_times(string[2:],\
    \ substring[2:])\n    else\n        return how_many_times(string[1:], substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkle9zfe.jl:12\nin expression starting at\
    \ /tmp/tmpqkle9zfe.jl:12\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    Hint: Use how_many_times(string, substring)\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ro1p0yz.jl:12\nin expression starting at\
    \ /tmp/tmp6ro1p0yz.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times the substring appears anywhere in the string. Case insensitive.\n>>>\
    \ how_many_times(\"The quick brown fox jumps over the lazy dog\", \"jumps\")\n\
    2\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"Dog\"\
    )\n0\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dog\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"DoG\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n0\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"DoGs\"\
    )\n0\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps over the lazy dog\", \"dogs\"\
    )\n1\n>>> how_many_times(\"The quick brown fox jumps \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28b2b31t.jl:12\nin expression starting at\
    \ /tmp/tmp28b2b31t.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.List\nimport Data.Maybe\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2pcxn8h.jl:12\nin expression starting at\
    \ /tmp/tmpm2pcxn8h.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else if string[0] == substring[2]\n        return 1 + how_many_times(string[1:],\
    \ substring[3:])\n    else if string[0] == substring[3]\n        return 1 + how_many_times(string[1:],\
    \ substring[4:])\n    else if string[0] == substring[4]\n        return 1 + how_many_times(string[1:],\
    \ substring[5:])\n    else if string[0] == substring[5]\n        return 1 + how_many_times(string[1:],\
    \ substring[6:])\n    else if string[0] == substring[6]\n        return 1 + how_many_times(string[1:],\
    \ substring[7:])\n    else if string[0] == substring[7]\n        return 1 + how_many_times(string[1:],\
    \ substring[8:])\n    else if string[0] == substring[8]\n        return 1 + how_many_times(string[1:],\
    \ substring[9:])\n    else if string[0] == substring[9]\n        return 1 + how_many_times(string[1:],\
    \ substring[10:])\n    else if string[0] == substring[10]\n        return 1 +\
    \ how_many_times(string[1:], substring[11:])\n    else if string[0] == substring[11]\n\
    \        return 1 + how_many_times(string[1:], substring[12:])\n    else if string[0]\
    \ == substring[12]\n        return 1 + how_many_times(string[1:], substring[13:])\n\
    \    else if string[0] == substring[13]\n        return 1 + how_many_times(string[1:],\
    \ substring[14:])\n    else if string[0] == substring[14]\n        return 1 +\
    \ how_many_times(string[1:], substring[15:])\n    else if string[0] == substring[15]\n\
    \        return 1 + how_many_times(string[1:], substring[16:])\n    else if string[0]\
    \ == substring[16]\n        return 1 + how_many_times(string[1:], substring[17:])\n\
    \    else if string[0] == substring[17]\n        return 1 + how_many_times(string[1:],\
    \ substring[18:])\n    else if string[0] == substring[18]\n        return 1 +\
    \ how_many_times(string[1:], substring[19:])\n    else if string[0] == substring[19]\n\
    \        return 1 + how_many_times(string[1:], substring[20:])\n    else if string[0]\
    \ == substring[20\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7aq8fq9o.jl:12\nin expression starting at\
    \ /tmp/tmp7aq8fq9o.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    j = string.length()\n    while i < j\n        if string[i] == substring[0]\n\
    \            i += 1\n        elseif string[j] == substring[0]\n            j +=\
    \ 1\n        else\n            if string[i] == substring[1]\n                i\
    \ += 1\n            elseif string[j] == substring[1]\n                j += 1\n\
    \            else\n                if string[i] == substring[2]\n            \
    \        i += 1\n                elseif string[j] == substring[2]\n          \
    \          j += 1\n                else\n                    if string[i] == substring[3]\n\
    \                        i += 1\n                    elseif string[j] == substring[3]\n\
    \                        j += 1\n                    else\n                  \
    \      if string[i] == substring[4]\n                            i += 1\n    \
    \                    elseif string[j] == substring[4]\n                      \
    \      j += 1\n                        else\n                            if string[i]\
    \ == substring[5]\n                                i += 1\n                  \
    \          elseif string[j] == substring[5]\n                                j\
    \ += 1\n                            else\n                                if string[i]\
    \ == substring[6]\n                                    i += 1\n              \
    \                  elseif string[j] == substring[6]\n                        \
    \            j += 1\n                                else\n                  \
    \                  if string[i] == substring[7]\n                            \
    \            i += 1\n                                    elseif string[j] == substring[7]\n\
    \                                        j += 1\n                            \
    \        else\n                                        if string[i] == substring[8]\n\
    \                                            i += 1\n                        \
    \                elseif string[j] == substring[8]\n                          \
    \                  j += 1\n                                        else\n    \
    \                                        if string[i] == substring[9]\n      \
    \                                          i += 1\n                          \
    \                  elseif string[j] == substring[9]\n                        \
    \                        j += 1\n                                            else\n\
    \                                                if string[i] == substring[10]\n\
    \                                                    i += 1\n                \
    \                                elseif string[j] == substring[10]\n         \
    \                                           j += 1\n                         \
    \                       else\n                                               \
    \     if string[i] == substring[11]\n                                        \
    \                i += 1\n                                                    elseif\
    \ string[j] == substring[11]\n                                               \
    \         j += 1\n                                                    else\n \
    \                                                       if string[i] == substring[12]\n\
    \                                                            i += 1\n        \
    \                                                elseif string[j] == substring[12]\n\
    \                                                            j += 1\n        \
    \                                                else\n                      \
    \                                      if string[i] == substring[13]\n       \
    \                                                         i += 1\n           \
    \                                                 elseif string[j] == substring[13]\n\
    \                                                                j += 1\n    \
    \                                                        else\n              \
    \                                                  if string[i] == substring[14]\n\
    \                                                                    i += 1\n\
    \                                                                elseif string[j]\
    \ == substring[14]\n                                                         \
    \           j += 1\n                                                         \
    \       else\n                                                               \
    \     if string[i] == substring[15]\n                                        \
    \                                i += 1\n                                    \
    \                                elseif string[j] == substring[15]\n         \
    \                                                               j += 1\n     \
    \                                                               else\n       \
    \                                                                 if string[i]\
    \ == substring[16]\n                                                         \
    \                   i += 1\n                                                 \
    \                       elseif string[j] == substring[16]\n                  \
    \                                                          j += 1\n          \
    \                                                              else\n        \
    \                                                                    if string[i]\
    \ == substring[17]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvlt5f2ni.jl:1\nin expression starting at /tmp/tmpvlt5f2ni.jl:1\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within it. \nFor example, how_many_times(\"aaaa\"\
    , \"aa\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xf0f7i7.jl:12\nin expression starting at\
    \ /tmp/tmp3xf0f7i7.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring as arguments\
    \ and returns the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwc42q91f.jl:12\nin expression starting at\
    \ /tmp/tmpwc42q91f.jl:12\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    if len_string < len_substring\n        return how_many_times(string,\
    \ substring(string, 0, len_substring))\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr27urkyc.jl:1\nin expression starting at /tmp/tmpr27urkyc.jl:1\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0c_0jbh.jl:12\nin expression starting at\
    \ /tmp/tmpp0c_0jbh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            \n            if char == substring[1]\n        \
    \        count += 1\n                \n                if char == substring[2]\n\
    \                    count += 1\n                    \n                    if\
    \ char == substring[3]\n                        count += 1\n                 \
    \       \n                        if char == substring[4]\n                  \
    \          count += 1\n                            \n                        \
    \    if char == substring[5]\n                                count += 1\n   \
    \                             \n                                if char == substring[6]\n\
    \                                    count += 1\n                            \
    \        \n                                    if char == substring[7]\n     \
    \                                   count += 1\n                             \
    \           \n                                        if char == substring[8]\n\
    \                                            count += 1\n                    \
    \                        \n                                            if char\
    \ == substring[9]\n                                                count += 1\n\
    \                                                \n                          \
    \                      if char == substring[10]\n                            \
    \                        count += 1\n                                        \
    \            \n                                                    if char ==\
    \ substring[11]\n                                                        count\
    \ += 1\n                                                        \n           \
    \                                             if char == substring[12]\n     \
    \                                                       count += 1\n         \
    \                                                   \n                       \
    \                                     if char == substring[13]\n             \
    \                                                   count += 1\n             \
    \                                                   \n                       \
    \                                         if char == substring[14]\n         \
    \                                                           count += 1\n     \
    \                                                               \n           \
    \                                                         if char == substring[15]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[16]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[17]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[18]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpex82d39j.jl:1\nin expression starting at /tmp/tmpex82d39j.jl:1\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpowp9ybj2.jl:23\nin expression starting at\
    \ /tmp/tmpowp9ybj2.jl:23\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.0>\nhow_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"aaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"\
    aaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaaaaa\", \"aaaa\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp872jgl_i.jl:12\nin expression starting at\
    \ /tmp/tmp872jgl_i.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of times each letter appears in the string. Include a\
    \ test case that checks that all letters are in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdasgd71u.jl:12\nin expression starting at\
    \ /tmp/tmpdasgd71u.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   \n    while i < len_substring\n        if string[i] == substring[i]\n    \
    \        i += 1\n        else\n            i = 0\n        end\n    end\n    \n\
    \    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Case insensitive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o8o4x3l.jl:28\nin expression starting at\
    \ /tmp/tmp9o8o4x3l.jl:28\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if string[i] == substring[i]\n\
    \            i += 1\n        else\n            i += 1\n    end\n    \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhb53o7r.jl:24\nin expression starting at\
    \ /tmp/tmpfhb53o7r.jl:24\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9xx5gof.jl:12\nin expression starting at\
    \ /tmp/tmpb9xx5gof.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxngwfix9.jl:24\nin expression starting at\
    \ /tmp/tmpxngwfix9.jl:24\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nFor example: \nhow_many_times(\"\
    aaa\", \"a\") should return 3.\nhow_many_times(\"aaaa\", \"aa\") should return\
    \ 3.\nhow_many_times(\"aaaa\", \"a\") should return 0.\nhow_many_times(\"aaaa\"\
    , \"b\") should return 0.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wcb54g9.jl:12\nin expression starting at\
    \ /tmp/tmp9wcb54g9.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqi870big.jl:1\nin expression starting at /tmp/tmpqi870big.jl:1\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times_2(\"\", \"a\")\n   \
    \ 0\n    >>> how_many_times_2(\"aaa\", \"a\")\n    3\n    >>> how_many_times_2(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4f8pmmwr.jl:23\nin expression starting at\
    \ /tmp/tmp4f8pmmwr.jl:23\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[0] == substring[0]\n        return 1\
    \ + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    \n  \
    \  if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    return how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj7u8fivx.jl:14\nin expression\
    \ starting at /tmp/tmpj7u8fivx.jl:14\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ Ignore case. \nFor example, how_many_times(\"aaaa\", \"aa\") returns 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcndp51vy.jl:12\nin expression starting at\
    \ /tmp/tmpcndp51vy.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   j = 0\n    \n    while i < len_string && j < len_substring\n        if string[i]\
    \ == substring[j]\n            i += 1\n            j += 1\n        else\n    \
    \        if string[i] > substring[j]\n                i += 1\n            else\n\
    \                j += 1\n        end\n    end\n    \n    if i == len_string\n\
    \        return j\n    else\n        return j - i\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ouyj1li.jl:37\nin expression starting at\
    \ /tmp/tmp5ouyj1li.jl:37\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.\nHint: Use a for\
    \ loop to iterate over the characters in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf77z630.jl:24\nin expression starting at\
    \ /tmp/tmplf77z630.jl:24\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    if substring[0]\
    \ == string[0]\n        return 1 + how_many_times(string[1:len_substring], substring[1:])\n\
    \    \n    if substring[0] == string[len_string-1]\n        return 1 + how_many_times(string[1:len_string],\
    \ substring[1:])\n    \n    if substring[0] == string[len_string-1]\n        return\
    \ 1 + how_many_times(string[1:len_string], substring[1:])\n    \n    if substring[0]\
    \ == string[0]\n        return 1 + how_many_times(string[1:len_substring], substring[1:])\n\
    \    \n    return how_many_times(string[1:len_string], substring[1:])\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcglwecr.jl:22\nin expression\
    \ starting at /tmp/tmpwcglwecr.jl:22\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnmxybjt.jl:12\nin expression starting at\
    \ /tmp/tmpqnmxybjt.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\n    >>> how_many_times(\"\"\
    , \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijtre9dq.jl:24\nin expression starting at\
    \ /tmp/tmpijtre9dq.jl:24\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhttz932.jl:12\nin expression starting at\
    \ /tmp/tmpfhttz932.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string. Count overlaping cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhg9cyc8.jl:12\nin expression starting at\
    \ /tmp/tmpnhg9cyc8.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times a substring appears within that string.\
    \ Count overlaping cases.\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaa\")\n3\n>>> how_many_times(\"aaaa\", \"a\")\n0\n>>> how_many_times(\"\
    aaaa\", \"b\")\n0\n>>> how_many_times(\"aaaa\", \"ab\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aba\")\n0\n>>> how_many_times(\"aaaa\", \"abaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaab\")\n0\n>>>\
    \ how_many_times(\"aaaa\", \"abaaaaaaaba\")\n0\n>>> how_many_times(\"aaaa\", \"\
    abaaaaaaabaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaabaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaabaaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaab\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaaba\")\n0\n>>> how_many_times(\"\
    aaaa\", \"abaaaaaaabaaaaaaabaa\")\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaabaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"abaaaaaaabaaaaaaabaaaa\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jqxovcu.jl:12\nin expression starting at\
    \ /tmp/tmp7jqxovcu.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qts8x43.jl:12\nin expression starting at\
    \ /tmp/tmp3qts8x43.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nFor example,\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbufnmkh5.jl:12\nin expression starting at\
    \ /tmp/tmpbufnmkh5.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    if string[0] ==\
    \ substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    \n    if string[len_string-1] == substring[len_substring-1]\n     \
    \   return 1 + how_many_times(string[len_string:end], substring[len_substring:end])\n\
    \    \n    \n    if string[len_string-1] == substring[0]\n        return 1 + how_many_times(string[len_string:end],\
    \ substring[1:])\n    \n    \n    if string[0] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[len_substring:])\n  \
    \  \n    \n    if string[len_string-1] == substring[0]\n        return 1 + how_many_times(string[len_string:end],\
    \ substring[1:])\n    \n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[len_string:end], substring[len_substring:])\n\
    \    \n    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    \n    if string[len_string-1] == substring[0]\n  \
    \      return 1 + how_many_times(string[len_string:end], substring[1:])\n    \n\
    \    \n    if string[len_string-1] == substring[len_substring-1]\n        return\
    \ 1 + how_many_times(string[len_string:end], substring[len_substring:])\n    \n\
    \    \n    if string[0] == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[len_substring:])\n    \n    \n    if string[len_string-1] == substring[0]\n\
    \        return 1 + how_many_times(string[len_string:end], substring[1:])\n  \
    \  \n    \n    if string[len_string-1] == substring[len_substring-1]\n       \
    \ return 1 + how_many_times(string[len_string:end], substring[len_substring:])\n\
    \    \n    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    \n    if string[len_string-1] == substring[0]\n  \
    \      return 1 + how_many_times(string[len_string:end], substring[1:])\n    \n\
    \    \n    if string[len_string-1] == substring[len_substring-1]\n        return\
    \ 1 + how_\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeh7_g1ca.jl:21\nin expression\
    \ starting at /tmp/tmpeh7_g1ca.jl:21\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[0] == substring[-1]\n        return 1\
    \ + how_many_times(string[1:], substring[1..-1])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1:])\n    \n    return\
    \ how_many_times(string[1:], substring[1..-1]) + how_many_times(string[1..-1],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"\
    aaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaaaaba\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaab\"\
    )\n</\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1fb21_8r.jl:14\nin expression\
    \ starting at /tmp/tmp1fb21_8r.jl:14\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nHint: Use\
    \ how_many_times() and the string slicing operator [].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun81q4yp.jl:12\nin expression starting at\
    \ /tmp/tmpun81q4yp.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. \nFor example, for the string\
    \ \"abcabc\" the function should return [('a', 3), ('b', 2), ('c', 3)]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7x2n0ny.jl:12\nin expression starting at\
    \ /tmp/tmpj7x2n0ny.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string. \nFor example, how_many_times(\"aaaa\", \"aa\") returns\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4boq_7i.jl:12\nin expression starting at\
    \ /tmp/tmpu4boq_7i.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9envoaw.jl:1\nin expression starting at /tmp/tmp_9envoaw.jl:1\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times a substring appears within it.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjah53l0p.jl:23\nin expression starting at\
    \ /tmp/tmpjah53l0p.jl:23\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            if substring[1] == c\n                count = count\
    \ + 1\n                if substring[2] == c\n                    count = count\
    \ + 1\n                    if substring[3] == c\n                        count\
    \ = count + 1\n                        if substring[4] == c\n                \
    \            count = count + 1\n                            if substring[5] ==\
    \ c\n                                count = count + 1\n                     \
    \           if substring[6] == c\n                                    count =\
    \ count + 1\n                                    if substring[7] == c\n      \
    \                                  count = count + 1\n                       \
    \                 if substring[8] == c\n                                     \
    \       count = count + 1\n                                            if substring[9]\
    \ == c\n                                                count = count + 1\n  \
    \                                              if substring[10] == c\n       \
    \                                             count = count + 1\n            \
    \                                        if substring[11] == c\n             \
    \                                           count = count + 1\n              \
    \                                          if substring[12] == c\n           \
    \                                                 count = count + 1\n        \
    \                                                    if substring[13] == c\n \
    \                                                               count = count\
    \ + 1\n                                                                if substring[14]\
    \ == c\n                                                                    count\
    \ = count + 1\n                                                              \
    \      if substring[15] == c\n                                               \
    \                         count = count + 1\n                                \
    \                        if substring[16] == c\n                             \
    \                               count = count + 1\n                          \
    \                                  if substring[17] == c\n                   \
    \                                             count = count + 1\n            \
    \                                                    if substring[18] == c\n \
    \                                                                   count = count\
    \ + 1\n                                                                    if\
    \ substring[19] == c\n                                                       \
    \                 count = count + 1\n                                        \
    \                if substring[20] == c\n                                     \
    \                       count = count + 1\n                                  \
    \                          if substring[21] == c\n                           \
    \                                     count = count + 1\n                    \
    \                                            if substring[22] == c\n         \
    \                                                           count = count + 1\n\
    \                                                                    if substring[23]\
    \ == c\n                                                                     \
    \   count = count + 1\n                                                      \
    \  if substring[24] == c\n                                                   \
    \         count = count + 1\n                                                \
    \            if substring[25] == c\n                                         \
    \                       count = count + 1\n                                  \
    \                              if substring[26] == c\n                       \
    \                                             count = count + 1\n            \
    \                                                        if substring[27] == c\n\
    \                                                                        count\
    \ = count + 1\n                                                        if substring[28]\
    \ == c\n                                                            count = count\
    \ + 1\n                                                            if substring[29]\
    \ == c\n                                                                count\
    \ = count + 1\n                                                              \
    \  if substring[30] == c\n                                                   \
    \                 count = count + 1\n                                        \
    \                            if substring[31] == c\n                         \
    \                                               count = count + 1\n          \
    \                                              if substring[32] == c\n       \
    \                                                     count = count + 1\n    \
    \                                                        if substring[33] == c\n\
    \                                                                count = count\
    \ + 1\n                                                                if substring[34]\
    \ == c\n                                                                    count\
    \ = count + 1\n                                                              \
    \      if substring[35] == c\n                                               \
    \                         count = count + 1\n                                \
    \                        if substring[36] == c\n                             \
    \                               count = count + 1\n                          \
    \                                  if substring[37] == c\n                   \
    \                                             count = count \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpv5raii.jl:1\nin expression starting at /tmp/tmptpv5raii.jl:1\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a list of\
    \ all possible substrings of the given string. \nFor example, given the string\
    \ \"abracadabra\", your function should return [\"abracadabra\", \"abra\", \"\
    brc\", \"rab\"]. \nThe order of the substrings does not matter.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vx36g1t.jl:12\nin expression starting at\
    \ /tmp/tmp6vx36g1t.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxngwfix9.jl:24\nin expression starting at\
    \ /tmp/tmpxngwfix9.jl:24\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbd5a67z2.jl:12\nin expression starting at\
    \ /tmp/tmpbd5a67z2.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpusuywty8.jl:12\nin expression starting at\
    \ /tmp/tmpusuywty8.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7omc4tkz.jl:1\nin expression starting at /tmp/tmp7omc4tkz.jl:1\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[0] == substring[-1]\n        return 1\
    \ + how_many_times(string[1:], substring[1..-1])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1:])\n    \n    return\
    \ how_many_times(string[1:], substring[1..-1]) + how_many_times(string[1..-1],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaab\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabb\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbb\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbb\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbb\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbb\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbbb\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbbbb\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbbbbb\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbb\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc_eie_nr.jl:14\nin expression\
    \ starting at /tmp/tmpc_eie_nr.jl:14\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of times the substring appears in\
    \ the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2xf6ika.jl:24\nin expression starting at\
    \ /tmp/tmpy2xf6ika.jl:24\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqvn0g1c.jl:12\nin expression starting at\
    \ /tmp/tmpgqvn0g1c.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\"\
    , \"aaa\")\n2\n>>> how_many_times(\"aaaa\", \"aaaa\")\n1\n>>> how_many_times(\"\
    aaaa\", \"aaaaa\")\n0\n>>> how_many_times(\"aaaaa\", \"aaaa\")\n1\n>>> how_many_times(\"\
    aaaaa\", \"aaaaa\")\n1\n>>> how_many_times(\"aaaaa\", \"aaaaaa\")\n2\n>>> how_many_times(\"\
    aaaaaa\", \"aaaa\")\n2\n>>> how_many_times(\"aaaaaa\", \"aaaaa\")\n2\n>>> how_many_times(\"\
    aaaaaa\", \"aaaaaa\")\n3\n>>> how_many_times(\"aaaaaaa\", \"aaaa\")\n3\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaa\")\n3\n>>> how_many_times(\"aaaaaaa\", \"aaaaaa\")\n3\n>>>\
    \ how_many_times(\"aaaaaaa\", \"aaaaaaa\")\n3\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaa\")\n3\n>>> how_many_times(\"\
    aaaaaaab\", \"aaaaa\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaaaa\")\n3\n>>>\
    \ how_many_times(\"aaaaaaab\", \"aaaaaaa\")\n3\n>>> how_many_times(\"aaaaaaab\"\
    , \"aaaaaaab\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaaaaac\")\n3\n>>> how_many_times(\"\
    aaaaaaab\", \"aaaaaaac\")\n3\n>>> how_many_times(\"aaaaaaab\", \"aaaaaaac\")\n\
    3\n>>> how_many_time\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_v9z4u6f.jl:12\nin expression starting at\
    \ /tmp/tmp_v9z4u6f.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaac\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaacbbbcccc\")\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5_76s_k.jl:24\nin expression starting at\
    \ /tmp/tmpm5_76s_k.jl:24\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count += 1\n            \n            if char == substring[1]\n        \
    \        count += 1\n                \n                if char == substring[2]\n\
    \                    count += 1\n                    \n                    if\
    \ char == substring[3]\n                        count += 1\n                 \
    \       \n                        if char == substring[4]\n                  \
    \          count += 1\n                            \n                        \
    \    if char == substring[5]\n                                count += 1\n   \
    \                             \n                                if char == substring[6]\n\
    \                                    count += 1\n                            \
    \        \n                                    if char == substring[7]\n     \
    \                                   count += 1\n                             \
    \           \n                                        if char == substring[8]\n\
    \                                            count += 1\n                    \
    \                        \n                                            if char\
    \ == substring[9]\n                                                count += 1\n\
    \                                                \n                          \
    \                      if char == substring[10]\n                            \
    \                        count += 1\n                                        \
    \            \n                                                    if char ==\
    \ substring[11]\n                                                        count\
    \ += 1\n                                                        \n           \
    \                                             if char == substring[12]\n     \
    \                                                       count += 1\n         \
    \                                                   \n                       \
    \                                     if char == substring[13]\n             \
    \                                                   count += 1\n             \
    \                                                   \n                       \
    \                                         if char == substring[14]\n         \
    \                                                           count += 1\n     \
    \                                                               \n           \
    \                                                         if char == substring[15]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[16]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[17]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[18]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpex82d39j.jl:1\nin expression starting at /tmp/tmpex82d39j.jl:1\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else if string[0..(substring.length-1)]\
    \ == substring\n        return 1 + how_many_times(string[1..], substring)\n  \
    \  else\n        return how_many_times(string[1..], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring as arguments\
    \ and returns the number of times the substring appears in the string. Case sensitivity\
    \ is not considered.\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"A\")\n3\n>>> how_many_times(\"\
    aaaa\", \"a\")\n3\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgeqvqvzr.jl:12\nin expression starting at\
    \ /tmp/tmpgeqvqvzr.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   j = 0\n    \n    while i < len_string && j < len_substring\n        if string[i]\
    \ == substring[j]\n            i += 1\n            j += 1\n        else\n    \
    \        if string[i] > substring[j]\n                i += 1\n            else\n\
    \                j += 1\n        end\n    end\n    \n    if i == len_string\n\
    \        return j\n    elseif j == len_substring\n        return i\n    else\n\
    \        return j + how_many_times(string[i..], substring[j..])\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. Case sensitivity\
    \ is ignored.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp__ovy5vp.jl:36\nin expression starting at /tmp/tmp__ovy5vp.jl:36\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and a substring as arguments and returns the number of times the substring\
    \ appears in the string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdoynavng.jl:12\nin expression starting at\
    \ /tmp/tmpdoynavng.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in 0..(length(substring) - length(string))\n        if\
    \ substring(i, length(substring)) != string(i:i+length(substring))\n         \
    \   count += 1\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zzi6q1x.jl:22\nin expression starting at\
    \ /tmp/tmp9zzi6q1x.jl:22\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within that string. \nFor\
    \ example, how_many_times(\"aaabbb\", \"ab\") should return 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltgqeqbg.jl:12\nin expression starting at\
    \ /tmp/tmpltgqeqbg.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ in string\n            i += 1\n        else\n            i += 1\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that counts how many times a given substring\
    \ can be found in the original string. Count overlaping cases.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgqwcbaz.jl:24\nin expression starting at\
    \ /tmp/tmpsgqwcbaz.jl:24\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_o69hd9.jl:12\nin expression starting at\
    \ /tmp/tmpa_o69hd9.jl:12\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string. \nFor example, how_many_times(\"\
    aaaa\", \"aa\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sf4c_hh.jl:12\nin expression starting at\
    \ /tmp/tmp_sf4c_hh.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    if len_string\
    \ == len_substring\n        return count_substring(string, substring)\n    \n\
    \    if len_string > len_substring\n        return how_many_times(substring(string,\
    \ 1, len_substring), substring)\n    \n    return how_many_times(substring(string,\
    \ 0, len_string), substring)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_p54g5x.jl:1\nin expression starting at /tmp/tmpf_p54g5x.jl:1\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the string \"aaa\" appears\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2kdnebo.jl:23\nin expression starting at\
    \ /tmp/tmpk2kdnebo.jl:23\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    substring_index\
    \ = 0\n    \n    while substring_index < len_substring\n        if substring(substring_index)\
    \ == substring(substring_index + 1)\n            substring_index += 1\n      \
    \  else\n            substring_index += 1\n            \n        if substring_index\
    \ == len_substring\n            return count_substring(string, substring)\n  \
    \      end\n    end\n    \n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd07ydjnk.jl:37\nin expression starting at\
    \ /tmp/tmpd07ydjnk.jl:37\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[:-1], substring[:-1])\n    \n    if\
    \ string[0] != substring[0]\n        return how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] != substring[-1]\n        return how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    return how_many_times(string[1:], substring[1:])\
    \ + how_many_times(string[:-1], substring[:-1])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a substring appears in a string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdvz1bi1t.jl:14\nin expression\
    \ starting at /tmp/tmpdvz1bi1t.jl:14\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfvok_u3.jl:12\nin expression starting at\
    \ /tmp/tmpkfvok_u3.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwpjnwvw.jl:12\nin expression starting at\
    \ /tmp/tmpuwpjnwvw.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1\n    \n    i = 0\n    j = 0\n    \n    while i < len_string\
    \ && j < len_substring\n        if string[i] == substring[j]\n            i +=\
    \ 1\n            j += 1\n        else\n            if string[i] < substring[j]\n\
    \                i += 1\n            else\n                j += 1\n        end\n\
    \    end\n    \n    if i == len_string\n        return j\n    else\n        return\
    \ j - i + 1\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a substring appears\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lwbn1ew.jl:42\nin expression starting at\
    \ /tmp/tmp_lwbn1ew.jl:42\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ substring == string\n        return 1 \n    else if string[1..] == substring\n\
    \        return 1 + how_many_times(string[2..], substring)\n    else if string[1..]\
    \ == substring[1..]\n        return 1 + how_many_times(string[2..], substring[2..])\n\
    \    else\n        return how_many_times(string[1..], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbc\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcd\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcdde\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddef\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddefg\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddefgh\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbcddefghij\", \"aaa\")\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvtsjhf7.jl:12\nin expression starting at\
    \ /tmp/tmplvtsjhf7.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of times a substring appears in a string. Count overlaping\
    \ cases.\nHint: Use a for loop and a counter variable.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpowzb2eyy.jl:24\nin expression starting at\
    \ /tmp/tmpowzb2eyy.jl:24\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string and also\
    \ the number of times the substring appears in the string with overlapping cases.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string and also the number of times the substring\
    \ appears in the string with overlapping cases.\nWrite a function that takes a\
    \ string and a substring and returns the number of times the substring appears\
    \ in the string and also the number of times the substring appears in the string\
    \ with overlapping cases.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string and also\
    \ the number of times the substring appears in the string with overlapping cases.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string and also the number of times the substring\
    \ appears in the string with overlapping cases.\nWrite a function that takes a\
    \ string and a substring and returns the number of times the substring appears\
    \ in the string and also the number of times the substring appears in the string\
    \ with overlapping cases.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string and also\
    \ the number of times the substring appears in the string with overlapping cases.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string and also the number of times the substring\
    \ appears in the string with overlapping cases.\nWrite a function that takes a\
    \ string and a substring and returns the number of times the substring appears\
    \ in the string and also the number of times the substring appears in the string\
    \ with overlapping cases.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string and also\
    \ the number of times the substring appears in the string with overlapping cases.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string and also the number of times the substring\
    \ appears in the string with overlapping cases.\nWrite a function that takes a\
    \ string and a substring and returns the number of times the substring appear\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthbc0yyo.jl:23\nin expression starting at\
    \ /tmp/tmpthbc0yyo.jl:23\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaps(string, substring)\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    return how_many_times(substring(string, 1, len_string), substring)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08wk_f20.jl:1\nin expression starting at /tmp/tmp08wk_f20.jl:1\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda571rch.jl:12\nin expression starting at\
    \ /tmp/tmpda571rch.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if the substring appears more than once in the string. For example, if\
    \ `string = \"aaa\"` and `substring = \"a\"`, then `how_many_times(string, \"\
    a\")` returns `2`, not `3`.\n<|/ c |>\n<| c |>\nI believe that is a valid case.\
    \ `how_many_times(\"aaaa\", \"a\")` returns `3`, not `2`.\n<|/ c |>\n<| c |>\n\
    Yes, but `how_many_times(\"aaaa\", \"aa\")` returns `3`, not `2`.\n<|/ c |>\n\
    <| c |>\nYes, I see that now. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| a tags=string,haskell |>\nHere's a solution using Data.List.countBy.\n\
    <code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nu2los2.jl:12\nin expression starting at\
    \ /tmp/tmp9nu2los2.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a given string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh8jg73_.jl:23\nin expression starting at\
    \ /tmp/tmplh8jg73_.jl:23\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n                if char ==\
    \ substring[2]\n                    count = count + 1\n                    \n\
    \                    if char == substring[3]\n                        count =\
    \ count + 1\n                        \n                        if char == substring[4]\n\
    \                            count = count + 1\n                            \n\
    \                            if char == substring[5]\n                       \
    \         count = count + 1\n                                \n              \
    \                  if char == substring[6]\n                                 \
    \   count = count + 1\n                                    \n                \
    \                    if char == substring[7]\n                               \
    \         count = count + 1\n                                        \n      \
    \                                  if char == substring[8]\n                 \
    \                           count = count + 1\n                              \
    \              \n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                       \n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \          \n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[15]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[16]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[17]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[18]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[19]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char\
    \ == substring[20]\n                                                         \
    \   count = count + 1\n                                                      \
    \      \n                                                            if char ==\
    \ substring[21]\n                                                            \
    \    count = count + 1\n                                                     \
    \           \n                                                if char == substring[22]\n\
    \                                                    count = count + 1\n     \
    \                                               \n                           \
    \                         if char == substring[23]\n                         \
    \                               count = count + 1\n                          \
    \                              \n                                            \
    \            if char == substring[24]\n                                      \
    \                      count = count + 1\n                                   \
    \                         \n                                                 \
    \           if char == substring[25]\n                                       \
    \                         count = count + 1\n                                \
    \                                \n                                          \
    \      if char == substring[26]\n                                            \
    \        count = count + 1\n                                                 \
    \   \n                                                    if char == substring[27]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[28]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[29]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[30]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[31]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzurtnfmx.jl:1\nin expression starting at /tmp/tmpzurtnfmx.jl:1\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") returns 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62215pv9.jl:12\nin expression starting at\
    \ /tmp/tmp62215pv9.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rume1b8.jl:24\nin expression starting at\
    \ /tmp/tmp9rume1b8.jl:24\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    len_string::Int64\
    \ = length(string)\n    len_substring::Int64 = length(substring)\n    \n    if\
    \ len_string == 0 || len_substring == 0\n        return 0\n    \n    \n    if\
    \ len_string == len_substring\n        return count_substring(string, substring)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi1qxiu9.jl:1\nin expression starting at /tmp/tmpwi1qxiu9.jl:1\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also returns the number of times the substring appears\
    \ in the string but ignoring case. \nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string\
    \ and also returns the number of times the substring appears in the string but\
    \ ignoring case.\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string and also returns the\
    \ number of times the substring appears in the string but ignoring case.\nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string and also returns the number of times the\
    \ substring appears in the string but ignoring case.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string and also returns the number of times the substring appears in\
    \ the string but ignoring case.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string and also\
    \ returns the number of times the substring appears in the string but ignoring\
    \ case.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also returns the number\
    \ of times the substring appears in the string but ignoring case.\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string and also returns the number of times the substring appears\
    \ in the string but ignoring case.\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string\
    \ and also returns the number of times the substring appears in the string but\
    \ ignoring case.\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string and also returns the\
    \ number of times the substring appears in the string but ignoring case.\nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string and also returns the number of times the\
    \ substring appears in the string but ignoring \nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbra62e9.jl:24\nin expression starting at\
    \ /tmp/tmpzbra62e9.jl:24\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\nI came up with a solution that is more efficient than using count. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuotopq2f.jl:12\nin expression starting at\
    \ /tmp/tmpuotopq2f.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the substring appears in the string. Case insensitive.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqf9x47v.jl:12\nin expression starting at\
    \ /tmp/tmpqqf9x47v.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddlt747h.jl:12\nin expression starting at\
    \ /tmp/tmpddlt747h.jl:12\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpub15d8cx.jl:12\nin expression starting at\
    \ /tmp/tmpub15d8cx.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring[0]:\n     \
    \       count += 1\n            if count > substring.length():\n             \
    \   return 0\n        else:\n            count = 0\n    return count\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\ndef how_many_times(string::String,\
    \ substring::String)::Int64 \n    count = 0\n    for c in string:\n        if\
    \ c == substring[0]:\n            count += 1\n            if count > substring.length():\n\
    \                return 0\n        else:\n            count = 0\n    return count\n\
    </code>\n<|/ a tags=string,haskell |>\n<| c |>\nPlease don't post only code as\
    \ an answer, but also provide an explanation of what your code does and how it\
    \ solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nThis doesn't work correctly for overlapping substrings.\n<|/\
    \ c |>\n<| a |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6vqdkqw.jl:12\nin expression starting at\
    \ /tmp/tmpx6vqdkqw.jl:12\n"
  stdout: ''
  timestamp: 1659822765
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[0] == substring[-1]\n        return 1\
    \ + how_many_times(string[1:], substring[1..-1])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1:])\n    \n    return\
    \ how_many_times(string[1:], substring[1..-1]) + how_many_times(string[1..-1],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"\
    aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpacrc1yob.jl:14\nin expression\
    \ starting at /tmp/tmpacrc1yob.jl:14\n"
  stdout: ''
  timestamp: 1659822765
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcq54785.jl:12\nin expression starting at\
    \ /tmp/tmprcq54785.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef how_many_times(string::String, substring::String)::Int64\n    count\
    \ = 0\n    for c in string:\n        if c == substring:\n            count +=\
    \ 1\n    return count\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglunkene.jl:12\nin expression starting at\
    \ /tmp/tmpglunkene.jl:12\n"
  stdout: ''
  timestamp: 1659822765
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnmxybjt.jl:12\nin expression starting at\
    \ /tmp/tmpqnmxybjt.jl:12\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ substring can be found in the original string. Count overlaping cases.\n>>>\
    \ how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"aaa\")\n4\n>>> how_many_times(\"\
    aaaa\", \"aaaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaaa\")\n5\n>>> how_many_times(\"\
    aaaa\", \"aaaaaa\")\n5\n>>> how_many_times(\"aaaa\", \"aaaaaaa\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaab\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabb\")\n6\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbb\")\n6\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbb\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaab\"\
    )\n6\n>>> \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbai7ccx.jl:12\nin expression starting at\
    \ /tmp/tmplbai7ccx.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    count = 0\n    \n  \
    \  for char in string\n        if char == substring[count]\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqj80giq.jl:30\nin expression starting at\
    \ /tmp/tmpsqj80giq.jl:30\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars\n        if substring == i\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84bo26lo.jl:24\nin expression starting at\
    \ /tmp/tmp84bo26lo.jl:24\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1..end-1],\
    \ substring) + how_many_times(string[end..end-1], substring)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjia1es90.jl:12\nin expression starting at\
    \ /tmp/tmpjia1es90.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times the substring appears anywhere in the string. Count overlaping cases.\n\
    \    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"a\")\n    0\n    >>> how_many_times(\"aaaa\", \"aaa\")\n    3\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1iprq50.jl:12\nin expression starting at\
    \ /tmp/tmpo1iprq50.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxfd3pt9.jl:12\nin expression starting at\
    \ /tmp/tmpvxfd3pt9.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   \n    while i < len_substring\n        if substring(i, len_substring) == string\n\
    \            i += 1\n        else\n            i -= 1\n            \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8nrn7dj.jl:26\nin expression starting at\
    \ /tmp/tmpe8nrn7dj.jl:26\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   j = 0\n    \n    while i < len_string && j < len_substring\n        if string[i]\
    \ == substring[j]\n            i += 1\n            j += 1\n        else\n    \
    \        if string[i] > substring[j]\n                i += 1\n            else\n\
    \                j += 1\n        end\n    end\n    \n    return j - i\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ve3sx8w.jl:33\nin expression starting at\
    \ /tmp/tmp0ve3sx8w.jl:33\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ in string\n            i += 1\n        else\n            i = 0\n        end\n\
    \    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaj_ydvk4.jl:25\nin expression starting at\
    \ /tmp/tmpaj_ydvk4.jl:25\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string. \nFor example, the string \"abcabc\"\
    \ should return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkv0fn32.jl:12\nin expression starting at\
    \ /tmp/tmppkv0fn32.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   \n    while i < len_substring\n        if string[i] == substring[i]\n    \
    \        i += 1\n        else\n            if string[i] > substring[i]\n     \
    \           i += 1\n            else\n                i -= 1\n        end\n  \
    \  end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"\
    aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaaaaaab\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7vh5ddf.jl:31\nin expression starting at\
    \ /tmp/tmpo7vh5ddf.jl:31\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxz8t17y.jl:12\nin expression starting at\
    \ /tmp/tmpqxz8t17y.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise\nWrite a function that returns the number of\
    \ times a substring appears in a string. \nWrite a function that returns the number\
    \ of times a substring appears in a string and also returns the position of that\
    \ substring.\nWrite a function that returns the number of times a substring appears\
    \ in a string and also returns the position of that substring and also returns\
    \ the number of times the substring appears consecutively.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuoa63q27.jl:12\nin expression starting at\
    \ /tmp/tmpuoa63q27.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjt8xiop.jl:12\nin expression starting at\
    \ /tmp/tmpwjt8xiop.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring as arguments and returns the number of times\
    \ the substring appears in the string. Case insensitive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph68xpmy4.jl:12\nin expression starting at\
    \ /tmp/tmph68xpmy4.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ substring.length() == string.length()\n        return 1 \n    else if substring.length()\
    \ > string.length()\n        return how_many_times(string, substring[1..string.length()])\n\
    \    else \n        return how_many_times(string[1..string.length()], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_time\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxdmyom5.jl:12\nin expression starting at\
    \ /tmp/tmpvxdmyom5.jl:12\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = 0\n \
    \   \n    while i < len_string && j < len_substring\n        if string[i] == substring[j]\n\
    \            i += 1\n            j += 1\n        else\n            if string[i]\
    \ > substring[j]\n                i += 1\n            else\n                j\
    \ += 1\n        end\n    end\n    \n    if i == len_string\n        return j\n\
    \    elseif j == len_substring\n        return i\n    else\n        return j +\
    \ how_many_times(string[i..], substring[j..])\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp420e610t.jl:39\nin expression starting at /tmp/tmp420e610t.jl:39\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzwig0vx.jl:24\nin expression starting at\
    \ /tmp/tmpgzwig0vx.jl:24\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0\n        return len_substring\n    \n    if len_substring == 0\n      \
    \  return len_string\n    \n    if string[0] == substring[0]\n        return how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return how_many_times(string[1:], substring[1:len_substring])\n    \n\
    \    if string[0] == substring[len_substring-1]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[0]\n\
    \        return how_many_times(string[1:], substring[1:len_string])\n    \n  \
    \  if string[len_string-1] == substring[len_substring-1]\n        return how_many_times(string[1:],\
    \ substring[1:len_substring])\n    \n    if string[0] == substring[0]\n      \
    \  return how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[0]\n        return how_many_times(string[1:], substring[1:len_string])\n\
    \    \n    if string[len_string-1] == substring[len_substring-1]\n        return\
    \ how_many_times(string[1:], substring[1:len_substring])\n    \n    if string[0]\
    \ == substring[len_substring-1]\n        return how_many_times(string[1:], substring[1:len_string])\n\
    \    \n    if string[len_string-1] == substring[0]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return how_many_times(string[1:], substring[1:len_substring])\n    \n\
    \    if string[0] == substring[0]\n        return how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[len_string-1] == substring[0]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return how_many_times(string[1:], substring[1:len_substring])\n    \n\
    \    if string[0] == substring[len_substring-1]\n        return how_many_times(string[1:],\
    \ substring[1:len_string])\n    \n    if string[len_string-1] == substring[0]\n\
    \        return how_many_times(string[1:], substring[1:len_string])\n    \n  \
    \  if string[len_string-1] == substring[len_substring-1]\n        return how_\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9toqi8ep.jl:23\nin expression\
    \ starting at /tmp/tmp9toqi8ep.jl:23\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the substring \"a\" appears\
    \ in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18p_rp2n.jl:23\nin expression starting at\
    \ /tmp/tmp18p_rp2n.jl:23\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars\n        if substring == i\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabbb\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabbbb\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabbbbb\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabbbbbaaa\")\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6s6id_a6.jl:24\nin expression starting at\
    \ /tmp/tmp6s6id_a6.jl:24\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0\n        return len_substring\n    \n    if len_substring == 0\n      \
    \  return len_string\n    \n    \n    if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgnj9u8a7.jl:24\nin expression\
    \ starting at /tmp/tmpgnj9u8a7.jl:24\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ number of times a substring appears in a string. Count overlaping cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppe5d67dd.jl:12\nin expression starting at\
    \ /tmp/tmppe5d67dd.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string. Include capital letters.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsybtwgu.jl:12\nin expression starting at\
    \ /tmp/tmpvsybtwgu.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a substring\
    \ appears in a string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw45e5jir.jl:12\nin expression starting at\
    \ /tmp/tmpw45e5jir.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85k9h3dt.jl:1\nin expression starting at /tmp/tmp85k9h3dt.jl:1\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplp44i_th.jl:12\nin expression starting at\
    \ /tmp/tmplp44i_th.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise\nWrite a function that counts the number of times a substring\
    \ appears in a string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuz8x5t9u.jl:24\nin expression starting at\
    \ /tmp/tmpuz8x5t9u.jl:24\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5kqungq.jl:12\nin expression starting at\
    \ /tmp/tmpu5kqungq.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a new string where all occurrences of \"a\" have been replaced with\
    \ \"b\".\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3q6ngoe.jl:12\nin expression starting at\
    \ /tmp/tmpw3q6ngoe.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within it. The substring may appear multiple times\
    \ in the string. For example, how_many_times(\"aaa\", \"a\") returns 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhn2bgdd.jl:12\nin expression starting at\
    \ /tmp/tmpfhn2bgdd.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwvvxle3.jl:1\nin expression starting at /tmp/tmpdwvvxle3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaab\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6v98pvtw.jl:12\nin expression starting at\
    \ /tmp/tmp6v98pvtw.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and a substring as arguments and returns the number of times the substring appears\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvw14sm4.jl:12\nin expression starting at\
    \ /tmp/tmpwvw14sm4.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the number of times a substring\
    \ appears in a string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpus0az4j3.jl:12\nin expression starting at\
    \ /tmp/tmpus0az4j3.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w9vopri.jl:12\nin expression starting at\
    \ /tmp/tmp0w9vopri.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dwdv0nb.jl:12\nin expression starting at\
    \ /tmp/tmp2dwdv0nb.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpik20f_9z.jl:12\nin expression starting at\
    \ /tmp/tmpik20f_9z.jl:12\n"
  stdout: ''
  timestamp: 1659822768
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else if string[1..] == substring\n\
    \        return 1 + how_many_times(string[2..], substring)\n    else\n       \
    \ return how_many_times(string[2..], substring) + how_many_times(string[1..],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the substring appears in the string. Count overlaping cases.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpp2bo58.jl:12\nin expression starting at\
    \ /tmp/tmpcpp2bo58.jl:12\n"
  stdout: ''
  timestamp: 1659822768
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times it appears in the original string and in the\
    \ reverse of the original string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkufa49w.jl:12\nin expression starting at\
    \ /tmp/tmpdkufa49w.jl:12\n"
  stdout: ''
  timestamp: 1659822768
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, the string \"abcabc\" would\
    \ return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzn1th21.jl:12\nin expression starting at\
    \ /tmp/tmplzn1th21.jl:12\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   \n    while i < len_string\n        if string[i] == substring[0]\n       \
    \     i += 1\n            \n            if i == len_string\n                return\
    \ 1\n            \n            j = i\n            \n            while j < len_substring\n\
    \                if string[j] != substring[j]\n                    j += 1\n  \
    \              else\n                    i += 1\n                end\n       \
    \     end\n        end\n    end\n    \n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa1kanyi.jl:39\nin expression starting at\
    \ /tmp/tmpqa1kanyi.jl:39\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    count::Int64\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += 1\n            \n            if count == substring.length\n             \
    \   return count\n            \n            count = 0\n        else\n        \
    \    count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkvydp11.jl:32\nin expression starting at\
    \ /tmp/tmpdkvydp11.jl:32\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85k9h3dt.jl:1\nin expression starting at /tmp/tmp85k9h3dt.jl:1\n"
  stdout: ''
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, how_many_times(\"abcabc\") should return [('a', 3), ('b', 2), ('c',\
    \ 3)]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9b4pcn2.jl:12\nin expression starting at\
    \ /tmp/tmpj9b4pcn2.jl:12\n"
  stdout: ''
  timestamp: 1659822769
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuhrxih6.jl:12\nin expression starting at\
    \ /tmp/tmpnuhrxih6.jl:12\n"
  stdout: ''
  timestamp: 1659822769
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string. Count overlaping cases.\n>>>\
    \ how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n\
    >>> how_many_times(\"aaaa\", \"aaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaa\"\
    )\n4\n>>> how_many_times(\"aaaa\", \"aaaaa\")\n5\n>>> how_many_times(\"aaaa\"\
    , \"aaaaaa\")\n5\n>>> how_many_times(\"aaaa\", \"aaaaaaa\")\n6\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaab\")\n6\n>>> how_many_times(\"aaaa\", \"aaaaaaabb\")\n7\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbb\")\n7\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbb\")\n8\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n8\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n9\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n9\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n10\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n10\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n11\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n11\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n12\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaab\"\
    )\n12\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaabb\")\n13\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaabbb\")\n13\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaabbbb\"\
    )\n14\n>>> how_many_times(\"aaaa\", \"aaaaaaab\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxyiuszal.jl:12\nin expression starting at\
    \ /tmp/tmpxyiuszal.jl:12\n"
  stdout: ''
  timestamp: 1659822769
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times the substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj5jmaby.jl:12\nin expression starting at\
    \ /tmp/tmpgj5jmaby.jl:12\n"
  stdout: ''
  timestamp: 1659822769
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwvvxle3.jl:1\nin expression starting at /tmp/tmpdwvvxle3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string_length\
    \ = len(string)\n    substring_length = len(substring)\n    \n    if substring_length\
    \ > string_length\n        return 0\n    \n    i = 0\n    \n    while i < string_length\n\
    \        if string[i] == substring[0]\n            i += 1\n            \n    \
    \        if i == string_length\n                return 1\n            \n     \
    \       if string[i] == substring[1]\n                i += 1\n               \
    \ \n                if i == string_length\n                    return 2\n    \
    \            \n                if string[i] == substring[2]\n                \
    \    i += 1\n                    \n                    if i == string_length\n\
    \                        return 3\n                    \n                    if\
    \ string[i] == substring[3]\n                        i += 1\n                \
    \        \n                        if i == string_length\n                   \
    \         return 4\n                        \n                        if string[i]\
    \ == substring[4]\n                            i += 1\n                      \
    \      \n                            if i == string_length\n                 \
    \               return 5\n                            \n                     \
    \       if string[i] == substring[5]\n                                i += 1\n\
    \                                \n                                if i == string_length\n\
    \                                    return 6\n                              \
    \  \n                                if string[i] == substring[6]\n          \
    \                          i += 1\n                                    \n    \
    \                                if i == string_length\n                     \
    \                   return 7\n                                    \n         \
    \                           if string[i] == substring[7]\n                   \
    \                     i += 1\n                                        \n     \
    \                                   if i == string_length\n                  \
    \                          return 8\n                                        \n\
    \                                        if string[i] == substring[8]\n      \
    \                                      i += 1\n                              \
    \              \n                                            if i == string_length\n\
    \                                                return 9\n                  \
    \                          \n                                            if string[i]\
    \ == substring[9]\n                                                i += 1\n  \
    \                                              \n                            \
    \                    if i == string_length\n                                 \
    \                   return 10\n                                              \
    \  \n                                                if string[i] == substring[10]\n\
    \                                                    i += 1\n                \
    \                                    \n                                      \
    \              if i == string_length\n                                       \
    \                 return 11\n                                                \
    \    \n                                                    if string[i] == substring[11]\n\
    \                                                        i += 1\n            \
    \                                            \n                              \
    \                          if i == string_length\n                           \
    \                                 return 12\n                                \
    \                        \n                                                  \
    \      if string[i] == substring[12]\n                                       \
    \                     i += 1\n                                               \
    \             \n                                                            if\
    \ i == string_length\n                                                       \
    \         return 13\n                                                        \
    \    \n                                                            if string[i]\
    \ == substring[13]\n                                                         \
    \       i += 1\n                                                             \
    \   \n                                                                if i ==\
    \ string_length\n                                                            \
    \        return 14\n                                                         \
    \       \n                                                                if string[i]\
    \ == substring[14]\n                                                         \
    \           i += 1\n                                                         \
    \           \n                                                               \
    \     if i == string_length\n                                                \
    \                        return 15\n                                         \
    \                           \n                                               \
    \                     if string[i] == substring[15]\n                        \
    \                                                i += 1\n                    \
    \                                                    \n                      \
    \                                                      if i == string_length\n\
    \                                                                            \
    \    return 16\n                                                             \
    \               \n                                                           \
    \                 if string[i] == substring[16]\n                            \
    \                                                    i += 1\n                \
    \                                                                \n          \
    \                                                                      if i ==\
    \ string_length\n                                                            \
    \                        return 17\n                                         \
    \                                       \n                                   \
    \                                             if string[i] == substring[17]\n\
    \                                                                            \
    \        i += 1\n                                                            \
    \                        \n                                                  \
    \                                  if i == string_length\n                   \
    \                                                                     return 18\n\
    \                                                                            \
    \        \n                                                                  \
    \                  if string[i] == substring[18]\n                           \
    \                                                             i += 1\n       \
    \                                                                            \
    \     \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9ppyob1.jl:1\nin expression starting at /tmp/tmpz9ppyob1.jl:1\n"
  stdout: ''
  timestamp: 1659822769
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a substring\
    \ appears in a string. \nFor example, how_many_times(\"aaa\", \"a\") should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpappm22hm.jl:12\nin expression starting at\
    \ /tmp/tmpappm22hm.jl:12\n"
  stdout: ''
  timestamp: 1659822769
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string(i,\
    \ 1)\n            i += 1\n        else\n            i += 1\n    end\n    \n  \
    \  return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that counts the number of times a given substring\
    \ appears in a given string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzr4a8r4.jl:24\nin expression starting at\
    \ /tmp/tmpqzr4a8r4.jl:24\n"
  stdout: ''
  timestamp: 1659822769
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9xx5gof.jl:12\nin expression starting at\
    \ /tmp/tmpb9xx5gof.jl:12\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. \nFor example, how_many_times(\"\
    aaaa\", \"aa\") should return 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvg7875p.jl:12\nin expression starting at\
    \ /tmp/tmpxvg7875p.jl:12\n"
  stdout: ''
  timestamp: 1659822769
