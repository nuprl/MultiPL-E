name: HumanEval_33_sort_third
language: jl
prompt: "\"\"\"This function takes a list l and returns a list l' such that\n    l'\
  \ is identical to l in the indicies that are not divisible by three, while its values\
  \ at the indicies that are divisible by three are equal\n    to the values of the\
  \ corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1,\
  \ 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\
  \    \"\"\"\nfunction sort_third(l::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_third;\n\t@test(candidate([5,\
  \ 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\n\t@test(candidate([5, 8, 3, 4, 6,\
  \ 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\t@test(candidate([5, 6, 9, 4, 8, 3, 2]) ==\
  \ [2, 6, 9, 4, 8, 3, 5])\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6,\
  \ 3, 4, 8, 9, 5, 1])\nend\n"
completions: ["    \n    l = sort(l)\n    \n    third = l[3:end]\n    \n    third\
    \ = third[l[3:end] .!= l]\n    \n    third = sort(third)\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    third = l[3:end]\n \
    \   \n    third = sort(third)\n    \n    third = third[2:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    ", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n \
    \   \n    third = l[3:end]\n    \n    third = sort(third)\n    \n    third = third[2:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n    return l\nend", "    \n  \
    \  l = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = ", "    \n\
    \    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend", "    \n    l =\
    \ sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list l and returns a list l' such that\n\
    \    l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    l = sort(l)\n    return l\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n  \
    \  l = l[findall(l .% 3 != 0)]\n    \n    return l\nend", "    \n    l = sort(l)\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    l = l[div(length(l), 3) !=\
    \ div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n\
    \    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = sort(l)\n\
    \    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n   \
    \ l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n\
    \    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n   \
    \ l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n\
    \    l = l[div(length(l), 3) != div(length(l), 3)]\n    ", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\nThe answer by is great, but I wanted to add\
    \ that you can also use sortperm:\n<code>\njulia> sortperm([5,6,3,4,8,9,2])\n\
    5-element Array{Int64,1}:\n 2\n 6\n 3\n 4\n 8\n 9\n 5\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>", "    \n    l = sort(l)\n    \n    third = l[3:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[2:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    ", "    l\
    \ = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return\
    \ l\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list l and\
    \ returns a list l' such that\n    l' is identical to l in the indicies that are\
    \ not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\n\
    end", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .%\
    \ 3 != 0)]\n    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if there are\
    \ duplicate values in the list. For example, `sort_third([5, 6, 3, 4, 8, 9, 2,\
    \ 5])` returns `[5, 6, 3, 4, 8, 9, 2, 5]`.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that works with duplicate values.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI believe that this is what you are looking for:\n<code>\njulia> function\
    \ sort_third(l::Vector{Int64})\n           l = sort(l)\n           l = l[findall(l\
    \ .% 3 == 0)]\n           l = l[findall(l .% 3 != 0)]\n           return l\n \
    \      end\nsort_third (generic function with 1 method)", "    l = sort(l)\n \
    \   l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    third = Int64[]\n    \n    for i in l\n   \
    \     if i % 3 == 0\n            push!(third, i)\n        else\n            push!(third,\
    \ i)\n            push!(third, i)\n        end\n    end\n    \n    third = third[2:end]\n\
    \    \n    for i in l\n        if i in third\n            push!(third, i)\n  \
    \      else\n            push!(third, i)\n            push!(third, i)\n      \
    \  end\n    end\n    \n    third = third[2:end]\n    \n    for i in l\n      \
    \  if i in third\n            push!(third, i)\n        else\n            push!(third,\
    \ i)\n            push!(third, i)\n        end\n    end\n    \n    third = third[2:end]\n\
    \    \n    for i in l\n        if i in third\n            push!(third, i)\n  \
    \      else\n            push!(third, i)\n            push!(third, i)\n      \
    \  end\n    end\n    \n    third = third[2:end]\n    \n    for i in l\n      \
    \  if i in third\n            push!(third, i)\n        else\n            push!(third,\
    \ i)\n            push!(third, i)\n        end\n    end\n    \n    third = third[2:end]\n\
    \    \n    for i in l\n        if i in third\n            push!(third, i)\n  \
    \      else\n            push!(third, i)\n            push!(third, i)\n      \
    \  end\n    end\n    \n    third = third[2:end]\n    \n    for i in l\n      \
    \  if i in third\n            push!(third, i)\n        else\n            push!(third,\
    \ i)\n            push!(third, i)\n        end\n    end\n    \n    third = third[2:end]\n\
    \    \n    for i in l\n        if i in third\n            push!(third, i)\n  \
    \      else\n            push!(third, i)\n            push!(third, i)\n      \
    \  end\n    end\n    \n    third = third[2:end]\n    \n    for i in l\n      \
    \  if i in third\n            push!(third, i)\n        else\n            push!(third,\
    \ i)\n            push!(third, i)\n        end\n    end\n    \n    third = third[2:end]\n\
    \    \n    for i in l\n        if i in third\n            push!(third, i)\n  \
    \      else\n            push!(third, i)\n            push!(third, i)\n      \
    \  end\n    end\n    \n    third = third[2:end]\n    \n    for i in l\n      \
    \  if i in third\n            push!(third, i)\n        else\n            push!(third,\
    \ i)\n            push!(third, i)\n", "    \n    l = sort(l)\n    \n    third\
    \ = l[div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3)\
    \ != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n\
    \    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3)\
    \ != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n\
    \    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3)\
    \ != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n\
    \    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), ",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i], 3) == 0\n            push!(l,\
    \ l[i])\n        end\n    end\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l\
    \ % 3 == 1)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\nend", "    \n \
    \   l = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    for i = div(length(l),\
    \ 3) + 1\n        if l[i] != third\n            push!(l, third)\n            push!(l,\
    \ l[i])\n        end\n    end\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 ==\
    \ 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    for i in 1:length(l)\n        if mod(l[i], 3)\
    \ == 0\n            push!(l, l[i])\n        end\n    end\n    \n    l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n    \n    l =\
    \ l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't work if there are duplicates in the list. `sort_third([5,\
    \ 6, 3, 4, 8, 9, 2, 5])` returns `[2, 6, 3, 4, 8, 9, 5, 5]`.\n<|/ c |>\n<| c |>\n\
    Yes, I noticed that and fixed it\n<|/ c |>\n<| a tags=julia |>\nI came up with\
    \ this solution:\n<code>", "    \n    l = sort(l)\n    \n    third = l[3:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[2:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    ", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    third = l[div(length(l),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[sortperm(third)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = ", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list l and returns a list l' such that\n  \
    \  l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    third = Int64[]\n    \n    for i in\
    \ 1:length(l)\n        if mod(l[i], 3) == 0\n            push!(third, l[i])\n\
    \        else\n            push!(third, l[i])\n            push!(third, l[i])\n\
    \        end\n    end\n    \n    return third\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l\
    \ = l[findall(l % 3 == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l %\
    \ 3 == 0)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = sort(l)\n\
    \    \n    l = l[findall(l % 3 == 0)]\n    \n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l % 3\
    \ == 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| c |>\nThis doesn't seem to work. `sort_third([5,6,3,4,8,9,2])`\
    \ gives `[2,6,3,4,8,9,5]` instead of `[2,3,4,5,6,8,9]`\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 1.5.1 and it works. I guess it depends on the version of Julia you\
    \ are using.\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it works. I guess\
    \ it depends on the version of Julia you are using. `sort_third([5,6,3,4,8,9,2])`\
    \ gives `[2,6,3,4,8,9,5]` instead of `[2,3,4,5,6,8,9]`\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 1.5.1 and it works. I guess it depends on the version of Julia you\
    \ are using. `sort_third([5,6,3,4,8,9,2])` gives `[2,6,3,4,8,9,5]` instead of\
    \ `[2,3,4,5,6,8,9]`\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it works.\
    \ I guess it depends on the version of Julia you are using. `sort_third([5,6,3,4,8,9,2])`\
    \ gives `[2,6,3,4,8,9,5]` instead of `[2,3,4,5,6,8,9]`\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 == 1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l)-1,3):end]\n    \n    l = sort(l)\n  \
    \  \n    l = l[div", "    \n    l = sort(l)\n    \n    third = l[3:end]\n    \n\
    \    third = sort(third)\n    \n    third = third[2:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    ", "    l = sort(l)\n   \
    \ l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l\
    \ = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n    return l\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| c |>\nThanks for your answer! I appreciate it!\n\
    <|/ c |>\n<| a dscore=2 |>\nThe answer by is very good, but I thought I'd add\
    \ an alternative that doesn't require the use of any packages. It's a little more\
    \ concise, but I find it more readable. \n<code>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l % 3 ==\
    \ 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n \
    \   l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l\
    \ = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3 != 0)]\n    \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend", "    \n    l\
    \ = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l %\
    \ 3 == 1)]\n    \n    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list l and returns a list l' such that\n    l' is identical to\
    \ l in the indicies that are not divisible by three, while its values at the indicies\
    \ that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l =\
    \ sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n\
    \    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n \
    \   l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ l = l[findall(l % 3 == 1)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if there are duplicates in the original array.\
    \ For example, `sort_third([5, 6, 3, 4, 8, 9, 2, 5])` returns `[2, 5, 3, 4, 6,\
    \ 8, 9, 5]`.\n<|/ c |>\n<| c |>\nYes, I noticed that after I posted my comment.\
    \ I've updated my answer to account for duplicates.\n<|/ c |>\n<| a tags=julia,sorting,arrays\
    \ |>\nThe answer by is great, but I wanted to add an alternative that uses Julia's\
    \ built-in sort function and does not require you to write your own function.\n\
    <code>\njulia> sort([5, 6, 3, 4, 8, 9, 2, 5])\n5-element Array{Int64,1}:\n 2\n\
    \ 5\n 3\n 4\n 6\n 8\n 9\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work\
    \ if there are duplicates in the original array. For example, `sort([5, 6, 3,\
    \ 4, 8, 9, 2, 5])` returns `[2, 5, 3, 4, 6, 8, 9, 5]`.\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that after I posted my comment. I've updated my answer to account\
    \ for duplicates.\n<|/ c |>\n<| a tags=julia,sorting,arrays |>\nThe answer by\
    \ is great, but I wanted to add an alternative that uses Julia's built-in sort\
    \ function and does not require you to write your own function.\n<code>\njulia>\
    \ sort([5, 6, 3, 4, 8, 9, 2, 5])\n5-element Array{Int64,1}:\n 2\n 5\n 3\n 4\n\
    \ 6\n 8\n 9\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    l = sort(l)\n    return l\nend", "    l =\
    \ sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l\
    \ = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain why you chose to\
    \ write `l = sort(l)` instead of `l = sort(l)`?\n<|/ c |>\n<| c |>\n`sort` returns\
    \ a new array and does not modify the original array. `l = sort(l)` would modify\
    \ the original array and `l = sort(l)` would return a new array and leave the\
    \ original untouched.\n<|/ c |>\n<| c |>\nThanks for the explanation. Can you\
    \ please explain why you chose to write `l = sort(l)` instead of `l = sort(l)`?\n\
    <|/ c |>\n<| c |>\n`sort` returns a new array and does not modify the original\
    \ array. `l = sort(l)` would modify the original array and `l = sort(l)` would\
    \ return a new array and leave the original untouched.\n<|/ c |>\n<| c |>\nThanks\
    \ for the explanation. Can you please explain why you chose to write `l = sort(l)`\
    \ instead of `l = sort(l)`?\n<|/ c |>\n<| a dscore=2 |>\nI believe this to be\
    \ the most efficient solution:\n<code>", "    \n    third = Int64[]\n    \n  \
    \  for i in 1:length(l)\n        if i%3 == 0\n            push!(third, l[i])\n\
    \        else\n            push!(third, l[i])\n        end\n    end\n    \n  \
    \  third\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n \
    \   \n    third = l[div(length(l), 3)]\n    \n    third = sort(third)\n    \n\
    \    l = l .- third\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    l = sort(l)\n    \n    l\
    \ = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n\
    \    \n    for i in 2:length(l)\n        if l[i] % 3 == 0\n            l[i] =\
    \ l[i-1]\n        end\n    end\n    \n    return l\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list l and returns a list l' such that\n  \
    \  l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    l = sort(l)\n    \n    lenl = length(l)\n\
    \    \n    lenl2 = lenl/2\n    \n    lenl3 = lenl/3\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    third = l[div(length(l), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    ", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return\
    \ l\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list l and\
    \ returns a list l' such that\n    l' is identical to l in the indicies that are\
    \ not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted in descending order.\n    >>> sort_third_desc([5, 6, 3, 4, 8, 9, 2])\n\
    \    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l\
    \ = l[findall(l % 3 == 1)]\n    return l\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 == 1)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a dscore=1 |>\nI came up with this solution:\n<code>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work for me. `sort_third([5, 6, 3, 4, 8, 9, 2])`\
    \ returns `[2, 6, 3, 4, 8, 9, 5]` instead of `[5, 6, 3, 4, 8, 9, 2]`.\n<|/ c |>\n\
    <| c |>\nI tested it on Julia 0.6.2 and it works fine. Maybe you have a different\
    \ version of Julia?\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works\
    \ fine. Maybe you have a different version of Julia?\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2 and it works fine. Maybe you have a different version of Julia?\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works fine. Maybe you have\
    \ a different version of Julia?\n<|/ c |>\n<| a tags=julia,sorting |>\n<code>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l\
    \ = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3 != 0)]\n    \n    l\
    \ = sort(l)\n    \n    return l\nend", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,arrays |>\n<| a dscore=1 |>\n<code>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `sort` sorts\
    \ by the first element of the vector, which is `Int64`. `sort_third` sorts by\
    \ the third element of the vector, which is `Int64`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used `Int64` because I thought that would be the most appropriate\
    \ type for the OP's purposes. I edited the answer to reflect that.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I used `Int64` because I thought that would\
    \ be the most appropriate type for the OP's purposes. I edited the answer to reflect\
    \ that.\n<|/ c |>\n<| c |>\nI tested it and it works. I used `Int64` because I\
    \ thought that would be the most appropriate type for the OP's purposes. I edited\
    \ the answer to reflect that.\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used `Int64` because I thought that would be the most appropriate type for the\
    \ OP's purposes. I edited the answer to reflect that.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\n<code>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n\
    \    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n\
    \    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l\
    \ = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    for i in 1:length(l)\n        if mod(l[i], 3) == 0\n            push!(l,\
    \ l[i])\n        end\n    end\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    l = sort(l)\n    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ l = l[findall(l % 3 == 1)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\nThe answer by is correct, but I thought I'd\
    \ add some explanation as to why it works.\nThe function sort_third is called\
    \ on l[findall(l % 3 == 0)] and l[findall(l % 3 == 1)], which both return an array.\
    \ These arrays are then concatenated and passed to sort. sort then sorts the concatenated\
    \ array. \nThe concatenation happens because find returns a vector of indices.\
    \ So the concatenation happens because find returns a vector of indices. \nThe\
    \ concatenation happens because find returns a vector of indices. So the concatenation\
    \ happens because find returns a vector of indices. \nThe concatenation happens\
    \ because find returns a vector of indices. So the concatenation happens because\
    \ find returns a vector of indices. \nThe concatenation happens because find returns\
    \ a vector of indices. So the concatenation happens because find returns a vector\
    \ of indices. \nThe concatenation happens because find returns a vector of indices.\
    \ So the concatenation happens because find returns a vector of indices. \nThe\
    \ concatenation happens because find returns a vector of indices. So the concatenation\
    \ happens because find returns a vector of indices. \nThe concatenation happens\
    \ because find returns a vector of indices. So the concatenation happens because\
    \ find returns a vector of indices. \nThe concatenation happens because find returns\
    \ a vector of indices. So the concatenation happens because find returns a vector\
    \ of indices. \nThe concatenation happens because find returns a vector of indices.\
    \ So the concatenation happens because find returns a vector of indices. \nThe\
    \ concatenation happens because find returns a vector of indices. So the concatenation\
    \ happens because find returns a vector of indices. \nThe concatenation happens\
    \ because find returns a vector of indices. So the concatenation happens because\
    \ find returns a vector of indices. \nThe concatenation happens because find returns\
    \ a vector of indices. So the concatenation happens because find returns a vector\
    \ of indices. \nThe concatenation happens because find returns a vector of indices.\
    \ So the concatenation happens because find returns a vector of indices. \nThe\
    \ concatenation happens because find returns a vector of indices. So the concatenation\
    \ happens because find returns a vector of indices. \nThe concatenation happens\
    \ because find returns a vector of indices. So the concatenation happens because\
    \ find returns a vector of indices. \nThe concatenation happens because find returns\
    \ a vector of indices. So the concatenation happens because find returns a vector\
    \ of indices. \nThe concatenation happens because find returns a vector of ",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return\
    \ l\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list l and\
    \ returns a list l' such that\n    l' is identical to l in the indicies that are\
    \ not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l % 3 == 0)]\n    \n    l = sort(l)\n    \n    return\
    \ l\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list l and\
    \ returns a list l' such that\n    l' is identical to l in the indicies that are\
    \ not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n    \n \
    \   l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n\
    \    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = div(length(l), 3)\n    \n    l = l[third:end]\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l =\
    \ sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .%\
    \ 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\nHere is\
    \ a solution that uses only built-in functions:\n<code>", "    l = sort(l)\n \
    \   l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    l = l[findall(l % 3 != 0)]\n    return l\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if there are duplicate values in the list. For example, `sort_third([5,\
    \ 6, 3, 4, 8, 9, 2, 5])` returns `[2, 5, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've edited my answer to fix the issue.\n<|/ c |>\n\
    <| a tags=sorting,julia |>\nThe answer by is very elegant and efficient, but I\
    \ thought I'd add an alternative that doesn't require any packages. It's also\
    \ a little more readable:\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3\
    \ == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. I am\
    \ still trying to understand your code. Can you please explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer. Hope it helps.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[3:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[2:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[:end]\n\
    \    \n    return third\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.0>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</code>\n<|/ a |>\n<| a tags=julia,sorting,arrays\
    \ |>\nI came up with this:\n<code>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    third = l[3:end]\n \
    \   \n    third = third[findall(third .% 3 == 0)]\n    \n    third = sort(third)\n\
    \    \n    third = third[findall(third .% 3 != 0)]\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = third[findall(third .% 3 == 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 != 0)]\n    \n   \
    \ third = third[findall(third .% 3 == 0)]\n    \n    third = sort(third)\n   \
    \ \n    third = third[findall(third .% 3 != 0)]\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = third[findall(third .% 3 == 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 != 0)]\n    \n   \
    \ third = third[findall(third .% 3 == 0)]\n    \n    third = sort(third)\n   \
    \ \n    third = third[findall(third .% 3 != 0)]\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = third[findall(third .% 3 == 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 != 0)]\n    \n   \
    \ third = third[findall(third .% 3 == 0)]\n    \n    third = sort(third)\n   \
    \ \n    third = third[findall(third .% 3 != 0)]\n    \n    third = third[findall(third\
    \ .% 3 == 0)]\n    \n    third = sort(third)\n    \n    third = third[findall(third\
    \ .% 3 != 0)]\n    \n    third = third[findall(third .% 3 == 0)]\n    \n    third\
    \ = sort(third)\n    \n    third = third[findall(third .% 3 != 0)]\n    \n   \
    \ third = third[findall(third .% 3 == 0)]\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list l and returns a list l' such that\n  \
    \  l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    third = Int64[]\n  \
    \  \n    for i in 1:length(l)\n        if mod(l[i], 3) == 0\n            push!(third,\
    \ l[i])\n        else\n            push!(third, l[i])\n            push!(third,\
    \ l[i])\n        end\n    end\n    \n    third\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This code doesn't work. `sort_third([5, 6, 3, 4, 8, 9, 2])` returns `[5, 6, 3,\
    \ 4, 8, 9, 2]` instead of `[2, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've fixed the code now.\n<|/ c |>\n<| a dscore=1 |>\n\
    The most efficient way is to use an Int64 array and sort it using sort!.\n<code>",
  "    \n    l = sort(l)\n    \n    third = div(length(l), 3)\n    \n    l = l[third:end]\n\
    \    \n    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l %\
    \ 3 == 0)]\n    \n    l = l[findall(l % 3 != 0)]\n    \n    l = sort(l)\n    \n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/17677257)\n<|/ c |>\n<| c |>\n\
    This does provide an answer to the question. He wants to sort a list by its values\
    \ at indicies that are divisible by three. He also wants to sort the list by those\
    \ indicies that are not divisible by three. He also wants to sort the list by\
    \ those indicies that are not divisible by three. He also wants to sort the list\
    \ by those indicies that are not divisible by three. He also wants to sort the\
    \ list by those indicies that are not divisible by three. He also wants to sort\
    \ the list by those indicies that are not divisible by three. He also wants to\
    \ sort the list by those indicies that are not divisible by three. He also wants\
    \ to sort the list by those indicies that are not divisible by three. He also\
    \ wants to sort the list by those indicies that are not divisible by three. He\
    \ also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those indicies that are not divisible by three.\
    \ He also wants to sort the list by those ", "    \n    l = sort(l)\n    \n  \
    \  l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work if there\
    \ are duplicates in the list. `sort_third([5, 6, 3, 4, 8, 9, 2, 5])` returns `[2,\
    \ 5, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| a tags=julia,sorting |>\n<code>", "   \
    \ l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    l = sort(l)\n    return l\n\
    end\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis does not answer\
    \ the question. `sort_third` does not sort the array in place. It returns a new\
    \ array.\n<|/ c |>\n<| a dscore=2 |>\nI came up with this solution:\n<code>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list l and returns a list l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</code>\n<|/ a |>\n<| c |>\nI appreciate your answer, but this doesn't\
    \ really answer the question. I'm looking for a way to do this without having\
    \ to write my own sort function.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require writing your own sort function\n<|/ c |>\n<| c |>\nI appreciate your\
    \ answer, but this doesn't really answer the question. I'm looking for a way to\
    \ do this without having to write my own sort function.\n<|/ c |>\n<| c |>\nI\
    \ added a solution that doesn't require writing your own sort function\n<|/ c\
    \ |>\n<| c |>\nI appreciate your answer, but this doesn't really answer the question.\
    \ I'm looking for a way to do this without having to write my own sort function.\n\
    <|/ c |>\n<| a tags=julia,sorting |>\nHere's a solution using sortperm:\n<code>\n\
    julia> function sort_third(l::Vector{Int64})::Vector{Int64}\n           l = sortperm(l)\n\
    \           return l[findall(l .% 3 == 0)]\n       end\nsort_third (generic function\
    \ with 1 method)", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l\
    \ % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 ==\
    \ 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", " \
    \   \n    l = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    third\
    \ = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n\
    \    \n    third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n  \
    \  third = third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third =\
    \ third[1:end-1]\n    \n    third = third[1:end-1]\n    \n    third = third",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ list l and returns a list l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n\
    \    return l\nend\n</cell>\n<text>\nExercise: Write a function that takes a list\
    \ l and returns a list l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    l = sort(l)\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting |>\n<code>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3\
    \ == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 != 0)]\n    \n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    l = sort(l)\n    return l\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| c |>\nThis doesn't work for me. `sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])` returns `[2, 6, 3, 4, 8, 9, 5]` instead of `[5, 6, 3, 4,\
    \ 8, 9, 2]`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works as expected.\
    \ Are you sure you copied it correctly? I tested it on Julia 0.6.2 and it works\
    \ as expected. Are you sure you copied it correctly? I tested it on Julia 0.6.2\
    \ and it works as expected. Are you sure you copied it correctly? I tested it\
    \ on Julia 0.6.2 and it works as expected. Are you sure you copied it correctly?\
    \ I tested it on Julia 0.6.2 and it works as expected. Are you sure you copied\
    \ it correctly? I tested it on Julia 0.6.2 and it works as expected. Are you sure\
    \ you copied it correctly? I tested it on Julia 0.6.2 and it works as expected.\
    \ Are you sure you copied it correctly? I tested it on Julia 0.6.2 and it works\
    \ as expected. Are you sure you copied it correctly? I tested it on Julia 0.6.2\
    \ and it works as expected. Are you sure you copied it correctly? I tested it\
    \ on Julia 0.6.2 and it works as expected. Are you sure you copied it correctly?\
    \ I tested it on Julia 0.6.2 and it works as expected. Are you sure you copied\
    \ it correctly? I tested it on Julia 0.6.2 and it works as expected. Are you sure\
    \ you copied it correctly? I tested it on Julia 0.6.2 and it works as expected.\
    \ Are you sure you copied it correctly? I tested it on Julia 0.6.2 and it works\
    \ as expected. Are you sure you copied it correctly? I tested it on Julia 0.6.2\
    \ and it works as expected. Are you sure you copied it correctly? I tested it\
    \ on Julia 0.6.2 and it works as expected. Are you sure you copied it correctly?\
    \ I tested it on Julia 0.6.2 and it works as expected. Are you sure you copied\
    \ it correctly? I tested it on Julia 0.6.2 and it works as expected. Are you sure\
    \ you copied it correctly? I tested it on Julia 0.6.2 and it works as expected.\
    \ Are you sure you copied it correctly? I tested it on Julia 0.6.2 and it works\
    \ as expected. Are you sure you copied it correctly? I tested it on Julia ", " \
    \   \n    l = sort(l)\n    \n    third = l[div(length(l), 3) == 3]\n    \n   \
    \ third = sort(third)\n    \n    third = third[div(length(third), 3) == 3]\n \
    \   \n    third = third[div(length(third), 3) == 3]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = sort(third)\n    \n    third = third[div(length(third), 3) == 3]\n    \n \
    \   third = third[div(length(third), 3) == 3]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = sort(third)\n    \n    third = third[div(length(third), 3) == 3]\n    \n \
    \   third = third[div(length(third), 3) == 3]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = sort(third)\n    \n    third = third[div(length(third), 3) == 3]\n    \n \
    \   third = third[div(length(third), 3) == 3]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = sort(third)\n    \n    third = third[", "    l =\
    \ sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis does not\
    \ answer the question. `sort_third` does not sort the indicies that are divisible\
    \ by three.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that\
    \ does sort the indicies that are divisible by three.\n<|/ c |>\n<| a dscore=0\
    \ |>\nI believe that this is what you are looking for:\n<code>", "    \n    l\
    \ = sort(l)\n    \n    lenl = length(l)\n    \n    third = lenl/3\n    \n    lenthird\
    \ = length(third)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l =\
    \ l[findall(l % 3 == 0)]\n    return l\nend", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    l = sort(l)\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ l = l[findall(l % 3 != 0)]\n    return l\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,julia |>\n<code>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
