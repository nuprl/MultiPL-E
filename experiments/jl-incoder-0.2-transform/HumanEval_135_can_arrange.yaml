name: HumanEval_135_can_arrange
language: jl
prompt: "\"\"\"Create a function which returns the largest index of an element which\n\
  \    is not greater than or equal to the element immediately preceding it. If\n\
  \    no such element exists then return -1. The given array will not contain\n \
  \   duplicate values.\n\n    Examples:\n    >>> can_arrange([1, 2, 4, 3, 5])\n \
  \   3\n    >>> can_arrange([1, 2, 3])\n    -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
  \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
  \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
  @test(candidate(Vector{Int64}([])) == -1)\nend\n"
completions: ["    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ element in the given array that is closest to the given value. If there are\
    \ multiple elements with the same value then return the index of the first one.\
    \ For example, given arr = [1, 3, 6, 3, 6, 9] and val = 6 then your function should\
    \ return 1 because arr[1] is closest to 6. Your function should work for any array\
    \ and any value.", "    largest = arr[1]\n    for i in 2:length(arr)\n       \
    \ if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n  \
    \  return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the given array that is closest to the given value.\
    \ If there are multiple such elements, return the index of the first such element.\
    \ The given array will not contain duplicate values.", "    largest = Int64(-1)\n\
    \    for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        else\n            return -1\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        else\n            return -1\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the index of the element in the given\
    \ array that is\nthe greatest amongst all the other elements in the array. For\
    \ example,\n[1,2,3,4,5] has the greatest among all the other elements in the array\
    \ so the", "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\n4.2 Find all elements in a vector which satisfy a predicate",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the index of the element in\
    \ the given array which has the largest value.", "    largest = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nNow let's test\
    \ our function", "    largest = arr[1]\n    for x in arr[2:end]\n        if x\
    \ <= largest\n            largest = x\n        else\n            return -1\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the largest index of an element which\n    is not greater than or equal\
    \ to the element immediately preceding it. If\n    no such element exists then\
    \ return -1. The given array will not contain\n    duplicate values.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    largest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if a binary tree is balanced, meaning\
    \ that\nthe heights of the two subtrees of any node never differ by more than\
    \ 1.", "    largest = -1\n    largestIdx = -1\n    for idx in 1:length(arr)\n\
    \        if arr[idx] > arr[largest]\n            largest = idx\n            largestIdx\
    \ = idx\n        end\n    end\n    return largestIdx\nend", "    largest = -1\n\
    \    largestIndex = -1\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of elements in the array which are\ngreater\
    \ than or equal to the element immediately preceding it. Return 0 if\nthere are\
    \ no such elements. You may assume that the array is not empty.", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the first element of an array\
    \ which\nis greater than or equal to the element immediately preceding it. If\n\
    no such element exists then return -1. The given array will not contain\nduplicate\
    \ values.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    largest\nend\n</cell>\n<text>\nExercise 9\nWrite a function\
    \ that returns an array of all possible permutations of the given array. \nThe\
    \ given array will not contain duplicate values.", "    largest = arr[1]\n   \
    \ for i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.4>", "    largest = Int64(-1)\n    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the largest index of an element which\n    is not greater than\
    \ or equal to the element immediately preceding it. If\n    no such element exists\
    \ then return -1. The given array will not contain\n    duplicate values.", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given array that has the largest value. If there are multiple elements\
    \ in the array that have the largest value, then return the index of the first\
    \ one.", "    largest = Int64(-1) # initialize largest index\n    largest = arr[1]\
    \ # set largest index to first element\n    for el in arr[2:end] \n        if\
    \ el > largest \n            largest = el \n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ arr[2:end]\n        if i > largest\n            largest = i\n        end\n \
    \   end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return -1\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the elements in the\
    \ vector. \nThe vector will not be empty, and will not contain duplicate values.",
  "    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.0>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector which are not equal to zero.", "    largest = -1\n    largestIdx\
    \ = -1\n    for idx in 1:length(arr)\n        if arr[idx] > arr[largest]\n   \
    \         largest = idx\n            largestIdx = idx\n        end\n    end\n\
    \    return largestIdx\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n            largest\
    \ = x\n        else\n            return -1\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the index of the\
    \ first element of a vector\n    which is greater than or equal to the element\
    \ immediately preceding it. If\n    no such element exists then return -1. The\
    \ given vector will not contain\n    duplicate values.", "    largest = Int64(-1)\n\
    \    for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<text>\nNow let's try it out!", " \
    \   largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n      \
    \      largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times the value 1 appears in an array.\
    \ For example, [1,1,1,1] should return 3.", "    largest = arr[1]\n    for i in\
    \ arr[2:end]\n        if i > largest\n            largest = i\n        end\n \
    \   end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend", "    largest = arr[1]\n\
    \    for i in arr[2:end]\n        if i > largest\n            largest = i\n  \
    \      end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in arr[2:end]\n\
    \        if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1, 2,\
    \ 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\n4.5 Find\
    \ all elements in a vector which satisfy a predicate\nWrite a predicate which\
    \ returns true if the given element satisfies a certain condition. For example,\
    \ a predicate which returns true if the given element is an even number. Then,\
    \ write a function to find all elements in a vector which satisfy this predicate.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIndex = 0\n\
    \    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n      \
    \      largest = arr[index]\n            largestIndex = index\n        end\n \
    \   end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n     \
    \   if arr[index] > arr[largest]\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIndex = 0\n\
    \    for i = 1:length(arr)\n        if arr[i] > arr[largest]\n            largest\
    \ = arr[i]\n            largestIndex = i\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the array\
    \ contains no duplicates. You may assume that the array does not contain any duplicate\
    \ values.", "    largest = Int64(-1)\n    for x in arr\n        if x > largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nNow let's test our new function by comparing it to the built-in max.",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number\
    \ of elements in a given array that are\ngreater than or equal to the element\
    \ immediately preceding it. If no\nsuch element exists then return -1. The given\
    \ array will not contain\nduplicate values.", "    largest = -1\n    for i in\
    \ 1:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    largest\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that returns true if the given array is sorted\
    \ in ascending order.", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the first element of a vector\n    which satisfies a predicate\
    \ p (which takes a single element of the vector\n    and returns a boolean). For\
    \ example, given p = (x) -> x > 3, the function\n    should return 1 because the\
    \ first element of the vector satisfies p.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1, 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the element\
    \ which has the largest\n    absolute value. If there are multiple elements which\
    \ have the largest absolute\n    value then return any one of them. For example,\
    \ given [\u22122, \u22121, 0, 1, 2]\n    then your function should return 1 because\
    \ \u22122 is the largest absolute value.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>",
  "    largest = Int64(-1)\n    for x in arr\n        if x > largest\n           \
    \ largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the number 2 appears twice in the array [1,2,2,3,4,4,4,5,6,6].", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the first element\
    \ of an array which\nis greater than or equal to the element immediately preceding\
    \ it. Return -1\nif no such element exists.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1, 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given array that is the\nlargest and also not greater than the element\
    \ immediately preceding it. Return -1\nif no such element exists.", "    largest\
    \ = Int64(-1)\n    for x in arr\n        if x > largest\n            largest =\
    \ x\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns true if the given array contains any duplicates.\
    \ \nThe given array will not contain duplicate values.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns a vector where each element is\nthe sum of the previous\
    \ two elements in the vector. For example, if the vector\nis [1,2,3,4,5] then\
    \ the returned vector would be [2,5,7,10,13].", "    largest = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        else\n            return -1\n        end\n    end\n    return largest\n\
    end", "    largest = -1\n    for x in arr\n        if x > largest\n          \
    \  largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the index of the element in the given\
    \ array which has the largest value.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    largest\nend\n</cell>\n<code language=julia-1.3>", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange(arr);\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of booleans indicating whether\neach\
    \ element in the vector is greater than or equal to the element immediately preceding\
    \ it.\nIf no such element exists then return false. The given vector will not\
    \ contain duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the first element of a vector\n    that satisfies a predicate p\
    \ (which takes a single element of the vector\n    and returns a boolean). The\
    \ predicate p should take a single element of\n    the vector and return a boolean.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the first element of a vector\n    which is greater than or equal\
    \ to the element immediately preceding it.\n    If no such element exists then\
    \ return -1. The given vector will not contain\n    duplicate values.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend", "    largest\
    \ = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.0>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given array that\nhas the smallest value. If there is no such element\
    \ then return -1.", "    largest = -1\n    for x in arr\n        if x > largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.3>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ Int64(-1)\n    largest = arr[1]\n    for x in arr[2:end]\n        if x < largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = -1\n    largestIndex = 0\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the array that is closest to the given number. \n\
    If the given number is not in the array then return -1.", "    largest = arr[1]\n\
    \    for i in arr[2:end]\n        if i > largest\n            largest = i\n  \
    \      end\n    end\n    return largest\nend", "    largest = -1\n    for i in\
    \ 1:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>",
  "    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n        if arr[i]\
    \ > arr[largest]\n            largest = arr[i]\n            largestIndex = i\n\
    \        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    for x in arr\n        if x > largest\n            largest = x\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the array contains any duplicates. If\n    no duplicates exist\
    \ then return false. Do not use sets or hashes.", "    largest = Int64(-1)\n \
    \   for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a vector that are not equal to zero.",
  "    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n       \
    \     largest = x\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in arr[2:end]\n \
    \       if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times the given element appears in an\
    \ array. For example, the number of times 3 appears in [1,2,3,4,3] is 3.", " \
    \   largest = Int64(-1) # initialize largest to -1\n    for x in arr\n       \
    \ if x > largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIdx =\
    \ -1\n    for idx in 1:length(arr)\n        if arr[idx] > arr[largest]\n     \
    \       largest = idx\n            largestIdx = idx\n        end\n    end\n  \
    \  return largestIdx\nend", "    largest = arr[1]\n    for i in arr[2:end]\n \
    \       if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.0>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>",
  "    largest = -1\n    largest = find_largest_index(arr, largest)\n    return largest\n\
    end", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend", "    largest = -1\n    for x in arr\n        if x >\
    \ largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the largest index of an element which is not\
    \ greater than or equal to the element immediately preceding it. If\n    no such\
    \ element exists then return -1. The given array will not contain\n    duplicate\
    \ values.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for x in arr[2:end]\n\
    \        if x <= largest\n            largest = x\n        else\n            break\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest index of\
    \ an element which is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Find all elements\
    \ of a vector which are less than or equal to some value", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = -1\n    largestIndex = -1\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.0>", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in the array which are not equal to its second\
    \ element.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.4>", "    largest = -1\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ index of the element in the given array that is closest to the given value.\
    \ If there are multiple elements in the array that are the closest to the given\
    \ value then return the index of the first one. The given array will not contain\
    \ duplicate values.", "    largest = -1\n    largestIndex = -1\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the array contains no duplicates, false\
    \ otherwise.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the largest index of an element which is not greater\
    \ than or equal to the element immediately preceding it. Return -1 in the event\
    \ that no such element exists. Write this function in Julia.", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        else\n            return -1\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,\
    \ 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\n4.3\
    \ Finding the first index of an element which is not greater than or equal to\
    \ it\nWrite a function that returns the index of the first element of an array\
    \ which\nis not greater than or equal to the element given as input. If such element\
    \ does\nnot exist then return -1. The given array will not contain duplicate values.",
  "    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nThe function above is called can_arrange and returns a single\
    \ Int64. \nThe function can take any type of array and will return the largest\
    \ index of an element which is not greater than or equal to the element immediately\
    \ preceding it. \nIf no such element exists then return -1. The given array will\
    \ not contain duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,\
    \ 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times the element appears in\
    \ the given array.", "    largest = arr[1]\n    for i in 2:length(arr)\n     \
    \   if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend", "    largest\
    \ = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the element in the given array\
    \ that is closest to the given value. If there are multiple elements with the\
    \ same value then return the smallest index. For example, given arr = [1, 2, 4,\
    \ 3, 5] and val = 4, the function should return 1.", "    largest = -1\n    for\
    \ x in arr\n        if x > largest\n            largest = x\n        end\n   \
    \ end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element of a vector\n    that satisfies\
    \ a predicate p (where p is a function from elements to booleans).", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>\n@time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.0>\n\
    @time can_arrange([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times the given element appears in an array. \nIf the\
    \ element does not appear then return -1. \nThe given array will not contain duplicate\
    \ values.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the index of the\
    \ first element of an array which\nis greater than or equal to the element immediately\
    \ preceding it. If\nno such element exists then return -1. The given array will\
    \ not contain\nduplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nThe function above is called can_arrange\
    \ and takes in an array of Int64 and returns the largest index of an element which\
    \ is not greater than or equal to the element immediately preceding it. If no\
    \ such element exists then return -1. The given array will not contain duplicate\
    \ values.", "    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n\
    \            largest = x\n        else\n            break\n    end\n    return\
    \ -1 if largest == -1 else largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times an element\
    \ appears in an array. For example, the number of times 3 appears in [1,2,3,4,3]\
    \ is 3.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ element in the given array that has the largest value greater than or equal\
    \ to the given value.", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    largest\nend\n</cell>\n<code language=julia-1.4>", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        else\n            return -1\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the k-th\
    \ largest element", "    largest = arr[1]\n    for i in 2:length(arr)\n      \
    \  if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n \
    \   return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = Int64(-1)\n\
    \    for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the index of the element in the given array\
    \ that\nhas the largest value less than or equal to the given value. If there\
    \ is no such\nelement then return -1. The given array will not contain duplicate\
    \ values.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a vector which are less than or equal\
    \ to some value x. \nFor example, given x = 3, return 2 because there are two\
    \ elements in the vector which are less than or equal to 3.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = Int64(-1)\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        else\n            return -1\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nThe function above is called can_arrange. Now\
    \ let's try it out on some test cases.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the first element of a vector\n    which satisfies a predicate\
    \ p (which takes a single element of the vector\n    and returns a boolean). Return\
    \ -1 if no such element exists.", "    largest = -1\n    largestIndex = -1\n \
    \   for index in 1:length(arr)\n        if arr[index] > arr[largest]\n       \
    \     largest = arr[index]\n            largestIndex = index\n        end\n  \
    \  end\n    return largestIndex\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the given array that is closest to\
    \ the given value. If there are multiple such elements, return the index of the\
    \ first such element.", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nNow let's test our new function by\
    \ comparing it to our old function.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the largest index of\
    \ an element which is not greater than or equal to the element immediately preceding\
    \ it. Return -1 in the event that no such element exists.", "    largest = Int64(-1);\
    \ \n    for x in arr \n        if x != largest\n            largest = x\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers and returns a vector of\nBoolean\
    \ values indicating whether each element is greater than or equal\nto the previous\
    \ element in the vector. If there are no elements then return\nan empty vector.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the largest index of an element which\n    is not greater than\
    \ or equal to the element immediately preceding it. If\n    no such element exists\
    \ then return -1. The given array will not contain\n    duplicate values.", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            return -1\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the number of elements in the given array that are\nless than the\
    \ given value.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1, 2,\
    \ 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\n4.3 Finding\
    \ the index of an element in a sorted array\nGiven an array arr of n integers\
    \ sorted in non-decreasing order, find the\nindex of the element e. Return \u2212\
    1 if e is not in arr. You may assume that\nthe array is non-empty and the e element\
    \ does not appear before any other\nelement in the array.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>",
  "    largest = Int64(-1)\n    largest = arr[1]\n    for i in 2:length(arr)\n   \
    \     if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    for x in arr\n        if x > largest\n            largest = x\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in arr[2:end]\n        if i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index\
    \ of the first element of a vector\n    that satisfies a predicate. For example,\
    \ given [1,2,3,4,5], return the\n    index of the first element in the vector\
    \ that is greater than 3.", "    largest = arr[1]\n    for i in arr[2:end]\n \
    \       if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend", "    largest = -1\n    largest = arr[1]\n    for x in arr[2:end]\n\
    \        if x <= largest\n            largest = x\n        else\n            break\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times the given element appears in an array. For example, the number of times\
    \ 3 appears in [1,2,3,4,3,5,6,7,8,9] would be 3. Do not hard-code the answer into\
    \ the function definition, instead write a test that checks the answer against\
    \ the correct answer.", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the given array that has the largest value. If there\
    \ are multiple elements with the same largest value, then return the first one\
    \ encountered. You may assume that the array does not contain duplicate values.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largest = findfirst(x -> x <= arr[largest], arr)\n    if largest ==\
    \ -1\n        largest = -1\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n     \
    \   if arr[index] > arr[largest]\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of an array which\n    is greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.", "    largest = Int64(-1)\n    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element which\
    \ appears most frequently in an array. \nIf no such element exists then return\
    \ -1. The given array will not contain duplicate values.", "    largest = arr[1]\n\
    \    for x in arr[2:end]\n        if x > largest\n            largest = x\n  \
    \      end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the given array that is closest to the given value.\
    \ If there are multiple elements with the same value then return the smallest\
    \ index. For example, given [5, 4, 3, 6, 7] and value 7, the function should return\
    \ 3.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] >\
    \ largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for x in\
    \ arr[2:end]\n        if x > largest\n            largest = x\n        end\n \
    \   end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the array which has the largest value.\
    \ If there are multiple elements which have the same value, then return the index\
    \ of the first one.", "    largest = -1\n    for x in arr\n        if x > largest\n\
    \            largest = x\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = -1\n    for i in arr\n        if i\
    \ > largest\n            largest = i\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIndex\
    \ = 0\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times the given\
    \ element appears in an array. For example, the number of times the value 5 appears\
    \ in [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = Int64(-1) # initialize largest to -1\n    for x in arr\n        if\
    \ x <= largest\n            largest = x\n        else\n            break\n   \
    \ end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n@assert can_arrange([1,\
    \ 2, 4, 3, 5]) == 3\n@assert can_arrange([1, 2, 3]) == -1\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times each element appears in\
    \ an array. For example, if given [1, 1, 2, 3] then your function should return\
    \ [1, 1, 2, 3] since it appears three times.", "    largest = arr[1]\n    for\
    \ el in arr[2:end]\n        if el > largest\n            largest = el\n      \
    \  end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = Int64(-1)\n    for x in arr\n        if x > largest\n           \
    \ largest = x\n        end\n    end\n    return largest\nend", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the given array which\nhas the smallest value. If there is no such element then\
    \ return -1.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ arr[2:end]\n        if i > largest\n            largest = i\n        end\n \
    \   end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if a binary tree is balanced. A binary tree is balanced if\
    \ every level\nhas the same number of nodes. A tree is unbalanced if there is\
    \ a level where all the nodes are \neither left or right children of a node with\
    \ fewer nodes. A tree is balanced if every level\nhas the same number of nodes.\
    \ A tree is unbalanced if there is a level where all the nodes are \neither left\
    \ or right children of a node with fewer nodes. A tree is balanced if every level\n\
    has the same number of nodes. A tree is unbalanced if there is a level where all\
    \ the nodes are \neither left or right children of a node with fewer nodes. A\
    \ tree is balanced if every level\nhas the same number of nodes. A tree is unbalanced\
    \ if there is a level where all the nodes are \neither left or right children\
    \ of a node with fewer nodes. A tree is balanced if every level\nhas the same\
    \ number of nodes. A tree is unbalanced if there is a level where all the nodes\
    \ are \neither left or right children of a node with fewer nodes. A tree is balanced\
    \ if every level\nhas the same number of nodes. A tree is unbalanced if there\
    \ is a level where all the nodes are \neither left or right children of a node\
    \ with fewer nodes. A tree is balanced if every level\nhas the same number of\
    \ nodes. A tree is unbalanced if there is a level where all the nodes are \neither\
    \ left or right children of a node with fewer nodes. A tree is balanced if every\
    \ level\nhas the same number of nodes. A tree is unbalanced if there is a level\
    \ where all the nodes are \neither left or right children of a node with fewer\
    \ nodes. A tree is balanced if every level\nhas the same number of nodes. A tree\
    \ is unbalanced if there is a level where all the nodes are \neither left or right\
    \ children of a node with fewer nodes. A tree is balanced if every level\nhas\
    \ the same number of nodes. A tree is unbalanced if there is a level where all\
    \ the nodes are \neither left or right children of a node with fewer nodes. A\
    \ tree is balanced if every level\nhas the same number of nodes. A tree is unbalanced\
    \ if there is a level where all the nodes are \neither left or right children\
    \ of a node with fewer nodes. A tree is balanced if every level\nhas the same\
    \ number of nodes. A tree is unbalanced if there is a level where all the nodes\
    \ are \neither ", "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n\
    \        if arr[index] > arr[largest]\n            largest = arr[index]\n    \
    \        largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIndex\
    \ = 0\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>", "    largest = -1\n    largestIndex = 0\n\
    \    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n      \
    \      largest = arr[index]\n            largestIndex = index\n        end\n \
    \   end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n       \
    \     largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time can_arrange(range(1,10000));\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the largest index of an element which\n    is\
    \ not greater than or equal to the element immediately preceding it. If\n    no\
    \ such element exists then return -1. The given array will not contain\n    duplicate\
    \ values.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nNow let's test our function", "    largest = arr[1]\n  \
    \  for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        else\n            return -1\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.0>", "    largest = -1\n    for\
    \ x in arr\n        if x > largest\n            largest = x\n        end\n   \
    \ end\n    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element of a vector\n    which is not equal\
    \ to the element immediately preceding it. Return -1\n    if no such element exists.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        else\n            break\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n \
    \   for i in arr[2:end]\n        if i > largest\n            largest = i\n   \
    \     end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nNow let's test the function by comparing it to the built-in max\
    \ function.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the index of the\
    \ element in the array that is\nthe greatest when compared to the element immediately\
    \ preceding it. If no\nsuch element exists then return -1. The given array will\
    \ not contain\nduplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ >= arr[largest]\n            largest = arr[index]\n            largestIndex\
    \ = index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = -1\n    largestIndex = 0\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n\
    \    for i in arr[2:end]\n        if i > largest\n            largest = i\n  \
    \      end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = Int64(-1)\n    for x in arr\n        if x > largest\n           \
    \ largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the index of the element in the given\
    \ array that is closest to the given value. If there are multiple elements with\
    \ the same distance then return the index of the first one.", "    largest = -1\n\
    \    for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    for x in arr\n        if x > largest\n            largest = x\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    @time can_arrange([1, 2, 4, 3, 5])\n</cell>\n<code language=julia-1.4>\n@time\
    \ can_arrange([1, 2, 3])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the largest index of an element which\n    is not greater than or equal to the\
    \ element immediately preceding it. If\n    no such element exists then return\
    \ -1. The given array will not contain\n    duplicate values.", "    largest =\
    \ arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nNow let's\
    \ test our function:", "    largest = -1\n    largestIndex = 0\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest = Int64(-1)\n\
    \    for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in arr[2:end]\n        if i > largest\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange(arr);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the index of the element in the array\
    \ which is\nthe largest number greater than or equal to the element immediately\
    \ preceding it.\nIf no such element exists then return -1. The given array will\
    \ not contain\nduplicate values.", "    largest = -1\n    for i in 1:length(arr)\n\
    \        if arr[i] > largest\n            largest = i\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largestIndex = -1\n    for index in 1:length(arr)\n        if arr[index]\
    \ <= arr[largest]\n            largest = index\n            largestIndex = index\n\
    \        else\n            break\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ element in the given array that is closest to the given value. If there are\
    \ multiple elements in the array that match the value then return the smallest\
    \ index. For example, if arr = [1, 2, 4, 3, 5] and val = 4 then your function\
    \ should return 1 because arr[1] is closest to 4.", "    largest = arr[1]\n  \
    \  for i in arr[2:end]\n        if i > largest\n            largest = i\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
