name: HumanEval_82_prime_length
language: jl
prompt: "\"\"\"Write a function that takes a string and returns True if the string\n\
  \    length is a prime number or False otherwise\n    Examples\n    >>> prime_length(\"\
  Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
  kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"\n\
  function prime_length(string::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = prime_length;\n\t@test(candidate(\"\
  Hello\") == true)\n\t@test(candidate(\"abcdcba\") == true)\n\t@test(candidate(\"\
  kittens\") == true)\n\t@test(candidate(\"orange\") == false)\n\t@test(candidate(\"\
  wow\") == true)\n\t@test(candidate(\"world\") == true)\n\t@test(candidate(\"MadaM\"\
  ) == true)\n\t@test(candidate(\"Wow\") == true)\n\t@test(candidate(\"\") == false)\n\
  \t@test(candidate(\"HI\") == true)\n\t@test(candidate(\"go\") == true)\n\t@test(candidate(\"\
  gogo\") == false)\n\t@test(candidate(\"aaaaaaaaaaaaaaa\") == false)\n\t@test(candidate(\"\
  Madam\") == true)\n\t@test(candidate(\"M\") == false)\n\t@test(candidate(\"0\")\
  \ == false)\nend\n"
completions: ["    \n    prime_length::Bool = false \n    \n    for i in string.chars\
    \ \n        if prime_length::Bool = false \n            if i::Int > 1 \n     \
    \           prime_length::Bool = false \n            else \n                prime_length::Bool\
    \ = true \n    return prime_length::Bool \nend \n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    Helloo\")\ntrue\n>>> palindrome(\"kittens\")\ntrue\n>>> palindrome(\"orange\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palin", "    \n    prime_length::Bool\
    \ = true \n    \n    for i in string\n        if prime_length::Bool = true \n\
    \            for i in string\n                if i::Int % i::Int == 0\n      \
    \              prime_length::Bool = false\n                    break\n       \
    \         break\n            break\n    return prime_length::Bool\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string contains only letters a-z or A-Z or False otherwise\nExamples\n>>> is_valid_alpha(\"\
    Hello\")\ntrue\n>>> is_valid_alpha(\"abcdcba\")\ntrue\n>>> is_valid_alpha(\"kittens\"\
    )\nfalse\n>>> is_valid_alpha(\"orange\")\nfalse\n\"\"\"", "    \n    prime_numbers\
    \ = prime_numbers()\n    \n    for i in string:\n        if i in prime_numbers:\n\
    \            return False\n    return True\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n", "    \n\
    \    prime_length::Bool = false \n    \n    for character in string:\n       \
    \ if character == \"a\" || character == \"e\" || character == \"i\" || character\
    \ == \"o\" || character == \"u\" || character == \"A\" || character == \"E\" ||\
    \ character == \"I\" || character == \"O\" || character == \"U\"\n           \
    \ prime_length = true\n        else\n            prime_length = false\n    end\n\
    \    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string has all letters capitalized and False\
    \ otherwise\nExamples\n>>> capitalized_string(\"hello\")\ntrue\n>>> capitalized_string(\"\
    HELLO\")\ntrue\n>>> capitalized_string(\"HELLO WORLD\")\nfalse\n>>> capitalized_string(\"\
    HELLO WORLD HELLO WORLD\")\ntrue\n>>> capitalized_string(\"HELLO WORLD HELLO WORLD\
    \ HELLO WORLD\")\nfalse\n>>> capitalized_string(\"HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD\")\nfalse\n>>> capitalized_string(\"HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD\")\nfalse\n>>> capitalized_string(\"HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\"\
    )\nfalse\n>>> capitalized_string(\"HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO ", "    \n    prime_length::Bool =\
    \ false\n    \n    for i in string\n        if prime_length == true\n        \
    \    break\n        if string[i] == string[i+1]\n            prime_length = false\n\
    \        else\n            prime_length = true\n    end\n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ palindrome(\"Hello\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n",
  "    \n    prime_length::Bool = true \n    \n    for i in string:\n        if i\
    \ == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n        \
    \    prime_length = false\n            break\n        \n    for i in string:\n\
    \        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\"\
    :\n            prime_length = false\n            break\n        \n    for i in\
    \ string:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or\
    \ i == \"u\":\n            prime_length = false\n            break\n        \n\
    \    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i\
    \ == \"o\" or i == \"u\":\n            prime_length = false\n            break\n\
    \        \n    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"\
    i\" or i == \"o\" or i == \"u\":\n            prime_length = false\n         \
    \   break\n        \n    for i in string:\n        if i == \"a\" or i == \"e\"\
    \ or i == \"i\" or i == \"o\" or i == \"u\":\n            prime_length = false\n\
    \            break\n        \n    for i in string:\n        if i == \"a\" or i\
    \ == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            prime_length\
    \ = false\n            break\n        \n    for i in string:\n        if i ==\
    \ \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n           \
    \ prime_length = false\n            break\n        \n    for i in string:\n  \
    \      if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n\
    \            prime_length = false\n            break\n        \n    for i in string:\n\
    \        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\"\
    :\n            prime_length = false\n            break\n        \n    for i in\
    \ string:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or\
    \ i == \"u\":\n            prime_length = false\n            break\n        \n\
    \    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i\
    \ == \"o\" or i == \"u\":\n            prime_length = false\n            break\n\
    \        \n    for i in string:\n        if i == \"a\" or i == \"e\" or i == \"\
    i\" or i == \"o\" or i == \"u\":\n            prime_length = false\n         \
    \   break\n        \n    for i in string:\n        if i == \"a\" or i == \"e\"\
    \ or i == \"i\" or i == \"o\" or i == \"u\":\n            prime_length = false\n\
    \            break\n        \n    for i in string:\n        if i == \"a\" or i\
    \ == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":", "    \n    if string ==\
    \ \"\"\n        true\n    else\n        if string.length % 2 == 0\n          \
    \  true\n        else\n            if string.length % 3 == 0\n               \
    \ true\n            else\n                if string.length % 5 == 0\n        \
    \            true\n                else\n                    false\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26370072)\n<|/ c |>\n<| c |>\n\
    I added an example for you\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26370072)\n\
    <|/ c |>\n<| c |>\nI added an example for you\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26370072)\n\
    <|/ c |>\n<| a tags=haskell,primes |>\n<code>\nprimes :: [Integer]\nprimes = 2\
    \ : filter isPrime [3..]\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26370072)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26370072)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26370072)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime\
    \ [3..]\n</code>\n<|/", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26812892)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to write\
    \ a function that takes a string and returns True if the string length is a prime\
    \ number or False otherwise. He also asked how to write this in Haskell. He also\
    \ asked how to write this in Python. He also asked how to write this in R. He\
    \ also asked how to write this in C. He also asked how to write this in C++. He\
    \ also asked how to write this in Java. He also asked how to write this in C#.\
    \ He also asked how to write this in Ruby. He also asked how to write this in\
    \ PHP. He also asked how to write this in C. He also asked how to write this in\
    \ C#. He also asked how to write this in C++. He also asked how to write this\
    \ in R. He also asked how to write this in C. He also asked how to write this\
    \ in C#. He also asked how to write this in Java. He also asked how to write this\
    \ in C#. He also asked how to write this in R. He also asked how to write this\
    \ in C. He also asked how to write this in C#. He also asked how to write this\
    \ in Java. He also asked how to write this in C#. He also asked how to write this\
    \ in R. He also asked how to write this in C. He also asked how to write this\
    \ in C#. He also asked how to write this in Java. He also asked how to write this\
    \ in C#. He also asked how to write this in R. He also asked how to write this\
    \ in C. He also asked how to write this in C#. He also asked how to write this\
    \ in Java. He also asked how to write this in C#. He also asked how to write this\
    \ in R. He ", "    \n    prime_numbers = Set{Int}()\n    \n    for i in string.split(\"\
    \")\n        prime_numbers.add(Int(i))\n    \n    for i in prime_numbers\n   \
    \     if prime_numbers.count(i) == Int(string.count(i))\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string\n    contains only letters (a-z) or False otherwise\n\
    \    Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"\
    abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    true\n    \"\"\"", "    \n    prime_numbers = Set{Int}()\n    \n\
    \    for i in 2..sqrt(Int,string)\n        if prime_numbers.contains(i)\n    \
    \        prime_numbers.remove(i)\n        else\n            prime_numbers.add(i)\n\
    \            \n    return prime_numbers.size == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"race", "    \n    prime_number::Bool\
    \ = true\n    \n    for character in string\n        if character == character\n\
    \            prime_number = false\n        end\n    end\n    \n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ palindrome(\"Hello\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    kittens\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n", "    \n    prime_numbers = prime_numbers()\n    \n    prime_numbers_length\
    \ = prime_numbers.len()\n    \n    if prime_numbers_length == 0 \n        true\n\
    \    else\n        if prime_numbers_length == 1 \n            true\n        else\n\
    \            if prime_numbers_length == 2 \n                true\n           \
    \ else\n                if prime_numbers_length == 3 \n                    true\n\
    \                else\n                    if prime_numbers_length == 4 \n   \
    \                     true\n                    else\n                       \
    \ if prime_numbers_length == 5 \n                            true\n          \
    \              else\n                            if prime_numbers_length == 6\
    \ \n                                true\n                            else\n \
    \                               if prime_numbers_length == 7 \n              \
    \                      true\n                                else\n          \
    \                          if prime_numbers_length == 8 \n                   \
    \                     true\n                                    else\n       \
    \                                 if prime_numbers_length == 9 \n            \
    \                                true\n                                      \
    \  else\n                                            if prime_numbers_length ==\
    \ 10 \n                                                true\n                \
    \                            else\n                                          \
    \      if prime_numbers_length == 11 \n                                      \
    \              true\n                                                else\n  \
    \                                                  if prime_numbers_length ==\
    \ 12 \n                                                        true\n        \
    \                                            else\n                          \
    \                              if prime_numbers_length == 13 \n              \
    \                                              true\n                        \
    \                                else\n                                      \
    \                      if prime_numbers_length == 14 \n                      \
    \                                          true\n                            \
    \                                else\n                                      \
    \                          if prime_numbers_length == 15 \n                  \
    \                                                  true\n                    \
    \                                            else\n                          \
    \                                          if prime_numbers_length == 16 \n  \
    \                                                                      true\n\
    \                                                                    else\n  \
    \                                                      if prime_numbers_length\
    \ == 17 \n                                                            true\n \
    \                                                       else\n               \
    \                                             if prime_numbers_length == 18 \n\
    \                                                                true\n      \
    \                                                      else\n                \
    \                                                if prime_numbers_length == 19\
    \ \n                                                                    true\n\
    \                                                                else\n      \
    \                                                              if prime_numbers_length\
    \ == 20 \n                                                                   \
    \     true\n                                                                 \
    \   else\n                                                        if prime_numbers_length\
    \ == 21 \n                                                            true\n \
    \                                                       else\n               \
    \                                             if prime_numbers_length == 22 \n\
    \                                                                true\n      \
    \                                                      else\n                \
    \                                                if prime_numbers_length == 23\
    \ \n                                                                    true\n\
    \                                                                else\n      \
    \                                                              if prime_numbers_length\
    \ == 24 \n                                                                   \
    \     true\n                                                                 \
    \   else\n                                                        if prime_numbers_length\
    \ == 25 \n                                                            true\n \
    \                                                       else\n               \
    \                                             if prime_numbers_length == 26 \n\
    \                                                                true\n      \
    \                                                      else\n                \
    \                                                if prime_numbers_length == 27\
    \ \n                                                                    true\n\
    \                                                                else\n      \
    \                                                              if prime_numbers_length\
    \ == 28 \n                                                                   \
    \     true\n                                                                 \
    \   else\n                                                        if prime_numbers_length\
    \ == 29 \n                                                            true\n \
    \                                                       else\n               \
    \                                             if prime_numbers_length", "    \n\
    \    prime_length::Bool = false\n    \n    if string == \"\"\n        return prime_length\n\
    \    \n    prime_length::Bool = true\n    \n    length::Int = string.length\n\
    \    \n    if length == 1\n        return prime_length\n    \n    if length %\
    \ 2 == 0\n        return prime_length\n    \n    prime_length::Bool = false\n\
    \    \n    for i in 2..length\n        if string % i == 0\n            prime_length::Bool\
    \ = false\n        end\n    end\n    \n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns True if the string is\
    \ a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"",
  "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string is a palindrome or False otherwise\nExamples\n\
    >>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> p", "    \n    prime_length = true\n    \n    for character in string:\n\
    \        if character == \" \":\n            prime_length = false\n          \
    \  break\n        \n        if character == \"a\" or character == \"e\" or character\
    \ == \"i\" or character == \"o\" or character == \"u\":\n            prime_length\
    \ = false\n            break\n        \n        if character == \"b\" or character\
    \ == \"c\" or character == \"d\" or character == \"f\" or character == \"g\" or\
    \ character == \"h\" or character == \"j\" or character == \"k\" or character\
    \ == \"l\" or character == \"m\" or character == \"n\" or character == \"p\" or\
    \ character == \"q\" or character == \"r\" or character == \"s\" or character\
    \ == \"t\" or character == \"v\" or character == \"w\" or character == \"x\" or\
    \ character == \"y\" or character == \"z\":\n            prime_length = false\n\
    \            break\n        \n        if character == \"0\" or character == \"\
    1\":\n            prime_length = false\n            break\n        \n        if\
    \ character == \"2\" or character == \"3\" or character == \"4\" or character\
    \ == \"5\" or character == \"6\" or character == \"7\" or character == \"8\" or\
    \ character == \"9\":\n            prime_length = false\n            break\n \
    \       \n        if character == \"!\" or character == \"?\" or character ==\
    \ \".\" or character == \"-\" or character == \"_\" or character == \"~\" or character\
    \ == \"+\" or character == \"=\" or character == \"^\" or character == \"{\" or\
    \ character == \"}\" or character == \"[\" or character == \"]\" or character\
    \ == \"|\" or character == \"\\\\\" or character == \"~\" or character == \"*\"\
    \ or character == \"(\" or character == \")\" or character == \"$\" or character\
    \ == \"@\" or character == \"!\" or character == \"#\" or character == \"$\" or\
    \ character == \"%\" or character == \"^\" or character == \"&\" or character\
    \ == \"*\" or character == \"+\" or character == \"=\" or character == \"<\" or\
    \ character == \">\" or character == \"/\" or character == \"?\" or character\
    \ == \"|\" or character == \"\\\\\" or character == \"|\" or character == \"{\"\
    \ or character == \"}\" or character == \"[\" or character == \"]\" or character\
    \ == \"\\\\\" or character == \"~\" or character == \"*\" or character == \"(\"\
    \ or character == \")\" or character == \"$\" or character == \"@\" or character\
    \ == \"!\" or character == \"#\" or character == \"$\" or character == \"%\" or\
    \ character == \"^\" or character == \"&\" or character == \"*\" or character\
    \ == \"+\" or character == \"=\" or character == \"<\" or character == \">\" or\
    \ character == \"/\" or character == \"?\" or character == \"|\" or character\
    \ == \"\\\\\" or character == \"|\" or character == \"{\" or character == \"}\"\
    \ or character == \"[\" or character == \"]\" or character == \"\\\\\" or character\
    \ == \"~\" or character == \"*\" or character == \"(\" or character ", "    \n\
    \    prime_number = true\n    \n    for character in string:\n        if character\
    \ in \"0123456789\":\n            prime_number = false\n            break\n  \
    \  \n    if prime_number:\n        return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"Hello\"\
    )\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"kittens\")\nfalse\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"",
  "    \n    prime_length = true\n    \n    for char in string:\n        if char ==\
    \ \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\":\n\
    \            prime_length = false\n            break\n    \n    return prime_length",
  "    \n    prime_numbers::Set{Int} = (2 .. math.floor(sqrt(string)))\n    \n   \
    \ for i in prime_numbers\n        if string % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n", " \
    \   \n    prime_length = true\n    \n    for i in string:\n        if i == \"\
    a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            prime_length\
    \ = false\n            break\n        \n    return prime_length\n</cell>\n<cell>\n\
    prime_length(\"Hello\")\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n\
    <cell>\nprime_length(\"kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n\
    </cell>\n<text>\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecarace\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> p",
  "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n\
    \        if i in prime_numbers:\n            return False\n    return True\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindro", "    \n    prime_number::Bool\
    \ = true \n    \n    for character in string:\n        if character == \" \":\n\
    \            prime_number = false\n            break\n        if character ==\
    \ \"a\" or character == \"b\" or character == \"c\" or character == \"d\" or character\
    \ == \"e\" or character == \"f\" or character == \"g\" or character == \"h\" or\
    \ character == \"i\" or character == \"j\" or character == \"k\" or character\
    \ == \"l\" or character == \"m\" or character == \"n\" or character == \"o\" or\
    \ character == \"p\" or character == \"q\" or character == \"r\" or character\
    \ == \"s\" or character == \"t\" or character == \"u\" or character == \"v\" or\
    \ character == \"w\" or character == \"x\" or character == \"y\" or character\
    \ == \"z\":\n            prime_number = false\n            break\n        if character\
    \ == \"0\":\n            prime_number = false\n            break\n        if character\
    \ == \"1\":\n            prime_number = false\n            break\n        if character\
    \ == \"2\":\n            prime_number = false\n            break\n        if character\
    \ == \"3\":\n            prime_number = false\n            break\n        if character\
    \ == \"4\":\n            prime_number = false\n            break\n        if character\
    \ == \"5\":\n            prime_number = false\n            break\n        if character\
    \ == \"6\":\n            prime_number = false\n            break\n        if character\
    \ == \"7\":\n            prime_number = false\n            break\n        if character\
    \ == \"8\":\n            prime_number = false\n            break\n        if character\
    \ == \"9\":\n            prime_number = false\n            break\n        if character\
    \ == \"a\" or character == \"b\" or character == \"c\" or character == \"d\" or\
    \ character == \"e\" or character == \"f\" or character == \"g\" or character\
    \ == \"h\" or character == \"i\" or character == \"j\" or character == \"k\" or\
    \ character == \"l\" or character == \"m\" or character == \"n\" or character\
    \ == \"o\" or character == \"p\" or character == \"q\" or character == \"r\" or\
    \ character == \"s\" or character == \"t\" or character == \"u\" or character\
    \ == \"v\" or character == \"w\" or character == \"x\" or character == \"y\" or\
    \ character == \"z\":\n            prime_number = false\n            break\n \
    \       if character == \"0\":\n            prime_number = false\n           \
    \ break\n        if character == \"1\":\n            prime_number = false\n  \
    \          break\n        if character == \"2\":\n            prime_number = false\n\
    \            break\n        if character == \"3\":\n            prime_number =\
    \ false\n            break\n        if character == \"4\":\n            prime_number\
    \ = false\n            break\n        if character == \"5\":\n            prime_number\
    \ = false\n            break\n        if character == \"6\":\n            prime_number\
    \ = false\n            break\n        if character == \"7\":\n            prime_number\
    \ = false\n            break\n", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n    return false\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains any uppercase letters or False\
    \ otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"\
    HELLO\")\ntrue\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_",
  "    \n    prime_length::Bool = \n        if string == \"\"\n            true\n\
    \        else\n            if string.length % 2 == 0\n                false\n\
    \            else\n                if string.length % 3 == 0\n               \
    \     true\n                else\n                    if string.length % 5 ==\
    \ 0\n                        true\n                    else\n                \
    \        if string.length % 7 == 0\n                            true\n       \
    \                 else\n                            if string.length % 11 == 0\n\
    \                                true\n                            else\n    \
    \                            if string.length % 13 == 0\n                    \
    \                true\n                                else\n                \
    \                    if string.length % 17 == 0\n                            \
    \            true\n                                    else\n                \
    \                        if string.length % 19 == 0\n                        \
    \                    true\n                                        else\n    \
    \                                        if string.length % 23 == 0\n        \
    \                                        true\n                              \
    \              else\n                                                if string.length\
    \ % 29 == 0\n                                                    true\n      \
    \                                          else\n                            \
    \                        if string.length % 31 == 0\n                        \
    \                                true\n                                      \
    \              else\n                                                        if\
    \ string.length % 37 == 0\n                                                  \
    \          true\n                                                        else\n\
    \                                                            if string.length\
    \ % 41 == 0\n                                                                true\n\
    \                                                            else\n          \
    \                                                      if string.length % 43 ==\
    \ 0\n                                                                    true\n\
    \                                                                else\n      \
    \                                                              if string.length\
    \ % 47 == 0\n                                                                \
    \        true\n                                                              \
    \      else\n                                                                \
    \        if string.length % 53 == 0\n                                        \
    \                                    true\n                                  \
    \                                      else\n                                \
    \                                            if string.length % 59 == 0\n    \
    \                                                                            true\n\
    \                                                                            else\n\
    \                                                                            \
    \    if string.length % 61 == 0\n                                            \
    \                                        true\n                              \
    \                                                  else\n                    \
    \                                                                if string.length\
    \ % 67 == 0\n                                                                \
    \                        true\n                                              \
    \                                      else\n                                \
    \                                                        if string.length % 71\
    \ == 0\n                                                                     \
    \                       true\n                                               \
    \                                         else\n                             \
    \                                                               if string.length\
    \ % 73 == 0\n                                                                \
    \                                true\n                                      \
    \                                                      else\n                \
    \                                                                            \
    \    if string.length % 79 == 0\n                                            \
    \                                                        true\n              \
    \                                                                            \
    \      else\n                                                                \
    \                                    if string.length % 83 == 0\n            \
    \                                                                            \
    \                true\n                                                      \
    \                                              else\n                        \
    \                                                                            \
    \    if string.length % 89 == 0\n                                            \
    \                                                                true\n      \
    \                                                                            \
    \                      else\n                                                \
    \                                                            if string.length\
    \ % 97 == 0\n                                                                \
    \                                                true\n                      \
    \                                                                            \
    \          else\n                                                            \
    \                                                    if string.length % 101 ==\
    \ 0\n                                                                        \
    \                                            true\n                          \
    \                                                                            \
    \          else\n                                                            \
    \                                                        if string.length % 103\
    \ == 0\n                                                                     \
    \                                                   true\n                   \
    \                                                                            \
    \                     else\n                                                 \
    \                                                                       if string.length\
    \ % 107 == 0\n                                                               \
    \                                                             true\n         \
    \                                                                            \
    \                                   else\n                                   \
    \                                                                            \
    \             if string.length % 111 == 0\n                                  \
    \                                                                            \
    \                  true\n                                                    \
    \                                                                        else\n\
    \                                                                            \
    \                                                    if string.length % 115 ==\
    \ 0\n                                                                        \
    \                                                            true\n          \
    \                                                                            \
    \                                          else\n                            \
    \                                                                            \
    \                            if string.length % 119 == 0\n                   \
    \                                                                            \
    \                                         true\n                             \
    \                                                                            \
    \                           else\n                                           \
    \                                                                            \
    \                 if string.length % 121 == 0\n", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    kittens\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")", "    \n    prime_length::Bool\
    \ = false \n    \n    for i in string:\n        if i == \"a\" || i == \"b\" ||\
    \ i == \"c\" || i == \"d\" || i == \"e\" || i == \"f\" || i == \"g\" || i == \"\
    h\" || i == \"i\" || i == \"j\" || i == \"k\" || i == \"l\" || i == \"m\" || i\
    \ == \"n\" || i == \"o\" || i == \"p\" || i == \"q\" || i == \"r\" || i == \"\
    s\" || i == \"t\" || i == \"u\" || i == \"v\" || i == \"w\" || i == \"x\" || i\
    \ == \"y\" || i == \"z\":\n            prime_length = true\n            break\n\
    \        else if i == \"A\" || i == \"B\" || i == \"C\" || i == \"D\" || i ==\
    \ \"E\" || i == \"F\" || i == \"G\" || i == \"H\" || i == \"I\" || i == \"J\"\
    \ || i == \"K\" || i == \"L\" || i == \"M\" || i == \"N\" || i == \"O\" || i ==\
    \ \"P\" || i == \"Q\" || i == \"R\" || i == \"S\" || i == \"T\" || i == \"U\"\
    \ || i == \"V\" || i == \"W\" || i == \"X\" || i == \"Y\" || i == \"Z\":\n   \
    \         prime_length = true\n            break\n        else if i == \"0\" ||\
    \ i == \"1\":\n            prime_length = true\n            break\n        else\
    \ if i == \"2\" || i == \"3\" || i == \"4\" || i == \"5\" || i == \"6\" || i ==\
    \ \"7\" || i == \"8\" || i == \"9\":\n            prime_length = true\n      \
    \      break\n        else if i == \"!\" || i == \"@\" || i == \"#\" || i == \"\
    $\" || i == \"%\" || i == \"^\" || i == \"&\" || i == \"*\" || i == \"(\" || i\
    \ == \")\" || i == \"-\" || i == \"_\" || i == \"+\" || i == \"=\" || i == \"\
    :\" || i == \"{\" || i == \"}\" || i == \"[\" || i == \"]\" || i == \"<\" || i\
    \ == \">\" || i == \"/\" || i == \"?\" || i == \"|\" || i == \"\\\\\" || i ==\
    \ \"{\" || i == \"}\":\n            prime_length = true\n            break\n \
    \       else if i == \"~\" || i == \"`\" || i == \"!\" || i == \"@\" || i == \"\
    #\" || i == \"$\" || i == \"%\" || i == \"^\" || i == \"&\" || i == \"*\" || i\
    \ == \"(\" || i == \")\" || i == \"-\" || i == \"_\" || i == \"+\" || i == \"\
    =\" || i == \":\" || i == \"{\" || i == \"}\" || i == \"[\" || i == \"]\" || i\
    \ == \"<\" || i == \">\" || ", "    \n    prime_numbers::Set{Int} = Set()\n  \
    \  \n    for character in string:\n        if character in prime_numbers:\n  \
    \          return False\n        else:\n            prime_numbers.add(character)\n\
    \    return True\n</code>\n<|/ a tags=haskell,primes |>\n<| c |>\nI like your\
    \ solution, however it would be better to use a `Set` instead of a `List`.  A\
    \ `Set` has constant lookup time while a `List` has linear lookup time.\n<|/ c\
    \ |>\n<| c |>\nI agree, thank you for the suggestion. I will edit my answer accordingly.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that uses `Set`s.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that uses `Set`s.\n\
    <|/ c |>\n<| a tags=haskell,primes |>\nThe first thing that comes to mind is to\
    \ use an infinite list of primes. Then you just need to check whether a given\
    \ number is a prime by checking whether it is in the list. \n<code>\nprimes ::\
    \ [Integer]\nprimes = 2 : filter isPrime [3,5..]\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work. Try it out with `primes [3,5..]`.\n<|/ c |>\n<| c\
    \ |>\nI believe it does. I tested it out in GHCi and it worked.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it out with `primes [3,5..]`.\n<|/ c |>\n<| c |>\n\
    I believe it does. I tested it out in GHCi and it worked.\n<|/ c |>\n<| c |>\n\
    It doesn't work. Try it out with `primes [3,5..]`.\n<|/ c |>\n<| a dscore=2 |>\n\
    I like using lists for this, because they tend to be more efficient than sets.\
    \ Here's a solution that uses lists:\n<code>\nprimes :: [Integer]\nprimes = 2\
    \ : filter isPrime [3,5..]", "    \n    prime_length = true\n    \n    for char\
    \ in string:\n        if char == \"a\" or char == \"e\" or char == \"i\" or char\
    \ == \"o\" or char == \"u\":\n            prime_length = false\n            break\n\
    \    \n    return prime_length\n</code>\n<|/ a |>\n<| a tags=haskell,primes |>\n\
    The first thing that comes to mind is \"prime numbers\". There are a lot of ways\
    \ to do this, but one simple way is to generate a list of all the numbers from\
    \ 2 to your upper limit, then filter out any numbers that are divisible by any\
    \ number in the list. \n<code>\nprimes :: Int -> [Int]\nprimes n = 2 : filter\
    \ (\\x -> x `mod` n == 0) (primes (n+1))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nprimes :: Int -> [Int]\nprimes n = 2 : filter (\\x -> x `mod` n\
    \ == 0) (primes (n+1))\n</code>\n<|/ a tags=haskell,primes |>\n<| a tags=haskell,primes\
    \ |>\n<code>\nprimes :: Int -> [Int]\nprimes n = 2 : filter (\\x -> x `mod` n\
    \ == 0) (primes (n+1))\n</code>\n<|/ a dscore=1 |>\n<| a tags=haskell,primes |>\n\
    <code>\nprimes :: Int -> [Int]\nprimes n = 2 : filter (\\x -> x `mod` n == 0)\
    \ (primes (n+1))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nprimes\
    \ :: Int -> [Int]\nprimes n = 2 : filter (\\x -> x `mod` n == 0) (primes (n+1))\n\
    </code>\n<|/ a tags=haskell,primes |>\n<| a |>\n<code>\nprimes :: Int -> [Int]\n\
    primes n = 2 : filter (\\x -> x `mod` n == 0) (primes (n+1))\n</code>\n<|/ a dscore=1\
    \ tags=haskell,primes |>\n<| a dscore=1 |>\n<code>\nprimes :: Int -> [Int]\nprimes\
    \ n = 2 : filter (\\x -> x `mod` n == 0) (primes (n+1))\n</code>\n<|/ a tags=haskell,primes\
    \ |>\n<| a tags=haskell,primes |>\n<code>\nprimes :: Int -> [Int]\nprimes n =\
    \ 2 : filter", "    \n    prime_number::Bool = true \n    \n    for character\
    \ in string \n        \n        if character == character \n            prime_number\
    \ = false \n            break \n        \n        if character == character +\
    \ 1 \n            prime_number = false \n            break \n        \n      \
    \  if character == character + 2 \n            prime_number = false \n       \
    \     break \n        \n        if character == character + 3 \n            prime_number\
    \ = false \n            break \n        \n        if character == character +\
    \ 4 \n            prime_number = false \n            break \n        \n      \
    \  if character == character + 5 \n            prime_number = false \n       \
    \     break \n        \n        if character == character + 6 \n            prime_number\
    \ = false \n            break \n        \n        if character == character +\
    \ 7 \n            prime_number = false \n            break \n        \n      \
    \  if character == character + 8 \n            prime_number = false \n       \
    \     break \n        \n        if character == character + 9 \n            prime_number\
    \ = false \n            break \n        \n        if character == character +\
    \ 10 \n            prime_number = false \n            break \n        \n     \
    \   if character == character + 11 \n            prime_number = false \n     \
    \       break \n        \n        if character == character + 12 \n          \
    \  prime_number = false \n            break \n        \n        if character ==\
    \ character + 13 \n            prime_number = false \n            break \n   \
    \     \n        if character == character + 14 \n            prime_number = false\
    \ \n            break \n        \n        if character == character + 15 \n  \
    \          prime_number = false \n            break \n        \n        if character\
    \ == character + 16 \n            prime_number = false \n            break \n\
    \        \n        if character == character + 17 \n            prime_number =\
    \ false \n            break \n        \n        if character == character + 18\
    \ \n            prime_number = false \n            break \n        \n        if\
    \ character == character + 19 \n            prime_number = false \n          \
    \  break \n        \n        if character == character + 20 \n            prime_number\
    \ = false \n            break \n        \n        if character == character +\
    \ 21 \n            prime_number = false \n            break \n        \n     \
    \   if character == character + 22 \n            prime_number = false \n     \
    \       break \n        \n        if character == character + 23 \n          \
    \  prime_number = false \n            break \n        \n        if character ==\
    \ character + 24 \n            prime_number = false \n            break \n   \
    \     \n        if character == character + 25 \n            prime_number = false\
    \ \n            break \n        \n        if character == character + 26 \n  \
    \          prime_number = false \n            break \n        \n        if character\
    \ == character + 27 \n            ", "    \n    prime_number::Bool = true \n \
    \   \n    for character in string:\n        if character == character % 2 == 0\
    \ and character != character % 3:\n            prime_number = false\n        \
    \    break\n    \n    return prime_number\n\"\"\"\nWrite a function that takes\
    \ a string and returns True if the string\n    length is an even number or False\
    \ otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n    >>> even_length(\"\
    abcdcba\")\n    false\n    >>> even_length(\"kittens\")\n    false\n    >>> even_length(\"\
    orange\")\n    true\n    \"\"\"", "    \n    prime_length::Bool = false\n    \n\
    \    if string == \"\"\n        prime_length::Bool = true\n    else\n        if\
    \ string.length == 0 || string.length == 1\n            prime_length::Bool = true\n\
    \        else\n            if string.length == 2\n                prime_length::Bool\
    \ = true\n            else\n                if string.length == 3\n          \
    \          prime_length::Bool = true\n                else\n                 \
    \   if string.length == 4\n                        prime_length::Bool = true\n\
    \                    else\n                        if string.length == 5\n   \
    \                         prime_length::Bool = true\n                        else\n\
    \                            if string.length == 6\n                         \
    \       prime_length::Bool = true\n                            else\n        \
    \                        if string.length == 7\n                             \
    \       prime_length::Bool = true\n                                else\n    \
    \                                if string.length == 8\n                     \
    \                   prime_length::Bool = true\n                              \
    \      else\n                                        if string.length == 9\n \
    \                                           prime_length::Bool = true\n      \
    \                                  else\n                                    \
    \        if string.length == 10\n                                            \
    \    prime_length::Bool = true\n                                            else\n\
    \                                                if string.length == 11\n    \
    \                                                prime_length::Bool = true\n \
    \                                               else\n                       \
    \                             if string.length == 12\n                       \
    \                                 prime_length::Bool = true\n                \
    \                                    else\n                                  \
    \                      if string.length == 13\n                              \
    \                              prime_length::Bool = true\n                   \
    \                                     else\n                                 \
    \                           if string.length == 14\n                         \
    \                                       prime_length::Bool = true\n          \
    \                                                  else\n                    \
    \                                            if string.length == 15\n        \
    \                                                            prime_length::Bool\
    \ = true\n                                                                else\n\
    \                                                                    if string.length\
    \ == 16\n                                                                    \
    \    prime_length::Bool = true\n                                             \
    \                       else\n                                               \
    \                         if string.length == 17\n                           \
    \                                                 prime_length::Bool = true\n\
    \                                                                        else\n\
    \                                                                            if\
    \ string.length == 18\n                                                      \
    \                          prime_length::Bool = true\n                       \
    \                                                     else\n                 \
    \                                                               if string.length\
    \ == 19\n                                                                    \
    \                prime_length::Bool = true\n                                 \
    \                                               else\n                       \
    \                                                             if string.length\
    \ == 20\n                                                                    \
    \                    prime_length::Bool = true\n                             \
    \                                                       else\n               \
    \                                                                         if string.length\
    \ == 21\n                                                                    \
    \                        prime_length::Bool = true\n                         \
    \                                                               else\n       \
    \                                                                            \
    \         if string.length == 22\n                                           \
    \                                                     prime_length::Bool = true\n\
    \                                                                            \
    \                else\n                                                      \
    \                                          if string.length == 23\n          \
    \                                                                            \
    \              prime_length::Bool = true\n                                   \
    \                                                             else\n         \
    \                                                                            \
    \               if string.length == 24\n                                     \
    \                                                                   prime_length::Bool\
    \ = true\n                                                                   \
    \                                 else\n                                     \
    \                                                                   if string.length\
    \ == 25\n                                                                    \
    \                                        prime_length::Bool = true\n         \
    \                                                                            \
    \                   else\n                                                   \
    \                                                         if string.length ==\
    \ 26\n                                                                       \
    \                                         prime_length::Bool = true\n        \
    \                                                                            \
    \                        else\n                                              \
    \                                                                  if string.length",
  "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    kittens\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")", "    \n    prime_length = true\n    \n \
    \   for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\" || i ==\
    \ \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i == \"O\"\
    \ || i == \"U\" then\n            prime_length = false\n        end\n    end\n\
    \    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindro", "    \n    prime_length::Bool = false\n    \n    if string\
    \ == \"\"\n        return prime_length\n    \n    prime_length::Bool = true\n\
    \    \n    for i in string.chars\n        if string.chars.count(i) == 1 and string.chars.count(i)\
    \ == string.chars.count(i-1)\n            prime_length = false\n            break\n\
    \    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string has all unique\
    \ characters or False otherwise\nExamples\n>>> has_unique_characters(\"Hello\"\
    )\ntrue\n>>> has_unique_characters(\"kittens\")\nfalse\n>>> has_unique_characters(\"\
    orange\")\nfalse\n>>> has_unique_characters(\"Helloo\")\ntrue\n>>> has_unique_characters(\"\
    Hellooo\")\nfalse\n>>> has_unique_characters(\"Helloooo\")\nfalse\n>>> has_unique_characters(\"\
    Hellooooo\")\nfalse\n>>> has_unique_characters(\"Helloooooo\")\ntrue\n>>> has_unique_characters(\"\
    Hellooooooo\")\nfalse\n>>> has_unique_characters(\"Hellooooooooo\")\nfalse\n>>>\
    \ has_unique_characters(\"Helloooooooooo\")\ntrue\n>>> has_unique_characters(\"\
    Hellooooooooooo\")\nfalse\n>>> has_unique_characters(\"Hellooooooooooooo\")\n\
    false\n>>> has_unique_characters(\"Helloooooooooooooo\")\ntrue\n>>> has_unique_characters(\"\
    Hellooooooooooooooo\")\nfalse\n>>> has_unique_characters(\"Hellooooooooooooooooo\"\
    )\nfalse\n>>> has_unique_characters(\"Helloooooooooooooooooo\")\ntrue\n>>> has_unique_characters(\"\
    Hellooooooooooooooooooo\")\nfalse\n>>> has_unique_characters(\"Hellooooooooooooooooooooo\"\
    )\nfalse\n>>> has_unique_characters(\"Helloooooooooooooooooooooo\")\ntrue\n>>>\
    \ has_unique_characters(\"Hellooooooooooooooooooooooo\")\nfalse\n>>> has_unique_characters(\"\
    Hellooooooooooooooooooooooooo\")\nfalse\n>>> has_unique_characters(\"Helloooooooooooooooooooooooooo\"\
    )\ntrue\n>>> has_unique_characters(\"Hellooooooooooooooooooooooooooo\")\nfalse\n\
    >>> has_unique_characters(\"Hellooooooooooooooooooooooooooooo\")", "    \n   \
    \ prime_length::Bool = false\n    \n    if string == \"\"\n        prime_length\n\
    \    else\n        \n        prime_length = true\n        \n        for i in string\n\
    \            if string[i] > \"a\"\n                prime_length = false\n    \
    \            break\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    kittens\")\ntrue\n>>> palindrome(\"Hello\")\nfalse\n>>> palindrome(\"Hello\")\n\
    false\n>>> palindrome(\"Hello World\")\ntrue\n>>> palindrome(\"Hello World\")\n\
    false\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\nfalse\n>>> palindrome(\"Hello World\")\nfalse\n>>> palindrome(\"Hello World\"\
    )\n", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for char\
    \ in string:\n        if char in prime_numbers:\n            return False\n  \
    \  return True\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns True if the string is a palindrome or False otherwise\nExamples\n\
    >>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palin", "    \n \
    \   prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length::Bool = false \n    \n    prime_length::Bool = false \n    \n\
    \    prime_length", "    \n    prime_numbers = Set{Int}()\n    \n    for i in\
    \ string.split(\"\")\n        prime_numbers.add(Int(i))\n    \n    return prime_numbers.length\
    \ == prime_numbers.cardinality\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns True if the string contains any uppercase letters or False\
    \ otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"\
    abcdcba\")\ntrue\n>>> contains_uppercase(\"kittens\")\nfalse\n>>> contains_uppercase(\"\
    orange\")\nfalse\n</text>\n<code language=julia-1.5>", "    \n    if string ==\
    \ \"\"\n        return true\n    \n    prime_number::Int64 = 1\n    \n    for\
    \ i in string.chars\n        if prime_number == 1\n            return false\n\
    \        \n        if i % prime_number == 0\n            prime_number += 1\n \
    \       end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string is a palindrome or False\
    \ otherwise\nExamples\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\
    racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\ntrue\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n", "    \n    prime_length::Bool\
    \ = false\n    \n    if string == \"\"\n        return prime_length\n    \n  \
    \  prime_length::Bool = is_prime(string.len())\n    \n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\ntrue\n>>>\
    \ is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> ", "    \n    prime_length::Bool = false \n    \n    for i in string\n   \
    \     if prime_length == true\n            return false\n        else\n      \
    \      if i == \"a\"\n                prime_length = true\n            else\n\
    \                if i == \"b\"\n                    prime_length = true\n    \
    \            else\n                    if i == \"c\"\n                       \
    \ prime_length = true\n                    else\n                        if i\
    \ == \"d\"\n                            prime_length = true\n                \
    \        else\n                            if i == \"e\"\n                   \
    \             prime_length = true\n                            else\n        \
    \                        if i == \"f\"\n                                    prime_length\
    \ = true\n                                else\n                             \
    \       if i == \"g\"\n                                        prime_length =\
    \ true\n                                    else\n                           \
    \             if i == \"h\"\n                                            prime_length\
    \ = true\n                                        else\n                     \
    \                       if i == \"i\"\n                                      \
    \          prime_length = true\n                                            else\n\
    \                                                if i == \"j\"\n             \
    \                                       prime_length = true\n                \
    \                                else\n                                      \
    \              if i == \"k\"\n                                               \
    \         prime_length = true\n                                              \
    \      else\n                                                        if i == \"\
    l\"\n                                                            prime_length\
    \ = true\n                                                        else\n     \
    \                                                       if i == \"m\"\n      \
    \                                                          prime_length = true\n\
    \                                                            else\n          \
    \                                                      if i == \"n\"\n       \
    \                                                             prime_length = true\n\
    \                                                                else\n      \
    \                                                              if i == \"o\"\n\
    \                                                                        prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if i == \"p\"\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == \"q\"\n               \
    \                                                 prime_length = true\n      \
    \                                                      else\n                \
    \                                                if i == \"r\"\n             \
    \                                                       prime_length = true\n\
    \                                                                else\n      \
    \                                                              if i == \"s\"\n\
    \                                                                        prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if i == \"t\"\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == \"u\"\n               \
    \                                                 prime_length = true\n      \
    \                                                      else\n                \
    \                                                if i == \"v\"\n             \
    \                                                       prime_length = true\n\
    \                                                                else\n      \
    \                                                              if i == \"w\"\n\
    \                                                                        prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if i == \"x\"\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == \"y\"\n               \
    \                                                 prime_length = true\n      \
    \                                                      else\n                \
    \                                                if i == \"z\"\n             \
    \                                                       prime_length = true\n\
    \                                                                else\n      \
    \                                                              if i == \"A\"\n\
    \                                                                        prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if i == \"B\"\n\
    \                                                            prime_length = true\n\
    \                                                        else\n              \
    \                                              if i == \"C\"\n               \
    \                                                 prime_length = true\n      \
    \                                                      else\n                \
    \                                                if i == \"D\"\n             \
    \                                                       prime_length = true\n\
    \                                                                else\n      \
    \                                                              if i", "    \n\
    \    if string == \"\"\n        true\n    else\n        if string.length % 2 ==\
    \ 0\n            true\n        else\n            if string.length % 3 == 0\n \
    \               true\n            else\n                if string.length % 5 ==\
    \ 0\n                    true\n                else\n                    false\n\
    </code>\n<|/ a tags=primes,haskell |>\n<| c |>\nThis doesn't work. `prime_length\
    \ \"abcde\" == true` but `prime_length \"abcde\" == false`\n<|/ c |>\n<| c |>\n\
    I fixed the bug. Thanks for pointing it out\n<|/ c |>\n<| a tags=primes,haskell\
    \ |>\nThe first thing you need to do is define what a prime number is. A prime\
    \ number is a number that has no divisors other than 1 and itself. A number is\
    \ a prime number if and only if it has no divisors other than 1 and itself. \n\
    <code>\nisPrime :: Int -> Bool\nisPrime n = and [n `mod` i == 0 | i <- [2..n-1]]\n\
    </code>\nThe above function returns True or False depending on whether the number\
    \ n is prime or not. \n<code>\nprimes :: Int -> [Int]\nprimes n = filter (isPrime\
    \ n) [1..n]\n</code>\nThe above function takes an integer n and returns a list\
    \ of all the prime numbers less than or equal to n. \n<code>\nprimesLength ::\
    \ Int -> Int\nprimesLength n = length $ primes n\n</code>\nThe above function\
    \ takes an integer n and returns the number of prime numbers less than or equal\
    \ to n. \n<code>\nprimesLength n = length $ filter (isPrime n) [1..n]\n</code>\n\
    The above function takes an integer n and returns the number of prime numbers\
    \ less than or equal to n. \n<code>\nprimesLength n = length $ filter (isPrime\
    \ n) [1..n]\n</code>\nThe above function takes an integer n and returns the number\
    \ of prime numbers less than or equal to n. \n<code>\nprimesLength n = length\
    \ $ filter (isPrime n) [1..n]\n</code>\nThe above function takes an integer n\
    \ and returns the number of prime numbers less than or equal to n. \n<code>\n\
    primesLength n = length $ filter (isPrime n) [1..n]\n</code>\nThe above function\
    \ takes an integer n and returns the number of prime numbers less than or equal\
    \ to n. \n<code>\nprimesLength n = length $ filter (isPrime n) [1..n]\n</code>\n\
    The above function takes an integer n and returns the number of prime numbers\
    \ less than ", "    \n    prime_length_bool = true\n    \n    for i in string:\n\
    \        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\"\
    \ or i == \"A\" or i == \"E\" or i == \"I\" or i == \"O\" or i == \"U\":\n   \
    \         prime_length_bool = false\n            break\n    \n    return prime_length_bool\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nWrite a function that takes a string and returns True\
    \ if the string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome", "    \n    if string == \"\
    \"\n        return true\n    \n    prime_length::Bool = true\n    \n    for i\
    \ in string.chars\n        if string.index(i) == 0 || string.index(i) == string.size\
    \ - 1\n            prime_length = false\n            break\n        \n    return\
    \ prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains only letters (a-z) or False\
    \ otherwise\nExamples\n>>> letters_only(\"Hello\")\ntrue\n>>> letters_only(\"\
    abcdcba\")\nfalse\n>>> letters_only(\"kittens\")\nfalse\n>>> letters_only(\"orange\"\
    )\nfalse\n\"\"\"", "    \n    prime_length::Bool = false\n    \n    if string\
    \ == \"\"\n        return prime_length\n    \n    string::String = string.lower()\n\
    \    \n    for i in string.chars\n        if string[i] == string[i+1]\n      \
    \      prime_length = false\n            break\n        else\n            prime_length\
    \ = true\n            break\n    end\n    \n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"Hello\"\
    )\ntrue\n>>> palindrome(\"kittens\")\ntrue\n>>> palindrome(\"Hello\")\nfalse\n\
    >>> palindrome(\"Hello world\")\nfalse\n>>> palindrome(\"Hello world hello\")\n\
    false\n>>> palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"Hello world\
    \ hello\")\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"\
    Hello world hello\")\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>>\
    \ palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"Hello world hello\"\
    )\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"Hello\
    \ world hello\")\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"\
    Hello world hello\")\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>>\
    \ palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"Hello world hello\"\
    )\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"Hello\
    \ world hello\")\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"\
    Hello world hello\")\nfalse\n>>> palindrome(\"Hello world hello\")\nfalse\n>>>\
    \ palindrome(\"Hello world hello\")\nfalse\n>>> palindrome(\"Hello world hello\"\
    )\nfalse\n>>> palindrome(\"Hello world ", "    \n    prime_number::Bool = true\
    \ \n    \n    for character in string:\n        if character == \"a\" || character\
    \ == \"e\" || character == \"i\" || character == \"o\" || character == \"u\" ||\
    \ character == \"A\" || character == \"E\" || character == \"I\" || character\
    \ == \"O\" || character == \"U\"\n            prime_number = false\n        end\n\
    \    end\n    return prime_number\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string is a palindrome or False otherwise\nExamples\n\
    >>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palin", "    \n    prime_numbers\
    \ = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n        if i in prime_numbers:\n\
    \            return False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\"\
    )\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns True if the string is a\
    \ palindrome or False otherwise\nExamples\n>>> is_palindrome(\"racecar\")\ntrue\n\
    >>> is_palindrome(\"racecars\")\ntrue\n>>> is_palindrome(\"racecar\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"race", "    \n    prime_numbers::Set{Int} = Set()\n    \n\
    \    for character in string\n        if character in prime_numbers\n        \
    \    prime_numbers.remove(character)\n        else\n            prime_numbers.add(character)\n\
    \    end\n    \n    return prime_numbers.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string contains only\
    \ letters a-z or A-Z or False otherwise\nExamples\n>>> string_only_letters(\"\
    Hello\")\ntrue\n>>> string_only_letters(\"abcdcba\")\nfalse\n>>> string_only_letters(\"\
    kittens\")\nfalse\n>>> string_only_letters(\"orange\")\ntrue\n\"\"\"", "    \n\
    \    prime_numbers = primes()\n    \n    prime_numbers_set = Set(prime_numbers)\n\
    \    \n    prime_numbers_set.remove(string)\n    \n    if prime_numbers_set.length()\
    \ == 0 \n        \n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns True if the string is\
    \ a palindrome or False otherwise\nExamples\n>>> palindrome(\"Hello World\")\n\
    true\n>>> palindrome(\"A man, a plan, a canal: Panama\")\ntrue\n>>> palindrome(\"\
    A man, a plan, a canal: Panama\")\ntrue\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\nfalse\n\
    >>> palindrome(\"A man, a plan, a canal: Panama\")\nfalse\n>>> palindrome(\"A\
    \ man, a plan, a canal: Panama\")\nfalse\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\nfalse\n\
    >>> palindrome(\"A man, a plan, a canal: Panama\")\nfalse\n>>> palindrome(\"A\
    \ man, a plan, a canal: Panama\")\nfalse\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\nfalse\n\
    >>> palindrome(\"A man, a plan, a canal: Panama\")\nfalse\n>>> palindrome(\"A\
    \ man, a plan, a canal: Panama\")\nfalse\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\nfalse\n\
    >>> palindrome(\"A man", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string contains only\
    \ letters a-z or A-Z or False otherwise\nExamples\n>>> contains_only_letters(\"\
    Hello\")\ntrue\n>>> contains_only_letters(\"abcdcba\")\ntrue\n>>> contains_only_letters(\"\
    kittens\")\nfalse\n>>> contains_only_letters(\"orange\")\nfalse\n>>> contains_only_letters(\"\
    123\")\nfalse\n>>> contains_only_letters(\"abc\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"aBcD\")\nfalse\n>>> contains_only_letters(\"\
    aBcD\")\nfalse\n>>> contains_only_letters(\"", "    if string == \"\"\n      \
    \  true\n    else\n        if string.length % 2 == 0\n            false\n    \
    \    else\n            if string.length % 3 == 0\n                true\n     \
    \       else\n                if string.length % 5 == 0\n                    true\n\
    \                else\n                    false\n    end\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't answer the question. OP wants to know why\
    \ his code doesn't work.\n<|/ c |>\n<| c |>\nI answered the question. He asked\
    \ why his code doesn't work. He also asked how to fix his code. He also asked\
    \ how to fix his code. He also asked how to fix his code. He also asked how to\
    \ fix his code. He also asked how to fix his code. He also asked how to fix his\
    \ code. He also asked how to fix his code. He also asked how to fix his code.\
    \ He also asked how to fix his code. He also asked how to fix his code. He also\
    \ asked how to fix his code. He also asked how to fix his code. He also asked\
    \ how to fix his code. He also asked how to fix his code. He also asked how to\
    \ fix his code. He also asked how to fix his code. He also asked how to fix his\
    \ code. He also asked how to fix his code. He also asked how to fix his code.\
    \ He also asked how to fix his code. He also asked how to fix his code. He also\
    \ asked how to fix his code. He also asked how to fix his code. He also asked\
    \ how to fix his code. He also asked how to fix his code. He also asked how to\
    \ fix his code. He also asked how to fix his code. He also asked how to fix his\
    \ code. He also asked how to fix his code. He also asked how to fix his code.\
    \ He also asked how to fix his code. He also asked how to fix his code. He also\
    \ asked how to fix his code. He also asked how to fix his code. He also asked\
    \ how to fix his code. He also asked how to fix his code. He also asked how to\
    \ fix his code. He also asked how to fix his code. He also asked how to fix his\
    \ code. He also asked how to fix his ", "    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        return prime_length\n    \n    length::Int\
    \ = string.length\n    \n    for i in 2..length\n        if string.charAt(i) ==\
    \ string.charAt(length-1)\n            return false\n        \n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string contains only letters a-z or A-Z or False otherwise\n\
    Examples\n>>> is_valid_letter(\"Hello\")\ntrue\n>>> is_valid_letter(\"abcdcba\"\
    )\nfalse\n>>> is_valid_letter(\"kittens\")\ntrue\n>>> is_valid_letter(\"orange\"\
    )\nfalse\n\"\"\"", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for character in string:\n        if character in prime_numbers:\n\
    \            return False\n    return True\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"race", "    \n    prime_numbers = prime_numbers()\n    \n   \
    \ for i in string:\n        if i not in prime_numbers:\n            return False\n\
    \    return True\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work because\
    \ `prime_numbers()` returns a list of all prime numbers up to `sqrt(n)`, not just\
    \ prime numbers. For example, `prime_numbers(10)` returns `[2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29]`, not `[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]`.\n<|/ c |>\n\
    <| c |>\nThank you for pointing that out. I've edited the answer to include a\
    \ more efficient solution.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n\
    \    prime_numbers = [True]*(n+1)\n    prime_numbers[0] = False\n    prime_numbers[1]\
    \ = False\n    prime_numbers[2] = True\n    for i in range(3, int(n**0.5)+1, 2):\n\
    \        if prime_numbers[i]:\n            for j in range(i*i, n+1, i):\n    \
    \            prime_numbers[j] = False\n    return prime_numbers[n]\n</code>\n\
    <|/ a tags=python,primes |>\n<| a tags=python,primes |>\n<code>\ndef prime_number(n):\n\
    \    prime_numbers = [True]*(n+1)\n    prime_numbers[0] = False\n    prime_numbers[1]\
    \ = False\n    prime_numbers[2] = True\n    for i in range(3, int(n**0.5)+1, 2):\n\
    \        if prime_numbers[i]:\n            for j in range(i*i, n+1, i):\n    \
    \            prime_numbers[j] = False\n    return prime_numbers[n]\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also\
    \ provide an explanation of what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\n\
    While this code may provide a solution to the question, it's better to add context\
    \ as to why/how it works. This can help future users learn, and apply that knowledge\
    \ to their own code. You are also likely to have positive feedback from users\
    \ in the form of upvotes, when the code is explained.\n<|/ c |>\n<| a |>\n<code>\n\
    def prime_number(n):\n    prime_numbers = [True]*(n+1)\n    prime_numbers[0] =\
    \ False\n    prime_numbers[1] = False\n    prime_numbers[2] = True\n    for i\
    \ in range(3, ", "    \n    prime_numbers = prime_numbers()\n    \n    prime_numbers_set\
    \ = Set(prime_numbers)\n    \n    prime_numbers_set.add(0)\n    \n    prime_numbers_set.add(1)\n\
    \    \n    prime_numbers_set.add(2)\n    \n    prime_numbers_set.add(3)\n    \n\
    \    prime_numbers_set.add(4)\n    \n    prime_numbers_set.add(5)\n    \n    prime_numbers_set.add(6)\n\
    \    \n    prime_numbers_set.add(7)\n    \n    prime_numbers_set.add(8)\n    \n\
    \    prime_numbers_set.add(9)\n    \n    prime_numbers_set.add(10)\n    \n   \
    \ prime_numbers_set.add(11)\n    \n    prime_numbers_set.add(12)\n    \n    prime_numbers_set.add(13)\n\
    \    \n    prime_numbers_set.add(14)\n    \n    prime_numbers_set.add(15)\n  \
    \  \n    prime_numbers_set.add(16)\n    \n    prime_numbers_set.add(17)\n    \n\
    \    prime_numbers_set.add(18)\n    \n    prime_numbers_set.add(19)\n    \n  \
    \  prime_numbers_set.add(20)\n    \n    prime_numbers_set.add(21)\n    \n    prime_numbers_set.add(22)\n\
    \    \n    prime_numbers_set.add(23)\n    \n    prime_numbers_set.add(24)\n  \
    \  \n    prime_numbers_set.add(25)\n    \n    prime_numbers_set.add(26)\n    \n\
    \    prime_numbers_set.add(27)\n    \n    prime_numbers_set.add(28)\n    \n  \
    \  prime_numbers_set.add(29)\n    \n    prime_numbers_set.add(30)\n    \n    prime_numbers_set.add(31)\n\
    \    \n    prime_numbers_set.add(32)\n    \n    prime_numbers_set.add(33)\n  \
    \  \n    prime_numbers_set.add(34)\n    \n    prime_numbers_set.add(35)\n    \n\
    \    prime_numbers_set.add(36)\n    \n    prime_numbers_set.add(37)\n    \n  \
    \  prime_numbers_set.add(38)\n    \n    prime_numbers_set.add(39)\n    \n    prime_numbers_set.add(40)\n\
    \    \n    prime_numbers_set.add(41)\n    \n    prime_numbers_set.add(", "   \
    \ \n    if string == \"\"\n        return true\n    \n    prime::Bool = false\n\
    \    \n    for i in string.chars\n        if string.index(i) == 0 \n         \
    \   prime = true\n            break\n    \n    if prime\n        return true\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.1>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.1>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.1>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.1>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>>\
    \ palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\ntrue\n", "    \n    prime_length = true\n    \n    for char in string:\n\
    \        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" ||\
    \ char == \"u\":\n            prime_length = false\n            break\n    \n\
    \    return prime_length\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\n", "    \n    prime_numbers::Set{Int} = Set()\n\
    \    for character in string\n        if character in prime_numbers\n        \
    \    prime_numbers.remove(character)\n        else\n            prime_numbers.add(character)\n\
    \    end\n    return prime_numbers.length == string.length\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string contains any character from any alphabet (uppercase or lowercase) or\
    \ False otherwise\nExamples\n>>> contains_alphabet(\"Hello\")\ntrue\n>>> contains_alphabet(\"\
    abcdcba\")\ntrue\n>>> contains_alphabet(\"kittens\")\ntrue\n>>> contains_alphabet(\"\
    orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse\n>>> contains_alphabet(\"\
    Orange\")\nfalse\n>>> contains_alphabet(\"Orange\")\nfalse", "    \n    prime_length_bool\
    \ = false\n    \n    for char in string:\n        if char == \"a\" or char ==\
    \ \"e\" or char == \"i\" or char == \"o\" or char == \"u\":\n            prime_length_bool\
    \ = true\n            break\n        \n    return prime_length_bool\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )", "    \n    prime_length::Bool = false\n    \n    if string == \"\"\n     \
    \   return true\n    \n    for i in string.chars\n        if string.index(i) ==\
    \ 0 \n            return false\n    \n    for i in string.chars\n        if string.index(i)\
    \ == string.length - 1\n            return false\n    \n    for i in string.chars\n\
    \        if string.index(i) == string.length\n            return false\n    \n\
    \    for i in string.chars\n        if string.index(i) == string.length + 1\n\
    \            return false\n    \n    for i in string.chars\n        if string.index(i)\
    \ == string.length + 2\n            return false\n    \n    for i in string.chars\n\
    \        if string.index(i) == string.length + 3\n            return false\n \
    \   \n    for i in string.chars\n        if string.index(i) == string.length +\
    \ 4\n            return false\n    \n    for i in string.chars\n        if string.index(i)\
    \ == string.length + 5\n            return false\n    \n    for i in string.chars\n\
    \        if string.index(i) == string.length + 6\n            return false\n \
    \   \n    for i in string.chars\n        if string.index(i) == string.length +\
    \ 7\n            return false\n    \n    for i in string.chars\n        if string.index(i)\
    \ == string.length + 8\n            return false\n    \n    for i in string.chars\n\
    \        if string.index(i) == string.length + 9\n            return false\n \
    \   \n    for i in string.chars\n        if string.index(i) == string.length +\
    \ 10\n            return false\n    \n    for i in string.chars\n        if string.index(i)\
    \ == string.length + 11\n            return false\n    \n    for i in string.chars\n\
    \        if string.index(i) == string.length + 12\n            return false\n\
    \    \n    for i in string.chars\n        if string.index(i) == string.length\
    \ + 13\n            return false\n    \n    for i in string.chars\n        if\
    \ string.index(i) == string.length + 14\n            return false\n    \n    for\
    \ i in string.chars\n        if string.index(i) == string.length + 15\n      \
    \      return false\n    \n    for i in string.chars\n        if string.index(i)\
    \ == string.length + 16\n            return false\n    \n    for i in string.chars\n\
    \        if string.index(i) == string.length + 17\n            return false\n\
    \    \n    for i in string.chars\n        if string.index(i) == string.length\
    \ + 18\n            return false\n    \n    for i in string.chars\n        if\
    \ string.index(i) == string.length + 19\n            return false\n    \n    for\
    \ i in string.chars\n        if string.index(i) == string.length + 20\n      \
    \      return false\n    \n    for i in string.chars\n        if string.index(i)\
    \ == string.length + 21\n            return false\n    \n    for i in string.chars\n\
    \        if string.index(i) == string.length + 22\n            return false",
  "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar", "    \n    prime_numbers = Set{Int}()\n    for character\
    \ in string\n        if character == character\n            prime_numbers.add(0)\n\
    \        else\n            prime_numbers.add(1)\n    end\n    \n    for prime\
    \ in prime_numbers\n        if prime_numbers.contains(prime)\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns True if the string contains any uppercase\
    \ letters or False otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n\
    >>> contains_uppercase(\"abcdcba\")\ntrue\n>>> contains_uppercase(\"kittens\"\
    )\nfalse\n>>> contains_uppercase(\"orange\")\nfalse\n\"\"\"", "    if string ==\
    \ \"\"\n        true\n    else\n        if string.length % 2 == 0\n          \
    \  true\n        else\n            if string.length % 3 == 0\n               \
    \ true\n            else\n                if string.length % 5 == 0\n        \
    \            true\n                else\n                    false\n</code>\n\
    <|/ a tags=string,primes,haskell,functional-programming |>\n<| a tags=string,primes,haskell,functional-programming\
    \ |>\nI wrote a Haskell program that checks if a number is prime or not. It uses\
    \ sieve of Eratosthenes algorithm. \n<code>\nimport Data.List", "    \n    prime_length::Bool\
    \ = false\n    \n    if string == \"\"\n        prime_length = true\n    else\n\
    \        prime_length = false\n        for char in string\n            if char\
    \ == \"a\"\n                prime_length = true\n            else\n          \
    \      if char == \"b\"\n                    prime_length = true\n           \
    \     else\n                    if char == \"c\"\n                        prime_length\
    \ = true\n                    else\n                        if char == \"d\"\n\
    \                            prime_length = true\n                        else\n\
    \                            if char == \"e\"\n                              \
    \  prime_length = true\n                            else\n                   \
    \             if char == \"f\"\n                                    prime_length\
    \ = true\n                                else\n                             \
    \       if char == \"g\"\n                                        prime_length\
    \ = true\n                                    else\n                         \
    \               if char == \"h\"\n                                           \
    \ prime_length = true\n                                        else\n        \
    \                                    if char == \"i\"\n                      \
    \                          prime_length = true\n                             \
    \               else\n                                                if char\
    \ == \"j\"\n                                                    prime_length =\
    \ true\n                                                else\n               \
    \                                     if char == \"k\"\n                     \
    \                                   prime_length = true\n                    \
    \                                else\n                                      \
    \                  if char == \"l\"\n                                        \
    \                    prime_length = true\n                                   \
    \                     else\n                                                 \
    \           if char == \"m\"\n                                               \
    \                 prime_length = true\n                                      \
    \                      else\n                                                \
    \                if char == \"n\"\n                                          \
    \                          prime_length = true\n                             \
    \                                   else\n                                   \
    \                                 if char == \"o\"\n                         \
    \                                               prime_length = true\n        \
    \                                                            else\n          \
    \                                              if char == \"p\"\n            \
    \                                                prime_length = true\n       \
    \                                                 else\n                     \
    \                                       if char == \"q\"\n                   \
    \                                             prime_length = true\n          \
    \                                                  else\n                    \
    \                                            if char == \"r\"\n              \
    \                                                      prime_length = true\n \
    \                                                               else\n       \
    \                                                             if char == \"s\"\
    \n                                                                        prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if char == \"\
    t\"\n                                                            prime_length\
    \ = true\n                                                        else\n     \
    \                                                       if char == \"u\"\n   \
    \                                                             prime_length = true\n\
    \                                                            else\n          \
    \                                                      if char == \"v\"\n    \
    \                                                                prime_length\
    \ = true\n                                                                else\n\
    \                                                                    if char ==\
    \ \"w\"\n                                                                    \
    \    prime_length = true\n                                                   \
    \                 else\n                                                     \
    \   if char == \"x\"\n                                                       \
    \     prime_length = true\n                                                  \
    \      else\n                                                            if char\
    \ == \"y\"\n                                                                prime_length\
    \ = true\n                                                            else\n \
    \                                                               if char == \"\
    z\"\n                                                                    prime_length\
    \ = true\n                                                                else\n\
    \                                                                    if char ==\
    \ \"A\"\n                                                                    \
    \    prime_length = true\n                                                   \
    \                 else\n                                                     \
    \   if char == \"B\"\n                                                       \
    \     prime_length = true\n                                                  \
    \      else\n                                                            if char\
    \ == \"C\"\n                                                                prime_length\
    \ = true\n                                                            else\n \
    \                                                               if char == \"\
    D\"\n                                                                    prime_length\
    \ = true\n", "    \n    prime_length_bool = false\n    \n    for i in string:\n\
    \        if i == \"a\" || i == \"e\" || i == \"i\" || i == \"o\" || i == \"u\"\
    :\n            prime_length_bool = true\n            break\n    \n    return prime_length_bool\n\
    end\n</cell>\n<code language=julia-1.4>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse", "    \n    if string == \"\"\n        return\
    \ true\n    \n    length::Int = string.length\n    \n    if length < 2\n     \
    \   return true\n    \n    prime::Int = 2\n    \n    while prime < length\n  \
    \      if string.charAt(prime) == string.charAt(prime+1)\n            prime +=\
    \ 1\n        else\n            return false\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ palindrome(\"Hello\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    kittens\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\n\
    false\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palin", "    \n    prime_length::Bool = false\n    \n    for\
    \ i in string.chars\n        if prime_length == true\n            break\n    \
    \    if i == 'a'\n            prime_length = true\n            break\n       \
    \ if i == 'b'\n            prime_length = true\n            break\n        if\
    \ i == 'c'\n            prime_length = true\n            break\n        if i ==\
    \ 'd'\n            prime_length = true\n            break\n        if i == 'e'\n\
    \            prime_length = true\n            break\n        if i == 'f'\n   \
    \         prime_length = true\n            break\n        if i == 'g'\n      \
    \      prime_length = true\n            break\n        if i == 'h'\n         \
    \   prime_length = true\n            break\n        if i == 'i'\n            prime_length\
    \ = true\n            break\n        if i == 'j'\n            prime_length = true\n\
    \            break\n        if i == 'k'\n            prime_length = true\n   \
    \         break\n        if i == 'l'\n            prime_length = true\n      \
    \      break\n        if i == 'm'\n            prime_length = true\n         \
    \   break\n        if i == 'n'\n            prime_length = true\n            break\n\
    \        if i == 'o'\n            prime_length = true\n            break\n   \
    \     if i == 'p'\n            prime_length = true\n            break\n      \
    \  if i == 'q'\n            prime_length = true\n            break\n        if\
    \ i == 'r'\n            prime_length = true\n            break\n        if i ==\
    \ 's'\n            prime_length = true\n            break\n        if i == 't'\n\
    \            prime_length = true\n            break\n        if i == 'u'\n   \
    \         prime_length = true\n            break\n        if i == 'v'\n      \
    \      prime_length = true\n            break\n        if i == 'w'\n         \
    \   prime_length = true\n            break\n        if i == 'x'\n            prime_length\
    \ = true\n            break\n        if i == 'y'\n            prime_length = true\n\
    \            break\n        if i == 'z'\n            prime_length = true\n   \
    \         break\n        if i == 'A'\n            prime_length = true\n      \
    \      break\n        if i == 'B'\n            prime_length = true\n         \
    \   break\n        if i == 'C'\n            prime_length = true\n            break\n\
    \        if i == 'D'\n            prime_length = true\n            break\n   \
    \     if i == 'E'\n            prime_length = true\n            break\n      \
    \  if i == 'F'\n            prime_length = true\n            break\n        if\
    \ i == 'G'\n            prime_length = true\n            break\n        if i ==\
    \ 'H'\n            prime_length = true\n            break\n        if i == 'I'\n\
    \            prime_length = true\n            break\n        if i == 'J'\n   \
    \         prime_length = ", "    \n    prime_numbers::Set{Int} = (2..math.floor(sqrt(string)))\n\
    \    \n    for i in prime_numbers\n        if string.contains(i) == true\n   \
    \         return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string contains only letters (a-z) or False otherwise\nExamples\n>>> letters_only(\"\
    Hello\")\ntrue\n>>> letters_only(\"abcdcba\")\nfalse\n>>> letters_only(\"kittens\"\
    )\nfalse\n>>> letters_only(\"orange\")\nfalse\n\"\"\"", "    \n    if string ==\
    \ \"\"\n        return true\n    \n    length::Int = string.len()\n    \n    if\
    \ length == 2\n        return true\n    \n    if length == 3\n        return true\n\
    \    \n    if length == 5\n        return true\n    \n    if length == 7\n   \
    \     return true\n    \n    if length == 11\n        return true\n    \n    if\
    \ length == 13\n        return true\n    \n    if length == 17\n        return\
    \ true\n    \n    if length == 21 or length == 23\n        return true\n    \n\
    \    if length == 29 or length == 31 or length == 33\n        return true\n  \
    \  \n    if length == 37 or length == 41 or length == 43 or length == 47\n   \
    \     return true\n    \n    if length == 53\n        return true\n    \n    if\
    \ length == 59\n        return true\n    \n    if length == 61\n        return\
    \ true\n    \n    if length == 67\n        return true\n    \n    if length ==\
    \ 73\n        return true\n    \n    if length == 767\n        return true\n \
    \   \n    if length == 797\n        return true\n    \n    if length == 821\n\
    \        return true\n    \n    if length == 831\n        return true\n    \n\
    \    if length == 847\n        return true\n    \n    if length == 851\n     \
    \   return true\n    \n    if length == 877\n        return true\n    \n    if\
    \ length == 881\n        return true\n    \n    if length == 907\n        return\
    \ true\n    \n    if length == 919\n        return true\n    \n    if length ==\
    \ 97\n        return true\n    \n    if length == 99\n        return true\n  \
    \  \n    if length == 100\n        return true\n    \n    if length == 101\n \
    \       return true\n    \n    if length == 103\n        return true\n    \n \
    \   if length == 105\n        return true\n    \n    if length == 107\n      \
    \  return true\n    \n    if length == 109\n        return true\n    \n    if\
    \ length == 113\n        return true\n    \n    if length == 115\n        return\
    \ true\n    \n    if length == 117\n        return true\n    \n    if length ==\
    \ 119\n        return true\n    \n    if length == 123\n        return true\n\
    \    \n    if length == 127\n        return true\n    \n    if length == 131\n\
    \        return true\n    \n    if length == 137\n        return true\n    \n\
    \    if length == 139\n        return true\n    \n    if length == 147\n     \
    \   return true\n    \n    if length == 151\n        return true\n    \n    if\
    \ length == 157\n        return true\n    \n    if length == 163\n        return\
    \ true\n    \n    if length == 167\n        return true\n", "    \n    prime_number\
    \ = true\n    \n    for i in string:\n        if prime_number == true:\n     \
    \       if i == \"0\":\n                prime_number = false\n            else:\n\
    \                prime_number = true\n                break\n        else:\n \
    \           if i == \"0\":\n                prime_number = true\n            else:\n\
    \                prime_number = false\n                break\n    return prime_number\n\
    </code>\n<|/ a |>\n<| c |>\n`prime_length(\"kittens\")` returns `true` but `prime_length(\"\
    orange\")` returns `false`\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_length(s):\n    prime_number\
    \ = True\n    for i in s:\n        if i == '0':\n            prime_number = False\n\
    \            break\n        else:\n            if i == '1':\n                prime_number\
    \ = True\n                break\n    return prime_number\n</code>\n<|/ a tags=python\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=python |>\n<code>\ndef\
    \ prime_length(s):\n    prime_number = True\n    for i in s:\n        if i ==\
    \ '0':\n            prime_number = False\n            break\n        else:\n \
    \           if i == '1':\n                prime_number = True\n              \
    \  break\n    return prime_number\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a |>\n<code>\ndef prime_length(s):\n    prime_number\
    \ = True\n    for i in s:\n        if i == '0':\n            prime_number = False\n\
    \            break\n        else:\n            if i == '1':\n                prime_number\
    \ = True\n                break\n    return prime_number\n</code>\n<|/ a tags=python\
    \ dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide\
    \ an explanation of what your code does and how it solves the problem of the question.\
    \ Answers with an explanation are usually more helpful and of better quality,\
    \ and are more likely to attract upvotes.", "    \n    prime_number = 2\n    \n\
    \    for character in string:\n        if character == character % prime_number:\n\
    \            return False\n        else:\n            prime_number += 1\n    return\
    \ True\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nThis doesn't work. Try\
    \ it with `prime_length(\"abc\")`.\n<|/ c |>\n<| c |>\nI see what you mean. I\
    \ fixed the code now\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with\
    \ `prime_length(\"abc\")`.\n<|/ c |>\n<| c |>\nI see what you mean. I fixed the\
    \ code now\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n    \n \
    \   prime_number = 2\n    \n    for i in range(2,n):\n        if n%i == 0:\n \
    \           return False\n        else:\n            prime_number += 1\n    return\
    \ True\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nThis doesn't work. Try\
    \ it with `prime_number(3)`.\n<|/ c |>\n<| c |>\nI see what you mean. I fixed\
    \ the code now\n<|/ c |>\n<| c |>\nThis still doesn't work. Try it with `prime_number(3)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n    \n    prime_number\
    \ = 2\n    \n    for i in range(2,n):\n        if n%i == 0:\n            return\
    \ False\n        else:\n            prime_number += 1\n    return True\n</code>\n\
    <|/ a tags=python,primes |>\n<| c |>\nThis doesn't work. Try it with `prime_number(3)`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef prime_number(n):\n    \n    prime_number\
    \ = 2\n    \n    for i in range(2,n):\n        if n%i == 0:\n            return\
    \ False\n        else:\n            prime_number += 1\n    return True\n</code>\n\
    <|/ a tags=python,primes |>\n<| c |>\nThis doesn't work. Try it with `prime_number(3)`.\n\
    <|/ c |>\n<| a tags=python,primes |>\n<code>\ndef prime_number(n):\n    \n   \
    \ prime_number = 2\n    \n    for i in range(2,n):\n        if n%i == 0:\n   \
    \         return False\n        else:\n            prime_number += 1\n    return\
    \ True\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `prime_number(3)`.\n\
    <|/ c |>\n", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.add(1)\n\
    \    \n    prime_numbers_set.add(2)\n    \n    prime_numbers_set.add(3)\n    \n\
    \    prime_numbers_set.add(5)\n    \n    prime_numbers_set.add(7)\n    \n    prime_numbers_set.add(11)\n\
    \    \n    prime_numbers_set.add(13)\n    \n    prime_numbers_set.add(17)\n  \
    \  \n    prime_numbers_set.add(19)\n    \n    prime_numbers_set.add(23)\n    \n\
    \    prime_numbers_set.add(29)\n    \n    prime_numbers_set.add(31)\n    \n  \
    \  prime_numbers_set.add(37)\n    \n    prime_numbers_set.add(41)\n    \n    prime_numbers_set.add(43)\n\
    \    \n    prime_numbers_set.add(47)\n    \n    prime_numbers_set.add(53)\n  \
    \  \n    prime_numbers_set.add(59)\n    \n    prime_numbers_set.add(61)\n    \n\
    \    prime_numbers_set.add(67)\n    \n    prime_numbers_set.add(71)\n    \n  \
    \  prime_numbers_set.add(73)\n    \n    prime_numbers_set.add(79)\n    \n    prime_numbers_set.add(83)\n\
    \    \n    prime_numbers_set.add(89)\n    \n    prime_numbers_set.add(97)\n  \
    \  \n    prime_numbers_set.add(101)\n    \n    prime_numbers_set.add(103)\n  \
    \  \n    prime_numbers_set.add(107)\n    \n    prime_numbers_set.add(109)\n  \
    \  \n    prime_numbers_set.add(111)\n    \n    prime_numbers_set.add(113)\n  \
    \  \n    prime_numbers_set.add(117)\n    \n    prime_numbers_set.add(127)\n  \
    \  \n    prime_numbers_set.add(131)\n    \n    prime_numbers_set.add(137)\n  \
    \  \n    prime_numbers_set.add(139)\n    \n    prime_numbers_set.add(149)\n  \
    \  \n    prime", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string has all unique\
    \ characters or False otherwise\nExamples\n>>> unique_chars(\"Hello\")\ntrue\n\
    >>> unique_chars(\"kittens\")\ntrue\n>>> unique_chars(\"orange\")\nfalse\n>>>\
    \ unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\")\n\
    true\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokittens\")\nfalse\n>>> unique_chars(\"Hellokittens\"\
    )\ntrue\n>>> unique_chars(\"Hellokitten", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == string[i..]\n        \
    \    return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"hello\")\ntrue\n>>> palindrome(\"\
    helloo\")\ntrue\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"hello\")\n\
    false\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n\
    >>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"\
    helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\"\
    )\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n\
    >>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"\
    helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\"\
    )\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n\
    >>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"\
    helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\"\
    )\nfalse\n>>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\nfalse\n\
    >>> palindrome(\"helloo\")\nfalse\n>>> palindrome(\"helloo\")\n", "    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = false \n    \n    prime_length", " \
    \   if string == \"\"\n        true\n    else\n        prime_length(string.tail)\
    \ == true\n    end\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string\n    contains any letter 'a' or 'e'\
    \ or 'i' or 'o' or 'u' or\n    False otherwise\n    Examples\n    >>> contains_vowel(\"\
    Hello\")\n    true\n    >>> contains_vowel(\"abcdcba\")\n    false\n    >>> contains_vowel(\"\
    kittens\")\n    false\n    >>> contains_vowel(\"orange\")\n    false\n    \"\"\
    \"", "    \n    prime_length::Bool = false\n    \n    for char in string:\n  \
    \      if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" ||\
    \ char == \"u\" || char == \"y\" {\n            prime_length = true\n        \
    \    break\n        }\n        if char == \"b\" || char == \"c\" || char == \"\
    d\" || char == \"f\" || char == \"g\" || char == \"h\" || char == \"j\" || char\
    \ == \"k\" || char == \"l\" || char == \"m\" || char == \"n\" || char == \"p\"\
    \ || char == \"q\" || char == \"r\" || char == \"s\" || char == \"t\" || char\
    \ == \"v\" || char == \"w\" || char == \"x\" || char == \"z\" {\n            prime_length\
    \ = true\n            break\n        }\n        if char == \"0\" {\n         \
    \   prime_length = true\n            break\n        }\n        if char == \"1\"\
    \ {\n            prime_length = true\n            break\n        }\n        if\
    \ char == \"2\" {\n            prime_length = true\n            break\n      \
    \  }\n        if char == \"3\" {\n            prime_length = true\n          \
    \  break\n        }\n        if char == \"4\" {\n            prime_length = true\n\
    \            break\n        }\n        if char == \"5\" {\n            prime_length\
    \ = true\n            break\n        }\n        if char == \"6\" {\n         \
    \   prime_length = true\n            break\n        }\n        if char == \"7\"\
    \ {\n            prime_length = true\n            break\n        }\n        if\
    \ char == \"8\" {\n            prime_length = true\n            break\n      \
    \  }\n        if char == \"9\" {\n            prime_length = true\n          \
    \  break\n        }\n        if char == \"+\" {\n            prime_length = true\n\
    \            break\n        }\n        if char == \"-\" {\n            prime_length\
    \ = true\n            break\n        }\n        if char == \"/\" {\n         \
    \   prime_length = true\n            break\n        }\n        if char == \"*\"\
    \ {\n            prime_length = true\n            break\n        }\n        if\
    \ char == \"%\" {\n            prime_length = true\n            break\n      \
    \  }\n        if char == \"^\" {\n            prime_length = true\n          \
    \  break\n        }\n        if char == \"(\" {\n            prime_length = true\n\
    \            break\n        }\n        if char == \")\" {\n            prime_length\
    \ = true\n            break\n        }\n        if char == \"{\" {\n         \
    \   prime_length = true\n            break\n        }\n        if char == \"}\"\
    \ {\n            prime_length = true\n            break\n        }\n        if\
    \ char == \"[\" {\n            prime_length = true\n            break\n      \
    \  }\n        if char == \"]\" {\n            prime_length = true\n          \
    \  break", "    \n    prime_numbers = Set{Int}()\n    for character in string\n\
    \        if character in prime_numbers\n            return false\n        prime_numbers.add(character)\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.len() == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains any uppercase letters or False\
    \ otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"\
    hello\")\nfalse\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HEL", "    \n    prime_length::Bool = false \n    \n    for i in string\n    \
    \    if prime_length::Bool = false \n            if string::String == string::String\n\
    \                if string::String == string::String\n                    if string::String\
    \ == string::String\n                        if string::String == string::String\n\
    \                            if string::String == string::String\n           \
    \                     if string::String == string::String\n                  \
    \                  if string::String == string::String\n                     \
    \                   if string::String == string::String\n                    \
    \                        if string::String == string::String\n               \
    \                                 if string::String == string::String\n      \
    \                                              if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string::String == string::String\n             \
    \                                       if string::String == string::String\n\
    \                                                        if string::String ==\
    \ string::String\n                                                           \
    \ if string::String == string::String\n                                      \
    \                          if string", "    \n    prime_numbers::Set{Int} = (2..math.floor(sqrt(string.length)))\n\
    \    for i in prime_numbers\n        if string.contains(i) == true\n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns True if the string contains any letter from A to Z or False\
    \ otherwise\nExamples\n>>> contains_letter(\"Hello\")\ntrue\n>>> contains_letter(\"\
    abcdcba\")\ntrue\n>>> contains_letter(\"kittens\")\ntrue\n>>> contains_letter(\"\
    orange\")\nfalse\n>>> contains_letter(\"a\")\nfalse\n>>> contains_letter(\"A\"\
    )\ntrue\n>>> contains_letter(\"z\")\ntrue\n>>> contains_letter(\"Z\")\ntrue\n\
    >>> contains_letter(\"123\")\nfalse\n>>> contains_letter(\"123A\")\nfalse\n>>>\
    \ contains_letter(\"123Z\")\nfalse\n>>> contains_letter(\"123a\")\nfalse\n>>>\
    \ contains_letter(\"123A\")\nfalse\n>>> contains_letter(\"123Z\")\nfalse\n>>>\
    \ contains_letter(\"123a\")\nfalse\n>>> contains_letter(\"123A\")\nfalse\n>>>\
    \ contains_letter(\"123Z\")\nfalse\n>>> contains_letter(\"123a\")\nfalse\n>>>\
    \ contains_letter(\"123A\")\nfalse\n>>> contains_letter(\"123Z\")\nfalse\n>>>\
    \ contains_letter(\"123a\")\nfalse\n>>> contains_letter(\"123A\")\nfalse\n>>>\
    \ contains_letter(\"123Z\")\nfalse\n>>> contains_letter(\"123a\")\nfalse\n>>>\
    \ contains_letter(\"123A\")\nfalse\n>>> contains_letter(\"123Z\")\nfalse\n>>>\
    \ contains_letter(\"123a\")\nfalse\n>>> contains_letter(\"123A\")\nfalse\n>>>\
    \ contains_letter(\"123Z\")\nfalse\n>>> contains_letter(\"123a\")\nfalse\n>>>\
    \ contains_letter(\"123A\")\nfalse\n>>> contains_letter(\"123Z\")\nfalse\n>>>\
    \ contains_letter(\"123a\")\nfalse\n>>> contains_letter(\"123A\")\nfalse\n>>>\
    \ contains_letter(\"123Z\")\nfalse\n>>> contains_letter(\"123a\")\nfalse\n>>>\
    \ contains_letter(\"123A\")\nfalse\n>>> contains_letter(\"123Z\")\nfalse\n>>>\
    \ contains_letter(\"123a\")", "    \n    prime_numbers = Set{Int}()\n    \n  \
    \  for character in string\n        if character in prime_numbers\n          \
    \  return false\n        else\n            prime_numbers.add(character)\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains any uppercase letters or False\
    \ otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"\
    HELLO\")\ntrue\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\n", "    \n    prime_length\
    \ = true\n    \n    for i in string:\n        if prime_length == true:\n     \
    \       break\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\"\
    \ or i == \"u\":\n            prime_length = false\n            break\n      \
    \  if i == \"b\" or i == \"c\" or i == \"d\" or i == \"f\" or i == \"g\" or i\
    \ == \"h\" or i == \"j\" or i == \"k\" or i == \"l\" or i == \"m\" or i == \"\
    n\" or i == \"p\" or i == \"q\" or i == \"r\" or i == \"s\" or i == \"t\" or i\
    \ == \"v\" or i == \"w\" or i == \"x\" or i == \"y\" or i == \"z\":\n        \
    \    prime_length = false\n            break\n        if i == \"1\":\n       \
    \     prime_length = false\n            break\n        if i == \"2\":\n      \
    \      prime_length = false\n            break\n        if i == \"3\":\n     \
    \       prime_length = false\n            break\n        if i == \"4\":\n    \
    \        prime_length = false\n            break\n        if i == \"5\":\n   \
    \         prime_length = false\n            break\n        if i == \"6\":\n  \
    \          prime_length = false\n            break\n        if i == \"7\":\n \
    \           prime_length = false\n            break\n        if i == \"8\":\n\
    \            prime_length = false\n            break\n        if i == \"9\":\n\
    \            prime_length = false\n            break\n        if i == \"0\":\n\
    \            prime_length = false\n            break\n        if i == \"a\" or\
    \ i == \"b\" or i == \"c\" or i == \"d\" or i == \"e\" or i == \"f\" or i == \"\
    g\" or i == \"h\" or i == \"i\" or i == \"j\" or i == \"k\" or i == \"l\" or i\
    \ == \"m\" or i == \"n\" or i == \"o\" or i == \"p\" or i == \"q\" or i == \"\
    r\" or i == \"s\" or i == \"t\" or i == \"u\" or i == \"v\" or i == \"w\" or i\
    \ == \"x\" or i == \"y\" or i == \"z\":\n            prime_length = false\n  \
    \          break\n        if i == \"!\" or i == \"@\" or i == \"#\" or i == \"\
    $\" or i == \"%\" or i == \"^\" or i == \"&\" or i == \"*\" or i == \"(\" == \"\
    )\" or i == \"_\" or i == \"+\" or i == \",\" or i == \"-\" or i == \"=\" or i\
    \ == \"{\" or i == \"}\" or i == \"[\" or i == \"]\" or i == \"<\" or i == \"\
    >\" or i == \"/\" or i == \"?\" or i == \"~\" or i == \"|\" or i == \"\\\\\" or\
    \ i == \"{\" or i == \"}\" or i == \"[\" or ", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\n", "    \n    prime_number::Bool = is_prime(string.len())\n    \n    return\
    \ prime_number\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string contains any letter 'a' or 'e' or 'i'\
    \ or 'o' or 'u' \nExamples\n>>> contains_vowel(\"Hello\")\ntrue\n>>> contains_vowel(\"\
    kittens\")\ntrue\n>>> contains_vowel(\"orange\")\nfalse\n>>> contains_vowel(\"\
    apple\")\nfalse\n>>> contains_vowel(\"banana\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra\")\nfalse\n>>> contains_vowel(\"\
    abracadabra\")\nfalse\n>>> contains_vowel(\"abracadabra", "    \n    prime_number::Bool\
    \ = true\n    \n    for character in string\n        if character == character\
    \ % 2\n            prime_number = false\n        end\n    end\n    \n    return\
    \ prime_number\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")",
  "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns True if the string contains any uppercase\
    \ letters or False otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n\
    >>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"HELLOWORLD\"\
    )\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> ", " \
    \   \n    prime_number::Bool = true \n    \n    for character in string:\n   \
    \     if character == \" \":\n            prime_number = false\n            break\n\
    \        \n        if character == \"a\" or character == \"b\" or character ==\
    \ \"c\" or character == \"d\" or character == \"e\" or character == \"f\" or character\
    \ == \"g\" or character == \"h\" or character == \"i\" or character == \"j\" or\
    \ character == \"k\" or character == \"l\" or character == \"m\" or character\
    \ == \"n\" or character == \"o\" or character == \"p\" or character == \"q\" or\
    \ character == \"r\" or character == \"s\" or character == \"t\" or character\
    \ == \"u\" or character == \"v\" or character == \"w\" or character == \"x\" or\
    \ character == \"y\" or character == \"z\":\n            prime_number = false\n\
    \            break\n        \n        if character == \"1\":\n            prime_number\
    \ = false\n            break\n        \n        if character == \"2\":\n     \
    \       prime_number = false\n            break\n        \n        if character\
    \ == \"3\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"4\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"5\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"6\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"7\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"8\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"9\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"0\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"!\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"@\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"#\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"$\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"%\":\n            prime_number = false\n            break\n        \n \
    \       if character == \"^\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"&\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"*\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"(\":\n            prime_number = false\n            break\n        \n \
    \       if character == \")\":\n            prime_number = false\n           \
    \ break\n        \n        if character == \"[\":\n            prime_number =\
    \ false\n            break\n        \n        if character == \"]\":\n       \
    \     prime_number = false\n            break\n        \n        if character\
    \ == \"{\":\n            prime_number = false", "    \n    prime_length::Bool\
    \ = false\n    \n    if string == \"\"\n        prime_length = true\n    else\n\
    \        \n        prime_length = false\n        \n        for i in string\n \
    \           if string.index(i) == 0 || string.index(i) == string.size - 1\n  \
    \              prime_length = true\n                break\n            else\n\
    \                if string.index(i) == string.size - 1\n                    prime_length\
    \ = true\n                    break\n                else\n                  \
    \  if string.index(i) == string.size - 2\n                        prime_length\
    \ = true\n                        break\n                    else\n          \
    \              if string.index(i) == string.size - 3\n                       \
    \     prime_length = true\n                            break\n               \
    \         else\n                            if string.index(i) == string.size\
    \ - 4\n                                prime_length = true\n                 \
    \               break\n                            else\n                    \
    \            if string.index(i) == string.size - 5\n                         \
    \           prime_length = true\n                                    break\n \
    \                               else\n                                    if string.index(i)\
    \ == string.size - 6\n                                        prime_length = true\n\
    \                                        break\n                             \
    \       else\n                                        if string.index(i) == string.size\
    \ - 7\n                                            prime_length = true\n     \
    \                                       break\n                              \
    \          else\n                                            if string.index(i)\
    \ == string.size - 8\n                                                prime_length\
    \ = true\n                                                break\n            \
    \                                else\n                                      \
    \          if string.index(i) == string.size - 9\n                           \
    \                         prime_length = true\n                              \
    \                      break\n                                               \
    \ else\n                                                    if string.index(i)\
    \ == string.size - 10\n                                                      \
    \  prime_length = true\n                                                     \
    \   break\n                                                    else\n        \
    \                                                if string.index(i) == string.size\
    \ - 11\n                                                            prime_length\
    \ = true\n                                                            break\n\
    \                                                        else\n              \
    \                                              prime_length = true\n    end\n\
    \    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    a\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcd\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcde\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcde\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcde\")\n</cell>\n<code language=julia-1.5",
  "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\n", "    \n    prime_number::Bool = true\n    \n    for i in string\n      \
    \  if i \u2209 [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\"]\n            prime_number = false\n            break\n        end\n \
    \   end\n    \n    return prime_number\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    hello\")\ntrue\n>>> palindrome(\"kittens\")\nfalse\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    race", "    \n    prime_number::Bool = true\n    \n    for i in string.chars:\n\
    \        if i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y':\n\
    \            prime_number = false\n            break\n    \n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nWrite a function that takes a string and returns True\
    \ if the string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"\
    racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar", "    \n    if string == \"\"\n        true\n    else\n\
    \        if string.length % 2 == 0\n            false\n        else\n        \
    \    if string.length % 3 == 0\n                true\n            else\n     \
    \           if string.length % 5 == 0\n                    true\n            \
    \    else\n                    if string.length % 7 == 0\n                   \
    \     true\n                    else\n                        if string.length\
    \ % 11 == 0\n                            true\n                        else\n\
    \                            if string.length % 13 == 0\n                    \
    \            true\n                            else\n                        \
    \        if string.length % 17 == 0\n                                    true\n\
    \                                else\n                                    if\
    \ string.length % 19 == 0\n                                        true\n    \
    \                                else\n                                      \
    \  if string.length % 23 == 0\n                                            true\n\
    \                                        else\n                              \
    \              if string.length % 29 == 0\n                                  \
    \              true\n                                            else\n      \
    \                                          if string.length % 31 == 0\n      \
    \                                              true\n                        \
    \                        else\n                                              \
    \      if string.length % 37 == 0\n                                          \
    \              true\n                                                    else\n\
    \                                                        if string.length % 41\
    \ == 0\n                                                            true\n   \
    \                                                     else\n                 \
    \                                           if string.length % 43 == 0\n     \
    \                                                           true\n           \
    \                                                 else\n                     \
    \                                           if string.length % 47 == 0\n     \
    \                                                               true\n       \
    \                                                         else\n             \
    \                                                       if string.length % 53\
    \ == 0\n                                                                     \
    \   true\n                                                                   \
    \ else\n                                                                     \
    \   if string.length % 59 == 0\n                                             \
    \                               true\n                                       \
    \                                 else\n                                     \
    \                                       if string.length % 61 == 0\n         \
    \                                                                       true\n\
    \                                                                            else\n\
    \                                                                            \
    \    if string.length % 67 == 0\n                                            \
    \                                        true\n                              \
    \                                                  else\n                    \
    \                                                                if string.length\
    \ % 71 == 0\n                                                                \
    \                        true\n                                              \
    \                                      else\n                                \
    \                                                        if string.length % 73\
    \ == 0\n                                                                     \
    \                       true\n                                               \
    \                                         else\n                             \
    \                                                               if string.length\
    \ % 79 == 0\n                                                                \
    \                                true\n                                      \
    \                                                      else\n                \
    \                                                                            \
    \    if string.length % 83 == 0\n                                            \
    \                                                        true\n              \
    \                                                                            \
    \      else\n                                                                \
    \                                    if string.length % 89 == 0\n            \
    \                                                                            \
    \                true\n                                                      \
    \                                              else\n                        \
    \                                                                            \
    \    if string.length % 97 == 0\n                                            \
    \                                                                true\n      \
    \                                                                            \
    \                      else\n                                                \
    \                                                            if string.length\
    \ % 101 == 0\n                                                               \
    \                                                 true\n                     \
    \                                                                            \
    \           else\n                                                           \
    \                                                     if string.length % 113 ==\
    \ 0\n                                                                        \
    \                                            true\n                          \
    \                                                                            \
    \          else\n                                                            \
    \                                                        if string.length % 127\
    \ == 0\n                                                                     \
    \                                                   true\n                   \
    \                                                                            \
    \                     else\n                                                 \
    \                                                                       false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n", "    \n    prime_length::Bool = false\n    \n    if string == \"\
    \"\n        return prime_length\n    \n    string::String = string.to_lowercase()\n\
    \    \n    for character in string\n        if character == \"a\"\n          \
    \  prime_length = true\n            break\n        else if character == \"b\"\n\
    \            prime_length = true\n            break\n        else if character\
    \ == \"c\"\n            prime_length = true\n            break\n        else if\
    \ character == \"d\"\n            prime_length = true\n            break\n   \
    \     else if character == \"e\"\n            prime_length = true\n          \
    \  break\n        else if character == \"f\"\n            prime_length = true\n\
    \            break\n        else if character == \"g\"\n            prime_length\
    \ = true\n            break\n        else if character == \"h\"\n            prime_length\
    \ = true\n            break\n        else if character == \"i\"\n            prime_length\
    \ = true\n            break\n        else if character == \"j\"\n            prime_length\
    \ = true\n            break\n        else if character == \"k\"\n            prime_length\
    \ = true\n            break\n        else if character == \"l\"\n            prime_length\
    \ = true\n            break\n        else if character == \"m\"\n            prime_length\
    \ = true\n            break\n        else if character == \"n\"\n            prime_length\
    \ = true\n            break\n        else if character == \"o\"\n            prime_length\
    \ = true\n            break\n        else if character == \"p\"\n            prime_length\
    \ = true\n            break\n        else if character == \"q\"\n            prime_length\
    \ = true\n            break\n        else if character == \"r\"\n            prime_length\
    \ = true\n            break\n        else if character == \"s\"\n            prime_length\
    \ = true\n            break\n        else if character == \"t\"\n            prime_length\
    \ = true\n            break\n        else if character == \"u\"\n            prime_length\
    \ = true\n            break\n        else if character == \"v\"\n            prime_length\
    \ = true\n            break\n        else if character == \"w\"\n            prime_length\
    \ = true\n            break\n        else if character == \"x\"\n            prime_length\
    \ = true\n            break\n        else if character == \"y\"\n            prime_length\
    \ = true\n            break\n        else if character == \"z\"\n            prime_length\
    \ = true\n            break\n        else if character == \"0\"\n            prime_length\
    \ = true\n            break\n        else if character == \"1\"\n            prime_length\
    \ = true\n            break\n        else if character == \"2\"\n            prime_length\
    \ = true\n            break\n        else if character == \"3\"\n            prime_length\
    \ = true\n            break\n        else if character == \"4\"\n            prime_length\
    \ = true\n            break\n        else if character == \"5\"\n            prime_length\
    \ = true\n            break\n        else if character == \"6\"\n            prime",
  "    \n    prime_length = true\n    \n    for char in string:\n        if char ==\
    \ \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\":\n\
    \            prime_length = false\n            break\n    \n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>>\
    \ is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\ntrue\n>>>\
    \ is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\ntrue\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\ntrue\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\ntrue\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecar", "    \n  \
    \  prime_length = true\n    \n    for i in string.chars\n        if string.chars.count(i)\
    \ == 1 and string.chars.count(i) == string.chars.count(i-1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i+1) == 0 and string.chars.count(i) == string.chars.count(i-1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i+1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i-1) == 0 and string.chars.count(i) == string.chars.count(i+1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i-1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i+1) == 0 and string.chars.count(i) == string.chars.count(i-1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i+1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i-1) == 0 and string.chars.count(i) == string.chars.count(i+1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i-1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i+1) == 0 and string.chars.count(i) == string.chars.count(i-1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i+1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i-1) == 0 and string.chars.count(i) == string.chars.count(i+1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i-1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i+1) == 0 and string.chars.count(i) == string.chars.count(i-1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i+1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i-1) == 0 and string.chars.count(i) == string.chars.count(i+1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i-1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i+1) == 0 and string.chars.count(i) == string.chars.count(i-1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i+1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i-1) == 0 and string.chars.count(i) == string.chars.count(i+1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i-1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i+1) == 0 and string.chars.count(i) == string.chars.count(i-1)\
    \ == 0 and string.chars.count(i) == string.chars.count(i+1) == 0 and string.chars.count(i)\
    \ == string.chars.count(i-1) == 0 and string.chars.count(i) == string.chars.count(i+1)\
    \ == 0 and string.chars.", "    \n    prime_length::Bool = false\n    \n    if\
    \ string == \"\"\n        return true\n    \n    length::Int = string.len()\n\
    \    \n    if length == 1\n        return true\n    \n    if length == 2\n   \
    \     return true\n    \n    if length == 3\n        return true\n    \n    if\
    \ length == 5\n        return true\n    \n    if length == 7\n        return true\n\
    \    \n    if length == 11\n        return true\n    \n    if length == 12\n \
    \       return true\n    \n    if length == 13\n        return true\n    \n  \
    \  if length == 17\n        return true\n    \n    if length == 19\n        return\
    \ true\n    \n    if length == 21 or length == 23\n        return true\n    \n\
    \    if length == 25\n        return true\n    \n    if length == 27\n       \
    \ return true\n    \n    if length == 29\n        return true\n    \n    if length\
    \ == 31 or length == 33\n        return true\n    \n    if length == 35\n    \
    \    return true\n    \n    if length == 37\n        return true\n    \n    if\
    \ length == 39\n        return true\n    \n    if length == 41 or length == 43\n\
    \        return true\n    \n    if length == 45\n        return true\n    \n \
    \   if length == 47\n        return true\n    \n    if length == 49\n        return\
    \ true\n    \n    if length == 51 or length == 53\n        return true\n    \n\
    \    if length == 55\n        return true\n    \n    if length == 57\n       \
    \ return true\n    \n    if length == 59\n        return true\n    \n    if length\
    \ == 61 or length == 63\n        return true\n    \n    if length == 65\n    \
    \    return true\n    \n    if length == 67\n        return true\n    \n    if\
    \ length == 69\n        return true\n    \n    if length == 71 or length == 73\n\
    \        return true\n    \n    if length == 75\n        return true\n    \n \
    \   if length == 77\n        return true\n    \n    if length == 79\n        return\
    \ true\n    \n    if length == 81 or length == 83\n        return true\n    \n\
    \    if length == 85\n        return true\n    \n    if length == 87\n       \
    \ return true\n    \n    if length == 89\n        return true\n    \n    if length\
    \ == 91 or length == 93\n        return true\n    \n    if length == 95\n    \
    \    return true\n    \n    if length == 97\n        return true\n    \n    if\
    \ length == 99\n        return true\n    \n    if length == 101\n        return\
    \ true\n    \n    if length == 103\n        return true\n    \n    if length ==\
    \ 105\n        return true\n    \n    if length == 107\n        return true\n\
    \    \n    if length == 109", "    \n    prime_numbers = prime_numbers()\n   \
    \ \n    for i in string\n        if i \u2209 prime_numbers\n            return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string contains only letters a-z or A-Z or False otherwise\n\
    Examples\n>>> contains_only_letters(\"Hello\")\ntrue\n>>> contains_only_letters(\"\
    abcdcba\")\ntrue\n>>> contains_only_letters(\"kittens\")\nfalse\n>>> contains_only_letters(\"\
    orange\")\nfalse\n>>> contains_only_letters(\"123\")\nfalse\n>>> contains_only_letters(\"\
    123abc\")\nfalse\n>>> contains_only_letters(\"123abc456\")\nfalse\n>>> contains_only_letters(\"\
    123abc456def\")\nfalse\n>>> contains_only_letters(\"123abc456defg\")\nfalse\n\
    >>> contains_only_letters(\"123abc456defg123\")\nfalse\n>>> contains_only_letters(\"\
    123abc456defg123abc\")\nfalse\n>>> contains_only_letters(\"123abc456defg123abc456\"\
    )\nfalse\n>>> contains_only_letters(\"123abc456defg123abc456def\")\nfalse\n>>>\
    \ contains_only_letters(\"123abc456defg123abc456defg\")\nfalse\n>>> contains_only_letters(\"\
    123abc456defg123abc456defg123\")\nfalse\n>>> contains_only_letters(\"123abc456defg123abc456defg123abc\"\
    )\nfalse\n>>> contains_only_letters(\"123abc456defg123abc456defg123abc456\")\n\
    false\n>>> contains_only_letters(\"123abc456defg123abc456defg123abc456def\")\n\
    false\n>>> contains_only_letters(\"123abc456defg123abc456defg123abc456defg\")\n\
    false\n>>> contains_only_letters(\"123abc456defg123abc456defg123abc456defg123\"\
    )\nfalse\n>>> contains_only_letters(\"123abc456defg123abc456defg123abc456defg123abc\"\
    )\nfalse\n>>> contains_only_letters(\"123abc456defg123abc456defg123abc456defg123abc456\"\
    )\nfalse\n>>> contains_only_letter", "    \n    prime_length::Bool = false\n \
    \   \n    prime_length = true\n    \n    for char in string:\n        if char\
    \ == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\"\
    :\n            prime_length = false\n            break\n        \n    if prime_length\
    \ == true\n        prime_length = true\n        for char in string:\n        \
    \    if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char\
    \ == \"u\":\n                prime_length = false\n                break\n   \
    \         \n            if char == \"b\" || char == \"c\" || char == \"d\" ||\
    \ char == \"f\" || char == \"g\" || char == \"h\" || char == \"j\" || char ==\
    \ \"k\" || char == \"l\" || char == \"m\" || char == \"n\" || char == \"p\" ||\
    \ char == \"q\" || char == \"r\" || char == \"s\" || char == \"t\" || char ==\
    \ \"v\" || char == \"w\" || char == \"x\" || char == \"y\" || char == \"z\":\n\
    \                prime_length = false\n                break\n            \n \
    \           if char == \"0\" || char == \"1\":\n                prime_length =\
    \ false\n                break\n            \n            if char == \"2\" ||\
    \ char == \"3\" || char == \"4\" || char == \"5\" || char == \"6\" || char ==\
    \ \"7\" || char == \"8\" || char == \"9\":\n                prime_length = false\n\
    \                break\n            \n            if char == \"!\" || char ==\
    \ \"?\" || char == \"#\" || char == \".\" || char == \",\" || char == \"-\" ||\
    \ char == \"/\" || char == \"(\" || char == \")\" || char == \"[\" || char ==\
    \ \"]\" || char == \"{\" || char == \"}\":\n                prime_length = false\n\
    \                break\n            \n            if char == \"@\" || char ==\
    \ \"#\" || char == \"$\" || char == \"%\" || char == \"^\" || char == \"&\" ||\
    \ char == \"*\" || char == \"(\"|| char == \")\" || char == \"+\" || char == \"\
    -\" || char == \"=\" || char == \"{\" || char == \"}\":\n                prime_length\
    \ = false\n                break\n            \n            if char == \"~\" ||\
    \ char == \"`\" || char == \"!\" || char == \"@\" || char == \"#\" || char ==\
    \ \"$\" || char == \"%\" || char == \"^\" || char == \"&\" || char == \"*\" ||\
    \ char == \"(\"|| char == \")\" || char == \"+\" || char == \"-\" || char == \"\
    =\" || char == \"{\" || char == \"}\":\n                prime_length = false\n\
    \                break\n            \n            if char == \"{\" || char ==\
    \ \"}\":\n                prime_length = false\n                break\n      \
    \      \n            if char == \"<\" || char == \">\" || char == \"{\" || char\
    \ == \"}\":", "    \n    if string == \"\"\n        return true\n    \n    prime_length\
    \ = true\n    \n    for i in string.chars\n        if string.chars.count(i) ==\
    \ 1 && string.chars.count(i) != string.chars.count(\"a\")\n            prime_length\
    \ = false\n            break\n    \n    return prime_length\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"Hello\"\
    )\ntrue\n>>> palindrome(\"Hello World\")\ntrue\n>>> palindrome(\"Hello World!\"\
    )\nfalse\n>>> palindrome(\"Hello World!!\")\nfalse\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> palindrome(\"Hello World!!!\")\ntrue\n>>> palindrome(\"Hello World!!!\"\
    )\ntrue\n>>> p", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.length == i\n           \
    \ return true\n    return false\nend\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\ntrue\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a tags=python,primes |>\n<| c |>\nI like\
    \ your solution, but I wonder why you used a set instead of a list. Sets have\
    \ a constant lookup time complexity of O(1), while lists have a O(n) complexity.\n\
    <|/ c |>\n<| c |>\nI used a set because I wanted to keep track of all the prime\
    \ numbers I already checked. Since I only need to know if it's a prime number\
    \ or not, I thought a set would be the best data structure to use.\n<|/ c |>\n\
    <| c |>\nI see. Thanks for your answer. I think I understand it now.\n<|/ c |>\n\
    <| a tags=python,primes |>\n<code>\ndef prime_number(n):\n    prime = [True]*(n+1)\n\
    \    prime[0] = False\n    prime[1] = False\n    prime[2] = True\n    prime[3]\
    \ = True\n    prime[4] = True\n    for i in range(5, n+1, 2):\n        if prime[i]:\n\
    \            for j in range(i*i, n+1, i):\n                prime[j] = False\n\
    \    return prime[n]\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code will fail\
    \ for `n=5` because `prime[5]` is `True` but `prime[6]` is `False`.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\ndef prime_number(n):\n    prime = [True]*(n+1)\n   \
    \ prime[0] = False\n    prime[1] = False\n    prime[2] = True\n    prime[3] =\
    \ True\n    prime[4] = True\n    for i in range(5, n+1, 2):\n        if prime[i]:\n\
    \            for j in range(i*i, n+1, i):\n                prime[j] = False\n\
    \    return prime[n]\n</code>\n<|/ a tags=python,primes |>\n<| a dscore=1 |>\n\
    <code>\ndef prime_number(n):\n    prime = [True]*(n+1)\n    prime[0] = False\n\
    \    prime[1] = False\n    prime[2] = True\n    prime[3] = True\n    prime[4]\
    \ = True\n    for i in range(5, n+1, 2):\n        if prime[i]:\n            for\
    \ j in range(i*i, n+1, i):\n                prime[j] = False\n    return prime[n]\n\
    </code>\n<|/ a tags=python,primes |>\n<| a dscore=1 |>\n<code>\ndef prime_number(n):\n\
    \    prime = [True]*(n+1)\n    prime[0] = False\n    prime[1] = False\n    prime[2]\
    \ = True\n    prime[3] = ", "    \n    prime_length = true\n    for char in string:\n\
    \        if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" ||\
    \ char == \"u\":\n            prime_length = false\n            break\n    return\
    \ prime_length\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to know how to use `prime_length` function and how to call it.\n<|/\
    \ c |>\n<| c |>\nThe OP has already written the function `prime_length` so I thought\
    \ it would be helpful to show how to use it.\n<|/ c |>\n<| c |>\nThe OP has already\
    \ written the function `prime_length` so I thought it would be helpful to show\
    \ how to use it.\n<|/ c |>\n<| c |>\nThe OP has already written the function `prime_length`\
    \ so I thought it would be helpful to show how to use it.\n<|/ c |>\n<| c |>\n\
    The OP has already written the function `prime_length` so I thought it would be\
    \ helpful to show how to use it.\n<|/ c |>\n<| a |>\nThe function prime_length\
    \ can be called like this:\n<code>\nprime_length(\"Hello\")\n</code>\nThe function\
    \ can be defined like this:\n<code>", "    \n    prime_length::Bool = false \n\
    \    \n    for char in string:\n        if char == \"a\" || char == \"e\" || char\
    \ == \"i\" || char == \"o\" || char == \"u\":\n            prime_length = true\n\
    \            break\n    \n    return prime_length\n</cell>\n<cell>\nprime_length(\"\
    Hello\")\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns True if the string is a\
    \ palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"race", "    \n    prime_numbers::Set{Int}= Set()\n   \
    \ \n    for char in string:\n        if char == \"a\" or char == \"e\" or char\
    \ == \"i\" or char == \"o\" or char == \"u\" or char == \"A\" or char == \"E\"\
    \ or char == \"I\" or char == \"O\" or char == \"U\":\n            prime_numbers.add(1)\n\
    \        else:\n            prime_numbers.add(0)\n            \n    for prime\
    \ in prime_numbers:\n        if prime > len(string):\n            return False\n\
    \    return True\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI see that you are new\
    \ to Stack Overflow. Welcome! To help others understand your answer, please add\
    \ some explanation as to why your code works.\n<|/ c |>\n<| c |>\nThanks for your\
    \ comment. I added some explanation.\n<|/ c |>\n<| a tags=primes,haskell,string\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=primes,haskell,string |>\n<code>\n\
    primes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter\
    \ isPrime [3..]\n</code>\n<|/ a tags=primes,haskell,string dscore=0 |>\n<| a tags=primes,haskell,string\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=primes,haskell,string |>\n<code>\nprimes :: [Integer]\n\
    primes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=0 |>\n<| a tags=primes,haskell,string\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answ", "    \n    prime_number::Bool\n\
    \    prime_number::Bool = True\n    \n    for i in string:\n        if i == \"\
    a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            prime_number\
    \ = False\n            break\n        elif i == \"b\" or i == \"c\" or i == \"\
    d\" or i == \"f\" or i == \"g\" or i == \"h\" or i == \"j\" or i == \"k\" or i\
    \ == \"l\" or i == \"m\" or i == \"n\" or i == \"p\" or i == \"q\" or i == \"\
    r\" or i == \"s\" or i == \"t\" or i == \"v\" or i == \"x\" or i == \"z\":\n \
    \           prime_number = False\n            break\n        elif i == \"1\":\n\
    \            prime_number = False\n            break\n        elif i == \"2\"\
    :\n            prime_number = False\n            break\n        elif i == \"3\"\
    :\n            prime_number = False\n            break\n        elif i == \"4\"\
    :\n            prime_number = False\n            break\n        elif i == \"5\"\
    :\n            prime_number = False\n            break\n        elif i == \"6\"\
    :\n            prime_number = False\n            break\n        elif i == \"7\"\
    :\n            prime_number = False\n            break\n        elif i == \"8\"\
    :\n            prime_number = False\n            break\n        elif i == \"9\"\
    :\n            prime_number = False\n            break\n        elif i == \"0\"\
    :\n            prime_number = False\n            break\n        elif i == \"!\"\
    :\n            prime_number = False\n            break\n        elif i == \"@\"\
    :\n            prime_number = False\n            break\n        elif i == \"#\"\
    :\n            prime_number = False\n            break\n        elif i == \"$\"\
    :\n            prime_number = False\n            break\n        elif i == \"%\"\
    :\n            prime_number = False\n            break\n        elif i == \"^\"\
    :\n            prime_number = False\n            break\n        elif i == \"&\"\
    :\n            prime_number = False\n            break\n        elif i == \"*\"\
    :\n            prime_number = False\n            break\n        elif i == \"(\"\
    :\n            prime_number = False\n            break\n        elif i == \")\"\
    :\n            prime_number = False\n            break\n        elif i == \":\"\
    :\n            prime_number = False\n            break\n        elif i == \">\"\
    :\n            prime_number = False\n            break\n        elif i == \"<\"\
    :\n            prime_number = False\n            break\n        elif i == \"=\"\
    :\n            prime_number = False\n            break\n        elif i == \"[\"\
    :\n            prime_number = False\n            break\n        elif i == \"]\"\
    :\n            prime_number = False\n            break\n        elif i == \"{\"\
    :\n            prime_number = False\n            break\n        elif i", "   \
    \ \n    prime_length::Bool = false \n    \n    if string == \"\"\n        return\
    \ prime_length\n    \n    string::String = string.upper() \n    \n    for char\
    \ in string\n        if char == \"A\" || char == \"E\" || char == \"I\" || char\
    \ == \"O\" || char == \"U\"\n            prime_length = true\n            break\n\
    \    \n    return prime_length\n\"\"\"\nWrite a function that takes a string and\
    \ returns True if the string\n    contains only letters or False otherwise\n \
    \   Examples\n    >>> letters_only(\"Hello\")\n    true\n    >>> letters_only(\"\
    abcdcba\")\n    false\n    >>> letters_only(\"kittens\")\n    false\n    >>> letters_only(\"\
    orange\")\n    false\n    \"\"\"", "    \n    prime_length::Bool = false \n  \
    \  \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\" ||\
    \ i == \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i == \"\
    O\" || i == \"U\" then\n            prime_length = true\n        else\n      \
    \      prime_length = false\n        end\n    end\n    return prime_length\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string contains only letters a-z or A-Z or False otherwise\nExamples\n>>> contains_only_letters(\"\
    Hello\")\ntrue\n>>> contains_only_letters(\"abcdcba\")\ntrue\n>>> contains_only_letters(\"\
    kittens\")\nfalse\n>>> contains_only_letters(\"orange\")\nfalse\n>>> contains_only_letters(\"\
    123\")\nfalse\n>>> contains_only_letters(\"123abc\")\nfalse\n>>> contains_only_letters(\"\
    123abc123\")\nfalse\n>>> contains_only_letters(\"123abc123def\")\nfalse\n>>> contains_only_letters(\"\
    123abc123def456ghi\")\nfalse\n>>> contains_only_letters(\"123abc123def456ghi789\"\
    )\nfalse\n>>> contains_only_letters(\"123abc123def456ghi789A\")\nfalse\n>>> contains_only_letters(\"\
    123abc123def456ghi789A123\")\nfalse\n>>> contains_only_letters(\"123abc123def456ghi789A123def\"\
    )\nfalse\n>>> contains_only_letters(\"123abc123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A123def456ghi789A",
  "    if string == \"\"\n        true\n    else\n        if string.length % 2 ==\
    \ 0\n            false\n        else\n            if string.length % 3 == 0\n\
    \                true\n            else\n                if string.length % 5\
    \ == 0\n                    true\n                else\n                    if\
    \ string.length % 7 == 0\n                        true\n                    else\n\
    \                        if string.length % 11 == 0\n                        \
    \    true\n                        else\n                            if string.length\
    \ % 13 == 0\n                                true\n                          \
    \  else\n                                if string.length % 17 == 0\n        \
    \                            true\n                                else\n    \
    \                                if string.length % 19 == 0\n                \
    \                        true\n                                    else\n    \
    \                                    if string.length % 23 == 0\n            \
    \                                true\n                                      \
    \  else\n                                            if string.length % 29 ==\
    \ 0\n                                                true\n                  \
    \                          else\n                                            \
    \    if string.length % 31 == 0\n                                            \
    \        true\n                                                else\n        \
    \                                            if string.length % 37 == 0\n    \
    \                                                    true\n                  \
    \                                  else\n                                    \
    \                    if string.length % 41 == 0\n                            \
    \                                true\n                                      \
    \                  else\n                                                    \
    \        if string.length % 43 == 0\n                                        \
    \                        true\n                                              \
    \              else\n                                                        \
    \        if string.length % 47 == 0\n                                        \
    \                            true\n                                          \
    \                      else\n                                                \
    \                    if string.length % 51 == 0\n                            \
    \                                            true\n                          \
    \                                          else\n                            \
    \                            if string.length % 59 == 0\n                    \
    \                                        true\n                              \
    \                          else\n                                            \
    \                if string.length % 61 == 0\n                                \
    \                                true\n                                      \
    \                      else\n                                                \
    \                if string.length % 67 == 0\n                                \
    \                                    true\n                                  \
    \                              else\n                                        \
    \                            if string.length % 71 == 0\n                    \
    \                                                    true\n                  \
    \                                                  else\n                    \
    \                                    if string.length % 73 == 0\n            \
    \                                                true\n                      \
    \                                  else\n                                    \
    \                        if string.length % 79 == 0\n                        \
    \                                        true\n                              \
    \                              else\n                                        \
    \                        if string.length % 83 == 0\n                        \
    \                                            true\n                          \
    \                                      else\n                                \
    \                                    if string.length % 89 == 0\n            \
    \                                                            true\n          \
    \                                                          else\n            \
    \                                            if string.length % 97 == 0\n    \
    \                                                        true\n              \
    \                                          else\n                            \
    \                                if string.length % 101 == 0\n               \
    \                                                 true\n                     \
    \                                       else\n                               \
    \                                 if string.length % 103 == 0\n              \
    \                                                      true\n                \
    \                                                else\n                      \
    \                                              if string.length % 107 == 0\n \
    \                                                                       true\n\
    \                                                                    else\n  \
    \                                                      if string.length % 111\
    \ == 0\n                                                            true\n   \
    \                                                     else\n                 \
    \                                           if string.length % 113 == 0\n    \
    \                                                            true\n          \
    \                                                  else\n                    \
    \                                            if string.length % 117 == 0\n   \
    \                                                                 true\n     \
    \                                                           else\n           \
    \                                                         if string.length % 121\
    \ == 0\n                                                                     \
    \   true\n                                                                   \
    \ else\n                                                        if string.length\
    \ % 123 == 0\n                                                            true\n\
    \                                                        else\n              \
    \                                              if string.length % 127 == 0\n \
    \                                                               true\n       \
    \                                                     else\n                 \
    \                                               if string.length % 131 == 0\n",
  "    \n    prime_number::Bool = true \n    \n    for i in string.split(\"\")\n \
    \       if prime_number\n            prime_number = false\n        end\n    end\n\
    \    return prime_number\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers:\n        if string.length == i:\n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    true\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    true\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar", "    \n    prime_length::Bool\
    \ = false\n    \n    if string == \"\"\n        return prime_length\n    \n  \
    \  prime_length::Bool = true\n    \n    prime_length::Bool = is_prime(string)\n\
    \    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\ntrue\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome", "    if\
    \ string == \"\"\n        return true\n    \n    length::Int = string.len()\n\
    \    \n    if length <= 1\n        return true\n    \n    if length == 2\n   \
    \     return true\n    \n    if length == 3\n        return true\n    \n    if\
    \ length == 5\n        return true\n    \n    if length == 7\n        return true\n\
    \    \n    if length == 11\n        return true\n    \n    if length == 13\n \
    \       return true\n    \n    if length == 17\n        return true\n    \n  \
    \  if length == 21 or length == 23\n        return true\n    \n    if length ==\
    \ 29\n        return true\n    \n    if length == 31\n        return true\n  \
    \  \n    if length == 37\n        return true\n    \n    if length == 43\n   \
    \     return true\n    \n    if length == 47\n        return true\n    \n    if\
    \ length == 53\n        return true\n    \n    if length == 59\n        return\
    \ true\n    \n    if length == 61\n        return true\n    \n    if length ==\
    \ 67\n        return true\n    \n    if length == 73\n        return true\n  \
    \  \n    if length == 79\n        return true\n    \n    if length == 83\n   \
    \     return true\n    \n    if length == 91\n        return true\n    \n    if\
    \ length == 97\n        return true\n    \n    if length == 103\n        return\
    \ true\n    \n    if length == 117\n        return true\n    \n    if length ==\
    \ 121\n        return true\n    \n    if length == 127\n        return true\n\
    \    \n    if length == 131\n        return true\n    \n    if length == 137\n\
    \        return true\n    \n    if length == 153\n        return true\n    \n\
    \    if length == 159\n        return true\n    \n    if length == 161\n     \
    \   return true\n    \n    if length == 167\n        return true\n    \n    if\
    \ length == 173\n        return true\n    \n    if length == 179\n        return\
    \ true\n    \n    if length == 181\n        return true\n    \n    if length ==\
    \ 191\n        return true\n    \n    if length == 197\n        return true\n\
    \    \n    if length == 203\n        return true\n    \n    if length == 219\n\
    \        return true\n    \n    if length == 231\n        return true\n    \n\
    \    if length == 239\n        return true\n    \n    if length == 241\n     \
    \   return true\n    \n    if length == 251\n        return true\n    \n    if\
    \ length == 257\n        return true\n    \n    if length == 263\n        return\
    \ true\n    \n    if length == 269\n        return true\n    \n    if length ==\
    \ 271\n        return true\n    \n    if ", "    \n    prime_numbers = prime_numbers()\n\
    \    \n    for char in string:\n        if char in prime_numbers:\n          \
    \  return False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns True if the string has all letters\
    \ capitalized\nExamples\n>>> capitalized_string(\"Hello\")\ntrue\n>>> capitalized_string(\"\
    HELLO\")\ntrue\n>>> capitalized_string(\"HELLO WORLD\")\nfalse\n>>> capitalized_string(\"\
    HELLO WORLD HELLO WORLD\")\ntrue\n>>> capitalized_string(\"HELLO WORLD HELLO WORLD\
    \ HELLO WORLD\")\nfalse\n\"\"\"", "    \n    prime_length::Bool = true\n    \n\
    \    for i in string\n        if prime_length\n            prime_length = false\n\
    \        end\n    end\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string\n    contains\
    \ any uppercase letters or False otherwise\n    Examples\n    >>> contains_uppercase(\"\
    Hello\")\n    true\n    >>> contains_uppercase(\"abcdcba\")\n    false\n    >>>\
    \ contains_uppercase(\"kittens\")\n    false\n    >>> contains_uppercase(\"orange\"\
    )\n    false\n    \"\"\"", "    \n    prime_length::Bool = false \n    \n    for\
    \ char in string:\n        if char == \"a\" || char == \"e\" || char == \"i\"\
    \ || char == \"o\" || char == \"u\" || char == \"y\" \n        prime_length =\
    \ true\n        break\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\
    racecars\")\nfalse\n>>> is_palindrome(\"racecarcray\")\ntrue\n>>> is_palindrome(\"\
    racecarcrays\")\nfalse\n>>> is_palindrome(\"racecarcraycar\")\ntrue\n>>> is_palindrome(\"\
    racecarcraycars\")\nfalse\n>>> is_palindrome(\"racecarcraycarcray\")\ntrue\n>>>\
    \ is_palindrome(\"racecarcraycarcrays\")\nfalse\n>>> is_palindrome(\"racecarcraycarcraycar\"\
    )\ntrue\n>>> is_palindrome(\"racecarcraycarcraycars\")\nfalse\n>>> is_palindrome(\"\
    racecarcraycarcraycarcray\")\ntrue\n>>> is_palindrome(\"racecarcraycarcraycarcrays\"\
    )\nfalse\n>>> is_palindrome(\"racecarcraycarcraycarcraycar\")\ntrue\n>>> is_palindrome(\"\
    racecarcraycarcraycarcraycars\")\nfalse\n>>> is_palindrome(\"racecarcraycarcraycarcraycarcray\"\
    )\ntrue\n>>> is_palindrome(\"racecarcraycarcraycarcraycarcrays\")\nfalse\n>>>\
    \ is_palindrome(\"racecarcraycarcraycarcraycarcraycar\")\ntrue\n>>> is_palindrome(\"\
    racecarcraycarcraycarcraycarcraycars\")\nfalse\n>>> is_palindrome", "    \n  \
    \  prime_length::Bool = false \n    \n    for char in string:\n        if char\
    \ == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\"\
    \ || char == \"A\" || char == \"E\" || char == \"I\" || char == \"O\" || char\
    \ == \"U\"\n            prime_length = true\n        else\n            prime_length\
    \ = false\n        end\n    end\n    return prime_length\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string contains any uppercase letters or False otherwise\nExamples\n>>> contains_uppercase(\"\
    Hello\")\ntrue\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"\
    hello\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLO WORLD!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>>\
    \ contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO\
    \ WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"\
    HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n\
    >>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO\
    \ WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"\
    HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n\
    >>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO\
    \ WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"\
    HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n\
    >>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO\
    \ WORLD!!!\")\nfalse\n>>> contains_uppercase(\"HELLO WORLD!!!\")\nfalse\n>>> contains_uppercase(\"\
    HELLO ", "    \n    if string == \"\"\n        true\n    else\n        if string.length\
    \ % 2 == 0\n            false\n        else\n            if string.length % 3\
    \ == 0\n                false\n            else\n                if string.length\
    \ % 5 == 0\n                    false\n                else\n                \
    \    if string.length % 7 == 0\n                        false\n              \
    \      else\n                        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string contains any\
    \ character that is a vowel (a, e, i, o, u) or False otherwise\nExamples\n>>>\
    \ vowel_check(\"Hello\")\ntrue\n>>> vowel_check(\"abcdcba\")\ntrue\n>>> vowel_check(\"\
    kittens\")\ntrue\n>>> vowel_check(\"orange\")\nfalse\n\"\"\"", "    \n    prime_length::Bool\
    \ = false \n    \n    for i in string:\n        if i == \"a\" || i == \"e\" ||\
    \ i == \"i\" || i == \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"\
    I\" || i == \"O\" || i == \"U\"\n            prime_length = true\n        else\n\
    \            prime_length = false\n            break\n    end\n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome", "    \n    prime_numbers = Set{Int}()\n    for character\
    \ in string\n        if character in prime_numbers\n            return false\n\
    \        prime_numbers.add(character)\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns True if the string\n    length is\
    \ a prime number or False otherwise\n    Examples\n    >>> prime_length(\"Hello\"\
    )\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"",
  "    \n    prime_number::Bool = true\n    \n    for i in string\n        if i ==\
    \ \"a\"\n            prime_number = false\n            break\n        else\n \
    \           if i == \"b\"\n                prime_number = false\n            \
    \    break\n            else\n                if i == \"c\"\n                \
    \    prime_number = false\n                    break\n                else\n \
    \                   if i == \"d\"\n                        prime_number = false\n\
    \                        break\n                    else\n                   \
    \     if i == \"e\"\n                            prime_number = false\n      \
    \                      break\n                        else\n                 \
    \           if i == \"f\"\n                                prime_number = false\n\
    \                                break\n                            else\n   \
    \                             if i == \"g\"\n                                \
    \    prime_number = false\n                                    break\n       \
    \                         else\n                                    if i == \"\
    h\"\n                                        prime_number = false\n          \
    \                              break\n                                    else\n\
    \                                        if i == \"i\"\n                     \
    \                       prime_number = false\n                               \
    \             break\n                                        else\n          \
    \                                  if i == \"j\"\n                           \
    \                     prime_number = false\n                                 \
    \               break\n                                            else\n    \
    \                                            if i == \"k\"\n                 \
    \                                   prime_number = false\n                   \
    \                                 break\n                                    \
    \            else\n                                                    if i ==\
    \ \"l\"\n                                                        prime_number\
    \ = false\n                                                        break\n   \
    \                                                 else\n                     \
    \                                   if i == \"m\"\n                          \
    \                                  prime_number = false\n                    \
    \                                        break\n                             \
    \                           else\n                                           \
    \                 if i == \"n\"\n                                            \
    \                    prime_number = false\n                                  \
    \                              break\n                                       \
    \                     else\n                                                 \
    \               if i == \"o\"\n                                              \
    \                      prime_number = false\n                                \
    \                                    break\n                                 \
    \                               else\n                                       \
    \                             if i == \"p\"\n                                \
    \                                        prime_number = false\n              \
    \                                                          break\n           \
    \                                                         else\n             \
    \                                                                           if\
    \ i == \"q\"\n                                                            prime_number\
    \ = false\n                                                            break\n\
    \                                                        else\n              \
    \                                              if i == \"r\"\n               \
    \                                                 prime_number = false\n     \
    \                                                           break\n          \
    \                                                  else\n                    \
    \                                            if i == \"s\"\n                 \
    \                                                   prime_number = false\n   \
    \                                                                 break\n    \
    \                                                            else\n          \
    \                                                          if i == \"t\"\n   \
    \                                                                     prime_number\
    \ = false\n                                                                  \
    \      break\n                                                               \
    \     else\n                                                        if i == \"\
    u\"\n                                                            prime_number\
    \ = false\n                                                            break\n\
    \                                                        else\n              \
    \                                              if i == \"v\"\n               \
    \                                                 prime_number = false\n     \
    \                                                           break\n          \
    \                                                  else\n                    \
    \                                            if i == \"w\"\n                 \
    \                                                   prime_number = false\n   \
    \                                                                 break\n    \
    \                                                            else\n          \
    \                                                          if i == \"x\"\n   \
    \                                                                     prime_number\
    \ = false\n                                                                  \
    \      break\n                                                               \
    \     else\n                                                        if i == \"\
    y\"\n                                                            prime_number\
    \ = false\n                                                            break\n\
    \                                                        else\n              \
    \                                              if i == \"z\"\n               \
    \                                                 prime_number = false\n     \
    \                                                           break\n          \
    \                                                  else\n                    \
    \                                            prime_number = true\n    end\n",
  "    \n    prime_length::Bool = false \n    \n    if string == \"\"\n        return\
    \ prime_length\n    \n    for i in string\n        if i == \"a\"\n           \
    \ prime_length = true\n            break\n        else\n            prime_length\
    \ = false\n            break\n    end\n    \n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> p",
  "    \n    prime_length_flag = true \n    \n    for char in string:\n        if\
    \ char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char ==\
    \ \"u\":\n            prime_length_flag = false \n            break\n        \n\
    \    if prime_length_flag == true:\n        return true\n    \n    return false\n\
    \"\"\"\nWrite a function that takes a string and returns True if the string\n\
    \    length is a prime number or False otherwise\n    Examples\n    >>> prime_length(\"\
    Hello\")\n    true\n    >>> prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"\
    kittens\")\n    true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"",
  "    \n    prime_length::Bool = false \n    \n    for i in string.chars do \n  \
    \      if i mod 2 != 0 then \n            prime_length = false \n            break\
    \ \n        else \n            prime_length = true \n            break \n    \n\
    \    return prime_length \nend \n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string has all unique characters or False otherwise\n\
    Examples\n>>> unique_chars(\"Hello\")\ntrue\n>>> unique_chars(\"kittens\")\ntrue\n\
    >>> unique_chars(\"orange\")\nfalse\n>>> unique_chars(\"Hellokittens\")\nfalse\n\
    >>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\")\n\
    false\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue\n>>> unique_chars(\"Hellokittens\"\
    )\nfalse\n>>> unique_chars(\"Hellokittens\")\ntrue", "    \n    prime_length::Bool\
    \ = false \n    \n    if string == \"\"\n        return prime_length \n    \n\
    \    for i in 2..sqrt(string)\n        if string % i == 0\n            prime_length\
    \ = false \n            break\n        else \n            prime_length = true\
    \ \n            break\n    \n    return prime_length \nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    kittens\")\ntrue\n>>> palindrome(\"Hello kittens\")\ntrue\n>>> palindrome(\"Hello\
    \ Orange\")\nfalse\n>>> palindrome(\"Hello Orange Kittens\")\nfalse\n>>> palindrome(\"\
    Hello Orange Kittens Hello\")\nfalse\n>>> palindrome(\"Hello Orange Kittens Hello\
    \ Kittens\")\nfalse\n>>> palindrome(\"Hello Orange Kittens Hello Kittens Hello\"\
    )\nfalse\n>>> palindrome(\"Hello Orange Kittens Hello Kittens Hello Kittens\"\
    )\nfalse\n>>> palindrome(\"Hello Orange Kittens Hello Kittens Hello Kittens Hello\"\
    )\nfalse\n>>> palindrome(\"Hello Orange Kittens Hello Kittens Hello Kittens Hello\
    \ Kittens Hello\")\nfalse\n>>> palindrome(\"Hello Orange Kittens Hello Kittens\
    \ Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello\
    \ Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens\
    \ Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello\
    \ Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens\
    \ Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello\
    \ Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens Hello Kittens\
    \ Hello Kit", "    \n    prime_length::Bool = \n        if string == \"\"\n  \
    \          true\n        else\n            if string.length == 0 || string.length\
    \ == 1\n                true\n            else\n                if string.length\
    \ == 2\n                    true\n                else\n                    if\
    \ string.length == 3\n                        true\n                    else\n\
    \                        if string.length == 4\n                            true\n\
    \                        else\n                            if string.length ==\
    \ 5\n                                true\n                            else\n\
    \                                if string.length == 6\n                     \
    \               true\n                                else\n                 \
    \                   if string.length == 7\n                                  \
    \      true\n                                    else\n                      \
    \                  if string.length == 8\n                                   \
    \         true\n                                        else\n               \
    \                             if string.length == 9\n                        \
    \                        true\n                                            else\n\
    \                                                if string.length == 10\n    \
    \                                                true\n                      \
    \                          else\n                                            \
    \        if string.length == 11\n                                            \
    \            true\n                                                    else\n\
    \                                                        if string.length == 12\n\
    \                                                            true\n          \
    \                                              else\n                        \
    \                                    if string.length == 13\n                \
    \                                                true\n                      \
    \                                      else\n                                \
    \                                if string.length == 14\n                    \
    \                                                true\n                      \
    \                                          else\n                            \
    \                                        if string.length == 15\n            \
    \                                                            true\n          \
    \                                                          else\n            \
    \                                                            if string.length\
    \ == 16\n                                                                    \
    \        true\n                                                              \
    \          else\n                                                            \
    \                if string.length == 17\n                                    \
    \                                            true\n                          \
    \                                                  else\n                    \
    \                                                            if string.length\
    \ == 18\n                                                                    \
    \                true\n                                                      \
    \                          else\n                                            \
    \                                        if string.length == 19\n            \
    \                                                                            true\n\
    \                                                                            \
    \        else\n                                                              \
    \                          if string.length == 20\n                          \
    \                                                                  true\n    \
    \                                                                            \
    \        else\n                                                              \
    \                              if string.length == 21\n                      \
    \                                                                          true\n\
    \                                                                            \
    \                else\n                                                      \
    \                                          if string.length == 22\n          \
    \                                                                            \
    \              true\n                                                        \
    \                                        else\n                              \
    \                                                                      if string.length\
    \ == 23\n                                                                    \
    \                                    true\n                                  \
    \                                                                  else\n    \
    \                                                                            \
    \                        if string.length == 24\n                            \
    \                                                                            \
    \    true\n                                                                  \
    \                                      else\n                                \
    \                                                                            if\
    \ string.length == 25\n                                                      \
    \                                                          true\n            \
    \                                                                            \
    \                    else\n                                                  \
    \                                                              if string.length\
    \ == 26\n                                                                    \
    \                                                true\n                      \
    \                                                                            \
    \              else\n                                                        \
    \                                                            if string.length\
    \ == 27\n                                                                    \
    \                                                    true\n                  \
    \                                                                            \
    \                      else\n                                                \
    \                                                                        if string.length\
    \ == 28\n                                                                    \
    \                                                        true\n              \
    \                                                                            \
    \                              else\n                                        \
    \                                                                            \
    \        if string.length == 29\n                                            \
    \                                                                            \
    \        true\n                                                              \
    \                                                              else\n        \
    \                                                                            \
    \                                            if string.length == 30\n        \
    \                                                                            \
    \                                                true\n                      \
    \                                                                            \
    \                              else\n                                        \
    \                                                                            \
    \                if string.length == 31\n                                    \
    \                                                                            \
    \                        true\n                                              \
    \                                                                            \
    \          else\n                                                            \
    \                                                                            if\
    \ string.length == 32\n                                                      \
    \                                                                            \
    \          true\n                                                            \
    \                                                                            else\n\
    \                                                                            \
    \                                                                if string.length\
    \ == 33\n                                                                    \
    \                                                                            true\n\
    \                                                                            \
    \                                                                else\n      \
    \                                                                            \
    \                                                              if string.length\
    \ == 34\n                                                                    \
    \                                                                            \
    \    true\n                                                                  \
    \                                                                            \
    \  else\n                                                                ", " \
    \   \n    prime_length::Bool = false \n    \n    for i in string:\n        if\
    \ prime_length::Bool = false and i::Int % 2 == 0 and i::Int % 3 != 0 and i::Int\
    \ % 5 != 0 and i::Int % 7 != 0 and i::Int % 11 != 0 and i::Int % 13 != 0 and i::Int\
    \ % 17 != 0 and i::Int % 19 != 0 and i::Int % 23 != 0 and i::Int % 29 != 0 and\
    \ i::Int % 31 != 0 and i::Int % 37 != 0 and i::Int % 41 != 0 and i::Int % 43 !=\
    \ 0 and i::Int % 47 != 0 and i::Int % 51 != 0 and i::Int % 55 != 0 and i::Int\
    \ % 59 != 0 and i::Int % 63 != 0 and i::Int % 67 != 0 and i::Int % 71 != 0 and\
    \ i::Int % 73 != 0 and i::Int % 79 != 0 and i::Int % 83 != 0 and i::Int % 89 !=\
    \ 0 and i::Int % 93 != 0 and i::Int % 97 != 0 and i::Int % 101 != 0 and i::Int\
    \ % 103 != 0 and i::Int % 105 != 0 and i::Int % 107 != 0 and i::Int % 109 != 0\
    \ and i::Int % 113 != 0 and i::Int % 117 != 0 and i::Int % 121 != 0 and i::Int\
    \ % 127 != 0 and i::Int % 131 != 0 and i::Int % 137 != 0 and i::Int % 143 != 0\
    \ and i::Int % 147 != 0 and i::Int % 151 != 0 and i::Int % 157 != 0 and i::Int\
    \ % 163 != 0 and i::Int % 167 != 0 and i::Int % 173 != 0 and i::Int % 177 != 0\
    \ and i::Int % 181 != 0 and i::Int % 187 != 0 and i::Int % 193 != 0 and i::Int\
    \ % 197 != 0 and i::Int % 203 != 0 and i::Int % 207 != 0 and i::Int % 211 != 0\
    \ and i::Int % 217 != 0 and i::Int % 223 != 0 and i::Int % 227 != 0 and i::Int\
    \ % 233 != 0 and i::Int % 237 != 0 and i::Int % 241 != 0 and i::Int % 247 != 0\
    \ and i::Int % 251 != 0 and i::Int % 253 != 0 and i::Int % 257 != 0 and i::Int\
    \ % 263 != 0 and i::Int % 267 != 0 and i::Int % 271 != ", "    \n    if string\
    \ == \"\"\n        return true\n    \n    length::Int = string.length\n    \n\
    \    for i in 2..length\n        if string.charAt(i) == string.charAt(length-1)\n\
    \            return false\n    end\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palin", "    \n    prime_length\
    \ = true\n    for character in string:\n        if character == \" \":\n     \
    \       prime_length = false\n            break\n        if character == \"a\"\
    \ or character == \"e\" or character == \"i\" or character == \"o\" or character\
    \ == \"u\":\n            prime_length = false\n            break\n        if character\
    \ == \"b\" or character == \"c\" or character == \"d\" or character == \"f\" or\
    \ character == \"g\" or character == \"h\" or character == \"j\" or character\
    \ == \"k\" or character == \"l\" or character == \"m\" or character == \"n\" or\
    \ character == \"p\" or character == \"q\" or character == \"r\" or character\
    \ == \"s\" or character == \"t\" or character == \"v\" or character == \"x\" or\
    \ character == \"z\":\n            prime_length = false\n            break\n \
    \       if character == \"1\":\n            prime_length = false\n           \
    \ break\n        if character == \"2\":\n            prime_length = false\n  \
    \          break\n        if character == \"3\":\n            prime_length = false\n\
    \            break\n        if character == \"4\":\n            prime_length =\
    \ false\n            break\n        if character == \"5\":\n            prime_length\
    \ = false\n            break\n        if character == \"6\":\n            prime_length\
    \ = false\n            break\n        if character == \"7\":\n            prime_length\
    \ = false\n            break\n        if character == \"8\":\n            prime_length\
    \ = false\n            break\n        if character == \"9\":\n            prime_length\
    \ = false\n            break\n        if character == \"0\":\n            prime_length\
    \ = false\n            break\n        if character == \"!\":\n            prime_length\
    \ = false\n            break\n        if character == \"@\":\n            prime_length\
    \ = false\n            break\n        if character == \"#\":\n            prime_length\
    \ = false\n            break\n        if character == \"$\":\n            prime_length\
    \ = false\n            break\n        if character == \"%\":\n            prime_length\
    \ = false\n            break\n        if character == \"^\":\n            prime_length\
    \ = false\n            break\n        if character == \"&\":\n            prime_length\
    \ = false\n            break\n        if character == \"*\":\n            prime_length\
    \ = false\n            break\n        if character == \"(\":\n            prime_length\
    \ = false\n            break\n        if character == \")\":\n            prime_length\
    \ = false\n            break\n        if character == \"+\":\n            prime_length\
    \ = false\n            break\n        if character == \"=\":\n            prime_length\
    \ = false\n            break\n        if character == \"-\":\n            prime_length\
    \ = false\n            break\n        if character == \"_\":\n            prime_length\
    \ = false\n            break\n        if character == \".\":\n            prime_length\
    \ = false\n            break\n        if character == \",\":\n            prime_length\
    \ = false\n            break\n        if character == \"/\":\n            ", " \
    \   \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string contains any uppercase letters or False\
    \ otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"\
    HELLO\")\ntrue\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase",
  "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n\
    \        if i in prime_numbers:\n            return False\n    return True\n</code>\n\
    <|/ a tags=primes,haskell,string |>\n<| c |>\nThis doesn't work for strings of\
    \ length greater than `2`.\n<|/ c |>\n<| c |>\nI didn't say it wouldn't. I'm just\
    \ saying that it doesn't work for strings of length greater than `2`.\n<|/ c |>\n\
    <| c |>\nI didn't say it wouldn't. I'm just saying that it doesn't work for strings\
    \ of length greater than `2`.\n<|/ c |>\n<| c |>\nI didn't say it wouldn't. I'm\
    \ just saying that it doesn't work for strings of length greater than `2`.\n<|/\
    \ c |>\n<| c |>\nI didn't say it wouldn't. I'm just saying that it doesn't work\
    \ for strings of length greater than `2`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    primes :: [Integer]\nprimes = sieve [2..]\n  where\n    sieve (p:xs)\n      |\
    \ p > 1000 = error \"too big\"\n      | p < 2     = error \"too small\"\n    \
    \  | otherwise = p : sieve [x | x <- xs, x `mod` p /= 0]\n</code>\n<|/ a tags=primes,haskell,string\
    \ |>\n<| c |>\nThis doesn't work for strings of length greater than `2`.\n<|/\
    \ c |>\n<| c |>\nI didn't say it wouldn't. I'm just saying that it doesn't work\
    \ for strings of length greater than `2`.\n<|/ c |>\n<| c |>\nI didn't say it\
    \ wouldn't. I'm just saying that it doesn't work for strings of length greater\
    \ than `2`.\n<|/ c |>\n<| c |>\nI didn't say it wouldn't. I'm just saying that\
    \ it doesn't work for strings of length greater than `2`.\n<|/ c |>\n<| c |>\n\
    I didn't say it wouldn't. I'm just saying that it doesn't work for strings of\
    \ length greater than `2`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nprimes :: [Integer]\n\
    primes = sieve [2..]\n  where\n    sieve (p:xs)\n      | p > 1000 = error \"too\
    \ big\"\n      | p ", "    \n    prime_number::Bool = false \n    \n    for i\
    \ in string\n        if i == \"a\"\n            prime_number = true\n        \
    \    break\n        if i == \"b\"\n            prime_number = true\n         \
    \   break\n        if i == \"c\"\n            prime_number = true\n          \
    \  break\n        if i == \"d\"\n            prime_number = true\n           \
    \ break\n        if i == \"e\"\n            prime_number = true\n            break\n\
    \        if i == \"f\"\n            prime_number = true\n            break\n \
    \       if i == \"g\"\n            prime_number = true\n            break\n  \
    \      if i == \"h\"\n            prime_number = true\n            break\n   \
    \     if i == \"i\"\n            prime_number = true\n            break\n    \
    \    if i == \"j\"\n            prime_number = true\n            break\n     \
    \   if i == \"k\"\n            prime_number = true\n            break\n      \
    \  if i == \"l\"\n            prime_number = true\n            break\n       \
    \ if i == \"m\"\n            prime_number = true\n            break\n        if\
    \ i == \"n\"\n            prime_number = true\n            break\n        if i\
    \ == \"o\"\n            prime_number = true\n            break\n        if i ==\
    \ \"p\"\n            prime_number = true\n            break\n        if i == \"\
    q\"\n            prime_number = true\n            break\n        if i == \"r\"\
    \n            prime_number = true\n            break\n        if i == \"s\"\n\
    \            prime_number = true\n            break\n        if i == \"t\"\n \
    \           prime_number = true\n            break\n        if i == \"u\"\n  \
    \          prime_number = true\n            break\n        if i == \"v\"\n   \
    \         prime_number = true\n            break\n        if i == \"w\"\n    \
    \        prime_number = true\n            break\n        if i == \"x\"\n     \
    \       prime_number = true\n            break\n        if i == \"y\"\n      \
    \      prime_number = true\n            break\n        if i == \"z\"\n       \
    \     prime_number = true\n            break\n        if i == \"A\"\n        \
    \    prime_number = true\n            break\n        if i == \"B\"\n         \
    \   prime_number = true\n            break\n        if i == \"C\"\n          \
    \  prime_number = true\n            break\n        if i == \"D\"\n           \
    \ prime_number = true\n            break\n        if i == \"E\"\n            prime_number\
    \ = true\n            break\n        if i == \"F\"\n            prime_number =\
    \ true\n            break\n        if i == \"G\"\n            prime_number = true\n\
    \            break\n        if i == \"H\"\n            prime_number = true\n \
    \           break\n        if i == \"I\"\n            prime_number = true\n  \
    \          break\n        if i == \"J\"\n            prime_number = true\n   \
    \         break\n        if i == \"", "    if string == \"\"\n        return true\n\
    \    else if string.length % 2 == 0\n        return false\n    else\n        for\
    \ i in 2..string.length\n            if string.charAt(i) == string.charAt(string.length-i-1)\n\
    \                return false\n        end\n        return true\nend\n</cell>\n\
    <code language=julia-1.3>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns True if the string\n\
    \    length is an even number or False otherwise\n    Examples\n    >>> even_length(\"\
    Hello\")\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    true\n    \"\"\"",
  "    \n    prime_numbers::Set{Int} = (2..math.floor(sqrt(string)))\n    \n    for\
    \ i in prime_numbers\n        if string mod i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string contains any character that is a vowel\
    \ (a, e, i, o, u) or False otherwise\nExamples\n>>> vowel_check(\"Hello\")\ntrue\n\
    >>> vowel_check(\"abcdcba\")\ntrue\n>>> vowel_check(\"kittens\")\nfalse\n>>> vowel_check(\"\
    orange\")\nfalse\n\"\"\"", "    \n    prime_number::Bool = true\n    \n    for\
    \ i in string:\n        if prime_number == true:\n            if i == \"0\":\n\
    \                prime_number = false\n            else:\n                prime_number\
    \ = true\n                break\n        else:\n            prime_number = true\n\
    \            break\n    return prime_number\n\"\"\"\nWrite a function that takes\
    \ a string and returns True if the string\n    length is a prime number or False\
    \ otherwise\n    Examples\n    >>> prime_length(\"Hello\")\n    true\n    >>>\
    \ prime_length(\"abcdcba\")\n    true\n    >>> prime_length(\"kittens\")\n   \
    \ true\n    >>> prime_length(\"orange\")\n    false\n    \"\"\"", "    \n    prime_length::Bool\
    \ = false \n    \n    for char in string:\n        if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\":\n            prime_length\
    \ = true\n            break\n        \n    return prime_length\n</code>\n<|/ a\
    \ |>\n<| c |>\nThank you so much! This was very helpful!\n<|/ c |>\n<| a tags=haskell,primes\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=haskell,primes |>\n<code>\nprimes :: [Integer]\n\
    primes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a\
    \ tags=haskell,primes |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\nprimes\
    \ = 2 : filter isPrime [3..]\n</code>\n<|/ a tags=haskell,primes |>\n<| a tags=haskell,primes\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=haskell,primes |>\n<code>\nprimes :: [Integer]\n\
    primes = 2 : filter isPrime [3..]\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n<|/ a\
    \ tags=haskell,primes |>\n<| a dscore=1 |>\n<code>\nprimes :: [Integer]\nprimes\
    \ = 2 : filter isPrime [3..]\n</code>\n<|/ a tags=haskell,primes |>\n<| a tags=haskell,primes\
    \ |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime [3..]\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nprimes :: [Integer]\nprimes = 2 : filter isPrime\
    \ [3..]\n</code>\n<|/ a dscore=1 tags=haskell,primes |>\n<| a tags=haskell,primes\
    \ |>", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers:\n        if string == str(i):\n           \
    \ return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nWrite a function that takes a string\
    \ and returns True if the string contains any uppercase letters or False otherwise\n\
    Examples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"Hello\
    \ World\")\ntrue\n>>> contains_uppercase(\"Hello World!\")\nfalse\n>>> contains_uppercase(\"\
    Hello World!!\")\nfalse\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>>\
    \ contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello\
    \ World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"\
    Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>>\
    \ contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello\
    \ World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"\
    Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>>\
    \ contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello\
    \ World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"\
    Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>>\
    \ contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello\
    \ World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"\
    Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>>\
    \ contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello\
    \ World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"\
    Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello World!!!\")\ntrue\n>>>\
    \ contains_uppercase(\"Hello World!!!\")\ntrue\n>>> contains_uppercase(\"Hello\
    \ World!!!\")\ntrue\n", "    \n    prime_number::Bool = true \n    \n    for character\
    \ in string:\n        if character == \" \":\n            prime_number = false\n\
    \            break\n        if character == \"a\" or character == \"b\" or character\
    \ == \"c\" or character == \"d\" or character == \"e\" or character == \"f\" or\
    \ character == \"g\" or character == \"h\" or character == \"i\" or character\
    \ == \"j\" or character == \"k\" or character == \"l\" or character == \"m\" or\
    \ character == \"n\" or character == \"o\" or character == \"p\" or character\
    \ == \"q\" or character == \"r\" or character == \"s\" or character == \"t\" or\
    \ character == \"u\" or character == \"v\" or character == \"w\" or character\
    \ == \"x\" or character == \"y\" or character == \"z\":\n            prime_number\
    \ = false\n            break\n        if character == \"A\" or character == \"\
    B\" or character == \"C\" or character == \"D\" or character == \"E\" or character\
    \ == \"F\" or character == \"G\" or character == \"H\" or character == \"I\" or\
    \ character == \"J\" or character == \"K\" or character == \"L\" or character\
    \ == \"M\" or character == \"N\" or character == \"O\" or character == \"P\" or\
    \ character == \"Q\" or character == \"R\" or character == \"S\" or character\
    \ == \"T\" or character == \"U\" or character == \"V\" or character == \"W\" or\
    \ character == \"X\" or character == \"Y\" or character == \"Z\":\n          \
    \  prime_number = false\n            break\n        if character == \"0\" or character\
    \ == \"1\":\n            prime_number = false\n            break\n        if character\
    \ == \"!\" or character == \"@\" or character == \"#\" or character == \"$\" or\
    \ character == \"%\" or character == \"^\" or character == \"&\" or character\
    \ == \"*\" or character == \"(\" == \")\" or character == \"_\" or character ==\
    \ \"+\" or character == \"=\" or character == \"{\" or character == \"}\" or character\
    \ == \"[\" or character == \"]\" or character == \"<\" or character == \">\" or\
    \ character == \"/\" or character == \"?\" or character == \"|\" or character\
    \ == \"\\\\\" or character == \"~\":\n            prime_number = false\n     \
    \       break\n        if character == \"A\" or character == \"B\" or character\
    \ == \"C\" or character == \"D\" or character == \"E\" or character == \"F\" or\
    \ character == \"G\" or character == \"H\" or character == \"I\" or character\
    \ == \"J\" or character == \"K\" or character == \"L\" or character == \"M\" or\
    \ character == \"N\" or character == \"O\" or character == \"P\" or character\
    \ == \"Q\" or character == \"R\" or character == \"S\" or character == \"T\" or\
    \ character == \"U\" or character == \"V\" or character == \"W\" or character\
    \ == \"X\" or character == \"Y\" or character == \"Z\":\n            prime_number\
    \ = false\n            break\n        if character == \"0\" or character == \"\
    1\":\n            prime_number = false\n", "    \n    prime_length::Bool = false\n\
    \    \n    if string == \"\"\n        prime_length = true\n    else\n        if\
    \ string.length % 2 == 0\n            prime_length = true\n        else\n    \
    \        if string.length % 3 == 0\n                prime_length = true\n    \
    \        else\n                if string.length % 5 == 0\n                   \
    \ prime_length = true\n                else\n                    if string.length\
    \ % 7 == 0\n                        prime_length = true\n                    else\n\
    \                        if string.length % 11 == 0\n                        \
    \    prime_length = true\n                        else\n                     \
    \       if string.length % 13 == 0\n                                prime_length\
    \ = true\n                            else\n                                if\
    \ string.length % 17 == 0\n                                    prime_length =\
    \ true\n                                else\n                               \
    \     prime_length = false\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\
    racecars\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    racecar\")\nfalse\n>>> is_p", "    \n    prime_length::Bool = false\n    \n  \
    \  if string == \"\"\n        return prime_length\n    \n    length::Int = string.length\n\
    \    \n    for i in 2..length\n        if string.charAt(i) == string.charAt(length-1)\n\
    \            prime_length = false\n            break\n        else\n         \
    \   prime_length = true\n            break\n    end\n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns True if the string contains only letters a-z or A-Z or False otherwise\n\
    Examples\n>>> contains_only_letters(\"Hello\")\ntrue\n>>> contains_only_letters(\"\
    abcdcba\")\ntrue\n>>> contains_only_letters(\"kittens\")\nfalse\n>>> contains_only_letters(\"\
    orange\")\nfalse\n>>> contains_only_letters(\"123\")\nfalse\n>>> contains_only_letters(\"\
    123abc\")\nfalse\n>>> contains_only_letters(\"123abc456\")\nfalse\n>>> contains_only_letters(\"\
    123abc456def\")\nfalse\n>>> contains_only_letters(\"123abc456defg\")\nfalse\n\
    >>> contains_only_letters(\"123abc456defgh\")\nfalse\n>>> contains_only_letters(\"\
    123abc456defghij\")\nfalse\n>>> contains_only_letters(\"123abc456defghijk\")\n\
    false\n>>> contains_only_letters(\"123abc456defghijkl\")\nfalse\n>>> contains_only_letters(\"\
    123abc456defghijklm\")\nfalse\n>>> contains_only_letters(\"123abc456defghijklmn\"\
    )\nfalse\n>>> contains_only_letters(\"123abc456defghijklmno\")\nfalse\n>>> contains_only_letters(\"\
    123abc456defghijklmnop\")\nfalse\n>>> contains_only_letters(\"123abc456defghijklmnopq\"\
    )\nfalse\n>>> contains_only_letters(\"123abc456defghijklmnopqr\")\nfalse\n>>>\
    \ contains_only_letters(\"123abc456defghijklmnopqrs\")\nfalse\n>>> contains_only_letters(\"\
    123abc456defghijklmnopqrs9\")\nfalse\n>>> contains_only_letters(\"123abc456defghijklmnopqrs9",
  "    \n    prime_length::Bool = false \n    \n    for char in string:\n        if\
    \ char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char ==\
    \ \"u\" || char == \"A\" || char == \"E\" || char == \"I\" || char == \"O\" ||\
    \ char == \"U\"\n            prime_length = true\n        else\n            prime_length\
    \ = false\n    end\n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string contains only\
    \ letters a-z or A-Z or False otherwise\nExamples\n>>> contains_only_letters(\"\
    Hello\")\ntrue\n>>> contains_only_letters(\"abcdcba\")\nfalse\n>>> contains_only_letters(\"\
    kittens\")\nfalse\n>>> contains_only_letters(\"orange\")\nfalse\n>>> contains_only_letters(\"\
    123\")\nfalse\n>>> contains_only_letters(\"a1\")\nfalse\n>>> contains_only_letters(\"\
    A1\")\nfalse\n>>> contains_only_letters(\"aA\")\nfalse\n>>> contains_only_letters(\"\
    Aa\")\nfalse\n>>> contains_only_letters(\"aA1\")\nfalse\n>>> contains_only_letters(\"\
    aAa1\")\nfalse\n>>> contains_only_letters(\"aAaA\")\nfalse\n>>> contains_only_letters(\"\
    aAaA1\")\nfalse\n>>> contains_only_letters(\"aAaAa1\")\nfalse\n>>> contains_only_letters(\"\
    aAaAaA\")\nfalse\n>>> contains_only_letters(\"aAaAaA1\")\nfalse\n>>> contains_only_letters(\"\
    aAaAaAa1\")\nfalse\n>>> contains_only_letters(\"aAaAaAaA\")\nfalse\n>>> contains_only_letters(\"\
    aAaAaAaA1\")\nfalse\n>>> contains_only_letters(\"aAaAaAaAa1\")\nfalse\n>>> contains_only_letters(\"\
    aAaAaAaAaA\")\nfalse\n>>> contains_only_letters(\"aAaAaAaAaA1\")\nfalse\n>>> contains_only_letters(\"\
    aAaAaAaAaAa1\")\nfalse\n>>> contains_only_letters(\"aAaAaAaAaA", "    \n    prime_numbers::Set{Int}\
    \ = (2..math.floor(sqrt(string)))\n    for number in prime_numbers\n        if\
    \ string % number == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string contains any uppercase letters or False otherwise\nExamples\n>>> contains_uppercase(\"\
    Hello\")\ntrue\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"\
    kittens\")\nfalse\n>>> contains_uppercase(\"orange\")\nfalse\n\"\"\"", "    \n\
    \    prime_length::Bool = false \n    \n    if string == \"\" || string == \"\\\
    n\" \n        then return prime_length \n    else \n        \n        prime_length::Bool\
    \ = true \n        \n        for i in string\n            do if i mod 2 != 0 \n\
    \                then prime_length = false \n                break \n        \
    \    end \n        end \n    end \nend \n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<code language=julia-",
  "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n    \n    for i in string:\n\
    \        if i in prime_numbers:\n            return False\n    return True\nend\n\
    </cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"Hello\
    \ World\")\ntrue\n>>> palindrome(\"Hello World!\")\nfalse\n>>> palindrome(\"A\
    \ man, a plan, a canal: Panama\")\ntrue\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama!\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\ntrue\n\
    >>> palindrome(\"A man, a plan, a canal: Panama!\")\nfalse\n>>> palindrome(\"\
    A man, a plan, a canal: Panama\")\ntrue\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama!\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\ntrue\n\
    >>> palindrome(\"A man, a plan, a canal: Panama!\")\nfalse\n>>> palindrome(\"\
    A man, a plan, a canal: Panama\")\ntrue\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama!\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\ntrue\n\
    >>> palindrome(\"A man, a plan, a canal: Panama!\")\nfalse\n>>> palindrome(\"\
    A man, a plan, a canal: Panama\")\ntrue\n>>> palindrome(\"A man, a plan, a canal:\
    \ Panama!\")\nfalse\n>>> palindrome(\"A man, a plan, a canal: Panama\")\ntrue\n\
    >>> palindrome(\"A man, a plan, a canal: Panama!\")\nfalse\n>>> palindrome(\"\
    A man, a plan, a canal: P", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string contains only\
    \ letters a-z or A-Z or False otherwise\nExamples\n>>> contains_only_letters(\"\
    Hello\")\ntrue\n>>> contains_only_letters(\"abcdcba\")\ntrue\n>>> contains_only_letters(\"\
    kittens\")\nfalse\n>>> contains_only_letters(\"orange\")\nfalse\n\"\"\"", "  \
    \  \n    prime_number::Bool = is_prime(string.len())\n    \n    return prime_number\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\ntrue\n>>>\
    \ is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\")\n", " \
    \   if string == \"\"\n        true\n    else\n        if string.length % 2 ==\
    \ 0\n            false\n        else\n            if string.length % 3 == 0\n\
    \                true\n            else\n                if string.length % 5\
    \ == 0\n                    true\n                else\n                    if\
    \ string.length % 7 == 0\n                        true\n                    else\n\
    \                        false\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    def prime_length(number):\n    number = int(number)\n    if number < 2:\n    \
    \    return False\n    if number == 2:\n        return True\n    if number % 2\
    \ == 0:\n        return False\n    for i in range(3, number, 2):\n        if number\
    \ % i == 0:\n            return False\n    return True\n</code>\n<|/ a dscore=1\
    \ tags=primes,haskell,functional-programming |>\n<| a tags=primes,haskell,functional-programming\
    \ |>\n<code>\nprime_length :: Int -> Bool\nprime_length n = length $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile\
    \ (<= n) $ takeWhile (<= n) $ takeWhile (<= n) $ takeWhile ", "    \n    prime_length::Bool\
    \ = string.length % 2 == 0\n    \n    return prime_length\nend", "    \n    prime_length::Bool\
    \ = false \n    \n    prime_length::Bool = string.len()==2 || string.len()==3\
    \ || string.len()==5 || string.len()==7 || string.len()==11 || string.len()==13\
    \ || string.len()==17 || string.len()==19 || string.len()==23 || string.len()==29\
    \ || string.len()==37 || string.len()==43 || string.len()==49 || string.len()==57\
    \ || string.len()==63 || string.len()==69 || string.len()==79 || string.len()==87\
    \ || string.len()==97 || string.len()==103 || string.len()==109 || string.len()==113\
    \ || string.len()==127 || string.len()==131 \n    \n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19])\n\
    \    \n    for character in string:\n        if character in prime_numbers:\n\
    \            return False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\"\
    )\n</cell>\n<cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"\
    kittens\")\n</cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n\"racecar\" is a palindrome\n\"racecar\" is not\
    \ a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is a\
    \ palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is a palindrome\n\"\
    racecar\" is not a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not\
    \ a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is a\
    \ palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is a palindrome\n\"\
    racecar\" is not a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not\
    \ a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is a\
    \ palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is a palindrome\n\"\
    racecar\" is not a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not\
    \ a palindrome\n\"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\
    \"racecar\" is a palindrome\n\"racecar\" is not a palindrome\n\"racecar\" is a\
    \ palindrome\n\"racecar\" is not a palindrome\n\"racecar", "    \n    prime_number\
    \ = true\n    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i\
    \ == \"i\" || i == \"o\" || i == \"u\":\n            prime_number = false\n  \
    \          break\n        \n    return prime_number\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    kittens\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> p", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == string.replace(string[i],\"\
    \")\n            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string contains only letters a-z\
    \ or A-Z or False otherwise\nExamples\n>>> only_letters(\"Hello\")\ntrue\n>>>\
    \ only_letters(\"abcdcba\")\nfalse\n>>> only_letters(\"kittens\")\ntrue\n>>> only_letters(\"\
    orange\")\nfalse\n\"\"\"", "    \n    prime_length::Bool = false \n    \n    for\
    \ i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\" || i == \"o\"\
    \ || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i == \"O\" || i ==\
    \ \"U\"\n            prime_length = true\n            break\n        else\n  \
    \          prime_length = false\n    end\n    return prime_length\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns True if the string is\
    \ a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    true\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")", "    \n    prime_length_helper(string,0,0)\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    prime_numbers = primes(string)\n\
    \    \n    for prime in prime_numbers\n        if prime == string.length\n   \
    \         return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"", "    \n    prime_length::Bool\
    \ = false \n    \n    for char in string:\n        if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" \n\
    \        then \n            prime_length = true\n            break\n        else\
    \ \n            prime_length = false\n            break\n    return prime_length\n\
    </code>\n<|/ a tags=primes,haskell,functional-programming |>\n<| c |>\nI like\
    \ your solution, but I wonder why you chose `if char == \"a\" || char == \"e\"\
    \ || char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" \n     \
    \   then \n            prime_length = true\n            break\n        else \n\
    \            prime_length = false\n            break`\n<|/ c |>\n<| c |>\nI chose\
    \ it because I wanted to show that you can write `if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\"` instead\
    \ of `if char == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char\
    \ == \"u\" || char == \"y\" then prime_length = true else prime_length = false`\
    \ but if you don't like it you can write `if char == \"a\" || char == \"e\" ||\
    \ char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" then prime_length\
    \ = true else prime_length = false else prime_length = true`\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder why you chose `if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" then\
    \ prime_length = true else prime_length = false`\n<|/ c |>\n<| c |>\nI chose it\
    \ because I wanted to show that you can write `if char == \"a\" || char == \"\
    e\" || char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" then prime_length\
    \ = true else prime_length = false else prime_length = true` instead of `if char\
    \ == \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\"\
    \ || char == \"y\" then prime_length = true else prime_length = false else prime_length\
    \ = true` but if you don't like it you can write `if char == \"a\" || char ==\
    \ \"e\" || char == \"i\" || char == \"o\" || char == \"u\" || char == \"y\" then\
    \ prime_length = true else prime_length = false else prime_length = true`\n<|/\
    \ c |>\n<| c ", "    \n    prime_length = true\n    \n    for i in string.chars\n\
    \        if string.index(i) == 0 \n            prime_length = false\n        \
    \    break\n    \n    return prime_length\nend", "    \n    prime_length::Bool\
    \ = false \n    \n    for i in string:\n        if i == \"a\" || i == \"b\" ||\
    \ i == \"c\" || i == \"d\" || i == \"e\" || i == \"f\" || i == \"g\" || i == \"\
    h\" || i == \"i\" || i == \"j\" || i == \"k\" || i == \"l\" || i == \"m\" || i\
    \ == \"n\" || i == \"o\" || i == \"p\" || i == \"q\" || i == \"r\" || i == \"\
    s\" || i == \"t\" || i == \"u\" || i == \"v\" || i == \"w\" || i == \"x\" || i\
    \ == \"y\" || i == \"z\":\n            prime_length = true\n            break\n\
    \        else if i == \"A\" || i == \"B\" || i == \"C\" || i == \"D\" || i ==\
    \ \"E\" || i == \"F\" || i == \"G\" || i == \"H\" || i == \"I\" || i == \"J\"\
    \ || i == \"K\" || i == \"L\" || i == \"M\" || i == \"N\" || i == \"O\" || i ==\
    \ \"P\" || i == \"Q\" || i == \"R\" || i == \"S\" || i == \"T\" || i == \"U\"\
    \ || i == \"V\" || i == \"W\" || i == \"X\" || i == \"Y\" || i == \"Z\":\n   \
    \         prime_length = true\n            break\n        else if i == \"0\" ||\
    \ i == \"1\" || i == \"2\" || i == \"3\" || i == \"4\" || i == \"5\" || i == \"\
    6\" || i == \"7\" || i == \"8\" || i == \"9\":\n            prime_length = true\n\
    \            break\n        else if i == \"!\" || i == \"@\" || i == \"#\" ||\
    \ i == \"$\" || i == \"%\" || i == \"^\" || i == \"&\" || i == \"*\" || i == \"\
    (\" || i == \")\" || i == \"-\" || i == \"_\" || i == \"+\" || i == \"=\" || i\
    \ == \":\" || i == \"{\" || i == \"}\" || i == \"[\" || i == \"]\" || i == \"\
    <\" || i == \">\" || i == \"/\" || i == \"?\" || i == \"|\" || i == \"\\\\\" ||\
    \ i == \"{\" || i == \"}\":\n            prime_length = true\n            break\n\
    \        else if i == \"~\" || i == \"`\" || i == \"!\" || i == \"@\" || i ==\
    \ \"#\" || i == \"$\" || i == \"%\" || i == \"^\" || i == \"&\" || i == \"*\"\
    \ || i == \"(\" || i == \")\" || i == \"-\" || i == \"_\" || i == \"+\" || i ==\
    \ \"=\" || i == \":\" || i == \"{\" || i == \"}\" || i == \"[\" || i == \"]\"\
    \ || i == \"<\" || i == \">\" || i == \"/\" || i == \"?\" || i == \"|", "    \n\
    \    prime_number::Bool = true \n    \n    for character in string:\n        if\
    \ character == \" \" then\n            prime_number = false\n        else\n  \
    \          if character == \"a\" or character == \"b\" or character == \"c\" or\
    \ character == \"d\" or character == \"e\" or character == \"f\" or character\
    \ == \"g\" or character == \"h\" or character == \"i\" or character == \"j\" or\
    \ character == \"k\" or character == \"l\" or character == \"m\" or character\
    \ == \"n\" or character == \"o\" or character == \"p\" or character == \"q\" or\
    \ character == \"r\" or character == \"s\" or character == \"t\" or character\
    \ == \"u\" or character == \"v\" or character == \"w\" or character == \"x\" or\
    \ character == \"y\" or character == \"z\" then\n                prime_number\
    \ = false\n            else\n                if character == \"1\" then\n    \
    \                prime_number = true\n                else\n                 \
    \   if character == \"2\" then\n                        prime_number = true\n\
    \                    else\n                        if character == \"3\" then\n\
    \                            prime_number = true\n                        else\n\
    \                            if character == \"4\" then\n                    \
    \            prime_number = true\n                            else\n         \
    \                       if character == \"5\" then\n                         \
    \           prime_number = true\n                                else\n      \
    \                              if character == \"6\" then\n                  \
    \                      prime_number = true\n                                 \
    \   else\n                                        if character == \"7\" then\n\
    \                                            prime_number = true\n           \
    \                             else\n                                         \
    \   if character == \"8\" then\n                                             \
    \   prime_number = true\n                                            else\n  \
    \                                              if character == \"9\" then\n  \
    \                                                  prime_number = true\n     \
    \                                           else\n                           \
    \                         if character == \"0\" then\n                       \
    \                                 prime_number = true\n                      \
    \                              else\n                                        \
    \                if character == \"+\" then\n                                \
    \                            prime_number = true\n                           \
    \                             else\n                                         \
    \                   prime_number = false\n    end\n    return prime_number\nend\n\
    </cell>\n<code language=julia-1.4>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string has all characters from \"a\" to \"z\" repeated 3 times or False otherwise\n\
    Examples\n>>> has_all_characters(\"Hello\")\ntrue\n>>> has_all_characters(\"abcdcba\"\
    )\ntrue\n>>> has_all_characters(\"kittens\")\ntrue\n>>> has_all_characters(\"\
    orange\")\nfalse\n>>> has_all_characters(\"abracadabra\")\nfalse\n>>> has_all_characters(\"\
    ab", "    \n    prime_number = true\n    \n    for char in string:\n        if\
    \ char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char ==\
    \ \"u\":\n            prime_number = false\n            break\n    \n    if prime_number\
    \ == true:\n        return true\n    else:\n        return false\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nWrite a function that takes a string and returns True if the string\n\
    \    length is an even number or False otherwise\n    Examples\n    >>> even_length(\"\
    Hello\")\n    true\n    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"\
    kittens\")\n    false\n    >>> even_length(\"orange\")\n    false\n    \"\"\"",
  "    \n    prime_length::Bool = false \n    \n    for i in string.chars \n     \
    \   if prime_length::Bool = false \n            if i::Int > 1 \n             \
    \   if i::Int % 2 == 0 \n                    prime_length::Bool = false \n   \
    \             else \n                    prime_length::Bool = true \n        \
    \    else \n                prime_length::Bool = false \n    return prime_length::Bool\
    \ \nend \n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns True if the string contains only letters a-z or A-Z or False otherwise\n\
    Examples\n>>> only_letters(\"Hello\")\ntrue\n>>> only_letters(\"abcdcba\")\nfalse\n\
    >>> only_letters(\"kittens\")\ntrue\n>>> only_letters(\"orange\")\nfalse\n>>>\
    \ only_letters(\"123\")\nfalse\n>>> only_letters(\"a1\")\nfalse\n>>> only_letters(\"\
    a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>>\
    \ only_letters(\"A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>> only_letters(\"\
    A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>>\
    \ only_letters(\"a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>> only_letters(\"\
    a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>>\
    \ only_letters(\"A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>> only_letters(\"\
    A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>>\
    \ only_letters(\"a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>> only_letters(\"\
    a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>>\
    \ only_letters(\"A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>> only_letters(\"\
    A\")\ntrue\n>>> only_letters(\"a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>>\
    \ only_letters(\"a\")\ntrue\n>>> only_letters(\"A\")\ntrue\n>>> only_letters(\"\
    a\")\ntrue\n>>> only_letters(\"A\")\n", "    \n    prime_length::Bool = false\
    \ \n    \n    prime_length::Bool = string.len() > 1 && string.len() < 100 && string.len(:>1)\
    \ && string.len(:<100) && string.len(:>=2) && string.len(:<=100) \n    \n    return\
    \ prime_length\nend\n</cell>\n<code language=julia-1.3>\nprime_length(\"Hello\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"orange\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"\
    apple\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ palindrome(\"hello\")\ntrue\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\n", "    \n    prime_length::Bool = true \n\
    \    \n    for i in string:\n        if prime_length::Bool = false \n        \
    \    break\n        \n        if i::Int > 1 \n            prime_length::Bool =\
    \ false \n            break\n        \n        if i::Int < 2 \n            prime_length::Bool\
    \ = false \n            break\n        \n        for i in string:\n          \
    \  if i::Int % 2 != 0 \n                prime_length::Bool = false \n        \
    \        break\n        \n    return prime_length::Bool\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")", "    \n    prime_length_bool\
    \ = false\n    \n    for i in string:\n        if prime_length_bool == true\n\
    \            break\n        if i == 1\n            prime_length_bool = true\n\
    \        else\n            if i % i == 0\n                prime_length_bool =\
    \ false\n                break\n            else\n                if prime_length_bool\
    \ == true\n                    break\n    return prime_length_bool\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns True if the\
    \ string has all letters uppercase\nExamples\n>>> has_uppercase_letters(\"Hello\"\
    )\ntrue\n>>> has_uppercase_letters(\"HELLO\")\ntrue\n>>> has_uppercase_letters(\"\
    HELLOWORLD\")\nfalse\n>>> has_uppercase_letters(\"kittens\")\nfalse\n>>> has_uppercase_letters(\"\
    orange\")\nfalse\n</text>\n<code language=julia-1.5>", "    \n    prime_length::Bool\
    \ = \n        true\n        \n    for i in string.chars\n        if string.index(i)\
    \ == 0 \n            prime_length = false\n            break\n        else if\
    \ string.index(i) == string.size - 1\n            prime_length = false\n     \
    \       break\n        else if string.index(i) == string.size - 2\n          \
    \  prime_length = true\n            break\n        else if string.index(i) ==\
    \ string.size - 3\n            prime_length = true\n            break\n      \
    \  else if string.index(i) == string.size - 4\n            prime_length = true\n\
    \            break\n        else if string.index(i) == string.size - 5\n     \
    \       prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 6\n            prime_length = true\n            break\n   \
    \     else if string.index(i) == string.size - 7\n            prime_length = true\n\
    \            break\n        else if string.index(i) == string.size - 8\n     \
    \       prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 9\n            prime_length = true\n            break\n   \
    \     else if string.index(i) == string.size - 10\n            prime_length =\
    \ true\n            break\n        else if string.index(i) == string.size - 11\n\
    \            prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 12\n            prime_length = true\n            break\n  \
    \      else if string.index(i) == string.size - 13\n            prime_length =\
    \ true\n            break\n        else if string.index(i) == string.size - 14\n\
    \            prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 15\n            prime_length = true\n            break\n  \
    \      else if string.index(i) == string.size - 16\n            prime_length =\
    \ true\n            break\n        else if string.index(i) == string.size - 17\n\
    \            prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 18\n            prime_length = true\n            break\n  \
    \      else if string.index(i) == string.size - 19\n            prime_length =\
    \ true\n            break\n        else if string.index(i) == string.size - 20\n\
    \            prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 21\n            prime_length = true\n            break\n  \
    \      else if string.index(i) == string.size - 22\n            prime_length =\
    \ true\n            break\n        else if string.index(i) == string.size - 23\n\
    \            prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 24\n            prime_length = true\n            break\n  \
    \      else if string.index(i) == string.size - 25\n            prime_length =\
    \ true\n            break\n        else if string.index(i) == string.size - 26\n\
    \            prime_length = true\n            break\n        else if string.index(i)\
    \ == string.size - 27", "    \n    prime_length::Bool = false \n    \n    if string\
    \ == \"\"\n        return prime_length\n    \n    for i in string.chars\n    \
    \    if string.chars.count(i) == 1 \n            prime_length = true\n       \
    \     break\n    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string has all letters\
    \ capitalized and False otherwise\nExamples\n>>> capitalized(\"Hello\")\ntrue\n\
    >>> capitalized(\"HelloWorld\")\nfalse\n>>> capitalized(\"Hello World\")\ntrue\n\
    >>> capitalized(\"Hello World!\")\nfalse\n>>> capitalized(\"Hello World!!\")\n\
    true\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\"\
    )\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"Hello\
    \ World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\nfalse\n>>> capitalized(\"Hello World!!!\")\nfalse\n>>> capitalized(\"\
    Hello World!!!\")\n", "    \n    prime_length::Bool = false \n    \n    if string\
    \ == \"\"\n        return prime_length\n    \n    length::Int = string.length\n\
    \    \n    if length == 2\n        return true\n    \n    for i in 2..length\n\
    \        if string.charAt(i) == string.charAt(length-1)\n            return false\n\
    \    \n    return prime_length\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"kittens\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"", " \
    \   \n    prime_length::Bool = \n        if string == \"\"\n            true\n\
    \        else\n            if string.length == 0 || string.length == 1\n     \
    \           true\n            else\n                if string.length == 2\n  \
    \                  true\n                else\n                    if string.length\
    \ == 3\n                        true\n                    else\n             \
    \           if string.length == 4\n                            true\n        \
    \                else\n                            if string.length == 5\n   \
    \                             true\n                            else\n       \
    \                         if string.length == 6\n                            \
    \        true\n                                else\n                        \
    \            if string.length == 7\n                                        true\n\
    \                                    else\n                                  \
    \      if string.length == 8\n                                            true\n\
    \                                        else\n                              \
    \              if string.length == 9\n                                       \
    \         true\n                                            else\n           \
    \                                     if string.length == 10\n               \
    \                                     true\n                                 \
    \               else\n                                                    if string.length\
    \ == 11\n                                                        true\n      \
    \                                              else\n                        \
    \                                if string.length == 12\n                    \
    \                                        true\n                              \
    \                          else\n                                            \
    \                if string.length == 13\n                                    \
    \                            true\n                                          \
    \                  else\n                                                    \
    \            if string.length == 14\n                                        \
    \                            true\n                                          \
    \                      else\n                                                \
    \                    if string.length == 15\n                                \
    \                                        true\n                              \
    \                                      else\n                                \
    \                                        if string.length == 16\n            \
    \                                                                true\n      \
    \                                                                  else\n    \
    \                                                                        if string.length\
    \ == 17\n                                                                    \
    \            true\n                                                          \
    \                  else\n                                                    \
    \                            if string.length == 18\n                        \
    \                                                            true\n          \
    \                                                                      else\n\
    \                                                                            \
    \        if string.length == 19\n                                            \
    \                                            true\n                          \
    \                                                          else\n            \
    \                                                                            if\
    \ string.length == 20\n                                                      \
    \                                      true\n                                \
    \                                                        else\n              \
    \                                                                            \
    \  if string.length == 21\n                                                  \
    \                                              true\n                        \
    \                                                                    else\n  \
    \                                                                            \
    \                  if string.length == 22\n                                  \
    \                                                                  true\n    \
    \                                                                            \
    \                else\n                                                      \
    \                                              if string.length == 23\n      \
    \                                                                            \
    \                      true\n                                                \
    \                                                    else\n                  \
    \                                                                            \
    \          if string.length == 24\n                                          \
    \                                                                  true\n    \
    \                                                                            \
    \                        else\n                                              \
    \                                                              if string.length\
    \ == 25\n                                                                    \
    \                                            true\n                          \
    \                                                                            \
    \      else\n                                                                \
    \                                                if string.length == 26\n    \
    \                                                                            \
    \                                    true\n                                  \
    \                                                                            \
    \  else\n                                                                    \
    \                                                if string.length == 27\n    \
    \                                                                            \
    \                                        true\n                              \
    \                                                                            \
    \          else\n                                                            \
    \                                                            if string.length\
    \ == 28\n                                                                    \
    \                                                        true\n              \
    \                                                                            \
    \                              else\n                                        \
    \                                                                            \
    \        if string.length == 29\n                                            \
    \                                                                            \
    \        true\n                                                              \
    \                                                              else\n        \
    \                                                                            \
    \                                            if string.length == 30\n        \
    \                                                                            \
    \                                                true\n                      \
    \                                                                            \
    \                              else\n                                        \
    \                                                                            \
    \                if string.length == 31\n                                    \
    \                                                                            \
    \                        true\n                                              \
    \                                                                            \
    \          else\n                                                            \
    \                                                                            if\
    \ string.length == 32\n                                                      \
    \                                                                            \
    \          true\n                                                            \
    \                                                                            else\n\
    \                                                                            \
    \                                                                if string.length\
    \ == 33\n                                                                    \
    \                                                                            true\n\
    \                                                                            \
    \                                                                else\n      \
    \                                                                            \
    \                                                              if string.length\
    \ == 34\n                                                                    \
    \                                                                            \
    \    true\n                                                                  \
    \                                                                            \
    \  else\n                                                                ", " \
    \   \n    prime_length::Bool = false \n    \n    if string == \"\"\n        prime_length\
    \ = true\n    else\n        for char in string\n            if char == \"a\"\n\
    \                prime_length = true\n            else\n                if char\
    \ == \"b\"\n                    prime_length = true\n                else\n  \
    \                  if char == \"c\"\n                        prime_length = true\n\
    \                    else\n                        if char == \"d\"\n        \
    \                    prime_length = true\n                        else\n     \
    \                       if char == \"e\"\n                                prime_length\
    \ = true\n                            else\n                                if\
    \ char == \"f\"\n                                    prime_length = true\n   \
    \                             else\n                                    if char\
    \ == \"g\"\n                                        prime_length = true\n    \
    \                                else\n                                      \
    \  if char == \"h\"\n                                            prime_length\
    \ = true\n                                        else\n                     \
    \                       if char == \"i\"\n                                   \
    \             prime_length = true\n                                          \
    \  else\n                                                if char == \"j\"\n  \
    \                                                  prime_length = true\n     \
    \                                           else\n                           \
    \                         if char == \"k\"\n                                 \
    \                       prime_length = true\n                                \
    \                    else\n                                                  \
    \      if char == \"l\"\n                                                    \
    \        prime_length = true\n                                               \
    \         else\n                                                            if\
    \ char == \"m\"\n                                                            \
    \    prime_length = true\n                                                   \
    \         else\n                                                             \
    \   if char == \"n\"\n                                                       \
    \             prime_length = true\n                                          \
    \                      else\n                                                \
    \                    if char == \"o\"\n                                      \
    \                                  prime_length = true\n                     \
    \                                               else\n                       \
    \                                 if char == \"p\"\n                         \
    \                                   prime_length = true\n                    \
    \                                    else\n                                  \
    \                          if char == \"q\"\n                                \
    \                                prime_length = true\n                       \
    \                                     else\n                                 \
    \                               if char == \"r\"\n                           \
    \                                         prime_length = true\n              \
    \                                                  else\n                    \
    \                                                if char == \"s\"\n          \
    \                                                              prime_length =\
    \ true\n                                                                    else\n\
    \                                                        if char == \"t\"\n  \
    \                                                          prime_length = true\n\
    \                                                        else\n              \
    \                                              if char == \"u\"\n            \
    \                                                    prime_length = true\n   \
    \                                                         else\n             \
    \                                                   if char == \"v\"\n       \
    \                                                             prime_length = true\n\
    \                                                                else\n      \
    \                                                              if char == \"w\"\
    \n                                                                        prime_length\
    \ = true\n                                                                   \
    \ else\n                                                        if char == \"\
    x\"\n                                                            prime_length\
    \ = true\n                                                        else\n     \
    \                                                       if char == \"y\"\n   \
    \                                                             prime_length = true\n\
    \                                                            else\n          \
    \                                                      if char == \"z\"\n    \
    \                                                                prime_length\
    \ = true\n                                                                else\n\
    \                                                                    if char ==\
    \ \"A\"\n                                                                    \
    \    prime_length = true\n                                                   \
    \                 else\n                                                     \
    \   if char == \"B\"\n                                                       \
    \     prime_length = true\n                                                  \
    \      else\n                                                            if char\
    \ == \"C\"\n                                                                prime_length\
    \ = true\n                                                            else\n \
    \                                                               if char == \"\
    D\"\n                                                                    prime_length\
    \ = true\n                                                                else\n\
    \                                                                    ", "    if\
    \ string.length == 0 \n        true \n    else \n        if string.length == 1\
    \ \n            false \n        else \n            if string.length == 2 \n  \
    \              true \n            else \n                if string.length == 3\
    \ \n                    true \n                else \n                    if string.length\
    \ == 4 \n                        true \n                    else \n          \
    \              if string.length == 5 \n                            true \n   \
    \                     else \n                            if string.length == 6\
    \ \n                                true \n                            else \n\
    \                                if string.length == 7 \n                    \
    \                true \n                                else \n              \
    \                      if string.length == 8 \n                              \
    \          true \n                                    else \n                \
    \                        if string.length == 9 \n                            \
    \                true \n                                        else \n      \
    \                                      if string.length == 10 \n             \
    \                                   true \n                                  \
    \          else \n                                                if string.length\
    \ == 11 \n                                                    true \n        \
    \                                        else \n                             \
    \                       if string.length == 12 \n                            \
    \                            true \n                                         \
    \           else \n                                                        if\
    \ string.length == 13 \n                                                     \
    \       true \n                                                        else \n\
    \                                                            if string.length\
    \ == 14 \n                                                                true\
    \ \n                                                            else \n      \
    \                                                          if string.length ==\
    \ 15 \n                                                                    true\
    \ \n                                                                else \n  \
    \                                                                  if string.length\
    \ == 16 \n                                                                   \
    \     true \n                                                                \
    \    else \n                                                        if string.length\
    \ == 17 \n                                                            true \n\
    \                                                        else \n             \
    \                                               if string.length == 18 \n    \
    \                                                            true \n         \
    \                                                   else \n                  \
    \                                              if string.length == 19 \n     \
    \                                                               true \n      \
    \                                                          else \n           \
    \                                                         if string.length ==\
    \ 20 \n                                                                      \
    \  true \n                                                                   \
    \ else \n                                                        if string.length\
    \ == 21 \n                                                            true \n\
    \                                                        else \n             \
    \                                               if string.length == 22 \n    \
    \                                                            true \n         \
    \                                                   else \n                  \
    \                                              if string.length == 23 \n     \
    \                                                               true \n      \
    \                                                          else \n           \
    \                                                         if string.length ==\
    \ 24 \n                                                                      \
    \  true \n                                                                   \
    \ else \n                                                        if string.length\
    \ == 25 \n                                                            true \n\
    \                                                        else \n             \
    \                                               if string.length == 26 \n    \
    \                                                            true \n         \
    \                                                   else \n                  \
    \                                              if string.length == 27 \n     \
    \                                                               true \n      \
    \                                                          else \n           \
    \                                                         if string.length ==\
    \ 28 \n                                                                      \
    \  true \n                                                                   \
    \ else \n                                                        if string.length\
    \ == 29 \n                                                            true \n\
    \                                                        else \n             \
    \                                               if string.length == 30 \n    \
    \                                                            true \n         \
    \                                                   else \n                  \
    \                                              if string.length == 31 \n     \
    \                                                               true \n      \
    \                                                          else \n           \
    \                                                         if string.length ==\
    \ 32 \n                                                                      \
    \  true \n                                                                   \
    \ else \n                                                        if string.length\
    \ == 33 \n                                                            true \n\
    \                                                        else \n             \
    \                                               if string.length == 34 \n    \
    \                                                            true \n         \
    \                                                   else \n                  \
    \                                              if string.length == 35  \n    \
    \                                                                true \n     \
    \                                                           else \n          \
    \                                                          if string.length ==\
    \ 36  \n                                                                     \
    \   true \n                                                                  \
    \  else \n                                                        if string.length\
    \ == 37  \n                                                            true \n\
    \                                                        else \n             \
    \                                               if string.length == 38  \n   \
    \                                                             true \n        \
    \                                                    else ", "    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    kittens\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")", " \
    \   \n    prime_numbers = Set{Int}()\n    \n    for i in string.split(\"\")\n\
    \        prime_numbers.add(Int(i))\n    \n    prime_numbers.size == string.size\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns True if the string is a palindrome or False otherwise\nExamples\n>>>\
    \ palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n", " \
    \   \n    prime_numbers = prime_numbers()\n    \n    for i in string:\n      \
    \  if i in prime_numbers:\n            return False\n    return True\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns True if the\
    \ string contains any uppercase letters or False otherwise\nExamples\n>>> contains_uppercase(\"\
    Hello\")\ntrue\n>>> contains_uppercase(\"HELLO\")\ntrue\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"\
    HELLOWORLD\")\nfalse\n>>> contains_uppercase(\"HELLOWORLD\")\nfalse\n>>> contains_uppercase",
  "    \n    prime_length::Bool = true \n    \n    for i in string:\n        if i\
    \ == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y':\n      \
    \      prime_length = false\n            break\n    \n    return prime_length\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26829847)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He wants to know if there is a way to\
    \ check if a string is prime or not. He also provided a solution that checks if\
    \ a string is prime or not. He also provided a solution that checks if a string\
    \ is prime or not. He also provided a solution that checks if a string is prime\
    \ or not. He also provided a solution that checks if a string is prime or not.\
    \ He also provided a solution that checks if a string is prime or not. He also\
    \ provided a solution that checks if a string is prime or not. He also provided\
    \ a solution that checks if a string is prime or not. He also provided a solution\
    \ that checks if a string is prime or not. He also provided a solution that checks\
    \ if a string is prime or not. He also provided a solution that checks if a string\
    \ is prime or not. He also provided a solution that checks if a string is prime\
    \ or not. He also provided a solution that checks if a string is prime or not.\
    \ He also provided a solution that checks if a string is prime or not. He also\
    \ provided a solution that checks if a string is prime or not. He also provided\
    \ a solution that checks if a string is prime or not. He also provided a solution\
    \ that checks if a string is prime or not. He also provided a solution that checks\
    \ if a string is prime or not. He also provided a solution that checks if a string\
    \ is prime or not. He also provided a solution that checks if a string is prime\
    \ or not. He also provided a solution that checks if a string is prime or not.\
    \ He also provided a solution that checks if a string is prime or not. He also\
    \ provided a solution that checks if a string is prime or not. He also provided\
    \ a solution that checks if a string is prime or not. He also provided a solution\
    \ that checks if a string is prime or not. He also provided a solution that checks\
    \ if a string is prime or not. He also provided a solution that checks if a string\
    \ is ", "    \n    prime_number::Bool = true \n    \n    for character in string\n\
    \        if character == \"a\"\n            prime_number = false\n           \
    \ break\n        if character == \"b\"\n            prime_number = false\n   \
    \         break\n        if character == \"c\"\n            prime_number = false\n\
    \            break\n        if character == \"d\"\n            prime_number =\
    \ false\n            break\n        if character == \"e\"\n            prime_number\
    \ = false\n            break\n        if character == \"f\"\n            prime_number\
    \ = false\n            break\n        if character == \"g\"\n            prime_number\
    \ = false\n            break\n        if character == \"h\"\n            prime_number\
    \ = false\n            break\n        if character == \"i\"\n            prime_number\
    \ = false\n            break\n        if character == \"j\"\n            prime_number\
    \ = false\n            break\n        if character == \"k\"\n            prime_number\
    \ = false\n            break\n        if character == \"l\"\n            prime_number\
    \ = false\n            break\n        if character == \"m\"\n            prime_number\
    \ = false\n            break\n        if character == \"n\"\n            prime_number\
    \ = false\n            break\n        if character == \"o\"\n            prime_number\
    \ = false\n            break\n        if character == \"p\"\n            prime_number\
    \ = false\n            break\n        if character == \"q\"\n            prime_number\
    \ = false\n            break\n        if character == \"r\"\n            prime_number\
    \ = false\n            break\n        if character == \"s\"\n            prime_number\
    \ = false\n            break\n        if character == \"t\"\n            prime_number\
    \ = false\n            break\n        if character == \"u\"\n            prime_number\
    \ = false\n            break\n        if character == \"v\"\n            prime_number\
    \ = false\n            break\n        if character == \"w\"\n            prime_number\
    \ = false\n            break\n        if character == \"x\"\n            prime_number\
    \ = false\n            break\n        if character == \"y\"\n            prime_number\
    \ = false\n            break\n        if character == \"z\"\n            prime_number\
    \ = false\n            break\n        if character == \"A\"\n            prime_number\
    \ = false\n            break\n        if character == \"B\"\n            prime_number\
    \ = false\n            break\n        if character == \"C\"\n            prime_number\
    \ = false\n            break\n        if character == \"D\"\n            prime_number\
    \ = false\n            break\n        if character == \"E\"\n            prime_number\
    \ = false\n            break\n        if character == \"F\"\n            prime_number\
    \ = false\n            break\n        if character == \"G\"\n            prime_number\
    \ = false\n            break\n        if character == \"H\"\n            prime_number\
    \ = false\n            break\n        if character == \"I\"\n            prime_number\
    \ = false\n            break\n        if character == \"J\"\n            prime_number\
    \ = false\n            break\n        if ", "    \n    prime_number::Bool = true\
    \ \n    \n    for i in string.chars \n        if prime_number == true \n     \
    \       prime_number = false \n        else \n            if i % 2 == 0 \n   \
    \             prime_number = false \n            else \n                if i %\
    \ 3 == 0 \n                    prime_number = false \n                else \n\
    \                    if i % 5 == 0 \n                        prime_number = false\
    \ \n    return prime_number \nend \n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"abba\")\ntrue\n>>>\
    \ palindrome(\"kittens\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n", "    \n    prime_numbers = Set([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    \    \n    for i in string:\n        if i in prime_numbers:\n            return\
    \ False\n    return True\n</cell>\n<cell>\nprime_length(\"Hello\")\n</cell>\n\
    <cell>\nprime_length(\"abcdcba\")\n</cell>\n<cell>\nprime_length(\"kittens\")\n\
    </cell>\n<cell>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"\
    racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")", " \
    \   if string == \"\"\n        true\n    else\n        if string.length % 2 ==\
    \ 0\n            false\n        else\n            if string.length % 3 == 0\n\
    \                true\n            else\n                if string.length % 5\
    \ == 0\n                    true\n                else\n                    if\
    \ string.length % 7 == 0\n                        true\n                    else\n\
    \                        if string.length % 11 == 0\n                        \
    \    true\n                        else\n                            if string.length\
    \ % 13 == 0\n                                true\n                          \
    \  else\n                                if string.length % 17 == 0\n        \
    \                            true\n                                else\n    \
    \                                if string.length % 19 == 0\n                \
    \                        true\n                                    else\n    \
    \                                    if string.length % 23 == 0\n            \
    \                                true\n                                      \
    \  else\n                                            if string.length % 29 ==\
    \ 0\n                                                true\n                  \
    \                          else\n                                            \
    \    if string.length % 31 == 0\n                                            \
    \        true\n                                                else\n        \
    \                                            if string.length % 37 == 0\n    \
    \                                                    true\n                  \
    \                                  else\n                                    \
    \                    if string.length % 41 == 0\n                            \
    \                                true\n                                      \
    \                  else\n                                                    \
    \        if string.length % 43 == 0\n                                        \
    \                        true\n                                              \
    \              else\n                                                        \
    \        if string.length % 47 == 0\n                                        \
    \                            true\n                                          \
    \                      else\n                                                \
    \                    if string.length % 53 == 0\n                            \
    \                                            true\n                          \
    \                                          else\n                            \
    \                            if string.length % 59 == 0\n                    \
    \                                        true\n                              \
    \                          else\n                                            \
    \                if string.length % 61 == 0\n                                \
    \                                true\n                                      \
    \                      else\n                                                \
    \                if string.length % 67 == 0\n                                \
    \                                    true\n                                  \
    \                              else\n                                        \
    \                            if string.length % 71 == 0\n                    \
    \                                                    true\n                  \
    \                                                  else\n                    \
    \                                    if string.length % 73 == 0\n            \
    \                                                true\n                      \
    \                                  else\n                                    \
    \                        if string.length % 79 == 0\n                        \
    \                                        true\n                              \
    \                              else\n                                        \
    \                        if string.length % 83 == 0\n                        \
    \                                            true\n                          \
    \                                      else\n                                \
    \                                    if string.length % 89 == 0\n            \
    \                                                            true\n          \
    \                                                          else\n            \
    \                                            if string.length % 97 == 0\n    \
    \                                                        true\n              \
    \                                          else\n                            \
    \                                if string.length % 101 == 0\n               \
    \                                                 true\n                     \
    \                                       else\n                               \
    \                                 if string.length % 103 == 0\n              \
    \                                                      true\n                \
    \                                                else\n                      \
    \                                              if string.length % 107 == 0\n \
    \                                                                       true\n\
    \                                                                    else\n  \
    \                                                      if string.length % 111\
    \ == 0\n                                                            true\n   \
    \                                                     else\n                 \
    \                                           if string.length % 113 == 0\n    \
    \                                                            true\n          \
    \                                                  else\n                    \
    \                                            if string.length % 117 == 0\n   \
    \                                                                 true\n     \
    \                                                           else\n           \
    \                                                         if string.length % 121\
    \ == 0\n                                                                     \
    \   true\n                                                                   \
    \ else\n                                                        if string.length\
    \ % 123 == 0\n                                                            true\n\
    \                                                        else\n              \
    \                                              if string.length % 127 == 0\n \
    \                                                               true\n       \
    \                                                     else\n                 \
    \                                               if string.length % 131 == 0\n",
  "    \n    if string == \"\"\n        true\n    else\n        if string.length %\
    \ 2 == 0\n            false\n        else\n            if string.length % 3 ==\
    \ 0\n                false\n            else\n                if string.length\
    \ % 5 == 0\n                    false\n                else\n                \
    \    if string.length % 7 == 0\n                        false\n              \
    \      else\n                        true\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns True if the string is a\
    \ palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\")\ntrue\n\
    >>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome", "    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for number in prime_numbers\n        if number % string == 0\n    \
    \        return false\n    return true\nend\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    kittens\")\ntrue\n>>> palindrome(\"orange\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")", "    \n    prime_length::Bool = false\n\
    \    \n    for char in string\n        if char == \"a\"\n            prime_length\
    \ = true\n            break\n        if char == \"b\"\n            prime_length\
    \ = true\n            break\n        if char == \"c\"\n            prime_length\
    \ = true\n            break\n        if char == \"d\"\n            prime_length\
    \ = true\n            break\n        if char == \"e\"\n            prime_length\
    \ = true\n            break\n        if char == \"f\"\n            prime_length\
    \ = true\n            break\n        if char == \"g\"\n            prime_length\
    \ = true\n            break\n        if char == \"h\"\n            prime_length\
    \ = true\n            break\n        if char == \"i\"\n            prime_length\
    \ = true\n            break\n        if char == \"j\"\n            prime_length\
    \ = true\n            break\n        if char == \"k\"\n            prime_length\
    \ = true\n            break\n        if char == \"l\"\n            prime_length\
    \ = true\n            break\n        if char == \"m\"\n            prime_length\
    \ = true\n            break\n        if char == \"n\"\n            prime_length\
    \ = true\n            break\n        if char == \"o\"\n            prime_length\
    \ = true\n            break\n        if char == \"p\"\n            prime_length\
    \ = true\n            break\n        if char == \"q\"\n            prime_length\
    \ = true\n            break\n        if char == \"r\"\n            prime_length\
    \ = true\n            break\n        if char == \"s\"\n            prime_length\
    \ = true\n            break\n        if char == \"t\"\n            prime_length\
    \ = true\n            break\n        if char == \"u\"\n            prime_length\
    \ = true\n            break\n        if char == \"v\"\n            prime_length\
    \ = true\n            break\n        if char == \"w\"\n            prime_length\
    \ = true\n            break\n        if char == \"x\"\n            prime_length\
    \ = true\n            break\n        if char == \"y\"\n            prime_length\
    \ = true\n            break\n        if char == \"z\"\n            prime_length\
    \ = true\n            break\n        if char == \"A\"\n            prime_length\
    \ = true\n            break\n        if char == \"B\"\n            prime_length\
    \ = true\n            break\n        if char == \"C\"\n            prime_length\
    \ = true\n            break\n        if char == \"D\"\n            prime_length\
    \ = true\n            break\n        if char == \"E\"\n            prime_length\
    \ = true\n            break\n        if char == \"F\"\n            prime_length\
    \ = true\n            break\n        if char == \"G\"\n            prime_length\
    \ = true\n            break\n        if char == \"H\"\n            prime_length\
    \ = true\n            break\n        if char == \"I\"\n            prime_length\
    \ = true\n            break\n        if char == \"J\"\n            prime_length\
    \ = true\n            break\n        if char == \"", "    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers:\n        if string.length == i:\n         \
    \   return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )", "    \n    prime_length = true\n    \n    for i in string:\n        if i ==\
    \ \"a\" or i == \"b\" or i == \"c\" or i == \"d\" or i == \"e\" or i == \"f\"\
    \ or i == \"g\" or i == \"h\" or i == \"i\" or i == \"j\" or i == \"k\" or i ==\
    \ \"l\" or i == \"m\" or i == \"n\" or i == \"o\" or i == \"p\" or i == \"q\"\
    \ or i == \"r\" or i == \"s\" or i == \"t\" or i == \"u\" or i == \"v\" or i ==\
    \ \"w\" or i == \"x\" or i == \"y\" or i == \"z\":\n            prime_length =\
    \ false\n            break\n    \n    return prime_length\n\"\"\"\nWrite a function\
    \ that takes a string and returns True if the string\n    length is an even number\
    \ or False otherwise\n    Examples\n    >>> even_length(\"Hello\")\n    true\n\
    \    >>> even_length(\"abcdcba\")\n    false\n    >>> even_length(\"kittens\"\
    )\n    false\n    >>> even_length(\"orange\")\n    true\n    \"\"\"", "    \n\
    \    prime_numbers = Set{Int}()\n    \n    for character in string\n        if\
    \ character in prime_numbers\n            prime_numbers.remove(character)\n  \
    \      else\n            prime_numbers.add(character)\n            \n    return\
    \ prime_numbers.length == 0 \nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> palindrome(\"racecar\")\ntrue\n>>> palindrome(\"racecars\")\ntrue\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar", "    \n    prime_length::Bool = false\n    \n    if\
    \ string == \"\"\n        return prime_length\n    \n    for i in string\n   \
    \     if prime_length\n            prime_length = false\n        else\n      \
    \      if string[i] == string[i+1]\n                prime_length = false\n   \
    \         else\n                if string[i] != string[i+1]\n                \
    \    prime_length = true\n                else\n                    prime_length\
    \ = false\n            end\n        end\n    end\n    \n    return prime_length\n\
    end\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns True if the string contains only letters a-z or A-Z or False otherwise\n\
    Examples\n>>> is_valid_letters(\"Hello\")\ntrue\n>>> is_valid_letters(\"abcdcba\"\
    )\ntrue\n>>> is_valid_letters(\"kittens\")\ntrue\n>>> is_valid_letters(\"orange\"\
    )\nfalse\n>>> is_valid_letters(\"123\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letters(\"aBcD\"\
    )\nfalse\n>>> is_valid_letters(\"aBcD\")\nfalse\n>>> is_valid_letter", "    \n\
    \    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.len() == i\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.4>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.4>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.4>\nprime_length(\"orange\")\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns True if the string contains only letters a-z\
    \ or A-Z or False otherwise\nExamples\n>>> only_letters(\"Hello\")\ntrue\n>>>\
    \ only_letters(\"abcdcba\")\nfalse\n>>> only_letters(\"kittens\")\ntrue\n>>> only_letters(\"\
    orange\")\nfalse\n\"\"\"", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string.len() == i\n            return\
    \ true\n    return false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns True if the string contains any uppercase letters or False\
    \ otherwise\nExamples\n>>> contains_uppercase(\"Hello\")\ntrue\n>>> contains_uppercase(\"\
    HELLO\")\ntrue\n>>> contains_uppercase(\"kittens\")\nfalse\n>>> contains_uppercase(\"\
    orange\")\nfalse\n\"\"\"", "    \n    prime_length::Bool = false \n    \n    if\
    \ string == \"\" || string == \"\\n\" \n        then return prime_length \n  \
    \  else \n        \n        prime_length::Bool = true \n        \n        for\
    \ i in string\n            \n            if i \u2209 [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n                then return prime_length\
    \ \n            \n            prime_length::Bool = false \n            \n    \
    \        if prime_length\n                then return prime_length \n        \
    \    \n            prime_length::Bool = true \n            \n            if i\
    \ \u2209 [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"]\n                then return prime_length\
    \ \n            \n            prime_length::Bool = false \n            \n    \
    \        if prime_length\n                then return prime_length \n        \
    \    \n            prime_length::Bool = true \n            \n            if i\
    \ \u2209 [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    ]\n                then return prime_length \n            \n            prime_length::Bool\
    \ = false \n            \n            if prime_length\n                then return\
    \ prime_length \n            \n            prime_length::Bool = true \n      \
    \      \n            if i \u2209 [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n               \
    \ then return prime_length \n            \n            prime_length::Bool = false\
    \ \n            \n            if prime_length\n                then return prime_length\
    \ \n            \n            prime_length::Bool = true \n            \n     \
    \       if i \u2209 [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\"]\n                then return prime_length \n            \n       \
    \     prime_length::Bool = false \n            \n            if prime_length\n\
    \                then return prime_length \n            \n            prime_length::Bool\
    \ = true \n            \n            if i \u2209 [\"a\", \"b\", \"c\", \"d\",\
    \ \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n                then return prime_length \n            \n            prime_length::Bool\
    \ = false \n            \n", "    \n    prime_numbers::Set{Int}= Set()\n    for\
    \ character in string\n        if character in prime_numbers\n            prime_numbers.add(character)\n\
    \        else\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns True if the\
    \ string is a palindrome or False otherwise\nExamples\n>>> palindrome(\"racecar\"\
    )\ntrue\n>>> palindrome(\"racecars\")\ntrue\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\"\
    )\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\n\
    false\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n\
    >>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>>\
    \ palindrome(\"racecars\")\nfalse\n>>> palindrome(\"racecars\")\nfalse\n>>> palindrome(\"\
    racecars\")\nfalse\n>>> palindrome", "    \n    prime_length::Bool = false \n\
    \    \n    for i in string:\n        if i == \"a\" || i == \"e\" || i == \"i\"\
    \ || i == \"o\" || i == \"u\" || i == \"A\" || i == \"E\" || i == \"I\" || i ==\
    \ \"O\" || i == \"U\"\n        prime_length = true\n        break\n    \n    return\
    \ prime_length\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nThe `break` statement\
    \ is unnecessary and can be removed.\n<|/ c |>\n<| c |>\nThanks, I edited my answer\
    \ to remove it.\n<|/ c |>\n<| a tags=julia,primes |>\n<code>", "    \n    prime_length\
    \ = true\n    \n    for char in string:\n        if char == \"a\" || char == \"\
    e\" || char == \"i\" || char == \"o\" || char == \"u\":\n            prime_length\
    \ = false\n            break\n        \n    if prime_length == true:\n       \
    \ return true\n    \n    return false\n\"\"\"", "    \n    prime_length::Bool\
    \ = \n        true\n    \n    for i in string:\n        if prime_length::Bool\
    \ = false then\n            break\n        if i::Int > 1 then\n            prime_length::Bool\
    \ = false \n        else\n            prime_length::Bool = true \n        end\n\
    \    end\n    return prime_length::Bool\nend\n</cell>\n<code language=julia-1.3>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.3>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.3>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.3>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string contains only\
    \ letters a-z or A-Z or False otherwise\nExamples\n>>> string_only_letters(\"\
    Hello\")\ntrue\n>>> string_only_letters(\"abcdcba\")\nfalse\n>>> string_only_letters(\"\
    kittens\")\nfalse\n>>> string_only_letters(\"orange\")\nfalse\n\"\"\"", "    \n\
    \    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if string == i\n            return\
    \ true\n        else\n            return false\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"kittens\")\nfalse\n>>> palindrome(\"abba\")\n\
    false\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n\
    >>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"\
    abba\")\nfalse\n>>> palindrome(\"abba\")\nfalse\n>>> palindrome(\"abba\")", " \
    \   \n    prime_length::Bool = \n        if string == \"\" \n        then true\n\
    \        else if string.length == 0 \n        then true\n        else if string.length\
    \ == 1 \n        then false\n        else if string.length == 2 \n        then\
    \ string.length == 2\n        else if string.length == 3 \n        then string.length\
    \ == 3\n        else if string.length == 4 \n        then string.length == 4\n\
    \        else if string.length == 5 \n        then string.length == 5\n      \
    \  else if string.length == 6 \n        then string.length == 6\n        else\
    \ if string.length == 7 \n        then string.length == 7\n        else if string.length\
    \ == 8 \n        then string.length == 8\n        else if string.length == 9\n\
    \        then string.length == 9\n        else if string.length == 10\n      \
    \  then string.length == 10\n        else if string.length == 11\n        then\
    \ string.length == 11\n        else if string.length == 12\n        then string.length\
    \ == 12\n        else if string.length == 13\n        then string.length == 13\n\
    \        else if string.length == 14\n        then string.length == 14\n     \
    \   else if string.length == 15\n        then string.length == 15\n        else\
    \ if string.length == 16\n        then string.length == 16\n        else if string.length\
    \ == 17\n        then string.length == 17\n        else if string.length == 18\n\
    \        then string.length == 18\n        else if string.length == 19\n     \
    \   then string.length == 19\n        else if string.length == 20\n        then\
    \ string.length == 20\n        else if string.length == 21\n        then string.length\
    \ == 21\n        else if string.length == 22\n        then string.length == 22\n\
    \        else if string.length == 23\n        then string.length == 23\n     \
    \   else if string.length == 24\n        then string.length == 24\n        else\
    \ if string.length == 25\n        then string.length == 25\n        else if string.length\
    \ == 26\n        then string.length == 26\n        else if string.length == 27\n\
    \        then string.length == 27\n        else if string.length == 28\n     \
    \   then string.length == 28\n        else if string.length == 29\n        then\
    \ string.length == 29\n        else if string.length == 30\n        then string.length\
    \ == 30\n        else if string.length == 31\n        then string.length == 31\n\
    \        else if string.length == 32\n        then string.length == 32\n     \
    \   else if string.length == 33\n        then string.length == 33\n        else\
    \ if string.length == 34\n        then string.length == 34\n        else if string.length\
    \ == 35\n        then string.length == 35\n        else if string.length == 36\n\
    \        then string.length == 36\n        else if string.length == 37\n     \
    \   then string.length == 37\n", "    \n    prime_numbers::Set{Int} = Set()\n\
    \    \n    for character in string\n        if character in prime_numbers\n  \
    \          prime_numbers.remove(character)\n        else\n            prime_numbers.add(character)\n\
    \    end\n    \n    if prime_numbers == Set()\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    Hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"abcdcba\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"kittens\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"orange\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns True if the string is a palindrome or False otherwise\n\
    Examples\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecar\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecar\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"racecars\"\
    )\nfalse\n>>> is_palindro", "    \n    prime_numbers = prime_numbers()\n    \n\
    \    for i in string:\n        if i not in prime_numbers:\n            return\
    \ False\n    return True\n</code>\n<|/ a tags=primes,haskell |>\n<| c |>\nThank\
    \ you for the answer! I understand it better now. However I still don't understand\
    \ why my code doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c\
    \ |>\nI added an explanation to the answer\n<|/ c |>\n<| a tags=primes,haskell\
    \ |>\nThe problem is that the function prime_length does not return True or False,\
    \ but a Bool value. The function prime_length should look like this:\n<code>\n\
    prime_length :: String -> Bool\nprime_length s = length s >= 2 && all (\\i ->\
    \ i `mod` s == 0) [2..(length s - 1)]\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you for the answer! I understand it better now. However I still don't understand\
    \ why my code doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c\
    \ |>\nThe function `prime_length` should return `True` or `False`. The function\
    \ `prime_length` should look like `prime_length :: String -> Bool`. `prime_length`\
    \ should return `True` or `False`. `prime_length` should look like `prime_length\
    \ :: String -> Bool`. `prime_length` should return `True` or `False`. `prime_length`\
    \ should look like `prime_length :: String -> Bool`. `prime_length` should return\
    \ `True` or `False`. `prime_length` should look like `prime_length :: String ->\
    \ Bool`. `prime_length` should return `True` or `False`. `prime_length` should\
    \ look like `prime_length :: String -> Bool`. `prime_length` should return `True`\
    \ or `False`. `prime_length` should look like `prime_length :: String -> Bool`.\
    \ `prime_length` should return `True` or `False`. `prime_length` should look like\
    \ `prime_length :: String -> Bool`. `prime_length` should return `True` or `False`.\
    \ `prime_length` should look like `prime_length :: String -> Bool`. `prime_length`\
    \ should return `True` or `False`. `prime_length` should look like `prime_length\
    \ :: String -> Bool`. `prime_length` should return `True` or `False`. `prime_length`\
    \ should look like `prime_length :: String ", "    \n    prime_length::Bool =\
    \ false\n    \n    if string == \"\"\n        return true\n    \n    for i in\
    \ string.chars\n        if string.index(i) == 0 || string.index(i) == string.size\
    \ - 1\n            return false\n        \n        if string.index(i) > 1 && string.index(i)\
    \ < string.size - 2\n            if string.index(i) == string.size - 1\n     \
    \           return false\n            \n            if string.index(i) == string.size\
    \ - 2\n                return false\n            \n            if string.index(i)\
    \ == string.size - 3\n                return false\n            \n           \
    \ if string.index(i) == string.size - 4\n                return false\n      \
    \      \n            if string.index(i) == string.size - 5\n                return\
    \ false\n            \n            if string.index(i) == string.size - 6\n   \
    \             return false\n            \n            if string.index(i) == string.size\
    \ - 7\n                return false\n            \n            if string.index(i)\
    \ == string.size - 8\n                return false\n            \n           \
    \ if string.index(i) == string.size - 9\n                return false\n      \
    \      \n            if string.index(i) == string.size - 10\n                return\
    \ false\n            \n            if string.index(i) == string.size - 11\n  \
    \              return false\n            \n            if string.index(i) == string.size\
    \ - 12\n                return false\n            \n            if string.index(i)\
    \ == string.size - 13\n                return false\n            \n          \
    \  if string.index(i) == string.size - 14\n                return false\n    \
    \        \n            if string.index(i) == string.size - 15\n              \
    \  return false\n            \n            if string.index(i) == string.size -\
    \ 16\n                return false\n            \n            if string.index(i)\
    \ == string.size - 17\n                return false\n            \n          \
    \  if string.index(i) == string.size - 18\n                return false\n    \
    \        \n            if string.index(i) == string.size - 19\n              \
    \  return false\n            \n            if string.index(i) == string.size -\
    \ 20\n                return false\n            \n            if string.index(i)\
    \ == string.size - 21\n                return false\n            \n          \
    \  if string.index(i) == string.size - 22\n                return false\n    \
    \        \n            if string.index(i) == string.size - 23\n              \
    \  return false\n            \n            if string.index(i) == string.size -\
    \ 24\n                return false\n            \n            if string.index(i)\
    \ == string.size - 25\n                return false\n            \n          \
    \  if string.index(i) == string.size - 26\n                return false\n    \
    \        \n            if string.index(i) == string.size - 27\n              \
    \  return false\n            \n            if string.index(i) == string.size -\
    \ 28\n                return false\n            \n            if string.index(i)\
    \ == string.size - 29\n                return false\n            \n          \
    \  if string.index(i) == string.size - 30\n                return false\n    \
    \        \n            if string.index(i) == string.size - 31\n              \
    \  return false\n            \n            if string.index(i) == string.size -\
    \ 32\n                return false\n            \n            if string.index(i",
  "    \n    prime_number = true\n    for character in string\n        if character\
    \ == character % 2\n            prime_number = false\n            break\n    \
    \    end\n    end\n    return prime_number\nend\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"Hello\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"abcdcba\"\
    )\n</cell>\n<code language=julia-1.5>\nprime_length(\"kittens\")\n</cell>\n<code\
    \ language=julia-1.5>\nprime_length(\"orange\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns True if the string is a palindrome\
    \ or False otherwise\nExamples\n>>> palindrome(\"Hello\")\ntrue\n>>> palindrome(\"\
    abba\")\ntrue\n>>> palindrome(\"kittens\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\"\
    )\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n\
    >>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> palindrome(\"\
    racecar\")\nfalse\n>>> palindrome(\"racecar\")\nfalse\n>>> p", "    \n    prime_length::Bool\
    \ = true \n    \n    for i in string.split(\"\") do \n        if i == \"a\" ||\
    \ i == \"e\" || i == \"i\" || i == \"o\" || i == \"u\" || i == \"y\" then \n \
    \           prime_length = false \n            break \n        else \n       \
    \     prime_length = true \n            break \n    end \n    return prime_length\
    \ \nend \n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"abcdcba\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"kittens\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    orange\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns True if the string has all letters capitalized\nExamples\n>>> capitalized(\"\
    Hello\")\ntrue\n>>> capitalized(\"HELLO\")\ntrue\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLOWORLD\"\
    )\nfalse\n>>> capitalized(\"HELLOWORLD\")\nfalse\n>>> capitalized(\"HELLO"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
