name: HumanEval_98_count_upper
language: jl
prompt: "\"\"\"\n    Given a string s, count the number of uppercase vowels in even\
  \ indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1\n   \
  \ >>> count_upper(\"abcdefg\")\n    0\n    >>> count_upper(\"dBBE\")\n    0\n  \
  \  \"\"\"\nfunction count_upper(s::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
  aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
  ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
  \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
completions: ["    count = 0\n    for c in s\n        if isupper(c)\n            count\
    \ += 1\n            \n    return count\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of uppercase vowels in a string.", " \
    \   \n    count_upper = 0\n    \n    for i in 0 .. s.length-1\n        if s[i]\
    \ == 'A'\n            count_upper += 1\n        else if s[i] == 'a'\n        \
    \    count_upper += 1\n        else if s[i] == 'B'\n            count_upper +=\
    \ 1\n        else if s[i] == 'b'\n            count_upper += 1\n        else if\
    \ s[i] == 'C'\n            count_upper += 1\n        else if s[i] == 'c'\n   \
    \         count_upper += 1\n        else if s[i] == 'D'\n            count_upper\
    \ += 1\n        else if s[i] == 'd'\n            count_upper += 1\n        else\
    \ if s[i] == 'E'\n            count_upper += 1\n        else if s[i] == 'e'\n\
    \            count_upper += 1\n        else if s[i] == 'F'\n            count_upper\
    \ += 1\n        else if s[i] == 'f'\n            count_upper += 1\n        else\
    \ if s[i] == 'G'\n            count_upper += 1\n        else if s[i] == 'g'\n\
    \            count_upper += 1\n        else if s[i] == 'H'\n            count_upper\
    \ += 1\n        else if s[i] == 'h'\n            count_upper += 1\n        else\
    \ if s[i] == 'I'\n            count_upper += 1\n        else if s[i] == 'i'\n\
    \            count_upper += 1\n        else if s[i] == 'J'\n            count_upper\
    \ += 1\n        else if s[i] == 'j'\n            count_upper += 1\n        else\
    \ if s[i] == 'K'\n            count_upper += 1\n        else if s[i] == 'k'\n\
    \            count_upper += 1\n        else if s[i] == 'L'\n            count_upper\
    \ += 1\n        else if s[i] == 'l'\n            count_upper += 1\n        else\
    \ if s[i] == 'M'\n            count_upper += 1\n        else if s[i] == 'm'\n\
    \            count_upper += 1\n        else if s[i] == 'N'\n            count_upper\
    \ += 1\n        else if s[i] == 'n'\n            count_upper += 1\n        else\
    \ if s[i] == 'O'\n            count_upper += 1\n        else if s[i] == 'o'\n\
    \            count_upper += 1\n        else if s[i] == 'P'\n            count_upper\
    \ += 1\n        else if s[i] == 'p'\n            count_upper += 1\n        else\
    \ if s[i] == 'Q'\n            count_upper += 1\n        else if s[i] == 'q'\n\
    \            count_upper += 1\n        else if s[i] == 'R'\n            count_upper\
    \ += 1\n        else if s[i] == 'r'\n            count_upper += 1\n        else\
    \ if s[i] == 'S'\n            count_upper += 1\n        else if s[i] == 's'\n\
    \            count_upper += 1\n        else if s[i] == 'T'\n            count_upper\
    \ += 1\n        else if s[i] == 't'\n            count_upper += 1\n        else\
    \ if s[i] == 'U'\n            count_upper += 1\n        else if s[i] == 'u'\n\
    \            count_upper += 1\n        else if s[i] == 'V'\n", "    \n    if length(s)\
    \ <= 0\n        0\n    else\n        count_upper(tail(s))\n    end\nend", "  \
    \  count = 0\n    for c in s\n        if isupper(c)\n            count += 1\n\
    \    return count\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of uppercase\
    \ vowels in a string.", "    \n    \"\"\"\n    Count the number of uppercase vowels\
    \ in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n\
    \    1\n    >>> count_upper(\"abcdefg\")\n    0\n    >>> count_upper(\"dBBE\"\
    )\n    0\n    \"\"\"", "    \n    count = 0\n    for c in s\n        if isupper(c)\n\
    \            count += 1\n            \n    return count\n</cell>\n<cell>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<cell>\ncount_upper(\"abcdefg\")\n</cell>\n<cell>\ncount_upper(\"\
    dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that counts the number of\
    \ uppercase vowels in a string. \nGiven a string, count the number of uppercase\
    \ vowels in even indices. \nGiven a string, count the number of uppercase vowels\
    \ in odd indices. \nGiven a string, count the number of uppercase vowels in all\
    \ indices. \nGiven a string, count the number of uppercase vowels in all indices\
    \ and all indices. \nGiven a string, count the number of uppercase vowels in all\
    \ indices and all indices and all indices. \nGiven a string, count the number\
    \ of uppercase vowels in all indices and all indices and all indices and all indices.\
    \ \nGiven a string, count the number of uppercase vowels in all indices and all\
    \ indices and all indices and all indices and all indices. \nGiven a string, count\
    \ the number of uppercase vowels in all indices and all indices and all indices\
    \ and all indices and all indices and all indices. \nGiven a string, count the\
    \ number of uppercase vowels in all indices and all indices and all indices and\
    \ all indices and all indices and all indices and all indices and all indices.\
    \ \nGiven a string, count the number of uppercase vowels in all indices and all\
    \ indices and all indices and all indices and all indices and all indices and\
    \ all indices and all indices and all indices and all indices. \nGiven a string,\
    \ count the number of uppercase vowels in all indices and all indices and all\
    \ indices and all indices and all indices and all indices and all indices and\
    \ all indices and all indices and all indices and all indices and all indices.\
    \ \nGiven a string, count the number of uppercase vowels in all indices and all\
    \ indices and all indices and all indices and all indices and all indices and\
    \ all indices and all indices and all indices and all indices and all indices\
    \ and all indices and all indices and all indices and all indices. \nGiven a string,\
    \ count the number of uppercase vowels in all indices and all indices and all\
    \ indices and all indices and all indices and all indices and all indices and\
    \ all indices and all indices and all indices and all indices and all indices\
    \ and all indices and all indices and all indices and all indices. \nGiven a string,\
    \ count the number of uppercase vowels in all indices and all indices and all\
    \ indices and all indices and all indices and all indices and all indices and\
    \ all indices and all indices and all ", "    \n    if length(s)==0 \n       \
    \ 0\n    else\n        sum(take(s,2)==\"AEIOU\".map(_.toUpper))\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the number of uppercase vowels in each of the string's characters. For example:",
  "    if s == \"\" then 0 else count_upper(s[1..end-1]) + count_upper(s[end..end-1])\
    \ \nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in odd indices.\n    \n    For example:\n   \
    \ >>> count_upper(\"aBCdEf\")\n    1\n    >>> count_upper(\"abcdefg\")\n    0\n\
    \    >>> count_upper(\"dBBE\")\n    0\n    \"\"\"", "    \n    count = 0\n   \
    \ for c in s\n        if isupper(c)\n            count += 1\n            \n  \
    \  return count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.", "    count = 0\n    for c in s\n\
    \        if isupper(c)\n            count += 1\n            \n    return count",
  "    count = 0\n    for c in s\n        if isupper(c)\n            count += 1\n\
    \            \n    return count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of uppercase vowels in\
    \ each of the string's characters. For example:", "    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise: Write a function that counts the number of uppercase\
    \ vowels in a string.", "    \n    count_upper = 0\n    for c in s\n        if\
    \ isupper(c)\n            count_upper += 1\n            \n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.", "    if s.length ==\
    \ 0 \n        0\n    else if length(s) mod 2 == 0 \n        count_upper(s[1..end-1])\
    \ + count_upper(s[end..end-1]) \n    else \n        count_upper(s[1..end-1]) +\
    \ count_upper(s[end-1..end])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a string s, count the number of uppercase vowels in odd indices.\n\
    \    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1\n    >>> count_upper(\"\
    abcdefg\")\n    0\n    >>> count_upper(\"dBBE\")\n    0\n    \"\"\"", "    count\
    \ = 0\n    for c in s\n        if isupper(c)\n            count += 1\n       \
    \     \n    return count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of uppercase vowels in a string. \nGiven\
    \ a string s, count the number of uppercase vowels in even indices.", "    if\
    \ s.length == 0 \n        0\n    else \n        if length(s) mod 2 != 0 \n   \
    \         0\n        else \n            if s[end-1] == 'A' || s[end-1] == 'a'\
    \ \n                1\n            else \n                0\n        end\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string s,\
    \ count the number of uppercase vowels in even indices.\n    \n    For example:\n\
    \    >>> count_upper(\"aBCdEf\")\n    1\n    >>> count_upper(\"abcdefg\")\n  \
    \  0\n    >>> count_upper(\"dBBE\")\n    0\n    \"\"\"", "    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of uppercase vowels in a string. Test it on some strings. What happens\
    \ when you run it on strings with no uppercase vowels?", "    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n    return count\nend\n\
    </cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of uppercase\
    \ vowels in a string.", "    count = 0\n    for c in s\n        if isupper(c)\n\
    \            count += 1\n            \n    return count\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of uppercase letters in a\
    \ string.", "    if s == \"\" then 0 else count_upper(tail(s))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
