language: jl
name: HumanEval_101_words_string
results:
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \" \")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptc_j_52y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmptc_j_52y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptc_j_52y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc_j_52y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptc_j_52y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptc_j_52y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc_j_52y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptc_j_52y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptc_j_52y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc_j_52y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptc_j_52y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\",\")\n    words_string=split(s,\" \")\n \
    \   return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefzc_yho.jl:17\nin expression starting at\
    \ /tmp/tmpefzc_yho.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\",\")\n    return words_string\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7loxbic.jl:16\nin expression starting at\
    \ /tmp/tmpj7loxbic.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplvre9s42.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmplvre9s42.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvre9s42.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvre9s42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplvre9s42.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvre9s42.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvre9s42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplvre9s42.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvre9s42.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvre9s42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplvre9s42.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2a0ot5n1.jl:17\nin expression starting at\
    \ /tmp/tmp2a0ot5n1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprlasu79i.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprlasu79i.jl:23\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:24\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:25\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:26\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0m1l1hvr.jl:17\nin expression starting at\
    \ /tmp/tmp0m1l1hvr.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return split(words_string)\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ws4mv1c.jl:23\nin expression starting at\
    \ /tmp/tmp_ws4mv1c.jl:23\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2d79ww0b.jl:17\nin expression starting at\
    \ /tmp/tmp2d79ww0b.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.3>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihhtugr_.jl:17\nin expression starting at\
    \ /tmp/tmpihhtugr_.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s, \" \")\n   \
    \     words_string += word\n    end\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function count_words(s::String)::Int that counts the\
    \ number of words in a string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfyq0kw1f.jl:21\nin expression starting at\
    \ /tmp/tmpfyq0kw1f.jl:21\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\" \")\n    \n    return words_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe_4xk00u.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe_4xk00u.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_4xk00u.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_4xk00u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_4xk00u.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_4xk00u.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_4xk00u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_4xk00u.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe_4xk00u.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe_4xk00u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe_4xk00u.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822122
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu33qq26e.jl:17\nin expression starting at\
    \ /tmp/tmpu33qq26e.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.3>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3m_uxh5.jl:17\nin expression starting at\
    \ /tmp/tmpj3m_uxh5.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqgmzfz0.jl:21\nin expression starting at\
    \ /tmp/tmpbqgmzfz0.jl:21\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu33qq26e.jl:17\nin expression starting at\
    \ /tmp/tmpu33qq26e.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = []\n    \n    for word in split(s)\n        push!(words_string,\
    \ word)\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called words_string that splits a string into words and returns an array of\
    \ the words. \nThe function should take a string as input and return a vector\
    \ of strings as output.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnb1dq1tc.jl:21\nin expression starting at\
    \ /tmp/tmpnb1dq1tc.jl:21\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a string of words and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhyc4nnw.jl:17\nin expression starting at\
    \ /tmp/tmpxhyc4nnw.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjujdsic.jl:17\nin expression starting at\
    \ /tmp/tmpbjujdsic.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprlasu79i.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprlasu79i.jl:23\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:24\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:25\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:26\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\",\")\n    \n    return words_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_f1ldf6g.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp_f1ldf6g.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f1ldf6g.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f1ldf6g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f1ldf6g.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f1ldf6g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f1ldf6g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f1ldf6g.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f1ldf6g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f1ldf6g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f1ldf6g.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659822122
- exit_code: -1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqjt1yy0q.jl:26\n  Test threw
    exception\n  Expression: candidate("Hi, my name is John") == ["Hi", "my", "name",
    "is", "John"]\n  MethodError: no method matching +(::SubString{String}, ::String)\n  Closest
    candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpqjt1yy0q.jl:16\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpqjt1yy0q.jl:26 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpqjt1yy0q.jl:25\ntest set: Error During Test at
    /tmp/tmpqjt1yy0q.jl:27\n  Test threw exception\n  Expression: candidate("One,
    two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]\n  MethodError:
    no method matching +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpqjt1yy0q.jl:16\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpqjt1yy0q.jl:27 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpqjt1yy0q.jl:25\ntest set: Error During Test at
    /tmp/tmpqjt1yy0q.jl:28\n  Test threw exception\n  Expression: candidate("Hi, my
    name") == ["Hi", "my", "name"]\n  MethodError: no method matching +(::SubString{String},
    ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)
    at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpqjt1yy'
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s, \" \")\n   \
    \     words_string += word\n    end\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndp9dshx.jl:21\nin expression starting at\
    \ /tmp/tmpndp9dshx.jl:21\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.4>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsczm7zt7.jl:17\nin expression starting at\
    \ /tmp/tmpsczm7zt7.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnti6_lev.jl:17\nin expression starting at\
    \ /tmp/tmpnti6_lev.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: -1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s, \" \")\n   \
    \     words_string += word + \" \"\n    end\n    \n    words_string = split(words_string,\
    \ \" \")\n    \n    return words_string\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpbj49pq4p.jl:28\n  Test threw
    exception\n  Expression: candidate("Hi, my name is John") == ["Hi", "my", "name",
    "is", "John"]\n  MethodError: no method matching +(::SubString{String}, ::String)\n  Closest
    candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpbj49pq4p.jl:16\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpbj49pq4p.jl:28 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpbj49pq4p.jl:27\ntest set: Error During Test at
    /tmp/tmpbj49pq4p.jl:29\n  Test threw exception\n  Expression: candidate("One,
    two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]\n  MethodError:
    no method matching +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpbj49pq4p.jl:16\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpbj49pq4p.jl:29 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpbj49pq4p.jl:27\ntest set: Error During Test at
    /tmp/tmpbj49pq4p.jl:30\n  Test threw exception\n  Expression: candidate("Hi, my
    name") == ["Hi", "my", "name"]\n  MethodError: no method matching +(::SubString{String},
    ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)
    at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpbj49pq'
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    words_string = words_string[2:end]\n    words_string\
    \ = split(words_string)\n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a string with all the words in lower case. \n\
    For example, \n    words_string(\"Hi, my name is John\")\n    should return \"\
    hi, my name is john\"\nHint: Use a for loop to iterate over the characters in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14yzz6nx.jl:21\nin expression starting at\
    \ /tmp/tmp14yzz6nx.jl:21\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \" \")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptc_j_52y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmptc_j_52y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptc_j_52y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc_j_52y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptc_j_52y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptc_j_52y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc_j_52y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptc_j_52y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptc_j_52y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc_j_52y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptc_j_52y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvj6xrf2.jl:17\nin expression starting at\
    \ /tmp/tmpkvj6xrf2.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2_iqashb.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp2_iqashb.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_iqashb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_iqashb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2_iqashb.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_iqashb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_iqashb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2_iqashb.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_iqashb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_iqashb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2_iqashb.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659822122
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = []\n    \n    for word in split(s)\n        push!(words_string,\
    \ word)\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxm6ux3if.jl:21\nin expression starting at\
    \ /tmp/tmpxm6ux3if.jl:21\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpbncqoy.jl:17\nin expression starting at\
    \ /tmp/tmpqpbncqoy.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6m4qp36m.jl:17\nin expression starting at\
    \ /tmp/tmp6m4qp36m.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns a string with\
    \ all the words in lower case. \nFor example: \"Hi, my name is John\" -> \"hi,\
    \ my name is john\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dbbfyvg.jl:17\nin expression starting at\
    \ /tmp/tmp2dbbfyvg.jl:17\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprlasu79i.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprlasu79i.jl:23\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:24\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:25\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:26\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    words_string\nend\n</cell>\n<code language=julia-1.4>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gkm79jt.jl:17\nin expression starting at\
    \ /tmp/tmp6gkm79jt.jl:17\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_words(s::String)::Int that counts the number of words in a string. \n\
    For example, count_words(\"Hi, my name is John\") should return 5.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6i4g_pm6.jl:17\nin expression starting at\
    \ /tmp/tmp6i4g_pm6.jl:17\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\",\")\n    return words_string\nend\n</cell>\n\
    <code language=julia-1.3>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.3>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfs_wdtlk.jl:16\nin expression starting at\
    \ /tmp/tmpfs_wdtlk.jl:16\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqgmzfz0.jl:21\nin expression starting at\
    \ /tmp/tmpbqgmzfz0.jl:21\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = []\n    for word in split(s, \",\")\n        words_string\
    \ = [word | words_string]\n    end\n    words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    @test words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]\n@test words_string(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8kuhe33_.jl:19\nin expression starting at\
    \ /tmp/tmp8kuhe33_.jl:19\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8255e37d.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp8255e37d.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8255e37d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8255e37d.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8255e37d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching +(::String,\
    \ ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8255e37d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8255e37d.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8255e37d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no\
    \ method matching +(::String, ::SubString{String})\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n\
    \   [2] macro expansion\n     @ ~/.co"
  timestamp: 1659822126
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu4gwqgsi.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpu4gwqgsi.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s, \" \")\n   \
    \     words_string += word + \" \"\n    end\n    \n    words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp38y0bt.jl:21\nin expression starting at\
    \ /tmp/tmpyp38y0bt.jl:21\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzq031dgt.jl:17\nin expression starting at\
    \ /tmp/tmpzq031dgt.jl:17\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    return split(words_string)\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function count_words that counts the number of words in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0c4ghqha.jl:21\nin expression starting at\
    \ /tmp/tmp0c4ghqha.jl:21\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with all the words capitalized.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1rm4h3h.jl:16\nin expression starting at\
    \ /tmp/tmpg1rm4h3h.jl:16\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oslmjux.jl:17\nin expression starting at\
    \ /tmp/tmp7oslmjux.jl:17\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpbncqoy.jl:17\nin expression starting at\
    \ /tmp/tmpqpbncqoy.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    return words_string.split(\" \")\nend\n\
    </cell>\n<code language=julia-1.4>\nwords_string(\"Hi, my name is John\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpen2qdazr.jl:21\nin expression starting at\
    \ /tmp/tmpen2qdazr.jl:21\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\",\")\n    \n    return words_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_f1ldf6g.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp_f1ldf6g.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f1ldf6g.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f1ldf6g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f1ldf6g.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f1ldf6g.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f1ldf6g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f1ldf6g.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_f1ldf6g.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_f1ldf6g.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_f1ldf6g.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659822122
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj438ft36.jl:17\nin expression starting at\
    \ /tmp/tmpj438ft36.jl:17\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgz5xjcrf.jl:17\nin expression starting at\
    \ /tmp/tmpgz5xjcrf.jl:17\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxv3qws_j.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpxv3qws_j.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxv3qws_j.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxv3qws_j.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxv3qws_j.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxv3qws_j.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxv3qws_j.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxv3qws_j.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxv3qws_j.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxv3qws_j.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpxv3qws_j.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called count_words that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sakxngr.jl:21\nin expression starting at\
    \ /tmp/tmp1sakxngr.jl:21\n"
  stdout: ''
  timestamp: 1659822123
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    return words_string.split(\" \")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpsx4o6isl.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpsx4o6isl.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpsx4o6isl.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsx4o6isl.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsx4o6isl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsx4o6isl.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpsx4o6isl.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsx4o6isl.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsx4o6isl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpsx4o6isl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no\
    \ method matching +(::SubString{String}, ::String)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpsx4o6isl.jl:16\n\
    \   [2] macro expansion\n     @ ~/.co"
  timestamp: 1659822126
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0m1l1hvr.jl:17\nin expression starting at\
    \ /tmp/tmp0m1l1hvr.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8255e37d.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp8255e37d.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8255e37d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8255e37d.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8255e37d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching +(::String,\
    \ ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8255e37d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8255e37d.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8255e37d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no\
    \ method matching +(::String, ::SubString{String})\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n\
    \   [2] macro expansion\n     @ ~/.co"
  timestamp: 1659822126
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.4>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.4>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1n5c6x12.jl:17\nin expression starting at\
    \ /tmp/tmp1n5c6x12.jl:17\n"
  stdout: ''
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.4>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.4>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1n5c6x12.jl:17\nin expression starting at\
    \ /tmp/tmp1n5c6x12.jl:17\n"
  stdout: ''
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu4gwqgsi.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpu4gwqgsi.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.4>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.4>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfd9fgc3.jl:17\nin expression starting at\
    \ /tmp/tmpyfd9fgc3.jl:17\n"
  stdout: ''
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\",\")\n    words_string=split(s,\" \")\n \
    \   \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4famy9ik.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp4famy9ik.jl:23\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4famy9ik.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4famy9ik.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp4famy9ik.jl:24\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4famy9ik.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4famy9ik.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp4famy9ik.jl:25\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4famy9ik.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4famy9ik.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp4famy9ik.jl:26\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function called words_string2 that does the same thing\
    \ as words_string but takes in a string and returns a vector of strings. Use words_string2\
    \ to test your function.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8g0s3uzy.jl:16\nin expression starting at\
    \ /tmp/tmp8g0s3uzy.jl:16\n"
  stdout: ''
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu4gwqgsi.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpu4gwqgsi.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp137_rntb.jl:17\nin expression starting at\
    \ /tmp/tmp137_rntb.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqswd2cw.jl:17\nin expression starting at\
    \ /tmp/tmpyqswd2cw.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu33qq26e.jl:17\nin expression starting at\
    \ /tmp/tmpu33qq26e.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4s32qes.jl:17\nin expression starting at\
    \ /tmp/tmpw4s32qes.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu4gwqgsi.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpu4gwqgsi.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu4gwqgsi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu4gwqgsi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpu4gwqgsi.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659822124
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.3>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.3>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfznb_gb.jl:17\nin expression starting at\
    \ /tmp/tmpwfznb_gb.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.3>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhgiox8v.jl:17\nin expression starting at\
    \ /tmp/tmprhgiox8v.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns a string with all the words capitalized.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwdvdhi_.jl:17\nin expression starting at\
    \ /tmp/tmpxwdvdhi_.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplvre9s42.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmplvre9s42.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvre9s42.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvre9s42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplvre9s42.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvre9s42.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvre9s42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplvre9s42.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvre9s42.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvre9s42.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplvre9s42.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5gl2bhwk.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp5gl2bhwk.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5gl2bhwk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5gl2bhwk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5gl2bhwk.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Tes"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprlasu79i.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmprlasu79i.jl:23\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:24\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:25\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprlasu79i.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprlasu79i.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprlasu79i.jl:26\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8255e37d.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp8255e37d.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8255e37d.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8255e37d.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8255e37d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching +(::String,\
    \ ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8255e37d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8255e37d.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp8255e37d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no\
    \ method matching +(::String, ::SubString{String})\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp8255e37d.jl:16\n\
    \   [2] macro expansion\n     @ ~/.co"
  timestamp: 1659822126
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = []\n    \n    for word in split(s, \" \")\n     \
    \   words_string = [word | words_string]\n    end\n    \n    return words_string\n\
    end\n</cell>\n<code language=julia-1.5>\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzj1x_t2.jl:21\nin expression starting at\
    \ /tmp/tmprzj1x_t2.jl:21\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function count_words that takes in a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgxzz3hu.jl:17\nin expression starting at\
    \ /tmp/tmpkgxzz3hu.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string=split(s,\",\")\n    \n    return words_string\nend\n\
    </cell>\n<code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3igg4g4.jl:17\nin expression starting at\
    \ /tmp/tmpx3igg4g4.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_words that counts the number of words in a string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6r321yhj.jl:18\nin expression starting at\
    \ /tmp/tmp6r321yhj.jl:18\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a string with all the words in lower case.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wydjq31.jl:17\nin expression starting at\
    \ /tmp/tmp4wydjq31.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called words_string2 that does the same thing as words_string but returns a\
    \ vector of strings. \nThe function should take a string of words separated by\
    \ commas or spaces and return an array of strings.\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzmha3cz.jl:17\nin expression starting at\
    \ /tmp/tmpbzmha3cz.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe88gq20y.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpe88gq20y.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe88gq20y.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe88gq20y.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpe88gq20y.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    words_string = split(s, \" \"\
    )\n    words_string\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0wheowd.jl:17\nin expression starting at\
    \ /tmp/tmpx0wheowd.jl:17\n"
  stdout: ''
  timestamp: 1659822125
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu33qq26e.jl:17\nin expression starting at\
    \ /tmp/tmpu33qq26e.jl:17\n"
  stdout: ''
  timestamp: 1659822121
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvqutcju6.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpvqutcju6.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvqutcju6.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvqutcju6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvqutcju6.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n   \
    \     words_string += word\n    end\n    \n    return words_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpv84ctxom.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpv84ctxom.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpv84ctxom.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv84ctxom.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv84ctxom.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpv84ctxom.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching +(::String,\
    \ ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpv84ctxom.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv84ctxom.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv84ctxom.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpv84ctxom.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no\
    \ method matching +(::String, ::SubString{String})\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpv84ctxom.jl:16\n\
    \   [2] macro expansion\n     @ ~/.co"
  timestamp: 1659822128
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n\
    <code language=julia-1.4>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.4>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of words in a string.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5b6boi22.jl:17\nin expression starting at\
    \ /tmp/tmp5b6boi22.jl:17\n"
  stdout: ''
  timestamp: 1659822126
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_7pmkvr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_7pmkvr.jl:1\n\
    in expression starting at /tmp/tmpk_7pmkvr.jl:1\n"
  stdout: ''
