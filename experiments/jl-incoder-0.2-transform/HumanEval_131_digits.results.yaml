language: jl
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        1\n    else if n==1 \n        1\n    else if n%2==0\
    \ \n        digits(n/2)\n    else \n        digits(n/2)*3\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\ndigits(4)\n\
    </cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the product of the even digits in a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyb2a7qh.jl:14\nin expression starting at\
    \ /tmp/tmphyb2a7qh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        error(\"n must be positive\")\n    else if n==1\
    \ \n        1\n    else \n        digits(n-1)*(n % 2)*digits(n//2)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the digits of an\
    \ integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: Look at the function\
    \ digits(n) and think about what it does.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpnlhklh.jl:14\nin expression starting at\
    \ /tmp/tmpmpnlhklh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else\n        if n\
    \ % 2 == 0 \n            digits(n / 2)\n        else\n            digits(n / 2)\
    \ * 3\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\ndigits(1)\n\
    </cell>\n<code language=julia-1.0>\ndigits(4)\n</cell>\n<code language=julia-1.0>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lhhpbl5.jl:22\nin expression starting at\
    \ /tmp/tmp3lhhpbl5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0\n    if n<0 then return\
    \ 0\n    if n<10 then return n\n    digits(n/10)\n    return n*(n%10*2)\nend\n\
    </cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the sum of all the digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptia4hryp.jl:12\nin expression starting at /tmp/tmptia4hryp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else \n     \
    \   return digits(n//10)*10 + n % 10\nend\n</cell>\n<code language=julia-1.1>\n\
    digits(1)\n</cell>\n<code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(12345) = 1 + 2 + 3 + 4 + 5\
    \ = 15.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnshp76sp.jl:17\nin expression starting at\
    \ /tmp/tmpnshp76sp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10+n%10\n\
    end\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<code language=julia-1.3>\n\
    digits(235235)\n</cell>\n<code language=julia-1.3>\ndigits(235235235)\n</cell>\n\
    <code language=julia-1.3>\ndigits(235235235235)\n</cell>\n<code language=julia-1.3>\n\
    digits(235235235235235)\n</cell>\n<code language=julia-1.3>\ndigits(235235235235235235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\
    \n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54)\
    \ == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpek42u76k.jl:17\nin expression starting at\
    \ /tmp/tmpek42u76k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n-1)*(n%2)*(n%2)\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a tags=recursion,julia,algorithm |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1148qru6.jl:18\nin expression starting at\
    \ /tmp/tmp1148qru6.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    else\n        digits(n/10)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.4>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5)\
    \ == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5ekb_sa.jl:17\nin expression starting at\
    \ /tmp/tmp_5ekb_sa.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)\
    \ * 10 + n % 10\nend\n</cell>\n<code language=julia-1.1>\ndigits(1)\n</cell>\n\
    <code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use\
    \ the function digits to solve this exercise.\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz0qw1v_h.jl:12\nin expression starting at /tmp/tmpz0qw1v_h.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    else return digits(n/10)*10\
    \ + n % 10\nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code\
    \ language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint: You can use\
    \ the function digits to solve this exercise.\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6ausqlcc.jl:12\nin expression starting at /tmp/tmp6ausqlcc.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        error(\"n must be positive\")\n    else if n==1\
    \ \n        return 1\n    else if n==2 \n        return 2\n    else if n==3 \n\
    \        return 3\n    else if n==4 \n        return 6\n    else if n==5 \n  \
    \      return 10\n    else if n==6 \n        return 15\n    else if n==7 \n  \
    \      return 21\n    else if n==8 \n        return 28\n    else if n==9 \n  \
    \      return 36\n    else if n==10 \n        return 45\n    else if n==11 \n\
    \        return 55\n    else if n==12 \n        return 66\n    else if n==13 \n\
    \        return 78\n    else if n==14 \n        return 90\n    else if n==15 \n\
    \        return 110\n    else if n==16 \n        return 130\n    else if n==17\
    \ \n        return 150\n    else if n==18 \n        return 170\n    else if n==19\
    \ \n        return 190\n    else if n==20 \n        return 200\n    else if n==21\
    \ \n        return 220\n    else if n==22 \n        return 240\n    else if n==23\
    \ \n        return 260\n    else if n==24 \n        return 280\n    else if n==25\
    \ \n        return 300\n    else if n==26 \n        return 320\n    else if n==27\
    \ \n        return 340\n    else if n==28 \n        return 360\n    else if n==29\
    \ \n        return 380\n    else if n==30 \n        return 400\n    else if n==31\
    \ \n        return 420\n    else if n==32 \n        return 440\n    else if n==33\
    \ \n        return 460\n    else if n==34 \n        return 480\n    else if n==35\
    \ \n        return 500\n    else if n==36 \n        return 520\n    else if n==37\
    \ \n        return 540\n    else if n==38 \n        return 560\n    else if n==39\
    \ \n        return 580\n    else if n==40 \n        return 600\n    else if n==41\
    \ \n        return 620\n    else if n==42 \n        return 640\n    else if n==43\
    \ \n        return 660\n    else if n==44 \n        return 680\n    else if n==45\
    \ \n        return 700\n    else if n==46 \n        return 720\n    else if n==47\
    \ \n        return 740\n    else \nusing Test\n\n@testset begin\n\ncandidate =\
    \ digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpk9_7ek.jl:14\nin expression starting at\
    \ /tmp/tmpgpk9_7ek.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    digits(n/10)\n    digits(n%10)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of its argument.\
    \ For example:\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\n>>> digits(-12345)\n-12\n>>> digits(0)\n\
    0\n>>> digits(-0)\n-0\n>>> digits(12345)\n12\nusing Test\n\n@testset begin\n\n\
    candidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppy_e823o.jl:12\nin expression starting at /tmp/tmppy_e823o.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        0\n    elseif n==1 \n      \
    \  1\n    elseif n%2==0 \n        digits(n/2)\n    else\n        digits(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\ndigits(1)\n</cell>\n<code language=julia-1.5>\n\
    digits(4)\n</cell>\n<code language=julia-1.5>\ndigits(235)\n</cell>\n<text>\n\
    Exercise\nWrite a function called digits_sum that takes a positive integer n and\
    \ returns the sum of the odd digits of n. For example:\n>>> digits_sum(1234)\n\
    12\n>>> digits_sum(12345)\n13\n>>> digits_sum(1234567)\n14\n>>> digits_sum(123456789)\n\
    15\n>>> digits_sum(1234567890)\n16\n>>> digits_sum(12345678901)\n17\n>>> digits_sum(123456789012)\n\
    18\n>>> digits_sum(1234567890123)\n19\n>>> digits_sum(12345678901234)\n20\n>>>\
    \ digits_sum(123456789012345)\n21\n>>> digits_sum(1234567890123456)\n22\n>>> digits_sum(12345678901234567)\n\
    23\n>>> digits_sum(123456789012345678)\n24\n>>> digits_sum(1234567890123456788)\n\
    25\n>>> digits_sum(12345678901234567889)\n26\n>>> digits_sum(123456789012345678899)\n\
    27\n>>> digits_sum(1234567890123456788999)\n28\n>>> digits_sum(12345678901234567889999)\n\
    29\n>>> digits_sum(123456789012345678899999)\n30\n>>> digits_sum(1234567890123456788999999)\n\
    31\n>>> digits_sum(12345678901234567889999999)\n32\n>>> digits_sum(1234567890123456788999999999)\n\
    33\n>>> digits_sum(123456789012345678899999999999)\n34\n>>> digits_sum(12345678901234567889999999999999)\n\
    35\n>>> digits_sum(123456789012345678899999999999998)\n36\n>>> digits_sum(1234567890123456788999999999999987)\n\
    37\n>>> digits_sum(12345678901234567889999999999999876)\n38\n>>> digits_sum(123456789012345678899999999999998765)\n\
    39\n>>> digits_sum(1234567890123456788999999999999987654)\n40\n>>> digits_sum(12345678901234567889999999999999876543)\n\
    41\n>>> digits_sum(123456789012345\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnstofq1p.jl:21\nin expression starting at\
    \ /tmp/tmpnstofq1p.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    elseif n % 2 == 0 \n\
    \        digits(n / 2)\n    else\n        digits(n / 2) * 3\nend\n</cell>\n<code\
    \ language=julia-1.4>\ndigits(1)\n</cell>\n<code language=julia-1.4>\ndigits(4)\n\
    </cell>\n<code language=julia-1.4>\ndigits(235)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(12345) = 1 + 2 + 3 + 4 = 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqdpglofk.jl:19\nin expression starting at\
    \ /tmp/tmpqdpglofk.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        return 0 \n    else if n==0 \n\
    \        return 1 \n    else if n%2==0 \n        return digits(n/2) \n    else\
    \ \n        return digits(n/2)*3\nend\n</cell>\n<code language=julia-1.4>\ndigits(1)\n\
    </cell>\n<code language=julia-1.4>\ndigits(4)\n</cell>\n<code language=julia-1.4>\n\
    digits(235)\n</cell>\n<code language=julia-1.4>\ndigits(123456789)\n</cell>\n\
    <text>\nExercise 3\nWrite a function digits_sum(n) that returns the sum of the\
    \ digits of the number n.\nFor example, digits_sum(1234) should return 0 + 1 +\
    \ 2 + 3 + 4 = 10.\nWrite a second function digits_product(n) that returns the\
    \ product of the digits of the number n.\nFor example, digits_product(1234) should\
    \ return 1 * 2 * 3 * 4 = 24.\nWrite a third function digits_quotient(n) that returns\
    \ the quotient of the digits of the number n.\nFor example, digits_quotient(1234)\
    \ should return 12 / 3 = 3.\nWrite a fourth function digits_remainder(n) that\
    \ returns the remainder of the digits of the number n.\nFor example, digits_remainder(1234)\
    \ should return 12 % 3 = 2.\nWrite a fifth function digits_quotient_remainder(n)\
    \ that returns the quotient and remainder of the digits of the number n.\nFor\
    \ example, digits_quotient_remainder(1234) should return (12, 3) % 3 = ((12, 3),\
    \ 2).\nWrite a sixth function digits_quotient_quotient(n) that returns the quotient\
    \ and quotient of the digits of the number n.\nFor example, digits_quotient_quotient(1234)\
    \ should return ((12, 3), 2) % (3, 2) = ((3, 2), 1).\nWrite a seventh function\
    \ digits_quotient_quotient_remainder(n) that returns the quotient and quotient\
    \ and remainder of the digits of the number n.\nFor example, digits_quotient_quotient_remainder(1234)\
    \ should return ((12, 3), 2, 1) % (3, 2, 1) = ((3, 2), 1, 1).\nWrite a eight function\
    \ digits_quotient_quotient_quotient(n) that returns the quotient and quotient\
    \ and quotient of the digits of the number n.\nFor example, digits_quotient_quotient_quotient(1234)\
    \ should return ((12, 3), 2, 1, 1) % (3, 2, 1) = ((3, 2), 1, 1, 1).\nWrite a ninth\
    \ function digits_quotient_quotient_quotient_remainder(n) that returns the quotient\
    \ and quotient and quotient and remainder of the digits of the number n.\nFor\
    \ example, digits_quotient_quotient_quotient_remainder(1234) should return ((12,\
    \ 3), 2, 1, 1) % (3, 2, 1) = ((3, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnuhj4y2.jl:14\nin expression starting at\
    \ /tmp/tmpsnuhj4y2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<10 then return n\n    if n%2==0 then return\
    \ n*digits(n/2)\n    else return n*digits(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ use the digits() function you wrote earlier.\nusing Test\n\n@testset begin\n\
    \ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\
    \t@test(candidate(120) == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765)\
    \ == 315)\n\t@test(candidate(5576543) == 2625)\n\t@test(candidate(2468) == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphbth3bey.jl:12\nin expression starting at /tmp/tmphbth3bey.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 \n        return 0 \n    else if n%2==0\
    \ \n        return digits(n/2) \n    else \n        return digits(n-1)*10 + n%2\
    \ \nend\n</cell>\n<code language=julia-1.3>\ndigits(1)\n</cell>\n<code language=julia-1.3>\n\
    digits(4)\n</cell>\n<code language=julia-1.3>\ndigits(235)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function called digits_sum that returns the sum of all the\
    \ odd digits in an integer.\nFor example, digits_sum(123) = 1 + 3 + 5 = 9\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\t\
    @test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxs2ggmg.jl:14\nin expression starting at\
    \ /tmp/tmpcxs2ggmg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n==0 then return 0 \n    else if n%2==0 then\
    \ return n*digits(n/2) \n    else return n*digits(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    digits(1)\n</cell>\n<code language=julia-1.3>\ndigits(4)\n</cell>\n<code language=julia-1.3>\n\
    digits(235)\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the even digits in a given number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digits;\n\t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp607skkso.jl:12\nin expression starting at /tmp/tmp607skkso.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n<0 \n        error(\"n must be positive\"\
    )\n    else if n==0 \n        0\n    else if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n<10 \n        digits(n/10)*10+(n%10)\n    else if\
    \ n<100 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100\n    else\
    \ if n<1000 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100+(n%10000)/1000\n\
    \    else if n<10000 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100+(n%10000)/1000+(n%100000)/10000\n\
    \    else if n<100000 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100+(n%10000)/1000+(n%100000)/10000+(n%1000000)/100000\n\
    \    else if n<1000000 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100+(n%10000)/1000+(n%100000)/10000+(n%1000000)/100000+(n%10000000)/1000000\n\
    \    else if n<10000000 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100+(n%10000)/1000+(n%100000)/10000+(n%1000000)/100000+(n%10000000)/1000000+(n%100000000)/10000000\n\
    \    else if n<1000000000 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100+(n%10000)/1000+(n%100000)/10000+(n%1000000)/100000+(n%10000000)/1000000+(n%100000000)/10000000+(n%1000000000)/100000000\n\
    \    else if n<10000000000 \n        digits(n/10)*10+(n%10)*10+(n%100)/10+(n%1000)/100+(n%10000)/1000+(n%100000)/10000+(n%1000000)/100000+(n%10000000)/1000000+(n%100000000)/10000000+(n%100000000\n\
    using Test\n\n@testset begin\n\ncandidate = digits;\n\t@test(candidate(5) == 5)\n\
    \t@test(candidate(54) == 5)\n\t@test(candidate(120) == 1)\n\t@test(candidate(5014)\
    \ == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543) == 2625)\n\
    \t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9x67tua.jl:14\nin expression starting at\
    \ /tmp/tmpa9x67tua.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer n, return the product of the odd digits.\n\
    \    Return 0 if all digits are even.\n    For example:\n    >>> digits(1)\n \
    \   1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\nfunction\
    \ digits(n::Int64)::Int64 \n    if n == 0 \n        0\n    else\n        n % 2\
    \ == 0 ? n * digits(n / 2) : digits(n / 2)\nend\n</cell>\n<code language=julia-1.1>\n\
    digits(1)\n</cell>\n<code language=julia-1.1>\ndigits(4)\n</cell>\n<code language=julia-1.1>\n\
    digits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6\nHint:\
    \ Use a recursive function.\nusing Test\n\n@testset begin\n\ncandidate = digits;\n\
    \t@test(candidate(5) == 5)\n\t@test(candidate(54) == 5)\n\t@test(candidate(120)\
    \ == 1)\n\t@test(candidate(5014) == 5)\n\t@test(candidate(98765) == 315)\n\t@test(candidate(5576543)\
    \ == 2625)\n\t@test(candidate(2468) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2ias6z_.jl:17\nin expression starting at\
    \ /tmp/tmpm2ias6z_.jl:17\n"
  stdout: ''
