name: HumanEval_142_sum_squares
language: jl
prompt: "\"\"\"\"\n    This function will take a list of integers. For all entries\
  \ in the list, the function shall square the integer entry if its index is a \n\
  \    multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n    change the entries in the\
  \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
  \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
  \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
  \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
  \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
  \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t\
  @test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9,\
  \ -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
  \ == -1448)\nend\n"
completions: ["    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the entries in\
    \ the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n \
    \   []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and will return the sum of the squares of the entries in the list. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n      \
    \  if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum\
    \ += i^3\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the sum of the integers squared. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i\n        elseif i%4 == 0\n            sum += i*i\n     \
    \   else\n            sum += i*i*i\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a |>\n<code>", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a new list with the entries that are divisible\
    \ by 3 removed.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n       \
    \ else\n            sum += i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum +=\
    \ i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</code>\n<|/ a tags=julia,list |>\n<| a tags=julia,list |>\n<code>",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are divisible by 3. The function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 4 or 5.", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum += x * x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n       \
    \ else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and return a new list where all\
    \ entries are multiplied by 2 except for the entries whose indexes are a multiple\
    \ of 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n\
    \            sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n \
    \       else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of all entries in the list. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum +=\
    \ i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns a list\
    \ of all integers that are divisible by 3 or 4. The function shall not change\
    \ the list passed as argument. \nThe function shall not change the order of the\
    \ elements in the list. \nThe function shall not change the list passed as argument\
    \ if the list passed as argument contains negative numbers.", "    sum = 0\n \
    \   for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif\
    \ i%4 == 0\n            sum += i^3\n        else\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return the sum of all entries in the list that are a multiple of 3. The\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3. \nThe function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>> sum_squares(lst)\n\
    25\n</text>\n<code language=julia-1.5>", "    sum = 0\n    for i in lst\n    \
    \    if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n          \
    \  sum += i^3\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 7: Write a function that will take a list of integers and return the\
    \ sum of the squares of the integers in the list. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n \
    \       else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the product of\
    \ all entries in the list. \nThe function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and will return the sum of the squares of the entries\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4\
    \ == 0\n            sum += i*i*i\n        else\n            sum += i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ divisible by 3 or 4. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries.", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum *= x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the entries in the list that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4 or 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum +=\
    \ i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of integers whose entries are all positive.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 4. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 5. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 6. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 7. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 8. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 9. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 10. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 11. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 12. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 13. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 14. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 15. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 16. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 17. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 18. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 19. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 20", "    sum = 0\n    for i in lst\n        if i%3 == 0\n     \
    \       sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n      \
    \  else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and return a list of all entries\
    \ that are divisible by 3. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n   \
    \     elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return the sum of the squares of the integers in\
    \ the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n \
    \   []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose square is less than or equal to 100.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x * x\n   \
    \     elseif x % 4 == 0\n            sum += x * x\n        else\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> sum_squares(lst)\n\
    \    25\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a new\
    \ list where all entries are multiplied by 2 except for the entries whose index\
    \ is \na multiple of 3. For example, if the list contains [1,2,3,4,5,6,7,8,9,10],\
    \ the function should return [2,4,6,8,10,12,14,16,18,20]. \nThe function shall\
    \ not change the original list.", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n            sum\
    \ = sum + i*i*i\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\
    \ || x % 4 == 0\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ integers whose square is less than or equal to 100. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 10, 11, 12, 13]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-5, -10, -15, -20, -25, -35, -45]\n    \"\"\"", "    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n\
    \            sum += i^3\n        else\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\
    \ || x % 4 == 0\n            sum += x\n        else\n            sum *= x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and will return the sum of the integers\
    \ squared if they are a multiple of 3 and will return the sum of the integers\
    \ cube if they are a multiple of 4. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n   \
    \ for x in lst\n        if x % 3 == 0\n            sum += x\n        elseif x\
    \ % 4 == 0\n            sum += x * x\n        else\n            sum += x * x *\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and will return the sum of the squares of the integers in\
    \ the list. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not ", "    sum = 0\n    for i in lst\n      \
    \  if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum\
    \ += i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will take a list\
    \ of integers and will return the sum of all entries in the list that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 5. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 6. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 7. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 8. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 9. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 10. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 11. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 12. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 13. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 14. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 15. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 16. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 17. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 18. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 19. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 20. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the ",
  "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and a number as input. The function\
    \ shall then return the number of entries in the list whose index is less than\
    \ or equal to that number. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> num = 2\n\
    \    >>> num\n    2\n    >>> num\n    2\n    \"\"\"", "    sum = 0\n    for i\
    \ in lst\n        if i%3==0 || i%4==0\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list if the integer is\
    \ a multiple of 3 and \n    raised to the power of 2 if the integer is a multiple\
    \ of 4. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3 or 4.", "    sum = 0\n    for x in lst\n        if x % 3\
    \ == 0 || x % 4 == 0\n            sum += x\n        else\n            sum *= x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of integers whose entries are all positive.",
  "    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum +=\
    \ x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n     \
    \       sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n    \
    \        sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the integers squared. \n    \n   \
    \ Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n  \
    \  [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum +=\
    \ i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that will take a list\
    \ of integers and return a new list where all entries are squared except for those\
    \ entries whose indexes are a multiple of 3 or 4.", "    sum = 0\n    for x in\
    \ lst\n        if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n\
    \            sum += x\n        else\n            sum += x * x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 7\nWrite a function that will take a list of integers\
    \ and return a new list with all the even entries removed. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2, 4, 6]\n    >>> lst\n\
    \    [2, 4, 6]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and will return the number of entries in the list that are a multiple of 3.\
    \ The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the number of entries in the\
    \ list that are a multiple of 3. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3. \nThe function shall then return\
    \ the number of entries in the list that are a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are a multiple\
    \ of 3. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the number of entries\
    \ in the list that are a multiple of 3. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the number of entries in the list that are a multiple of 3. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the number of entries in the list that are\
    \ a multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are a multiple of 3. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the number of entries in the list that are a multiple of 3.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the number of entries in the\
    \ list that are a multiple of 3. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3. \nThe function shall then return\
    \ the number of entries in the list that are a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are a multiple\
    \ of 3. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the number of entries\
    \ in the list that are a multiple of 3. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the number of entries in the list that are a multiple of 3. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the number of entries in the list that are\
    \ a multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are a multiple of 3. \nThe function shall not ",
  "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of all entries in the list that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4 or 5.", "    sum = 0\n    for x in lst\n        if x % 3 ==\
    \ 0 && x % 4 == 0\n            sum += x\n        else\n            sum += x*x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and return a new list that contains the squared entries of\
    \ the original list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, ", "    sum = 0\n    for x in lst\n        if x % 3 == 0 &&\
    \ x % 4 == 0\n            sum += x\n        else\n            sum -= x\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 7: Write a function that will take a list of integers\
    \ and return a list of all odd integers in the list. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n    [1, 3, 5]\n    >>> lst\n    []\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i^2\n        elseif i%4 == 0\n            sum += i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and return a list of all integers\
    \ that are not divisible by 3. The function shall not change the entries in the\
    \ list whose indexes are not divisible by 3. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not divisible by 3 or 4. \nThe function shall then return\
    \ the sum of all entries. \nThe function shall not ", "    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0\n            sum += x\n        elseif x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum += x * x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n   \
    \ for e in lst\n        if mod(e, 3) == 0\n            sum += e^2\n        elseif\
    \ mod(e, 4) == 0\n            sum += e^3\n        else\n            sum += e^4\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and return a list of integers whose\
    \ entries are all positive.", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27825818)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to write a function which\
    \ would do what he wants. He also asked for help on how to write this function.\
    \ I believe this answers the question perfectly. He also provided an example of\
    \ how he would call this function. I believe this answers the question perfectly.\
    \ He also provided an example of how he would call this function. I believe this\
    \ answers the question perfectly. He also provided an example of how he would\
    \ call this function. I believe this answers the question perfectly. He also provided\
    \ an example of how he would call this function. I believe this answers the question\
    \ perfectly.\n<|/ c |>\n<| c |>\nI believe this answers the question perfectly.\
    \ He also provided an example of how he would call this function. I believe this\
    \ answers the question perfectly. He also provided an example of how he would\
    \ call this function. I believe this answers the question perfectly. He also provided\
    \ an example of how he would call this function. I believe this answers the question\
    \ perfectly. He also provided an example of how he would call this function. I\
    \ believe this answers the question perfectly.\n<|/ c |>\n<| c |>\nI believe this\
    \ answers the question perfectly. He also provided an example of how he would\
    \ call this function. I believe this answers the question perfectly. He also provided\
    \ an example of how he would call this function. I believe this answers the question\
    \ perfectly. He also provided an example of how he would call this function. I\
    \ believe this answers the question perfectly. He also provided an example of\
    \ how he would call this function. I believe this answers the question perfectly.\n\
    <|/ c |>\n<| c |>\nI believe this answers the question perfectly. He also provided\
    \ an example of how he would call this function. I believe this answers the question\
    \ perfectly. He also provided an example of how he would call this function. I\
    \ believe this answers the question perfectly. H", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the product of the entries in the list. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n          \
    \  sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of all entries in the list that are a multiple of 3. The function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i\n\
    \        elseif i%4 == 0\n            sum = sum + i*i\n        else\n        \
    \    sum = sum + i*i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ even numbers. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5, 4]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x\
    \ % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n            sum +=\
    \ x * x\n        else\n            sum += x * x * x\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and will return the sum of all entries in the list that are\
    \ a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the sum of\
    \ all entries. \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5,\
    \ 2, -1, -5]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>>\
    \ lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n>>> lst\n[4, 2, 3]\n\
    >>> lst\n[4, 2, 3]\n>>> lst\n", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum += i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of all entries in the list that are a multiple of 3. The function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 5. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 6. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 7. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 8. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 9. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 10. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 11. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 12. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 13. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 14. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 15. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 16. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 17. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 18. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 19. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 20. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose ",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a list of integers and return a new list with\
    \ the integers squared. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n  \
    \  >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1,\
    \ 2, 3, -1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n    \
    \    if i%3==0 || i%4==0\n            sum += i\n        else\n            sum\
    \ += i*i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and a number as input. The function will then return a list\
    \ of integers whose entries are all multiples of that number. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3]\n    >>> lst\n    [-1,\
    \ -5, 2, -1, -5, -4, -3, -2, -1]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, 0, 1, 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1,\
    \ 2]\n    >>> lst\n    [-1, -5, 2, -1, -5, -4, -3, -2, -1, 0, 1, 2]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, -", "    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        else\n            sum *= i\n      \
    \  end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of integers and returns the product of all entries in the\
    \ list. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a list of integers and\
    \ returns the sum of the integers in the list that are a multiple of 3. The function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of 3. \nThe function\
    \ shall not change the list passed as argument. \nThe function shall then return\
    \ the sum of the integers in the list that are a multiple of ", "    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers except for those\
    \ that are multiples of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a list of integers and\
    \ returns the sum of the integers squared. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4.", "    sum =\
    \ 0\n    for x in lst\n        if x % 3 == 0\n            sum += x\n        elseif\
    \ x % 4 == 0\n            sum += x\n        else\n            sum *= x\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that will take a list of integers and return a list of all entries that are\
    \ divisible by 3 or 4.", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n\
    \            sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n \
    \       else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose squares are less than or equal to 100.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, -5, 6, -7, 8, -9, 10]\n  \
    \  >>> lst\n    [-5, 6, -7, 8, -9, 10]\n    >>> lst\n    [-5, 6, -7, 8, -9, 10,\
    \ -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n       \
    \ else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers where the integers in the original vector are replaced\
    \ by their squares and cubes.", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return the sum of\
    \ the squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n   \
    \ for i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4\
    \ == 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will take a list of integers\
    \ and return a list of all integers that are divisible by 3 or 4.", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and will return the sum of all entries\
    \ in the list that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 4. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum = sum + i*i\n        elseif i%4 == 0\n            sum = sum +\
    \ i*i*i\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the sum of all entries in the list that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 4. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 5. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 6. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 7. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 8. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 9. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 10. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 11. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 12. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 13. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 14. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 15. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 16. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 17. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 18. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 19. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 20. The function\
    \ shall then return the sum of all entries. \nThe function ", "    sum = 0\n \
    \   for x in lst\n        if x % 3 == 0\n            sum += x^2\n        elseif\
    \ x % 4 == 0\n            sum += x^3\n        else\n            sum += x\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and return a new list where all entries\
    \ are multiplied by 2 except for the entries whose indexes are a multiple of 3\
    \ or 4. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and will return the sum\
    \ of the squares of the entries in the list if the entry is \na multiple of 3\
    \ and will return the sum of the cubes of the entries in the list if the entry\
    \ is a multiple of 4 and not a multiple of 3. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.", "    sum\
    \ = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n       \
    \ elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are a multiple of 3 or 4 and not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are a\
    \ multiple of 3 or 4 and not a multiple of 3. The function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and not a multiple of 3. The function\
    \ shall then return the sum of all entrie", "    sum = 0\n    for i in lst\n \
    \       if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n       \
    \     sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum *= x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<code language=julia-1.5>", "    sum = 0\n    for i in lst\n        if\
    \ i%3==0 || i%4==0\n            sum += i\n        else\n            sum *= i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and return the number of entries in the list that are not\
    \ a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3.", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the product of the entries in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n     \
    \   if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n           \
    \ sum += i*i*i\n        else\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i\n        elseif i%4 == 0\n            sum += i*i\n     \
    \   else\n            sum += i*i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that will take a list of integers\
    \ and will return the sum of the squares of the entries in the list. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n      \
    \  if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n         \
    \   sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n  \
    \  [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum +=\
    \ i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the entries in the list that\
    \ are a multiple of 3. The function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. The function shall then return the sum of all\
    \ entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n  \
    \  []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i\n        elseif i%4 == 0\n            sum += i*i\n     \
    \   else\n            sum += i*i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of all entries in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum\
    \ + i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 7: Write a function that takes a list of\
    \ integers and returns the sum of the squares of all entries in the list. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 5. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 6. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 7. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 8. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 9. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 10. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 11. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 12. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 13. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 14. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 15. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 16. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 17. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 18. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 19. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 20. The function shall then return the sum of all entries. \n\
    The function shall not ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n   \
    \     else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,list |>\nThe simplest way is to use filter:\n\
    <code>\njulia> filter(x -> x % 3 == 0 || x % 4 == 0, 1:10)\n10-element Vector{Int64}:\n\
    \ 3\n 9\n 16\n 25\n 36\n 49\n 64\n 81\n 100\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,list |>\n<code>", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns a list of all entries that are greater than or equal to 10. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n   \
    \ for x in lst\n        if mod(x,3) == 0\n            sum+=x*x\n        elseif\
    \ mod(x,4) == 0\n            sum+=x*x\n        else\n            sum+=x\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n   \
    \ for x in lst\n        if x % 3 == 0\n            sum += x\n        elseif x\
    \ % 4 == 0\n            sum += x\n        else\n            sum += x * x\n   \
    \     end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n   \
    \     if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n         \
    \   sum += i*i*i\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> sum_squares(lst)\n    25\n    \"\
    \"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n \
    \           sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are divisible by 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries that are divisible by 3. \nThe function shall then return\
    \ the sum of all entries that are divisible by 4. The function shall then return\
    \ the sum of all entries that are divisible by 5. \nThe function shall then return\
    \ the sum of all entries that are divisible by 6. The function shall then return\
    \ the sum of all entries that are divisible by 7. \nThe function shall then return\
    \ the sum of all entries that are divisible by 8. The function shall then return\
    \ the sum of all entries that are divisible by 9. \nThe function shall then return\
    \ the sum of all entries that are divisible by 10. The function shall then return\
    \ the sum of all entries that are divisible by 11. \nThe function shall then return\
    \ the sum of all entries that are divisible by 12. The function shall then return\
    \ the sum of all entries that are divisible by 13. \nThe function shall then return\
    \ the sum of all entries that are divisible by 14. The function shall then return\
    \ the sum of all entries that are divisible by 15. \nThe function shall then return\
    \ the sum of all entries that are divisible by 16. The function shall then return\
    \ the sum of all entries that are divisible by 17. \nThe function shall then return\
    \ the sum of all entries that are divisible by 18. The function shall then return\
    \ the sum of all entries that are divisible by 19. \nThe function shall then return\
    \ the sum of all entries that are divisible by 20. The function shall then return\
    \ the sum of all entries that are divisible by 21. \nThe function shall then return\
    \ the sum of all entries that are divisible by 22. The function shall then return\
    \ the sum of all entries that are divisible by 23. \nThe function shall then return\
    \ the sum of all entries that are divisible by 24. The function shall then return\
    \ the sum of all entries that are divisible by 25. \nThe function shall then return\
    \ the sum of all entries that are divisible by 26. The function shall then return\
    \ the sum of all entries that are divisible by 27. \nThe function shall then return\
    \ the sum of all entries that are divisible by 28. The function shall then return\
    \ the sum of all entries that are divisible by 29. \nThe function shall then return\
    \ the sum of all entries that are divisible by 30. The function shall then return\
    \ the sum of all entries that are divisible by 31. ", "    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the entries in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that will take a list of integers and return a new\
    \ list where all entries are squared except for the entries whose indexes are\
    \ a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum +\
    \ i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list\
    \ of integers and a number as input. The function shall then return the number\
    \ of entries in the list whose index is \n    a multiple of number and the function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ number. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> number = 2\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> lst\n    [", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of integers whose entries are all positive.", "    sum = 0\n    for x\
    \ in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n\
    \            sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and return the sum of the squares\
    \ of the integers in the list. The function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \n    \n \
    \   Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n      \
    \  if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum\
    \ += i^3\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the odd entries in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 5 or 6. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 7 or 8. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 9 or 10. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 11 or 12. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 13 or 14. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 15 or 16. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 17 or 18. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 19 or 20. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 21 or 22. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 23. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 24. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 25. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 26. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 27. ", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n    \
    \    elseif i%4 == 0\n            sum = sum + i^3\n        else\n            sum\
    \ = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of all\
    \ entries in the list that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n   \
    \     else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of integers\
    \ whose entries are all positive.", "    sum = 0\n    for i in lst\n        if\
    \ i%3==0 || i%4==0\n            sum += i\n        else\n            sum *= i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that will take a list of integers and return a list of all entries\
    \ that are a multiple of 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 4 or 5.", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        end\n    end\n   \
    \ return sum\nend", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x\
    \ % 4 == 0\n            sum += x\n        else\n            sum *= x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if mod(x, 3) ==\
    \ 0\n            sum = sum + x^2\n        elseif mod(x, 4) == 0\n            sum\
    \ = sum + x^3\n        else\n            sum = sum + x^4\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a list of integers and will\
    \ return the sum of the integers squared that are divisible by 5. The function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 5.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum +=\
    \ i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers whose entries are the sum of the\
    \ squares of the entries in the original vector. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2,\
    \ -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, ",
  "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum +=\
    \ i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ positive integers less than or equal to the sum of the integers in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i^2\n        else\n         \
    \   sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 ==\
    \ 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the integers squared. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 7\nWrite a function that will take a list of integers\
    \ and return a list of all entries that are divisible by 3. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of all entries in the list that are a\
    \ multiple of 3. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and a number k. The function will then return a list\
    \ of integers whose entries are all integers whose \n    sum is equal to k. For\
    \ example, if the list is [5, 3, 6, 7] and k is 7, then the function should return\
    \ [5, 6, 7].", "    sum = 0\n    for i in lst\n        if i%3 == 0\n         \
    \   sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return the\
    \ sum of the squares of the entries in the list. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum += x*x\n        end\n\
    \    end\n    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3==0\
    \ || i%4==0\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 ==\
    \ 0\n            sum += x\n        else\n            sum *= x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the product of all entries in the list. \n    \n    Examples:\n    >>>\
    \ lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n\
    \    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n        \
    \    sum += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n  \
    \  [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum +=\
    \ i^2\n        elseif i%4 == 0\n            sum += i*i\n        else\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \n    \n    Examples:\n    >>> lst\n  \
    \  [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ sum_squares(lst)\n    25\n    \"\"\"", "    sum = 0\n    for i in lst\n    \
    \    if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n          \
    \  sum += i*i*i\n        else\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of all entries that are a multiple of 3.\
    \ The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. The function shall then return the sum of all entries. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum = sum + i*i\n        elseif i%4 == 0\n \
    \           sum = sum + i*i*i\n        else\n            sum = sum + i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return the sum of the integers squared. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a tags=julia,list |>\n<| c |>\nThis does not answer the question. The question\
    \ was how to avoid the loop and how to avoid the if/elseif/else statements.\n\
    <|/ c |>\n<| c |>\nThe question was how to avoid the loop and how to avoid the\
    \ if/elseif/else statements. I answered the question by providing two solutions.\
    \ One solution is based on a loop and the other is based on if/elseif/else.\n\
    <|/ c |>\n<| c |>\nThe question was how to avoid the loop and how to avoid the\
    \ if/elseif/else statements. I answered the question by providing two solutions.\
    \ One solution is based on a loop and the other is based on if/elseif/else.\n\
    <|/ c |>\n<| c |>\nThe question was how to avoid the loop and how to avoid the\
    \ if/elseif/else statements. I answered the question by providing two solutions.\
    \ One solution is based on a loop and the other is based on if/elseif/else.\n\
    <|/ c |>\n<| c |>\nThe question was how to avoid the loop and how to avoid the\
    \ if/elseif/else statements. I answered the question by providing two solutions.\
    \ One solution is based on a loop and the other is based on if/elseif/else.\n\
    <|/ c |>\n<| a tags=julia,list |>\nThis can be done with mapslices:\n<code>\n\
    julia> mapslices(x -> x^2 if x%3==0 || x%4==0 else x^3, 1:10)\n10-element Array{Int64,1}:\n\
    \ 1  4  9  16  25  36  49  64  81 100\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis\
    \ does not answer the question. The question was how to avoid the loop and how\
    \ to avoid the if/elseif/else statements.\n<|/ c |>\n<| a tags=julia,list |>\n\
    The other answers here are great, but I thought I'd add my own solution as an\
    \ alternative to mapslices.\n<code>\njulia> function f(x::Int64)\n           if\
    \ x % 3 == 0 || x % 4 == 0\n               x^2\n           ", "    sum = 0\n \
    \   for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the entries in the list. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x*x\n        elseif x % 4 == 0\n  \
    \          sum += x*x\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers except for those that are multiples of\
    \ 3 or 4. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n  \
    \  []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i^2\n        elseif i%4 ==\
    \ 0\n            sum += i^3\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all even numbers in the list. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 2.", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    Thank you for your answer. Your solution is very elegant and I learned a lot from\
    \ it. I will try to implement it on my own and see how it goes. I appreciate your\
    \ help.\n<|/ c |>\n<| c |>\nI implemented your solution and it works perfectly.\
    \ Thank you very much for your help.\n<|/ c |>\n<| a |>\nYou can use the filter\
    \ function to filter out elements that don't meet the criteria you want:\n<code>\n\
    julia> filter(x -> x % 3 == 0 || x % 4 == 0, 1:10)\n3-element Vector{Int64}:\n\
    \ 3\n 9\n 15\n</code>\n<|/ a dscore=1 tags=julia |>\n<| c |>\nThank you for your\
    \ answer. Your solution is very elegant and I learned a lot from it. I will try\
    \ to implement it on my own and see how it goes. I appreciate your help.\n<|/\
    \ c |>\n<| a tags=julia |>\n<code>", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum +=\
    \ i^3\n        else\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of integers whose entries are the sum of the entries in the\
    \ original list \n    multiplied by the square of the entries in the original\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i\n        else\n     \
    \       sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 7\nWrite a function that will take\
    \ a list of integers and will return the sum of the integers squared. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n      \
    \  if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n         \
    \   sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the product of the integers in the list. \n \
    \   \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n      \
    \      sum += i^3\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a list of integers and return\
    \ a new list where all entries are squared except for the entries whose indexes\
    \ are a multiple of 3 and a multiple of 4. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall then return the sum\
    \ of all entries. \nThe function shall then return the sum of all entries. \n\
    The function shall then return the sum of all entries. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall then return the sum\
    \ of all entries. \nThe function shall then return the sum of all entries. \n\
    The function shall then return the sum of all entries. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then return the sum of all entries. \nThe function shall\
    \ then return the sum of all entries. \nThe function shall then return the sum\
    \ of all entries. \nThe function shall then return the sum of all entries. \n\
    The function shall then return the sum of all entries. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries. \nThe function shall then return the sum of all entries. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall then ", "    \n    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n            sum +=\
    \ i*i\n        else\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of integers whose entries are all positive.", "    sum = 0\n\
    \    for x in lst\n        if mod(x,3) == 0\n            sum += x^2\n        elseif\
    \ mod(x,4) == 0\n            sum += x^3\n        else\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and return a new list with only the even entries in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  \
    \  >>> lst\n    [2, 4, 6, 8, 10]\n    >>> lst\n    [2, 4, 6, 8, 10]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list if\
    \ the integer is even, \notherwise it returns the sum of the squares of the integers\
    \ in the list if the integer is odd.", "    sum = 0\n    for i in lst\n      \
    \  if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n            sum\
    \ += i*i\n        else\n            sum += i*i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and will return\
    \ the number of entries in the list that are not a multiple of 3. The function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the number of entries in the list that are\
    \ not a multiple of 3. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ number of entries in the list that are not a multiple of 3. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of entries in the list that are not\
    \ a multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. \nThe\
    \ function shall then return the number of entries in the list that are not a\
    \ multiple of 3. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. \nThe function shall then return the number\
    \ of entries in the list that are not a multiple of 3. \n", "    sum = 0\n   \
    \ for i in lst\n        if i%3==0 || i%4==0\n            sum += i^2\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a list of integers and will return the number of entries\
    \ in the list that are negative.", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum +=\
    \ i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list\
    \ of integers and return a list of all even entries in the list. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5,\
    \ 2, -1, -5]\n    \"\"\"", "    \n    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum\
    \ = sum + i^3\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all integers that are divisible by 3 or 4. The function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \n    \n    Examples:\n \
    \   >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum +\
    \ i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list\
    \ of integers and return a list of all entries that are a multiple of 3. The function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all ", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of all even numbers in the list. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 2. \nThe function shall\
    \ then return the sum of all even numbers in the list.", "    \n    sum = 0\n\
    \    for i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif\
    \ i%4 == 0\n            sum = sum + i^3\n        else\n            sum = sum +\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that will take a list of integers and return a list of all entries\
    \ that are a multiple of 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. \nThe function shall then return the\
    \ sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 4. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 5. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 6. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 7. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 8. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 9. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 10. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 11. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 12. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 13. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 14. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 15. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 16. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 17. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 18. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 19. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 20. The function shall then return the sum of all entries. \n", "    sum\
    \ = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n            sum\
    \ += x\n        else\n            sum *= x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers containing the squared values of all entries\
    \ in the vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1,\
    \ -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, ", "  \
    \  sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of integers\
    \ whose entries are all positive.", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum +=\
    \ i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and will return\
    \ the sum of the squares of the entries in the list. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall then return the\
    \ sum of all entries of the list whose entries are a multiple of 3 or 4.", " \
    \   sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum + i*i\n\
    \        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n      \
    \      sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that will take a list of integers and will return the number of entries\
    \ in the list that are negative.", "    sum = 0\n    for i in lst\n        if\
    \ i%3==0 || i%4==0\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a new list\
    \ with only the even entries in the list. The function shall not change the original\
    \ list.", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n  \
    \          sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a list\
    \ of all entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n    \
    \        sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ a list of all positive integers less than or equal to 100. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 100, 200]\n    >>> lst\n    [1, 2, 3, 100, 200]\n\
    \    >>> lst\n    [1, 2, 3, 100, 200]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the product of the entries in the list whose indexes are multiples of\
    \ 3 and 4. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.", "    sum = 0\n    for x in lst\n        if x\
    \ % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n            sum\
    \ += x*x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of all entries in the list. \n    \n    Examples:\n    >>> lst\n   \
    \ [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\
    \"\"", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum +=\
    \ i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a new list with all the even entries removed.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>>\
    \ lst\n    [2, 3, 4, 5, 6, 7, 8, 9]\n    >>> lst\n    [2, 4, 6, 8, 9]\n    \"\"\
    \"", "    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum +=\
    \ x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n     \
    \       sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list that\
    \ are multiples of 3 or 4. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n\
    \            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n \
    \       else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27859765)\n<|/ c |>\n<| c |>\n\
    The question was \"how do I do this\", not \"how do I do this\". I provided a\
    \ solution that solves the problem in the question. How does it not answer the\
    \ question?\n<|/ c |>\n<| c |>\nThe question was \"how do I do this\", not \"\
    how do I do this\". I provided a solution that solves the problem in the question.\
    \ How does it not answer the question?\n<|/ c |>\n<| c |>\nThe question was \"\
    how do I do this\", not \"how do I do this\". I provided a solution that solves\
    \ the problem in the question. How does it not answer the question?\n<|/ c |>\n\
    <| c |>\nThe question was \"how do I do this\", not \"how do I do this\". I provided\
    \ a solution that solves the problem in the question. How does it not answer the\
    \ question?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0\n            sum += x^2\n        elseif x % 4 == 0\n  \
    \          sum += x^3\n        else\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of all entries in the list that are a\
    \ multiple of 3. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n\
    >>> sum_squares(lst)\n25\n\"\"\"", "    \n    sum = 0\n    for x in lst\n    \
    \    if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n        \
    \    sum += x * x\n        else\n            sum += x * x * x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n            sum\
    \ = sum + i^3\n        else\n            sum = sum + i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of integers whose entries are all even numbers. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, 4]\n    >>> lst\n    [2, 4, 6, 8]\n    >>> lst\n \
    \   [2, 4, 6, 8]\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x %\
    \ 3 == 0\n            sum += x\n        elseif x % 4 == 0\n            sum +=\
    \ x\n        else\n            sum += x * x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the product\
    \ of the entries in the list. The function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the product of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n   \
    \     elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that will take\
    \ a list of integers and will return the number of integers in the list that are\
    \ divisible by 3. The function shall not change the list entries. \n    \n   \
    \ Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n  \
    \  [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if\
    \ i%3==0 || i%4==0\n            sum += i\n        else\n            sum += i*i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and return a list of all entries\
    \ that are a multiple of 3 or 4.", "    \n    sum = 0\n    for i in lst\n    \
    \    if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n          \
    \  sum += i*i*i\n        else\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of all entries that are a multiple of 3.\
    \ The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\n>>>\
    \ lst\n[4, -6, 3, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5,\
    \ -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7,\
    \ -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4,\
    \ -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6,\
    \ -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5,\
    \ -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7,\
    \ -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4,\
    \ -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6,\
    \ -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5,\
    \ -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7, -5, -6, -4, -7,\
    \ -5, -6, -4, -7, -5, ", "    sum = 0\n    for i in lst\n        if i%3==0 ||\
    \ i%4==0\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"",
  "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n  \
    \      elseif i%4 == 0\n            sum += i*i*i\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a list of integers and will return the sum of\
    \ the squares of the entries in the list. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n    \
    \        sum += i\n        else\n            sum += i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list whose index is \n    a multiple\
    \ of 3 and a multiple of 4. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n\
    \        if i%3==0 || i%4==0\n            sum += i\n        else\n           \
    \ sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n   \
    \ >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 || x % 4 == 0\n            sum += x\n        else\n   \
    \         sum *= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers and returns the product\
    \ of all entries in the list. \nThe function shall not change the entries in the\
    \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the product of all entries. \nThe function shall not change the entries in the\
    \ list whose indexes are a multiple of 3 or 4. The function shall then return\
    \ the product of all entries. \nThe function shall not change the entries in the\
    \ list whose indexes are a multiple of 3 or 4 and a multiple of 3. The function\
    \ shall then return the product of all entries. \nThe function shall not change\
    \ the entries in the list whose indexes are a multiple of 3 or 4 and a multiple\
    \ of 4. The function shall then return the product of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 4 and not a multiple of 3. The function shall then return\
    \ the product of all entries. \nThe function shall not change the entries in the\
    \ list whose indexes are a multiple of 3 or 4 and a multiple of 4 and not a multiple\
    \ of 4. The function shall then return the product of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 4 and not a multiple of 4 and not a multiple of 3. The function\
    \ shall then return the product of all entries. \nThe function shall not change\
    \ the entries in the list whose indexes are a multiple of 3 or 4 and a multiple\
    \ of 4 and not a multiple of 4 and not a multiple of 4. The function shall then\
    \ return the product of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are a multiple of 3 or 4 and a multiple of 4 and not\
    \ a multiple of 4 and not a multiple of 4 and not a multiple of 3. The function\
    \ shall then return the product of all entries. \nThe function shall not change\
    \ the entries in the list whose indexes are a multiple of 3 or 4 and a multiple\
    \ of 4 and not a multiple of 4 and not a multiple of 4 and not a multiple of 4.\
    \ The function shall then return the product of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are a multiple of 3 or 4 and\
    \ a multiple of 4 and not a multiple of 4 and not a multiple of 4 and not a multiple\
    \ of 4. The function shall then return the product of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are a multiple of 3 or\
    \ 4 and a multiple of 4 and not a multiple of 4 and not a multiple of 4 and not\
    \ a multiple of 4 and not a multiple of 3. The function shall then return the\
    \ product of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are a multiple of 3 or 4 and a multiple of 4 and ", "    sum =\
    \ 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif\
    \ i%4 == 0\n            sum += i*i*i\n        else\n            sum += i\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> sum_squares(lst)\n\
    \    25\n    \"\"\"", "    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n\
    \            sum += i\n        else\n            sum += i*i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of all even entries in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of all odd entries in the vector.\
    \ \nWrite a function that takes a vector of integers and returns the product of\
    \ all entries in the vector. \nWrite a function that takes a vector of integers\
    \ and returns the maximum of the vector. \nWrite a function that takes a vector\
    \ of integers and returns the minimum of the vector. \nWrite a function that takes\
    \ a vector of integers and returns the sum of all entries in the vector that are\
    \ greater than or equal to 0. \nWrite a function that takes a vector of integers\
    \ and returns the sum of all entries in the vector that are less than or equal\
    \ to 0. \nWrite a function that takes a vector of integers and returns the product\
    \ of all entries in the vector that are greater than or equal to 0. \nWrite a\
    \ function that takes a vector of integers and returns the product of all entries\
    \ in the vector that are less than or equal to 0. \nWrite a function that takes\
    \ a vector of integers and returns the maximum of the vector that is greater than\
    \ or equal to 0. \nWrite a function that takes a vector of integers and returns\
    \ the maximum of the vector that is less than or equal to 0. \nWrite a function\
    \ that takes a vector of integers and returns the minimum of the vector that is\
    \ greater than or equal to 0. \nWrite a function that takes a vector of integers\
    \ and returns the minimum of the vector that is less than or equal to 0. \nWrite\
    \ a function that takes a vector of integers and returns the sum of all entries\
    \ in the vector that are greater than or equal to 0 and less than or equal to\
    \ 10. \nWrite a function that takes a vector of integers and returns the sum of\
    \ all entries in the vector that are greater than or equal to 0 and less than\
    \ or equal to 10. \nWrite a function that takes a vector of integers and returns\
    \ the product of all entries in the vector that are greater than or equal to 0\
    \ and less than or equal to 10. \nWrite a function that takes a vector of integers\
    \ and returns the product of all entries in the vector that are greater than or\
    \ equal to 0 and less than or equal to 10. \nWrite a function that takes a vector\
    \ of integers and returns the maximum of the vector that is greater than or equal\
    \ to 0 and less than or equal to 10. \nWrite a function that takes a vector of\
    \ integers and returns the maximum of the vector that is greater than or equal\
    \ to 0 and less than or equal to 10. \nWrite a function that takes a vector of\
    \ integers and returns the minimum of the vector that is greater than or equal\
    \ to 0 and less than or equal to 10. \nWrite a function that takes a vector of\
    \ integers and returns the minimum of the vector that is greater than or equal\
    \ to 0 and less than or equal to 10. \nWrite a function that takes a vector of\
    \ integers and returns the sum of all entries in the vector that are greater than\
    \ or equal to 0 and less than or equal to 10 and are divisible by 3. \nWrite a\
    \ function that takes a vector of integers and returns the sum of all entries\
    \ in the vector that are greater than or ", "    sum = 0\n    for i in lst\n \
    \       if i%3 == 0\n            sum += i^2\n        elseif i%4 == 0\n       \
    \     sum += i^3\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose square is less than or equal to 100.\
    \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2,\
    \ -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1,\
    \ 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n  \
    \  >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5,\
    \ 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n   \
    \ [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n\
    \    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1,\
    \ -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [1, 2, 3, -1, ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n  \
    \          sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n     \
    \   else\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will take a list of integers and return\
    \ a list of all entries that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 4. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 5. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 6. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 7. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 8. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 9. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 10. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 11. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 12. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 13. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 14. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 15. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 16. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 17. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 18. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 19. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 20. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose ", "    sum = 0\n\
    \    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n       \
    \ else\n            sum *= i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that will take a list of integers and a number as input. The function\
    \ shall then return the sum of the integers in the list whose indexes are a multiple\
    \ of 3 or 4 and less than the number input. \n    \n    Examples:\n    >>> lst\n\
    \    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n  \
    \  >>> num\n    10\n    >>> num\n    10\n    \"\"\"", "    sum = 0\n    for i\
    \ in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n\
    \            sum += i*i*i\n        else\n            sum += i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \n    \n  \
    \  Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n \
    \   [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum\
    \ += i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers whose entries are the sum of the squares of the entries in the original\
    \ vector. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n   \
    \ []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [1, 2, 3, 4, 5]\n\
    \    >>> lst\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"", "    sum = 0\n\
    \    for i in lst\n        if i%3==0 || i%4==0\n            sum += i\n       \
    \ end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n       \
    \ if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n        \
    \    sum = sum + i^3\n        else\n            sum = sum + i\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of all entries that are a multiple\
    \ of 3 or 4. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n        if i%3\
    \ == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a function that will take\
    \ a list of integers and return the sum of all entries in the list whose index\
    \ is less than or equal to 10. \n    \n    Examples:\n    >>> lst\n    [1, 2,\
    \ 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5, 2, -1, -5,\
    \ 2, -1, -5, 2, -1, ", "    \n    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i\n        elseif i%4 == 0\n            sum += i*i\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and will return the sum of the squares of the integers in\
    \ the list. The function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a ", "    sum = 0\n    for i in lst\n        if i%3 == 0\n         \
    \   sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n  \
    \      else\n            sum = sum + i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ integers whose squares are less than or equal to 100. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3, -4, -5, 6]\n    >>> lst\n    [1, 2, 3, -4, -5, 6,\
    \ -7, -8]\n    >>> lst\n    [1, 2, 3, -4, -5, 6, -7, -8, 9]\n    \"\"\"", "  \
    \  sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n  \
    \      elseif i%4 == 0\n            sum += i^3\n        else\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list if\
    \ they are a multiple of 3 and \nthe sum of the cubes of the integers in the list\
    \ if they are a multiple of 4. Do not change the list passed as argument. \nThe\
    \ function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall not change the list passed as argument. \n\
    The function shall then return the sum of the squares and cubes of the integers\
    \ in the list. \nThe function shall ", "    sum = 0\n    for i in lst\n      \
    \  if i%3 == 0\n            sum = sum + i^2\n        elseif i%4 == 0\n       \
    \     sum = sum + i^3\n        else\n            sum = sum + i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a list of all entries that are a multiple\
    \ of 3 and a multiple of 4. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4.", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i\n        elseif i%4 == 0\n        \
    \    sum += i*i\n        else\n            sum += i*i*i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in\
    \ lst\n        if i%3==0 || i%4==0\n            sum += i^2\n        else\n   \
    \         sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a list\
    \ of integers whose entries are all even.", "    sum = 0\n    for x in lst\n \
    \       if x % 3 == 0\n            sum += x\n        elseif x % 4 == 0\n     \
    \       sum += x\n        else\n            sum += x*x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list as an argument and returns a list where all entries are multiplied by\
    \ 2 except for the entries that are multiples of 3. \n    \n    Examples:\n  \
    \  >>> lst\n    [1, 2, 3]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5, 2, -1, -5]\n    \"\"\"", "    \n    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a list of integers and return a list of integers whose entries are\
    \ all positive.", "    sum = 0\n    for i in lst\n        if i%3 == 0\n      \
    \      sum += i^2\n        elseif i%4 == 0\n            sum += i^3\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 7: Write a function that will take a list of integers and will return\
    \ the sum of all entries in the list \n    that are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries.", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum += i*i\n        elseif i%4 ==\
    \ 0\n            sum += i*i*i\n        else\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the entries in\
    \ the list. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n \
    \   []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for\
    \ i in lst\n        if i%3 == 0\n            sum = sum + i^2\n        elseif i%4\
    \ == 0\n            sum = sum + i^3\n        else\n            sum = sum + i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the product of all entries in the list. \n    \n   \
    \ Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n  \
    \  [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n        if\
    \ i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n            sum +=\
    \ i*i*i\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list. \n\
    \    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "    sum = 0\n    for i in lst\n\
    \        if i%3 == 0\n            sum += i*i\n        elseif i%4 == 0\n      \
    \      sum += i*i*i\n        else\n            sum += i\n        end\n    end\n\
    \    return sum\nend", "    sum = 0\n    for i in lst\n        if i%3 == 0\n \
    \           sum = sum + i^2\n        elseif i%4 == 0\n            sum = sum +\
    \ i^3\n        else\n            sum = sum + i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a list\
    \ of all entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall then return the sum of all\
    \ entries squared. \nThe function shall then return the product of all entries.\
    \ \nThe function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries cubed. \nThe function shall then\
    \ return the product of all entries cubed. \nThe function shall then return the\
    \ product of all entries squared. \nThe function shall then return the product\
    \ of all entries squared. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ squared. \nThe function shall then return the product of all entries squared.\
    \ \nThe function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries squared. \nThe function shall then\
    \ return the product of all entries squared. \nThe function shall then return\
    \ the product of all entries squared. \nThe function shall then return the product\
    \ of all entries squared. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ squared. \nThe function shall then return the product of all entries squared.\
    \ \nThe function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries squared. \nThe function shall then\
    \ return the product of all entries squared. \nThe function shall then return\
    \ the product of all entries squared. \nThe function shall then return the product\
    \ of all entries squared. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ squared. \nThe function shall then return the product of all entries squared.\
    \ \nThe function shall then return the product of all entries squared. \nThe function\
    \ shall then return the product of all entries squared. \nThe function shall then\
    \ return the product of all entries squared. \nThe function shall then return\
    \ the product of all entries squared. \nThe function shall then return the product\
    \ of all entries squared. \nThe function shall then return the product of all\
    \ entries squared. \nThe function shall then return the product of all entries\
    \ squared", "    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that will take a list of integers and a number as input. The function\
    \ will then return a list of integers whose entries are \n    equal to the square\
    \ of the entries in the list whose indexes are a multiple of $number$. \n    \n\
    \    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1, -5, 2, -1, -5]\n    >>> number = 2\n    >>> lst\n    [1, 4, 9]\n   \
    \ >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4,\
    \ 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n  \
    \  [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1,\
    \ 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1,\
    \ 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1,\
    \ 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n\
    \    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>>\
    \ lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n    >>> lst\n    [1, 4, 9]\n\
    \    >>> lst\n    [1, 4, ", "    sum = 0\n    for i in lst\n        if i%3 ==\
    \ 0\n            sum += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n\
    \        else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a new list with only the even entries of the original list. \n  \
    \  \n    Examples:\n    >>> lst\n    [1, 2, 3, 4, 5, 6]\n    >>> lst\n    [2,\
    \ 4, 6]\n    >>> lst\n    []\n    \"\"\"", "    sum = 0\n    for i in lst\n  \
    \      if i%3==0 || i%4==0\n            sum += i^2\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. The function shall then return\
    \ the sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n\
    \    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"", "   \
    \ sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i^2\n   \
    \     elseif i%4 == 0\n            sum += i^3\n        else\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a list of integers and returns the sum of all entries\
    \ in the list that are a multiple of 3. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. \nThe function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 4. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 5. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 6. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 7. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 8. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 9. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 10. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 11. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 12. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 13. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 14. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 15. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 16. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 17. The function shall then return the sum of\
    \ all entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 18. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 19. The function shall then return the sum of all entries. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 20. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the ", "    sum = 0\n    for x in lst\n\
    \        if x % 3 == 0 && x % 4 == 0\n            sum += x\n        else\n   \
    \         sum -= x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return the\
    \ sum of all entries in the list whose index is divisible by 3. \n    \n    Examples:\n\
    \    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>> lst\n    [-1, -5, 2,\
    \ -1, -5]\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
