name: HumanEval_83_starts_one_ends
language: jl
prompt: "\"\"\"\n    Given a positive integer n, return the count of the numbers of\
  \ n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
  \ starts_one_ends(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
  \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
completions: ["    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n < 10 \n        return 0 \n    else \n\
    \        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given integer n.", " \
    \   if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n / 2)\n   \
    \ else \n        return starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000000000000", "    if n ==\
    \ 0 \n        then return 0 \n    else \n        val c = starts_one_ends(n-1)\
    \ \n        if n % 10 == 1 \n            then return c + 1 \n        else return\
    \ c \nend \n\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", " \
    \   if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n/10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000013)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(", "    if n == 1 \n        then return 1 \n        else return\
    \ 0 \n    end\nend\n\"\"\"\n    Given a positive integer n, return the count of\
    \ the numbers of n-digit\n    positive integers that start or end with 1.\n  \
    \  \"\"\"", "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.", "    if n == 1 \n        return 1 \n  \
    \  else \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        then return 1\n    else if n == 0 \n        then return\
    \ 0\n    else \n        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n</cell>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n / 2)\n   \
    \ else \n        return starts_one_ends(n / 2) + starts_one_ends(n / 2 + 1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n\
    \ / 2)\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n /\
    \ 2 - 1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n == 0 \n        then return 0\n    else\
    \ \n        local i::Int64 = 1\n        local count::Int64 = 0\n        while\
    \ i <= n \n            do if i%10 == 1 \n                then count = count +\
    \ 1\n                else return count\n            end\n            i = i + 1\n\
    \        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers from 1 to n that are\ndivisible by 3.", "    if n < 10\
    \ \n        then return 1\n        else if n % 10 == 1 \n            then return\
    \ starts_one_ends(n / 10)\n            else return starts_one_ends(n / 10) + 1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100", "    if n == 0 \n  \
    \      then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        count_one_ends(n-1) + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4)\
    \ + count_one_ends(n-5) + count_one_ends(n-6) + count_one_ends(n-7) + count_one_ends(n-8)\
    \ + count_one_ends(n-9)\nend", "    if n < 10 \n        return 1 \n    else \n\
    \        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.", "    if n < 10 \n        then return 1\n        else return starts_one_ends(n//10)*10\
    \ + n % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>", "    if n\
    \ < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n        1\n\
    \    else \n        1 + starts_one_ends(n / 10)\n    end\nend", "    if n == 1\
    \ \n        return 1 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to a given integer n.", "    if n < 10 \n        return 1 \n \
    \   else \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n  \
    \      then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        count_starts_ends(n-1) + count_starts_ends(n-2) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_end", "    if n < 10 \n     \
    \   return n\n    else \n        return starts_one_ends(n//10) + n%10 == 1 ? 1\
    \ : 0\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n < 10 \n        return 0 \n    else \n\
    \        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>", "    if n < 10 \n  \
    \      then return 1\n        else return starts_one_ends(n//10) + 1\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n == 1 \n        return 1 \n    else \n\
    \        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return 1\n    else \n        local count = 1\n        while n >= 10 \n     \
    \       do n = n / 10\n            count = count + 1\n        end\n        return\
    \ count\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if n == 1 \n\
    \        return 1 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n < 10 \n        return 0 \n    else \n\
    \        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>", "    if n == 0 \n  \
    \      then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n</cell>\n\
    <code language=", "    if n < 10 \n        return 0 \n    else \n        return\
    \ 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local count =\
    \ 1\n        while n >= 10 \n            do \n                n = n / 10 \n  \
    \              count = count + 1 \n            end \n        return count \nend\
    \ \n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456787)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567879)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345678790)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456787912)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567879123)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791234)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456787912345)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791234567)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456787912345678)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567879123456787)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791234567879)\n\
    </cell>", "    if n == 1 \n        then return 1\n    else \n        let\n   \
    \         digits = digits(n)\n            digits_count = length(digits)\n    \
    \        digits_count = digits_count - 1\n            digits_count = digits_count\
    \ + 1\n            digits_count = digits_count - 1\n            digits_count =\
    \ digits_count + 1\n            digits_count = digits_count - 1\n            digits_count\
    \ = digits_count + 1\n            digits_count = digits_count - 1\n          \
    \  digits_count = digits_count + 1\n            digits_count = digits_count -\
    \ 1\n            digits_count = digits_count + 1\n            digits_count = digits_count\
    \ - 1\n            digits_count = digits_count + 1\n            digits_count =\
    \ digits_count - 1\n            digits_count = digits_count + 1\n            digits_count\
    \ = digits_count - 1\n            digits_count = digits_count + 1\n          \
    \  digits_count = digits_count - 1\n            digits_count = digits_count +\
    \ 1\n            digits_count = digits_count - 1\n            digits_count = digits_count\
    \ + 1\n            digits_count = digits_count - 1\n            digits_count =\
    \ digits_count + 1\n            digits_count = digits_count - 1\n            digits_count\
    \ = digits_count + 1\n            digits_count = digits_count - 1\n          \
    \  digits_count = digits_count + 1\n            digits_count = digits_count -\
    \ 1\n            digits_count = digits_count + 1\n            digits_count = digits_count\
    \ - 1\n            digits_count = digits_count + 1\n            digits_count =\
    \ digits_count - 1\n            digits_count = digits_count + 1\n            digits_count\
    \ = digits_count - 1\n            digits_count = digits_count + 1\n          \
    \  digits_count = digits_count - 1\n            digits_count = digits_count +\
    \ 1\n            digits_count = digits_count - 1\n            digits_count = digits_count\
    \ + 1\n            digits_count = digits_count - 1\n            digits_count =\
    \ digits_count + 1\n            digits_count = digits_count - 1\n            digits_count\
    \ = digits_count + 1\n            digits_count = digits_count - 1\n          \
    \  digits_count = digits_count + 1\n            digits_count = digits_count -\
    \ 1\n            digits_count = digits_count + 1\n            digits_count = digits_count\
    \ - 1\n            digits_count = digits_count + 1\n            digits_count =\
    \ digits_count - 1\n            digits_count = digits_count + 1\n            digits_count\
    \ = digits_count - 1\n            digits_count = digits_count + 1\n          \
    \  digits_count = digits_count - 1\n            digits_count = digit", "    if\
    \ n == 1 \n        then return 1 \n        else return starts_one_ends(n-1) +\
    \ 1 \n    end\nend\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.0>", "    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- n \n        i <- 1 \n       \
    \ count <- 0 \n        while i < n \n            do if n%i == 0 \n           \
    \     then count += 1 \n                else \n                    i <- i + 1\
    \ \n        return count \nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_end", "    if n < 10 \n       \
    \ return 0 \n    else \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n\
    \        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of positive\
    \ integers less than or equal to n.", "    if n < 10 \n        return 0 \n   \
    \ else \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>", "    if n < 10 \n  \
    \      return 1 \n    else \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<code language=julia-1.5>", "    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </", "    if n < 10 \n        then return 1\n        else return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 1\
    \ \n        return 1 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        then return 1 \n        else\
    \ return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that end with 2.", "    if n < 10 \n       \
    \ then return 1\n    else \n        local count = 0\n        while n >= 10 \n\
    \            do count = count + 1\n            n = n / 10\n        end\n     \
    \   return count\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a\
    \ positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n < 10 \n        then\
    \ return 1\n    else if n < 100 \n        then return 1 + starts_one_ends(n//10)\n\
    \    else if n < 1000 \n        then return 1 + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 10000 \n        then return 1 + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 100000 \n        then return 1 + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000 \n        then return 1 + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000 \n        then return 1 +\
    \ starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 100000000 \n        then return 1 + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000000 \n        then return 1 + starts_one_ends(n//100000000)\
    \ + starts_one_ends(n//10000000) + starts_one_ends(n//1000000) + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000000 \n        then return\
    \ 1 + starts_one_ends(n//1000000000) + starts_one_ends(n//100000000) + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + start", "    if n < 10\
    \ \n        return 1 \n    else \n        return starts_one_ends(n//10) + 1 \n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n\
    \ / 10) + 1 \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n < 10 \n        return 0 \n    else \n\
    \        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n < 10 \n\
    \        return 1 \n    else \n        return starts_one_ends(n//10) + 1 \nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"", "    if n == 1 \n        then return 1\n        else return\
    \ 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return the count of\
    \ the numbers of n-digit\n    positive integers that start or end with 1.\n  \
    \  \"\"\"", "    if n == 1 \n        then return 1 \n        else return starts_one_ends(n-1)\
    \ + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.", "    if n == 0 \n        then return 0\n\
    \    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n     \
    \   while i <= n \n            do if i%10 == 1 \n                then count =\
    \ count + 1\n                else return count\n            end\n            i\
    \ = i + 1\n        end\n        return count\n    end\nend\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n < 10 \n        return\
    \ 0 \n    else \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n<code language=juli",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 10 == 1 \n        then return starts_one_ends(n/10)\n   \
    \ else \n        return starts_one_ends(n-1) + starts_one_ends(n+1)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n\
    \ / 2) + starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given integer n.", " \
    \   if n < 10 \n        then return 1\n        else return starts_one_ends(n//10)\
    \ + 1\n    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_", "    if n == 0 \n        then return 0\n    else if n < 0 \n   \
    \     then return 0\n    else if n == 1 \n        then return 1\n    else \n \
    \       local count = 1\n        local i = 1\n        while i <= n \n        \
    \    do if i%10 == 1 \n                then count = count + 1\n              \
    \  else count = count + 1\n            end\n            i = i + 1\n        end\n\
    \        return count\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_end",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else \n        1 + starts_one_ends(n-1)\nend", "    if n == 1 \n\
    \        then return 1\n    else \n        count_starts_ends(n-1) + 1\nend\n</cell>\n\
    <code language=julia-1.5>\n@time count_starts_ends(10)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 1, and that do not contain any leading zeros.", "    if n == 0 \n     \
    \   then return 0 \n    else \n        x <- starts_one_ends(n-1) \n        if\
    \ x == 0 \n            then return 1 \n        else \n            if n % x ==\
    \ 0 \n                then return x + 1 \n            else \n                return\
    \ x \nend \n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n < 10 \n        return n\n    else \n \
    \       return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n == 1 \n        then return 1\n    else \n \
    \       sum((starts_one_ends(n-1) + ends_one_starts(n-1)), 0)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return 1 \n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        local count =\
    \ 1\n        while n >= 10 \n            do count = count + 1\n            n =\
    \ n / 10\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 1\
    \ \n        then return 1\n    else if n == 0 \n        then return 0\n    else\
    \ \n        count_one_ends(n-1) + count_one_ends(n-2) \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(100)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(100000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(100000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(1000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(10000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(10000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(1000000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(100000000000000000000000000)\n\
    </cell", "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n\
    \ / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 0\n    else if\
    \ n < 0 \n        then return starts_one_ends(-n) + 1 \n    else \n        local\
    \ i::Int64 = 1\n        local count::Int64 = 0\n        while i <= n \n      \
    \      do if i%10 == 1 \n                then count = count + 1\n            \
    \    else return count\n            end\n            i = i + 1\n        end\n\
    \        return count\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 0 \n        then return 0\n    else if n == 1 \n        then return 1\n    else\
    \ \n        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6) +\
    \ count_starts_ends(n-7) + count_starts_ends(n-8) + count_starts_ends(n-9) + count_starts_ends(n-10)\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n == 1 \n        return 1 \n    else \n     \
    \   return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ if n == 1 \n        1\n    else \n        1 + starts_one_ends(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        let\n    \
    \        digits = digits(n)\n            digits_length = length(digits)\n    \
    \        digits_start = digits_length - 1\n            digits_end = digits_length\
    \ - 2\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_", "    if n == 1 \n        return 1 \n    else \n \
    \       return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers less than or equal to\
    \ a given integer n.", "    if n == 0 \n        then return 0\n    else if n ==\
    \ 1 \n        then return 1\n    else \n        local count = 0\n        local\
    \ i = 1\n        while i <= n \n            do \n                if ((n % i) ==\
    \ 0) \n                    then count = count + 1\n                    else break\n\
    \                end\n                i = i + 1\n            end\n        return\
    \ count\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n < 10 \n        then\
    \ return 1\n        else return starts_one_ends(n//10) + starts_one_ends(n%10)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to a given positive integer n.", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ if n == 1 \n        1\n    else \n        1 + starts_one_ends(n-1)\nend", " \
    \   if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n  \
    \      1\n    else \n        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000013)\n</cell>",
  "    if n == 0 \n        then return 0 \n    else \n        let\n            digits\
    \ = digits(n) \n            digits_count = length(digits) \n            digits_count_plus_one\
    \ = digits_count + 1\n            digits_count_minus_one = digits_count - 1\n\
    \            digits_count_minus_one_plus_one = digits_count_minus_one + 1\n  \
    \          digits_count_minus_one_minus_one = digits_count_minus_one - 1\n   \
    \         digits_count_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one = digits_count_minus_one_minus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one +\
    \ 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_min", "   \
    \ if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n \
    \       while i <= n \n            do if i%10 == 1 \n                then count\
    \ = count + 1\n                else break\n            end\n            i = i\
    \ + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000011)\n", "    if n == 0 \n        then return 0 \n \
    \   else if n == 1 \n        then return 1 \n    else \n        local count =\
    \ 1\n        while n >= 10 \n            do count = count + 1\n            n =\
    \ n / 10\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 1\
    \ \n        then return 1\n        else return starts_one_ends(n-1) + ends_one_starts(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        then return 1\n        else\
    \ return 0\n    else \n        count_starts_ends(n-1) + 1\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 1.\n\
    \    \"\"\"", "    if n < 0 \n        error(\"n must be positive\")\n    else\
    \ if n == 0 \n        0\n    else \n        1 + starts_one_ends(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>", "    if n == 1 \n        then return\
    \ 1\n    else if n == 0 \n        then return 0\n    else \n        let\n    \
    \        digits = digits(n::Int64)\n            digits_reversed = reverse(digits)\n\
    \            digits_reversed_reversed = reverse(digits_reversed)\n           \
    \ digits_reversed_reversed_reversed = reverse(digits_reversed_reversed)\n    \
    \        digits_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed)\n  \
    \          digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "    if n == 1 \n        return 1 \n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n \
    \   Given a positive integer n, return the count of the numbers of n-digit\n \
    \   positive integers that start or end with 1.\n    \"\"\"", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ \n        1 + starts_one_ends(n-1)\nend", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else return\
    \ count\n            end\n            i = i + 1\n        end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(2)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(3)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(4)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(5)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(6)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(7)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(8)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(9)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(23)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(24)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(25)\n\
    </cell>\n<code language=julia-1.", "    if n == 0 \n        then return 0\n  \
    \  else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.", "    if n == 0 \n        then return 0\n    else if n == 1\
    \ \n        then return 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n\
    \ / 2)\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n /\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n < 10 \n        return 0 \n    else \n\
    \        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.", "    if n < 10 \n        then return 1\n        else return starts_one_ends(n//10)\
    \ + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.", "    if n < 10 \n        return 1 \n  \
    \  else \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of positive integers that start\
    \ or end with 2.", "    if n == 1 \n        then return 1\n    else \n       \
    \ count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4)\
    \ + count_starts_ends(n-5) + count_starts_ends(n-6) + count_starts_ends(n-7) +\
    \ count_starts_ends(n-8) + count_starts_ends(n-9) + count_starts_ends(n-10) +\
    \ count_starts_ends(n-11) + count_starts_ends(n-12) + count_starts_ends(n-13)\
    \ + count_starts_ends(n-14) + count_starts_ends(n-15) + count_starts_ends(n-16)\
    \ + count_starts_ends(n-17) + count_starts_ends(n-18) + count_starts_ends(n-19)\
    \ + count_starts_ends(n-20) + count_starts_ends(n-21) + count_starts_ends(n-22)\
    \ + count_starts_ends(n-23) + count_starts_ends(n-24) + count_starts_ends(n-25)\
    \ + count_starts_ends(n-26) + count_starts_ends(n-27) + count_starts_ends(n-28)\
    \ + count_starts_ends(n-29) + count_starts_ends(n-30) + count_starts_ends(n-31)\
    \ + count_starts_ends(n-32) + count_starts_ends(n-33) + count_starts_ends(n-34)\
    \ + count_starts_ends(n-35) + count_starts_ends(n-36) + count_starts_ends(n-37)\
    \ + count_starts_ends(n-38) + count_starts_ends(n-39) + count_starts_ends(n-40)\
    \ + count_starts_ends(n-41) + count_starts_ends(n-42) + count_starts_ends(n-43)\
    \ + count_starts_ends(n-44) + count_starts_ends(n-45) + count_starts_ends(n-46)\
    \ + count_starts_ends(n-47) + count_starts_ends(n-48) + count_starts_ends(n-49)\
    \ + count_starts_ends(n-50) + count_starts_ends(n-51) + count_starts_ends(n-52)\
    \ + count_starts_ends(n-53) + count_starts_ends(n-54) + count_starts_ends(n-55)\
    \ + count_starts_ends(n-56) + count_starts_ends(n-57) + count_starts_ends(n-58)\
    \ + count_starts_ends(n-59) + count_starts_ends(n-60) + count_starts_ends(n-61)\
    \ + count_starts_ends(n-62) + count_starts_", "    if n < 10 \n        return\
    \ 0 \n    else \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of positive integers\
    \ less than or equal to n.", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n / 2) + starts_one_ends(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000", "  \
    \  if n == 1 \n        then return 1\n    else if n == 0 \n        then return\
    \ 0\n    else if n % 2 == 1 \n        then return starts_one_ends(n / 2)\n   \
    \ else \n        return starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else \n        count_starts_ends(n-1, n+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10_000, 10_000_000)\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10_000, 10_000_000)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers less than or equal to\
    \ a given number.", "    if n < 10 \n        return 0 \n    else \n        return\
    \ 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890123)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901234567)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789012345678899999999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999999999)\n\
    </cell>\n", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        count_one_ends(n-1) + count_one_ends(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000000000000)\n</cell>\n",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n / 2)\n   \
    \ else \n        then return starts_one_ends(n / 2) + starts_one_ends(n / 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.3>\n", "    if n < 10 \n        return 1 \n  \
    \  else \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return 1 \n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n \
    \   Given a positive integer n, return the count of the numbers of n-digit\n \
    \   positive integers that start or end with 1.\n    \"\"\"", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        local count = 0\n        local i = 1\n        while i <= n \n       \
    \     do if i%10 == 1 \n                then count = count + 1\n             \
    \   else return 0\n            end\n            i = i + 1\n        end\n     \
    \   return count\n    end\nend\n\"\"\"\n    \n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 0.\n    \"\"\"", "    if n < 10 \n        return 0 \n    else \n\
    \        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(123456789)\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6)\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n</cell>\n\
    <code language=", "    if n == 1 \n        then return 1\n        else return\
    \ 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return the count of\
    \ the numbers of n-digit\n    positive integers that start or end with 1.\n  \
    \  \"\"\"", "    if n < 10 \n        return 0 \n    else \n        return 1 +\
    \ starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return starts_one_ends(n / 2)\n    else \n       \
    \ return starts_one_ends(n / 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n == 1 \n        return 1 \n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.", "    if n == 1 \n        then return 1\
    \ \n        else return starts_one_ends(n-1) + 1 \n    end\nend\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n == 0 \n        then\
    \ return 0 \n    else \n        count_one_ends(n-1) + count_one_ends(n-2) \nend",
  "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n/10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        then\
    \ return 0\n    else if n == 1 \n        then return 1\n    else \n        let\n\
    \            digits = digits(n) \n            digits_count = length(digits)\n\
    \            digits_count_plus_one = digits_count + 1\n            digits_count_minus_one\
    \ = digits_count - 1\n            digits_count_minus_one_plus_one = digits_count_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one = digits_count_minus_one -\
    \ 1\n            digits_count_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one_minus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one - 1\n     \
    \       digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_", "    if n < 10 \n        return 1 \n    else \n        return\
    \ starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if n == 1 \n        then return 1 \n        else return 0 \n    end\nend\n\"\
    \"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        return n\n    else \n        return starts_one_ends(n//10) + n%10\
    \ == 1 ? 1 : 0\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of integers\
    \ that start or end with 1, and that do not start or end with 0.", "    if n <\
    \ 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n / 10)\
    \ \nend\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000013)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(", "    if n == 0 \n        then return 0\n    else if n == 1\
    \ \n        then return 1\n    else \n        let\n            digits = digits(n::Int64)\n\
    \            start = digits[1]\n            end = digits[end]\n            digits_start\
    \ = digits[start]\n            digits_end = digits[end]\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - 1\n            digits_start\
    \ = digits_start - 1\n            digits_end = digits_end - ", "    if n == 1\
    \ \n        then return 1 \n        else return 0 \n    else \n        n <- n\
    \ \n        i <- 0 \n        count <- 0 \n        while i < n \n            do\
    \ if n%10 == 1 \n                then count <- count + 1 \n                else\
    \ if n%10 == 0 \n                    then count <- count + 0 \n              \
    \      else count <- count + 1 \n            i <- i + 1 \n        return count\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 0.\n    \"\"\"", "    if n == 1 \n        return 1 \n    else \n\
    \        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time starts_one_ends(10)\n</cell>\n<text>\nThe function\
    \ above is recursive, meaning that it calls itself over and over again until it\
    \ reaches the base case. Julia is smart enough to optimize this and turn the recursive\
    \ function into a loop.", "    if n == 0 \n        then return 0 \n    else \n\
    \        x <- starts_one_ends(n-1) \n        if n == 1 \n            then return\
    \ 1 \n        else \n            if x == 0 \n                then return 0 \n\
    \            else \n                y <- starts_one_ends(n-2) \n             \
    \   if y == 0 \n                    then return 1 \n                else \n  \
    \                  if x == y \n                        then return 1 \n      \
    \              else \n                        if x != y \n                   \
    \         then return 0 \n                        else \n                    \
    \        return 0 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of positive\
    \ integers that end with 2.", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        local count = 1\n    \
    \    local i = 1\n        while i <= n \n            do if i%10 == 1 \n      \
    \          then count = count + 1\n                else count = count + 1\n  \
    \          end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"", "    if n < 0 \n        error(\"n must be positive\")\n\
    \    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n < 10 \n        return 1 \n    else \n     \
    \   return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.", "    if n == 0 \n        then return 0 \n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n) \nend\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(10)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(1000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(100000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_starts_ends(1000000)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(10000000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(100000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_starts_ends(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(100000000000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(100000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_starts_ends(1000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(10000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.", "    if n == 0 \n        then return 0\n    else \n\
    \        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6) +\
    \ count_starts_ends(n-7) + count_starts_ends(n-8) + count_starts_ends(n-9)\nend\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.0>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.0>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.0>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_start", "    if n < 0 \n        error(\"\
    n must be positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n \
    \       1\n    else \n        1 + starts_one_ends(n - 1)\nend", "    if n < 0\
    \ \n        error(\"n must be positive\")\n    else if n == 0 \n        1\n  \
    \  else \n        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else \n        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return starts_one_ends(n / 2)\n    else \n       \
    \ return starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers that start or end with\
    \ 2.", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return 1\n    else \n        return 1 + starts_one_ends(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.", "    if n < 0 \n        error(\"n must be positive\")\n    else if\
    \ n == 0 \n        1\n    else \n        1 + starts_one_ends(n / 10)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</", " \
    \   if n == 0 \n        then return 0\n    else if n < 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        local count\
    \ = 1\n        while n > 1 \n            do count = count + 1\n            n =\
    \ n / 10\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(-2)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(0)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(2)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(3)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(4)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(5)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(6)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(7)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(8)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(9)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(11)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(12)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(13)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(14)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(15)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(16)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(17)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(18)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(19)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(20)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(21)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(22)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(23)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(24)\n\
    </cell>\n<code language=", "    if n == 1 \n        then return 1 \n        else\
    \ return 0 \n    else \n        val ones = starts_one_ends(n-1) + starts_one_ends(n-2)\
    \ \n        val zeros = starts_one_ends(n-1) + starts_one_ends(n-3) \n       \
    \ if zeros == 1 \n            then return ones \n            else return zeros\
    \ \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n == 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        count_starts_one_ends(n-1)\
    \ + count_starts_one_ends(n-2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else if n % 10 == 1 \n      \
    \  then return starts_one_ends(n / 10) + 1\n    else if n % 10 == 0 \n       \
    \ then return starts_one_ends(n / 10) + starts_one_ends(n / 10) + 1\n    else\
    \ return starts_one_ends(n / 10) + starts_one_ends(n / 10) + starts_one_ends(n\
    \ / 10) + 1\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_", "    if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) \nend\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100", "    if n == 1 \n        then\
    \ return 1 \n        else return 0 \n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"", "    if n < 0 \n        error(\"n must\
    \ be positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000013)\n</cell>", "    if n\
    \ == 0 \n        then return 0\n    else if n < 0 \n        then return 0\n  \
    \  else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do if i mod 10 == 1 \n\
    \                then count = count + 1\n                else count = count +\
    \ 1\n            end\n            i = i + 1\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n < 10 \n        return n\n    else \n\
    \        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        then return 1\n        else return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1)\n    end\nend", "    if n == 1 \n        return 1 \n\
    \    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local i = 1\n        local count = 0\n        while i\
    \ <= n \n            do if starts_one_ends(i) == 1 \n                then count\
    \ = count + 1\n                else return count\n            end\n          \
    \  i = i + 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 1\
    \ \n        then return 1 \n        else return starts_one_ends(n-1) + 1 \n  \
    \  end\nend", "    if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4) + count_one_ends(n-5)\
    \ + count_one_ends(n-6) + count_one_ends(n-7) + count_one_ends(n-8) + count_one_ends(n-9)\
    \ + count_one_ends(n-10)\n    end\nend", "    if n < 10 \n        return 0 \n\
    \    else \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that end with 2.", "    if n == 1 \n       \
    \ then return 1 \n        else return 0 \n    else \n        val x = starts_one_ends(n-1)\
    \ \n        val y = starts_one_ends(n-2) \n        if x == 1 \n            then\
    \ return 1 \n            else if y == 1 \n                then return 1 \n   \
    \             else return x + y \nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n < 10 \n        return 1 \n    else \n\
    \        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers that start or end with 2.", "    if\
    \ n == 0 \n        then return 0 \n    else \n        local count = 0 \n     \
    \   while n > 0 \n            do \n                if n % 10 == 1 \n         \
    \           then count = count + 1 \n                else \n                 \
    \   n = n / 10 \n            end \n        end \n        return count \nend \n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if n < 0 \n     \
    \   error(\"n must be positive\")\n    else if n == 0 \n        1\n    else \n\
    \        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\n", "    if n == 0 \n        then return 0\n    else if n == 1 \n    \
    \    then return 1\n    else \n        local count = 1\n        while n >= 10\
    \ \n            do n = n / 10\n            count = count + 1\n        end\n  \
    \      return count\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        then return 1\n    else \n        local count = 1\n        while n\
    \ >= 10 \n            then n = n / 10\n            then count = count + 1\n  \
    \      end\n        return count\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567891)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678910)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789011)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890101)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789010100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789010101)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890101010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890101011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901010100)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901010101)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789010101010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789010101011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890101010100)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890101010101)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901010101010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901010101011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789010101010100)\n\
    </cell>\n<code language=julia-1.5>\n", "    if n < 10 \n        return 0 \n  \
    \  else \n        return 1 + starts_one_ends(n - 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n  \
    \      then return 1\n    else if n == 2 \n        then return 0\n    else if\
    \ n % 2 == 0 \n        then return starts_one_ends(n / 2)\n    else \n       \
    \ return starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_end", "    if n < 10 \n        return 0\
    \ \n    else \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n /\
    \ 10)\n    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n < 10 \n        return 0 \n    else \n        return\
    \ 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>", "    if n == 0 \n        then return 0 \n\
    \        else if n % 10 == 1 \n            then return 1 \n            else return\
    \ starts_one_ends(n / 10) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100_000)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given positive integer\
    \ n.", "    if n < 0 \n        error(\"n must be positive\")\n    else if n ==\
    \ 0 \n        1\n    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>", "    if n < 10 \n        return 0 \n\
    \    else \n        return 1 + starts_one_ends(n - 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        local i::Int64 = 1\n        local count::Int64 = 0\n        while i <=\
    \ n \n            do if i%10 == 1 \n                then count = count + 1\n \
    \               else break\n            end\n            i = i + 1\n        end\n\
    \        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(2)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(3)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(4)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(5)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(6)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(7)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(8)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(9)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(23)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(24)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(25)\n\
    </cell>\n<code language=julia-1.4>", "    if n == 0 \n        then return 0\n\
    \    else if n < 0\n        then return -1\n    else if n == 1\n        then return\
    \ 1\n    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n \
    \       while i <= n \n            do if i %% 10 == 1 \n                then count\
    \ = count + 1\n                else return -1\n            end\n            i\
    \ = i + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else if n == 1 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n == 0 \n        then return 0\n    else\
    \ if n < 0 \n        then return 0\n    else if n == 1 \n        then return 1\n\
    \    else \n        let\n            digits = digits(n)\n            start = digits[1]\n\
    \            end = digits[end]\n            count = 0\n            for i in digits[2:end]\n\
    \                count = count + starts_one_ends(i)\n            count = count\
    \ + starts_one_ends(end)\n        return count\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567891)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890123)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901234567)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890", "    if n < 10 \n    \
    \    return 1 \n    else \n        return starts_one_ends(n / 10) + 1 \nend\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n<code\
    \ language=julia-1.3>", "    if n < 10 \n        return 1 \n    else \n      \
    \  return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        return 0 \n    else \n        return 1 + starts_one_ends(n / 10) \n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000013)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n / 2) + 1\n\
    \    else \n        return starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        local i = 1\n        local count = 0\n        while i <= n \n       \
    \     do if i %% 10 == 1 \n                then count = count + 1\n          \
    \      else break\n            end\n            i = i + 1\n        end\n     \
    \   return count\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n == 1 \n        then\
    \ return 1\n    else if n == 0 \n        then return 0\n    else \n        local\
    \ count = 1\n        while n >= 10 \n            do count = count + 1\n      \
    \      n = n / 10\n        end\n        return count\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        return 1 \n    else \n        return starts_one_ends(n/10) + 1 \n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"", "    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n -\
    \ 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of positive integers\
    \ that start or end with 2.", "    if n == 1 \n        then return 1 \n      \
    \  else return 0 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", " \
    \   if n == 1 \n        then return 1\n        else return 0\n    end\nend\n\"\
    \"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 10\
    \ \n        return 1 \n    else \n        return starts_one_ends(n/10) + 1 \n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return 1 \n    else \n        return starts_one_ends(n-1)\
    \ + ends_one_starts(n-1) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        then return 1\n\
    \    else if n < 0 \n        then return 0\n    else \n        count_starts_ends(n-1,\
    \ n+1) - count_starts_ends(n-1, n)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(0, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(2, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(3, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(4, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(5,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(6, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(7, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(8, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(9,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(11, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(12, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(13,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(14, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(15, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(16, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(17,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(18, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(19, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(20, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(21,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(22, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(23, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(24, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(25,\
    \ 10)", "    if n == 0 \n        then return 0\n    else if n == 1 \n        then\
    \ return 1\n    else \n        local i::Int64 = 1\n        local count::Int64\
    \ = 0\n        while i <= n \n            do if i%10 == 1 \n                then\
    \ count = count + 1\n                else break\n            end\n           \
    \ i = i + 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n == 0\
    \ \n        then return 0\n    else if n == 1 \n        then return 1\n    else\
    \ \n        let\n            digits = digits(n)\n            first = digits[1]\n\
    \            rest = digits[2:end]\n        in \n            if first == 1\n  \
    \              then starts_one_ends(rest)\n                else starts_one_ends(rest)\
    \ + starts_one_ends(first)\n        end\nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(123456789)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567891)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(123456789012)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1234567890123)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1234567890123456788)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12345678901234567889)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012345678899)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890", "    if n < 0\
    \ \n        error(\"n must be positive\")\n    else if n == 0 \n        1\n  \
    \  else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(11)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(13)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(14)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(15)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(16)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(17)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(18)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(19)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(20)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(21)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(22)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(23)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(24)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(25)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(26)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(27)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(28)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(29)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(30)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(31)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(32)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(33)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(34)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(35)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(36)\n</cell>\n<code language=julia-",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000013)\n</cell>",
  "    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n//10)\
    \ + starts_one_ends(n%10) + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(124)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(125)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(126)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(127)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(128)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(129)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(130)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(131)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(132)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(133)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(134)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(135)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(136)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(137)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(138)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(139)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(140)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(141)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(142)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(143)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(144)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(145)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(146)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(147)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(148)\n</cell>\n<code language=julia-1.5>\n\
    starts_", "    if n < 10 \n        then return 1\n        else if n % 10 == 1\
    \ \n            then return starts_one_ends(n / 10) + 1\n            else return\
    \ starts_one_ends(n / 10) + 1\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(", "    if n == 0 \n     \
    \   then return 0\n    else if n == 1 \n        then return 1\n    else if n %\
    \ 2 == 0 \n        then return starts_one_ends(n / 2)\n    else \n        return\
    \ starts_one_ends(n / 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"", "    if n < 0 \n\
    \        error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ if n == 1 \n        1\n    else \n        1 + starts_one_ends(n - 1)\nend",
  "    if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    if n == 0 \n        then return 0 \n    else \n \
    \       x <- starts_one_ends(n-1) \n        if n % 10 == 1 \n            then\
    \ return x + 1 \n        else return x \nend \n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n/2)\n    else\
    \ \n        then return starts_one_ends(n/2) + starts_one_ends(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.", "    if n == 1 \n        then return 1 \n        else\
    \ return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"", "    if n == 0 \n        then return 0\n    else if n == 1\
    \ \n        then return 1\n    else \n        count_one_ends(n-1) + count_one_ends(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.", "    if n < 10 \n        then return 1\n        else\
    \ return starts_one_ends(n//10) + starts_one_ends(n%10)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of integers that start or end with 1.",
  "    if n < 10 \n        return n\n    else \n        return starts_one_ends(n/10)\
    \ + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"", "    if n < 0 \n        error(\"\
    n must be positive\")\n    else if n == 0 \n        1\n    else \n        1 +\
    \ starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\n", "    if n < 10 \n        return 0 \n    else \n        return 1 +\
    \ starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of positive\
    \ integers less than or equal to n that start or end with 1.", "    if n < 10\
    \ \n        return 0 \n    else \n        return 1 + starts_one_ends(n//10) +\
    \ starts_one_ends(n%10) \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\n<code language=juli",
  "    if n == 1 \n        then return 1 \n        else return 0 \n    else \n   \
    \     let\n            digits = digits(n) \n            digits_count = length(digits)\
    \ \n            digits_sum = sum(digits) \n            digits_product = prod(digits)\
    \ \n            digits_quotient = quo(digits_sum, digits_count) \n           \
    \ digits_remainder = rem(n,digits_count) \n            digits_quotient_remainder\
    \ = quo(digits_quotient, digits_remainder) \n            digits_quotient_remainder_product\
    \ = quo(digits_quotient_remainder, digits_product) \n            digits_quotient_remainder_product_sum\
    \ = quo(digits_quotient_remainder_product, digits_sum) \n            digits_quotient_remainder_product_sum_product\
    \ = quo(digits_quotient_remainder_product_sum, digits_product) \n            digits_quotient_remainder_product_sum_product_quotient\
    \ = quo(digits_quotient_remainder_product_sum_product, digits_quotient) \n   \
    \         digits_quotient_remainder_product_sum_product_quotient_remainder = quo(digits_quotient_remainder_product_sum_product_quotient,\
    \ digits_remainder) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder, digits_product)\
    \ \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product,\
    \ digits_sum) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum,\
    \ digits_product) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product,\
    \ digits_quotient) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient_remainder\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient,\
    \ digits_remainder) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient_remainder_product\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient_remainder,\
    \ digits_product) \n            digits_quotient_remainder_product_sum_product_quotient_remain",
  "    if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n   \
    \     1\n    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        let\n            digits = digits(n)\n            start\
    \ = digits[1]\n            end = digits[end]\n        in \n            if start\
    \ == 1 \n                then starts_one_ends(end - 1)\n            else \n  \
    \              starts_one_ends(end - 1) + starts_one_ends(end - 2)\n        end\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n   \
    \     then return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n\
    \ / 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
