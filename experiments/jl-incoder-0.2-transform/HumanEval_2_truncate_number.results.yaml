language: jl
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write\
    \ a function that will compute the mean of a list of numbers.\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90kltyok.jl:13\nin expression starting at\
    \ /tmp/tmp90kltyok.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfr23rr9.jl:14\nin expression starting at\
    \ /tmp/tmpxfr23rr9.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nThe function truncate_number has now been implemented.\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31q75txw.jl:13\nin expression starting at\
    \ /tmp/tmp31q75txw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwb_f7j4.jl:1\nin expression starting at /tmp/tmpnwb_f7j4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the truncate function\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\n# Test the truncate function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ of a given number. \nThe function should work for both positive and negative\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tt7d_vy.jl:13\nin expression starting at\
    \ /tmp/tmp5tt7d_vy.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtaylgf4.jl:15\nin expression starting at\
    \ /tmp/tmpqtaylgf4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number\n    \n    if number < truncate_number:\n\
    \        truncate_number = truncate_number\n    \n    return truncate_number\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvv7it_st.jl:14\nin expression starting at\
    \ /tmp/tmpvv7it_st.jl:14\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp32hdz6ql.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp32hdz6ql.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive floating point number as an argument and returns the integer part\
    \ of the number.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2c6y1rj.jl:12\nin expression starting at\
    \ /tmp/tmpm2c6y1rj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    The function should accept a number as an argument and return the factorial of\
    \ that number.\nThe function should raise an error if the given number is not\
    \ a positive integer.\nThe function should raise an error if the given number\
    \ is a negative integer.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2_p3jd0.jl:15\nin expression starting at\
    \ /tmp/tmpe2_p3jd0.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    return truncate_number\n</code>\n\
    <|/ a tags=julia,floating-point |>\n<| c |>\nThis doesn't work if `number` is\
    \ negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\n\
    This doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if `number` is negative.\n<|/ c |>\n<| a dscore=5 |>\nThe most straightforward\
    \ way is to use round:\n<code>\njulia> round(3.5)\n2\n</code>\n<|/ a tags=julia,floating-point\
    \ |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\n\
    This doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is\
    \ negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe most straightforward way is to use round:\n<code>\n\
    julia> round(3.5)\n2\n</code>\n<|/ a tags=julia,floating-point |>\n<| c |>\nThis\
    \ doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is\
    \ negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe most straightforward way is to use round:\n<code>\njulia> round(3.5)\n\
    2\n</code>\n<|/ a tags=julia,floating-point |>\n<| c |>\nThis doesn't work if\
    \ `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n\
    <|/ c |>\n<| a tags=julia,floating-point |>\nThe most straightforward way is to\
    \ use round:\n<code>\njuli\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkppqf7je.jl:13\nin expression starting at\
    \ /tmp/tmpkppqf7je.jl:13\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    return truncate_number\nend\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number::Float64)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9kt2fqjy.jl:13\nin expression starting at\
    \ /tmp/tmp9kt2fqjy.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the truncation function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nThe round() function\nThe round() function rounds a floating\
    \ point number to the nearest integer or decimal number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6_w9wpa.jl:13\nin expression starting at\
    \ /tmp/tmpx6_w9wpa.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ps9vij1.jl:13\nin expression starting at\
    \ /tmp/tmp8ps9vij1.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# export\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkau4vb5f.jl:13\nin expression starting at\
    \ /tmp/tmpkau4vb5f.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpkryi8tl1.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpkryi8tl1.jl:17\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 4.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkryi8tl1.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkryi8tl1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkryi8tl1.jl:18\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkryi8tl1.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkryi8tl1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkryi8tl1.jl:19\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkryi8tl1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkryi8tl1.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    if number == 0.\n        return 0.\n    \n    digits = floor(log10(number))\n\
    \    decimals = digits - floor(digits)\n    \n    if number < 0.\n        return\
    \ 0.\n    \n    number = round(number, digits)\n    \n    return number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhetx2lb.jl:24\nin expression starting at\
    \ /tmp/tmpfhetx2lb.jl:24\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    truncate_number\
    \ = truncate_number - truncate_number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia,floating-point,truncate |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `truncate_number(-0.5)` returns `-0.5`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the negative number issue. Thanks!\n<|/ c |>\n<| a tags=julia,floating-point,truncate\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamiy/Trunc\n<code>\nusing\
    \ Trunc\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1jg5wor.jl:16\nin expression starting at\
    \ /tmp/tmpd1jg5wor.jl:16\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwgznm9o.jl:13\nin expression starting at\
    \ /tmp/tmpbwgznm9o.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number::Float64)\nend\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's try it out on a few examples:\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpisstiw3d.jl:12\nin expression starting at\
    \ /tmp/tmpisstiw3d.jl:12\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwgznm9o.jl:13\nin expression starting at\
    \ /tmp/tmpbwgznm9o.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp32hdz6ql.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp32hdz6ql.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive floating point number and returns the integer\
    \ part and the decimal part as a tuple.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_qshkt6.jl:13\nin expression starting at\
    \ /tmp/tmpy_qshkt6.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    The factorial of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1x9u8ryn.jl:15\nin expression starting at\
    \ /tmp/tmp1x9u8ryn.jl:15\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ a tags=julia |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoimtrjgx.jl:12\nin expression starting at\
    \ /tmp/tmpoimtrjgx.jl:12\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_5wu_ei.jl:13\nin expression starting at\
    \ /tmp/tmpu_5wu_ei.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    digits = math.floor(math.log(number, 10))\n    decimals = 10 **\
    \ digits - digits\n    \n    return number / decimals\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive floating point number and returns the integer part and the decimal\
    \ part separately. For example, truncate_number(3.5) should return (3,0.5).\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp82ggk5so.jl:12\nin expression starting at /tmp/tmp82ggk5so.jl:12\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    return truncate_number\nend\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the truncate function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that will compute the mean of a given\
    \ vector of numbers.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7rngq_gj.jl:13\nin expression starting at\
    \ /tmp/tmp7rngq_gj.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwgznm9o.jl:13\nin expression starting at\
    \ /tmp/tmpbwgznm9o.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive floating point number as input\
    \ and returns the integer part and the decimal part as a tuple.\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfiuh_64j.jl:15\nin expression starting at\
    \ /tmp/tmpfiuh_64j.jl:15\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3x1krpbc.jl:13\nin expression starting at\
    \ /tmp/tmp3x1krpbc.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nThe function truncate_number above returns the decimal part of the number.\
    \ Let's see how we can use it to round a number to the nearest integer:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbwhlnp9.jl:13\nin expression starting at\
    \ /tmp/tmprbwhlnp9.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number == 0.0:\n        return\
    \ number\n    \n    decimal_part = number % 1\n    \n    if decimal_part == 0.0:\n\
    \        return number\n    \n    integer_part = floor(number)\n    \n    return\
    \ integer_part + decimal_part\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) ==\
    \ 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzebbhcgr.jl:14\nin expression starting at\
    \ /tmp/tmpzebbhcgr.jl:14\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nThe function truncate_number above is very simple. It just returns the\
    \ number modulo 1, i.e. the fractional part of a number. Let's see how it works:\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_buamqvx.jl:13\nin expression starting at\
    \ /tmp/tmp_buamqvx.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\n# TEST truncate_number (5b)\n@test truncate_number(3.5)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.6) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.7) \u2248 truncate_number(3.5)\n@test truncate_number(3.8)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.9) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.10) \u2248 truncate_number(3.5)\n@test truncate_number(3.11)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.12) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.13) \u2248 truncate_number(3.5)\n@test truncate_number(3.14)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.15) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.16) \u2248 truncate_number(3.5)\n@test truncate_number(3.17)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.18) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.19) \u2248 truncate_number(3.5)\n@test truncate_number(3.20)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.21) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.22) \u2248 truncate_number(3.5)\n@test truncate_number(3.23)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.24) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.25) \u2248 truncate_number(3.5)\n@test truncate_number(3.26)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.27) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.28) \u2248 truncate_number(3.5)\n@test truncate_number(3.29)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.30) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.31) \u2248 truncate_\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6t5uo6pj.jl:15\nin expression starting at\
    \ /tmp/tmp6t5uo6pj.jl:15\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nThe function\
    \ truncate_number above is called with the argument 3.5 and returns the decimal\
    \ part of this number. Let's see how it works.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqy9lzp68.jl:13\nin expression starting at\
    \ /tmp/tmpqy9lzp68.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp32hdz6ql.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp32hdz6ql.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's write a function that will compute the mean of a given vector of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppohum5o3.jl:15\nin expression starting at\
    \ /tmp/tmppohum5o3.jl:15\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = trunc(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that converts a number from one base\
    \ to another. We'll use the function convert() from the Base package to convert\
    \ a number from one base to another.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jgyg5zi.jl:15\nin expression starting at\
    \ /tmp/tmp8jgyg5zi.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgs53jxxh.jl:14\nin expression starting at\
    \ /tmp/tmpgs53jxxh.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that will convert a number from one base to\
    \ another.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6auixglj.jl:13\nin expression starting at\
    \ /tmp/tmp6auixglj.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number\n    \n    return truncate_number\nend\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw8qrq2k0.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpw8qrq2k0.jl:20\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.5 == 0.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8qrq2k0.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8qrq2k0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpw8qrq2k0.jl:21\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.25 == 0.25\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8qrq2k0.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8qrq2k0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpw8qrq2k0.jl:22\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw8qrq2k0.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw8qrq2k0.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659823061
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to its decimal part.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperug85oa.jl:1\nin expression starting at /tmp/tmperug85oa.jl:1\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9m8544u.jl:12\nin expression starting at\
    \ /tmp/tmpv9m8544u.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    integer_part = floor(number)\n\
    \    \n    decimal_part = number - integer_part\n    \n    return decimal_part\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's write a function that can convert a number from one base to another.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqkkkh8r.jl:19\nin expression starting at\
    \ /tmp/tmplqkkkh8r.jl:19\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Given a positive floating point number, it can be decomposed\
    \ into\n    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0r3x55wl.jl:1\nin expression starting at /tmp/tmp0r3x55wl.jl:1\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number < 1:\n        return\
    \ number\n    \n    decimal_part = number % 1\n    \n    if number < 10 and decimal_part\
    \ == 0:\n        return number\n    \n    if number < 10 and decimal_part > 0:\n\
    \        return number - decimal_part\n    \n    if number < 100 and decimal_part\
    \ > 0:\n        return number - decimal_part + 10\n    \n    if number < 1000\
    \ and decimal_part > 0:\n        return number - decimal_part + 100\n    \n  \
    \  if number < 10000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 1000\n    \n    if number < 100000 and decimal_part > 0:\n        return number\
    \ - decimal_part + 10000\n    \n    if number < 1000000 and decimal_part > 0:\n\
    \        return number - decimal_part + 100000\n    \n    if number < 10000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 1000000\n    \n\
    \    if number < 100000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 10000000\n    \n    if number < 1000000000 and decimal_part > 0:\n       \
    \ return number - decimal_part + 100000000\n    \n    if number < 10000000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 1000000000\n \
    \   \n    if number < 100000000000 and decimal_part > 0:\n        return number\
    \ - decimal_part + 10000000000\n    \n    if number < 1000000000000 and decimal_part\
    \ > 0:\n        return number - decimal_part + 100000000000\n    \n    if number\
    \ < 10000000000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 1000000000000\n    \n    if number < 100000000000000 and decimal_part > 0:\n\
    \        return number - decimal_part + 10000000000000\n    \n    if number <\
    \ 1000000000000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 100000000000000\n    \n    if number < 10000000000000000 and decimal_part\
    \ > 0:\n        return number - decimal_part + 1000000000000000\n    \n    if\
    \ number < 100000000000000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 10000000000000000\n    \n    if number < 1000000000000000000 and decimal_part\
    \ > 0:\n        return number - decimal_part + 100000000000000000\n    \n    if\
    \ number < 10000000000000000000 and decimal_part > 0:\n        return number -\
    \ decimal_part + 1000000000000000000\n    \n    if number < 100000000000000000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 10000000000000000000\n\
    \    \n    if number < 1000000000000000000000 and decimal_part > 0:\n        return\
    \ number - decimal_part + 100000000000000000000\n    \n    if number < 10000000000000000000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 1000000000000000000000\n\
    \    \n    if number < 1000000000000000000\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2jzhb7k.jl:14\nin expression starting at\
    \ /tmp/tmpg2jzhb7k.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp32hdz6ql.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp32hdz6ql.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = round(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that converts a number from one base\
    \ to another.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf6d8glg.jl:14\nin expression starting at\
    \ /tmp/tmpqf6d8glg.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nThe function below will return the decimal\
    \ part of a floating point number in any base (base 10, base 2, base 8, base 16\
    \ and base 32).\n<code>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5yilnzoc.jl:14\nin expression starting at\
    \ /tmp/tmp5yilnzoc.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's try it out on some examples:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjyenav1.jl:15\nin expression starting at\
    \ /tmp/tmpsjyenav1.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's use our truncate function and see what happens when we truncate a number\
    \ that doesn't have decimal part:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) ==\
    \ 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mcot7qq.jl:13\nin expression starting at\
    \ /tmp/tmp1mcot7qq.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27839437)\n<|/ c |>\n<| c |>\n\
    It does provide an answer. He asked how to truncate a floating point number to\
    \ a decimal part and I provided a solution. He didn't ask for clarification or\
    \ critique.\n<|/ c |>\n<| c |>\nI didn't downvote your answer, but your answer\
    \ does not provide an answer to the question. Your answer merely explains how\
    \ to truncate a floating point number to a decimal part. Your answer does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ explain how to truncate a floating point number to a decimal part and does not\
    \ ex\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcj7uzox.jl:12\nin expression starting at\
    \ /tmp/tmpfcj7uzox.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphmim8ojg.jl:14\nin expression starting at\
    \ /tmp/tmphmim8ojg.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq33gfisq.jl:13\nin expression starting at\
    \ /tmp/tmpq33gfisq.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9m8544u.jl:12\nin expression starting at\
    \ /tmp/tmpv9m8544u.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that converts a number from one base to another.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_0sc_ns.jl:13\nin expression starting at\
    \ /tmp/tmpp_0sc_ns.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2sz4jv8u.jl:15\nin expression starting at\
    \ /tmp/tmp2sz4jv8u.jl:15\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to its decimal part.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperug85oa.jl:1\nin expression starting at /tmp/tmperug85oa.jl:1\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's see\
    \ how we can use our truncate function to truncate a number to a given number\
    \ of decimal places.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzngwqu22.jl:13\nin expression starting at\
    \ /tmp/tmpzngwqu22.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number returns the\
    \ truncated version of the given number. \nIt does not change the original number.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozxmai8a.jl:12\nin expression starting at\
    \ /tmp/tmpozxmai8a.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that can convert a number from one base to\
    \ another.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qy_0rcg.jl:13\nin expression starting at\
    \ /tmp/tmp_qy_0rcg.jl:13\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow\
    \ let's see how we can use these functions to solve the problem:\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdalu5hp8.jl:14\nin expression starting at\
    \ /tmp/tmpdalu5hp8.jl:14\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a string into a vector of characters.\nThe function should take a string as\
    \ input and return a vector of characters.\nThe function should ignore all non-alphabetic\
    \ characters and return an empty vector if the input string contains any non-alphabetic\
    \ characters.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t\
    @test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49e1sh4k.jl:13\nin expression starting at\
    \ /tmp/tmp49e1sh4k.jl:13\n"
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's use our truncate function to truncate our data frame to only include\
    \ data points with positive values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u54f_gm.jl:13\nin expression starting at\
    \ /tmp/tmp4u54f_gm.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_5wu_ei.jl:13\nin expression starting at\
    \ /tmp/tmpu_5wu_ei.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's use\
    \ our truncate function to truncate our dataset to only include data points with\
    \ sales above $50000.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoj9ydxds.jl:13\nin expression starting at\
    \ /tmp/tmpoj9ydxds.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number::Float64)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4ye4ktb.jl:12\nin expression starting at\
    \ /tmp/tmpo4ye4ktb.jl:12\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    if number < 0\n        error(\"Cannot truncate negative numbers\"\
    )\n    end\n    \n    digits = floor(log10(number))\n    \n    if digits < 0\n\
    \        error(\"Cannot truncate numbers with negative exponents\")\n    end\n\
    \    \n    digits = digits - 1\n    \n    if number < 10^digits\n        return\
    \ number\n    end\n    \n    digits = digits + 1\n    \n    truncate_digits =\
    \ 10^digits\n    \n    if number < truncate_digits\n        return number\n  \
    \  end\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits + 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwee9ix0_.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwee9ix0_.jl:1\n\
    in expression starting at /tmp/tmpwee9ix0_.jl:1\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwb_f7j4.jl:1\nin expression starting at /tmp/tmpnwb_f7j4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's create a function that can convert a number from one base to\
    \ another. We'll use our truncate_number function to get the decimal part of a\
    \ number and multiply it by the base to convert it.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphksp1zj6.jl:13\nin expression starting at\
    \ /tmp/tmphksp1zj6.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's try it out on our first number:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd119g0gf.jl:15\nin expression starting at\
    \ /tmp/tmpd119g0gf.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9m8544u.jl:12\nin expression starting at\
    \ /tmp/tmpv9m8544u.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number, digits)\nend\n</code>\n<|/ a tags=julia,floating-point\
    \ |>\n<| a dscore=2 |>\nI came up with a solution using Julia's built-in rounding\
    \ functions:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_y7t0u1.jl:12\nin expression starting at\
    \ /tmp/tmpj_y7t0u1.jl:12\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a string to a floating point number.\
    \ \nThe function should raise an error if the string cannot be converted to a\
    \ floating point number.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptng906lp.jl:15\nin expression starting at\
    \ /tmp/tmptng906lp.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp32hdz6ql.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp32hdz6ql.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwgznm9o.jl:13\nin expression starting at\
    \ /tmp/tmpbwgznm9o.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive floating point number as input\
    \ and returns the integer part of the number.\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudhk6fd2.jl:15\nin expression starting at\
    \ /tmp/tmpudhk6fd2.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number, digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that will compute\
    \ the mean of a vector of numbers:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3w7sz8g.jl:12\nin expression starting at\
    \ /tmp/tmpo3w7sz8g.jl:12\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp32hdz6ql.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp32hdz6ql.jl:17\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp32hdz6ql.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmp32hdz6ql.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp32hdz6ql.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp32hdz6ql.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9m8544u.jl:12\nin expression starting at\
    \ /tmp/tmpv9m8544u.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpudlwyxgh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpudlwyxgh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpudlwyxgh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpudlwyxgh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_5wu_ei.jl:13\nin expression starting at\
    \ /tmp/tmpu_5wu_ei.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
  timestamp: 1659823061
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits of an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps54qu1co.jl:13\nin expression starting at\
    \ /tmp/tmps54qu1co.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a positive floating point number and returns\
    \ the integer part and the decimal part as a tuple.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbklj9qxh.jl:15\nin expression starting at\
    \ /tmp/tmpbklj9qxh.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\nend\n</cell>\n<text>\nNow let's see how\
    \ we can use these functions to solve our problem:\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesfwvzd6.jl:12\nin expression starting at\
    \ /tmp/tmpesfwvzd6.jl:12\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\n</code>\n<|/ a |>\n<| a tags=julia\
    \ |>\nThe function truncate is deprecated. Use truncate instead.\n<code>\njulia>\
    \ truncate(3.5)\n0.5\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63uhz1qv.jl:13\nin expression starting at\
    \ /tmp/tmp63uhz1qv.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6znkm42.jl:15\nin expression starting at\
    \ /tmp/tmpx6znkm42.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write some functions to calculate\
    \ the mean and standard deviation of a given vector:\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtf_12zm.jl:14\nin expression starting at\
    \ /tmp/tmpqtf_12zm.jl:14\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ truncate_number(1000) should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8d90silm.jl:13\nin expression starting at\
    \ /tmp/tmp8d90silm.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = round(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7zi3klzq.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp7zi3klzq.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 4.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zi3klzq.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zi3klzq.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp7zi3klzq.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zi3klzq.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zi3klzq.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp7zi3klzq.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7zi3klzq.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7zi3klzq.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's implement the function truncate_number_with_precision!.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6qrrmcm.jl:13\nin expression starting at\
    \ /tmp/tmpx6qrrmcm.jl:13\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcnee8s7.jl:12\nin expression starting at\
    \ /tmp/tmprcnee8s7.jl:12\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpye7n9a60.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpye7n9a60.jl:18\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpye7n9a60.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpye7n9a60.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpye7n9a60.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpye7n9a60.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia,floating-point |>\n<| a dscore=2 |>\nThe answer by is\
    \ correct, but I thought I'd add some more information to help people who are\
    \ new to Julia.\nThe function truncate_number() returns a Float64. Julia has two\
    \ types of numbers: Float64 and BigFloat. Float64 is used for numbers that have\
    \ a decimal point and are small enough to fit in a single machine word. BigFloat\
    \ is used for numbers that have a decimal point and are large enough to fit in\
    \ a single machine word. \nWhen you write truncate_number(3.5), you are creating\
    \ a BigFloat. BigFloat is similar to Float64, but has more precision. BigFloat\
    \ is also faster than Float64. \nWhen you write truncate_number(3.5), you are\
    \ creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. Float64 is similar to BigFloat, but has less precision.\
    \ Float64 is also slower than BigFloat. \nWhen you write truncate_number(3.5),\
    \ you are creating a Float64. \nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcldpgj_3.jl:14\nin expression starting at\
    \ /tmp/tmpcldpgj_3.jl:14\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtaylgf4.jl:15\nin expression starting at\
    \ /tmp/tmpqtaylgf4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    if truncate_number < 0.5\n\
    \        truncate_number = truncate_number + 1.0\n    end\n    \n    return truncate_number\n\
    end\n</cell>\n<text>\nNow let's test our truncate function by applying it to a\
    \ few numbers:\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_30_htu.jl:19\nin expression starting at\
    \ /tmp/tmp2_30_htu.jl:19\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_5wu_ei.jl:13\nin expression starting at\
    \ /tmp/tmpu_5wu_ei.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\n</code>\n<|/\
    \ a tags=julia,floating-point,truncate |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `truncate_number(-3.5)` returns `-3.5` instead of `-3.0`\n<|/ c |>\n\
    <| c |>\nI fixed the issue by adding `if number < 0` before `truncate_number =\
    \ number % 1`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpol8lash_.jl:12\nin expression starting at\
    \ /tmp/tmpol8lash_.jl:12\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpky42mw0j.jl:13\nin expression starting at\
    \ /tmp/tmpky42mw0j.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    if number < 1:\n        return\
    \ number\n    \n    digits = floor(log10(number))\n    \n    if digits < 1:\n\
    \        return number\n    \n    digits = digits - 1\n    \n    decimals = round(number\
    \ / pow(10, digits))\n    \n    return round(number / pow(10, digits), digits)\
    \ + decimals\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpapo6sh9h.jl:14\nin expression starting at\
    \ /tmp/tmpapo6sh9h.jl:14\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwb_f7j4.jl:1\nin expression starting at /tmp/tmpnwb_f7j4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9m8544u.jl:12\nin expression starting at\
    \ /tmp/tmpv9m8544u.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to a decimal number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthfo2cn_.jl:1\nin expression starting at /tmp/tmpthfo2cn_.jl:1\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo4tth0r.jl:12\nin expression starting at\
    \ /tmp/tmpjo4tth0r.jl:12\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcnee8s7.jl:12\nin expression starting at\
    \ /tmp/tmprcnee8s7.jl:12\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj3ka38y.jl:14\nin expression starting at\
    \ /tmp/tmpgj3ka38y.jl:14\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that can convert a number from one base to\
    \ another. We'll use our truncate_number function to get the decimal part of the\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpet375yef.jl:13\nin expression starting at\
    \ /tmp/tmpet375yef.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe simplest way is to use floor\
    \ and ceil functions:\n<code>\nceil(3.5)\n</code>\n<|/ a tags=julia,truncate |>\n\
    <| a |>\nThe easiest way is to use round:\n<code>\nround(3.5)\n</code>\n<|/ a\
    \ tags=julia,truncate dscore=0 |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26258124)\n<|/ c\
    \ |>\n<| c |>\nIt does provide an answer to the question. `round` rounds a number\
    \ to the nearest integer. `ceil` rounds a number to the nearest integer above\
    \ the number. `floor` rounds a number to the nearest integer below the number.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26258124)\n<|/ c |>\n<| c |>\nIt does\
    \ provide an answer to the question. `round` rounds a number to the nearest integer.\
    \ `ceil` rounds a number to the nearest integer above the number. `floor` rounds\
    \ a number to the nearest integer below the number.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26258124)\n\
    <|/ c |>\n<| a tags=julia,truncate |>\nThe easiest way is to use round:\n<code>\n\
    round(3.5)\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,truncate |>\n<code>\n\
    trunc(3.5)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26258124)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer \nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwhubd3da.jl:14\nin expression starting at\
    \ /tmp/tmpwhubd3da.jl:14\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number returns the\
    \ truncated number as a floating point number.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw7x_v_g.jl:12\nin expression starting at\
    \ /tmp/tmpsw7x_v_g.jl:12\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    if truncate_number < 0.5\n\
    \        truncate_number = truncate_number + 1.0\n    end\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of digits of a given number.\
    \ \nThe function should work for both positive and negative numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfm61gt22.jl:19\nin expression starting at\
    \ /tmp/tmpfm61gt22.jl:19\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1olyzmi.jl:13\nin expression starting at\
    \ /tmp/tmpm1olyzmi.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's implement a function that will compute the mean of a given vector of\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcux_ryk.jl:15\nin expression starting at\
    \ /tmp/tmppcux_ryk.jl:15\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nThe function\
    \ truncate truncates a number to the nearest integer or float.\nusing Test\n\n\
    @testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpor3ljdqb.jl:13\nin expression starting at\
    \ /tmp/tmpor3ljdqb.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9m8544u.jl:12\nin expression starting at\
    \ /tmp/tmpv9m8544u.jl:12\n"
  stdout: ''
  timestamp: 1659823060
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpky42mw0j.jl:13\nin expression starting at\
    \ /tmp/tmpky42mw0j.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcnee8s7.jl:12\nin expression starting at\
    \ /tmp/tmprcnee8s7.jl:12\n"
  stdout: ''
  timestamp: 1659823063
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \"\"\"\n    Truncate a floating point number to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwb_f7j4.jl:1\nin expression starting at /tmp/tmpnwb_f7j4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zi08vi3.jl:13\nin expression starting at\
    \ /tmp/tmp0zi08vi3.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a positive floating point number as an argument and returns\
    \ the integer part and the decimal part as a tuple.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkgtb1en.jl:13\nin expression starting at\
    \ /tmp/tmprkgtb1en.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj7htrq.jl:13\nin expression starting at\
    \ /tmp/tmp6cj7htrq.jl:13\n"
  stdout: ''
  timestamp: 1659823059
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    if number < 0\n        error(\"number must be positive\")\n    end\n\
    \    \n    digits = floor(log10(number))\n    \n    if digits < 0\n        error(\"\
    number must be positive\")\n    end\n    \n    digits = digits + 1\n    \n   \
    \ number = round(number * 10^digits)\n    \n    return number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(-3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsp94jwzw.jl:27\nin expression starting at\
    \ /tmp/tmpsp94jwzw.jl:27\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    if truncate_number\
    \ == number\n        \n        return number\n    \n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    \n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm602ihk.jl:21\nin expression starting at\
    \ /tmp/tmpcm602ihk.jl:21\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    number = round(number)\n    \n    integer_part = floor(number)\n\
    \    \n    decimal_part = number - integer_part\n    \n    return decimal_part\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,floating-point |>\nI wrote a package\
    \ for Julia called FloatMath.\n<code>\nusing FloatMath\ntrunc(3.5)\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_k6xagq8.jl:18\nin expression starting at\
    \ /tmp/tmp_k6xagq8.jl:18\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nTruncating floats\n\
    We have seen that truncating floats results in rounding errors.\nWe also saw that\
    \ we can truncate floats using the trunc function.\nThe trunc function truncates\
    \ the decimal part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also\
    \ truncates the integer part of a number.\nFor example, trunc(3.5) returns 3.\n\
    trunc also truncates the decimal part of a number.\nFor example, trunc(3.5) returns\
    \ 3.\ntrunc also truncates the integer part of a number.\nFor example, trunc(3.5)\
    \ returns 3.\ntrunc also truncates the decimal part of a number.\nFor example,\
    \ trunc(3.5) returns 3.\ntrunc also truncates the integer part of a number.\n\
    For example, trunc(3.5) returns 3.\ntrunc also truncates the decimal part of a\
    \ number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates the integer\
    \ part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates\
    \ the decimal part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also\
    \ truncates the integer part of a number.\nFor example, trunc(3.5) returns 3.\n\
    trunc also truncates the decimal part of a number.\nFor example, trunc(3.5) returns\
    \ 3.\ntrunc also truncates the integer part of a number.\nFor example, trunc(3.5)\
    \ returns 3.\ntrunc also truncates the decimal part of a number.\nFor example,\
    \ trunc(3.5) returns 3.\ntrunc also truncates the integer part of a number.\n\
    For example, trunc(3.5) returns 3.\ntrunc also truncates the decimal part of a\
    \ number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates the integer\
    \ part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates\
    \ the decimal part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also\
    \ truncates the integer part of a number.\nFor example, trunc(3.5) returns 3.\n\
    trunc also truncates the decimal part of a number.\nFor example, trunc(3.5) returns\
    \ 3.\ntrunc also truncates the integer part of a number.\nFor example, trunc(3.5)\
    \ returns 3.\ntrunc also truncates the decimal part of a number.\nFor example,\
    \ trunc(3.5) returns 3.\ntrunc also truncates the integer part of a number.\n\
    For example, trunc(3.5) returns 3.\ntrunc also truncates the decimal part of a\
    \ number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates the integer\
    \ part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates\
    \ the decimal part \nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7nspywrs.jl:13\nin expression starting at\
    \ /tmp/tmp7nspywrs.jl:13\n"
  stdout: ''
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    if truncate_number\
    \ == number\n        truncate_number = number\n    else\n        truncate_number\
    \ = truncate_number - truncate_number * truncate_number / number\n    end\n  \
    \  \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\
    \t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0)\
    \ == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpji9pkaen.jl:21\nin expression starting at\
    \ /tmp/tmpji9pkaen.jl:21\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write\
    \ a function that will return the number of digits of an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplpa0p9xu.jl:13\nin expression starting at\
    \ /tmp/tmplpa0p9xu.jl:13\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpudlwyxgh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpudlwyxgh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpudlwyxgh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpudlwyxgh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6znkm42.jl:15\nin expression starting at\
    \ /tmp/tmpx6znkm42.jl:15\n"
  stdout: ''
  timestamp: 1659823062
- exit_code: 0
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = number % 1\n    return truncate_number\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\
    \t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpudlwyxgh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpudlwyxgh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(3.5) == 0.5\n  UndefVarError: truncate_number not defined\n\
    \  Stacktrace:\n   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpudlwyxgh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(1.25) == 0.25\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpudlwyxgh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(123.0) == 0.0\n  UndefVarError: truncate_number not defined\n  Stacktrace:\n\
    \   [1] truncate_number(number::Float64)\n     @ Main /tmp/tmpudlwyxgh.jl:11\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpudlwyxgh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpudlwyxgh.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823064
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\n    return truncate_number\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
    \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp42e5shda.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmp42e5shda.jl:18\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:19\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\ntest set: Test\
    \ Failed at /tmp/tmp42e5shda.jl:20\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp42e5shda.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp42e5shda.jl:17\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    \n    truncate_number = round(number, digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that will compute\
    \ the mean of a vector of numbers. We'll use Julia's built-in mean function and\
    \ pass in our vector of numbers. We will also pass in an optional argument to\
    \ tell us how many numbers to include in the mean.\nusing Test\n\n@testset begin\n\
    \ncandidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4w_mbbcd.jl:13\nin expression starting at\
    \ /tmp/tmp4w_mbbcd.jl:13\n"
  stdout: ''
  timestamp: 1659823065
- exit_code: 1
  program: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
    \    and integer part (largest integer smaller than given number) and decimals\n\
    \    (leftover part always smaller than 1).\n\n    Return the decimal part of\
    \ the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
    \ \n    truncate_number = trunc(number)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = truncate_number;\n\t@test(candidate(3.5) == 0.5)\n\t@test(candidate(1.25)\
    \ == 0.25)\n\t@test(candidate(123.0) == 0.0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz77zjq8v.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmpz77zjq8v.jl:17\n  Expression: candidate(3.5)\
    \ == 0.5\n   Evaluated: 3.0 == 0.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz77zjq8v.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz77zjq8v.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz77zjq8v.jl:18\n  Expression: candidate(1.25) == 0.25\n  \
    \ Evaluated: 1.0 == 0.25\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz77zjq8v.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz77zjq8v.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz77zjq8v.jl:19\n  Expression: candidate(123.0) == 0.0\n  \
    \ Evaluated: 123.0 == 0.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz77zjq8v.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz77zjq8v.jl:16\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  timestamp: 1659823065
