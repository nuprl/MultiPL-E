language: jl
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not spaces.\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4iasqzql.jl:24\nin expression starting at\
    \ /tmp/tmp4iasqzql.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not letters.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgpo47ph.jl:26\nin expression starting at\
    \ /tmp/tmpkgpo47ph.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp86_p0jkl.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp86_p0jkl.jl:35\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key \"a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmp86_p0jkl.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86_p0jkl.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86_p0jkl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp86_p0jkl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key \"\
    a\" not found\n  Stacktrace:\n   [1] getindex\n     @ ./dict.jl:481 [inlined]\n\
    \   [2] histogram(test::String)\n     @ Main /tmp/tmp86_p0jkl.jl:22\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86_p0jkl.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86_p0jkl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp86_p0jkl.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key \"a\" not found\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./dict.jl:481 [inlined]\n   [2] histogram(test::String)\n     @ Main /tmp/tmp86_p0jkl.jl:22\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp86_p0jkl.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp86_p0jkl.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp86_p0jkl.jl:38\n  Test threw exception\n  Expression:\
    \ can"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in test\n       \
    \ if histogram[c] == 0\n            histogram[c] = 1\n        else\n         \
    \   histogram[c] += 1\n        end\n    end\n    return histogram\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpea1ndh4u.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmpea1ndh4u.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError:\
    \ key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpea1ndh4u.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpea1ndh4u.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpea1ndh4u.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpea1ndh4u.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  KeyError: key 'a'\
    \ not found\n  Stacktrace:\n   [1] getindex(h::Dict{String, Int64}, key::Char)\n\
    \     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n     @ Main /tmp/tmpea1ndh4u.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpea1ndh4u.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpea1ndh4u.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpea1ndh4u.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  KeyError: key 'a' not found\n  Stacktrace:\n   [1] getindex(h::Dict{String,\
    \ Int64}, key::Char)\n     @ Base ./dict.jl:481\n   [2] histogram(test::String)\n\
    \     @ Main /tmp/tmpea1ndh4u.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpea1ndh4u.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpea1ndh4u.jl:33\ntest"
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the number of unique letters in the string.\n    \n    Example:\n  \
    \  >>> count_unique_letters(\"a b c\")\n    3\n    >>> count_unique_letters(\"\
    a b b a\")\n    2\n    >>> count_unique_letters(\"a b c a b\")\n    2\n    >>>\
    \ count_unique_letters(\"b b b b a\")\n    4\n    >>> count_unique_letters(\"\"\
    )\n    0\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp73_vkst5.jl:30\nin expression starting at\
    \ /tmp/tmp73_vkst5.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!()\n    letters.reverse!()\n    for letter in letters do\n \
    \       histogram[letter] = histogram[letter] + 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string\nthat are uppercase letters.\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn1evaj63.jl:23\nin expression starting at /tmp/tmpn1evaj63.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all numbers and only count the letters\
    \ a-z.\nThe function should ignore all special characters and only count the letters\
    \ a-z.\nThe function should ignore all whitespace and only count the letters a-z.\n\
    The function should ignore all words that are shorter than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain at least one digit.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain at least one special character.\nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain at least one letter.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ at least one upper case letter.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain at\
    \ least one lower case letter.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain at\
    \ least one upper case letter and at least one lower case letter.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain at least one upper case letter and at least one\
    \ lower case letter and at least one digit.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ at least one upper case letter and at least one lower case letter and at least\
    \ one special character.\nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 20 characters and that contain at least one\
    \ upper case letter and at least one lower case letter and at least one special\
    \ character and at least one digit.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and \nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7josmkef.jl:24\nin expression starting at\
    \ /tmp/tmp7josmkef.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpit6j40cy.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpit6j40cy.jl:22\n\
    in expression starting at /tmp/tmpit6j40cy.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore non-letters.\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0i8kktey.jl:29\nin expression starting at\
    \ /tmp/tmp0i8kktey.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\
    \ \nWrite a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that \nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpcbj4fglp.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcbj4fglp.jl:22\n\
    in expression starting at /tmp/tmpcbj4fglp.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        if !haskey(histogram, c)\n            histogram[c] = 1\n        else\n\
    \            histogram[c] += 1\n        end\n    end\n    return histogram\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all non-word\
    \ characters (spaces, punctuation, etc.).\nThe function should ignore all empty\
    \ strings.\nThe function should ignore all strings consisting of only whitespace.\n\
    The function should ignore all strings consisting of only a single word.\nThe\
    \ function should ignore all strings consisting of only a single word and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters.\nThe function should ignore all strings consisting of only a single\
    \ word and non-word characters and whitespace.\nThe function should ignore all\
    \ strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single word and non-word characters and whitespace.\nThe function should ignore\
    \ all strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single word and non-word characters and whitespace.\nThe function should ignore\
    \ all strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single word and non-word characters and whitespace.\nThe function should ignore\
    \ all strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2k_t1xe.jl:29\nin expression starting at\
    \ /tmp/tmpw2k_t1xe.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and split on whitespace.\nThe function\
    \ should ignore all empty words.\nThe function should ignore all words that are\
    \ shorter than 3 characters.\nThe function should ignore all words that are longer\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 3 characters.\nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 20 characters and shorter than 3 characters.\nThe function should ignore all\
    \ words that are longer than 20 characters and shorter than 20 characters.\nThe\
    \ function should ignore all words that are longer than 3 characters and longer\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and longer than 3 characters.\nThe function should ignore all words\
    \ that are longer than 3 characters and longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 20 characters and longer than 3\
    \ characters.\nThe function should ignore all words that are longer than 20 characters\
    \ and longer than 20 characters.\nThe function should ignore all words that are\
    \ longer than 3 characters and longer than 3 characters.\nThe function should\
    \ ignore all words that are longer than 3 characters and longer than 20 characters.\n\
    The function should ignore all words that are longer than 3 characters and longer\
    \ than 3 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and longer than 20 characters.\nThe function should ignore all\
    \ words that are longer than 20 characters and longer than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters and longer\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and longer than 3 characters.\nThe function should ignore all words\
    \ that are longer than 3 characters and longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and longer than 3\
    \ characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and longer than 20 characters.\nThe function should ignore all words that are\
    \ longer than 20 characters and longer than 3 characters.\nThe function should\
    \ ignore all words that are longer than 20 characters and longer than 20 characters.\n\
    The function should ignore all words that are longer than 3 characters and longer\
    \ than 3 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and \nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0zi_b5_.jl:26\nin expression starting at\
    \ /tmp/tmp_0zi_b5_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = letters[2:end]\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of letters in the string\
    \ that occur more than once.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfns4pse6.jl:27\nin expression starting at\
    \ /tmp/tmpfns4pse6.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with the letters sorted alphabetically.\n\
    Example:\n>>> sort(\"a b c\")\n\"a b c\"\n>>> sort(\"a b b a\")\n\"a b a\"\n>>>\
    \ sort(\"\")\n\"\"\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinlvuhcv.jl:30\nin expression starting at\
    \ /tmp/tmpinlvuhcv.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    histogram\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string. \nThe function should ignore all non-word characters (spaces,\
    \ punctuation, etc.)\nThe function should ignore case when counting words.\nThe\
    \ function should ignore all empty strings.\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmprq0ws34c.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprq0ws34c.jl:22\n\
    in expression starting at /tmp/tmprq0ws34c.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpeet_erma.jl:21 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeet_erma.jl:22\n\
    in expression starting at /tmp/tmpeet_erma.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sn1mlp3.jl:26\nin expression starting at\
    \ /tmp/tmp1sn1mlp3.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkopbxez8.jl:26\nin expression starting at\
    \ /tmp/tmpkopbxez8.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a string with the first letter of\
    \ each word capitalized. \nFor example \"hello world\" returns \"Hello World\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmj0e5kt.jl:26\nin expression starting at\
    \ /tmp/tmpvmj0e5kt.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"\
    a\" => 2, \"b\" => 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>>\
    \ histogram(\"\")\n    Dict()\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String,\
    \ Int64}> \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of times\
    \ each letter appears in the string. \n    \n    Example:\n    >>> count_letters(\"\
    a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> count_letters(\"\
    a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> count_letters(\"a b c a\
    \ b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> count_letters(\"b b b b a\"\
    )\n    Dict(\"b\" => 4)\n    >>> count_letters(\"\")\n    Dict()\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwb4nr1z.jl:24\nin expression starting at\
    \ /tmp/tmpdwb4nr1z.jl:24\n"
  stdout: ''
