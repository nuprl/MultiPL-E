name: HumanEval_99_closest_integer
language: jl
prompt: "\"\"\"\n    Create a function that takes a value (string) representing a\
  \ number\n    and returns the closest integer to it. If the number is equidistant\n\
  \    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"\
  10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding\
  \ away from zero means that if the given number is equidistant\n    from two integers,\
  \ the one you should return is the one that is the\n    farthest from zero. For\
  \ example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"\
  -14.5\") should return -15.\n    \"\"\"\nfunction closest_integer(value::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = closest_integer;\n\t@test(candidate(\"\
  10\") == 10)\n\t@test(candidate(\"14.5\") == 15)\n\t@test(candidate(\"-15.5\") ==\
  \ -16)\n\t@test(candidate(\"15.3\") == 15)\n\t@test(candidate(\"0\") == 0)\nend\n"
completions: ["    closest_integer = math.ceil(value)\n    if closest_integer == value:\n\
    \        closest_integer = math.floor(value)\n    return closest_integer\nend",
  "    closest_integer = Int(0)\n    \n    if value == \"0\" \n        closest_integer\
    \ = Int(0)\n    else\n        closest_integer = Int(value)\n    end\n    \n  \
    \  if closest_integer == Int(0)\n        closest_integer = Int(value)\n    end\n\
    \    \n    if closest_integer == Int(value)\n        closest_integer = Int(value)\n\
    \    end\n    \n    if closest_integer == Int(value) - Int(value)\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) - Int(value)\
    \ - Int(value)\n        closest_integer = Int(value)\n    end\n    \n    if closest_integer\
    \ == Int(value) - Int(value) - Int(value) - Int(value)\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value)\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\n\
    \        closest_integer = Int(value)\n    end\n    \n    if closest_integer ==\
    \ Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - Int(value) - Int(value) - Int(value) - Int(value)\
    \ - Int(value) - Int(value) - ", "    closest_integer = Int(0)\n    closest_integer\
    \ = if value == \"-inf\" then -Inf else if value == \"inf\" then Inf else if value\
    \ == \"nan\" then NaN else if value == \"-nan\" then -NaN else if value == \"\
    0\" then 0 else if value == \"1\" then 1 else if value == \"2\" then 2 else if\
    \ value == \"3\" then 3 else if value == \"4\" then 4 else if value == \"5\" then\
    \ 5 else if value == \"6\" then 6 else if value == \"7\" then 7 else if value\
    \ == \"8\" then 8 else if value == \"9\" then 9 else if value == \"10\" then 10\
    \ else if value == \"11\" then 11 else if value == \"12\" then 12 else if value\
    \ == \"13\" then 13 else if value == \"14\" then 14 else if value == \"15\" then\
    \ 15 else if value == \"16\" then 16 else if value == \"17\" then 17 else if value\
    \ == \"18\" then 18 else if value == \"19\" then 19 else if value == \"20\" then\
    \ 20 else if value == \"21\" then 21 else if value == \"22\" then 22 else if value\
    \ == \"23\" then 23 else if value == \"24\" then 24 else if value == \"25\" then\
    \ 25 else if value == \"26\" then 26 else if value == \"27\" then 27 else if value\
    \ == \"28\" then 28 else if value == \"29\" then 29 else if value == \"30\" then\
    \ 30 else if value == \"31\" then 31 else if value == \"32\" then 32 else if value\
    \ == \"33\" then 33 else if value == \"34\" then 34 else if value == \"35\" then\
    \ 35 else if value == \"36\" then 36 else if value == \"37\" then 37 else if value\
    \ == \"38\" then 38 else if value == \"39\" then 39 else if value == \"40\" then\
    \ 40 else if value == \"41\" then 41 else if value == \"42\" then 42 else if value\
    \ == \"43\" then 43 else if value == \"44\" then 44 else if value == \"45\" then\
    \ 45 else if value == \"46\" then 46 else if value == \"47\" then 47 else if value\
    \ == \"48\" then 48 else if value == \"49\" then 49 else if value == \"50\" then\
    \ 50 else if value == \"51\" then 51 else if value == \"52\" then 52 else if value\
    \ == \"53\" then 53 else if value == \"54\" then 54 else if value == \"55\" then\
    \ 55 else if value == \"56\" then 56 else if value == \"57\" then 57 else if ",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value\
    \ \n        closest_integer = Int64(math.floor(value))\n    end\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    local closest = 0\n        local closestDiff = math.abs(closest)\n      \
    \  for num in string.gmatch(value, \"%d+\") do\n            local diff = math.abs(num\
    \ - closest)\n            if diff < closestDiff then\n                closestDiff\
    \ = diff\n                closest = num\n            end\n        end\n      \
    \  return closest\n    end\nend\n\"\"\"\n    Create a function that takes a value\
    \ (string) representing a number\n    and returns the closest float to it. If\
    \ the number is equidistant\n    from two integers, round it away from zero.",
  "    if value == \"\"\n        error(\"Value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"Value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"Value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"Value cannot be 0\")\n    elseif value == \"1\"\n        error(\"\
    Value cannot be 1\")\n    elseif value == \"2\"\n        error(\"Value cannot\
    \ be 2\")\n    elseif value == \"3\"\n        error(\"Value cannot be 3\")\n \
    \   elseif value == \"4\"\n        error(\"Value cannot be 4\")\n    elseif value\
    \ == \"5\"\n        error(\"Value cannot be 5\")\n    elseif value == \"6\"\n\
    \        error(\"Value cannot be 6\")\n    elseif value == \"7\"\n        error(\"\
    Value cannot be 7\")\n    elseif value == \"8\"\n        error(\"Value cannot\
    \ be 8\")\n    elseif value == \"9\"\n        error(\"Value cannot be 9\")\n \
    \   elseif value == \"10\"\n        error(\"Value cannot be 10\")\n    elseif\
    \ value == \"11\"\n        error(\"Value cannot be 11\")\n    elseif value ==\
    \ \"12\"\n        error(\"Value cannot be 12\")\n    elseif value == \"13\"\n\
    \        error(\"Value cannot be 13\")\n    elseif value == \"14\"\n        error(\"\
    Value cannot be 14\")\n    elseif value == \"15\"\n        error(\"Value cannot\
    \ be 15\")\n    elseif value == \"16\"\n        error(\"Value cannot be 16\")\n\
    \    elseif value == \"17\"\n        error(\"Value cannot be 17\")\n    elseif\
    \ value == \"18\"\n        error(\"Value cannot be 18\")\n    elseif value ==\
    \ \"19\"\n        error(\"Value cannot be 19\")\n    elseif value == \"20\"\n\
    \        error(\"Value cannot be 20\")\n    elseif value == \"21\"\n        error(\"\
    Value cannot be 21\")\n    elseif value == \"22\"\n        error(\"Value cannot\
    \ be 22\")\n    elseif value == \"23\"\n        error(\"Value cannot be 23\")\n\
    \    elseif value == \"24\"\n        error(\"Value cannot be 24\")\n    elseif\
    \ value == \"25\"\n        error(\"Value cannot be 25\")\n    elseif value ==\
    \ \"26\"\n        error(\"Value cannot be 26\")\n    elseif value == \"27\"\n\
    \        error(\"Value cannot be 27\")\n    elseif value == \"28\"\n        error(\"\
    Value cannot be 28\")\n    elseif value == \"29\"\n        error(\"Value cannot\
    \ be 29\")\n    elseif value == \"30\"\n        error(\"Value cannot be 30\")\n\
    \    elseif value == \"31\"\n        error(\"Value cannot be 31\")\n    elseif\
    \ value == \"32\"\n        error(\"Value cannot be 32\")\n    elseif value ==\
    \ \"33\"\n        error(\"Value cannot be 33\")\n    elseif value == \"34\"\n\
    \        error(\"Value cannot be 34\")", "    if value == \"-inf\" \n        then\
    \ return -Infinity \n    else if value == \"inf\" \n        then return Infinity\
    \ \n    else if value == \"nan\" \n        then return NaN \n    else if value\
    \ == \"0\" \n        then return 0 \n    else if value == \"1\" \n        then\
    \ return 1 \n    else if value == \"2\" \n        then return 2 \n    else if\
    \ value == \"3\" \n        then return 3 \n    else if value == \"4\" \n     \
    \   then return 4 \n    else if value == \"5\" \n        then return 5 \n    else\
    \ if value == \"6\" \n        then return 6 \n    else if value == \"7\" \n  \
    \      then return 7 \n    else if value == \"8\" \n        then return 8 \n \
    \   else if value == \"9\" \n        then return 9 \n    else if value == \"10\"\
    \ \n        then return 10 \n    else if value == \"11\" \n        then return\
    \ 11 \n    else if value == \"12\" \n        then return 12 \n    else if value\
    \ == \"13\" \n        then return 13 \n    else if value == \"14\" \n        then\
    \ return 14 \n    else if value == \"15\" \n        then return 15 \n    else\
    \ if value == \"16\" \n        then return 16 \n    else if value == \"17\" \n\
    \        then return 17 \n    else if value == \"18\" \n        then return 18\
    \ \n    else if value == \"19\" \n        then return 19 \n    else if value ==\
    \ \"20\" \n        then return 20 \n    else if value == \"21\" \n        then\
    \ return 21 \n    else if value == \"22\" \n        then return 22 \n    else\
    \ if value == \"23\" \n        then return 23 \n    else if value == \"24\" \n\
    \        then return 24 \n    else if value == \"25\" \n        then return 25\
    \ \n    else if value == \"26\" \n        then return 26 \n    else if value ==\
    \ \"27\" \n        then return 27 \n    else if value == \"28\" \n        then\
    \ return 28 \n    else if value == \"29\" \n        then return 29 \n    else\
    \ if value == \"30\" \n        then return 30 \n    else if value == \"31\" \n\
    \        then return 31 \n    else if value == \"32\" \n        then return 32\
    \ \n    else if value == \"33\" \n        then return 33 \n    else if value ==\
    \ \"34\" \n        then return 34 \n    else if value == \"35\" \n        then\
    \ return 35 \n    else if value ", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value:\n        closest_integer = 0\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    closest_integer = Int(0)\n    \n\
    \    if value == \"-inf\" or value == \"inf\" or value == \"nan\" then\n     \
    \   return Int(0)\n    end", "    if value == \"-inf\" || value == \"inf\" \n\
    \        then return value\n    else if value == \"-inf\" \n        then return\
    \ -value\n    else if value == \"inf\" \n        then return value\n    else if\
    \ value == \"nan\" \n        then return value\n    else if value == \"0\" \n\
    \        then return 0\n    else if value == \"1\" \n        then return 1\n \
    \   else if value == \"2\" \n        then return 2\n    else if value == \"3\"\
    \ \n        then return 3\n    else if value == \"4\" \n        then return 4\n\
    \    else if value == \"5\" \n        then return 5\n    else if value == \"6\"\
    \ \n        then return 6\n    else if value == \"7\" \n        then return 7\n\
    \    else if value == \"8\" \n        then return 8\n    else if value == \"9\"\
    \ \n        then return 9\n    else if value == \"10\" \n        then return 10\n\
    \    else if value == \"11\" \n        then return 11\n    else if value == \"\
    12\" \n        then return 12\n    else if value == \"13\" \n        then return\
    \ 13\n    else if value == \"14\" \n        then return 14\n    else if value\
    \ == \"15\" \n        then return 15\n    else if value == \"16\" \n        then\
    \ return 16\n    else if value == \"17\" \n        then return 17\n    else if\
    \ value == \"18\" \n        then return 18\n    else if value == \"19\" \n   \
    \     then return 19\n    else if value == \"20\" \n        then return 20\n \
    \   else if value == \"21\" \n        then return 21\n    else if value == \"\
    22\" \n        then return 22\n    else if value == \"23\" \n        then return\
    \ 23\n    else if value == \"24\" \n        then return 24\n    else if value\
    \ == \"25\" \n        then return 25\n    else if value == \"26\" \n        then\
    \ return 26\n    else if value == \"27\" \n        then return 27\n    else if\
    \ value == \"28\" \n        then return 28\n    else if value == \"29\" \n   \
    \     then return 29\n    else if value == \"30\" \n        then return 30\n \
    \   else if value == \"31\" \n        then return 31\n    else if value == \"\
    32\" \n        then return 32\n    else if value == \"33\" \n        then return\
    \ 33\n    else if value == \"34\" \n        then return 34\n    else if value ",
  "    if value == \"\"\n        error(\"value cannot be an empty string\")\n    else\n\
    \        local value = tonumber(value)\n        if value == 0\n            error(\"\
    value cannot be 0\")\n        else\n            local closest = 0\n          \
    \  local closestDiff = abs(value - closest)\n            local closestDiffSquared\
    \ = closestDiff ^ 2\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closestDiffSquared + 1\n            local closestDiffSquared\
    \ = closestDiffSquared + 1\n            local closestDiffSquared = closestDiffSquared\
    \ + 1\n            local closestDiffSquared = closestDiffSquared + 1\n       \
    \     local closestDiffSquared = closest", "    closest_integer = Int(0)\n   \
    \ \n    if value == \"0\" || value == \"-0\" \n        then return 0\n    \n \
    \   digits = split(value, \".\")\n    \n    if length(digits) == 1 \n        then\
    \ return Int(digits[0])\n    \n    digits_int = map(Int, digits)\n    \n    if\
    \ length(digits_int) == 1 \n        then return digits_int[0]\n    \n    digits_int\
    \ = sort(digits_int)\n    \n    if digits_int[1] < digits_int[0]\n        then\
    \ return digits_int[1]\n    \n    closest_integer = digits_int[1]\n    \n    for\
    \ d in digits_int[2:end]\n        then if d < closest_integer\n            then\
    \ closest_integer = d\n        end\n    end\n    \n    return closest_integer\n\
    end\n</cell>\n<text>\nThe function closest_integer is now ready to be used in\
    \ a Julia program:", "    if value == \"0\" || value == \"-0\" \n        then\
    \ return 0\n    else if value == \"1\" || value == \"-1\" \n        then return\
    \ 1\n    else if value == \"2\" || value == \"-2\" \n        then return 2\n \
    \   else if value == \"3\" || value == \"-3\" \n        then return 3\n    else\
    \ if value == \"4\" || value == \"-4\" \n        then return 4\n    else if value\
    \ == \"5\" || value == \"-5\" \n        then return 5\n    else if value == \"\
    6\" || value == \"-6\" \n        then return 6\n    else if value == \"7\" ||\
    \ value == \"-7\" \n        then return 7\n    else if value == \"8\" || value\
    \ == \"-8\" \n        then return 8\n    else if value == \"9\" || value == \"\
    -9\" \n        then return 9\n    else if value == \"10\" || value == \"-10\"\
    \ \n        then return 10\n    else if value == \"11\" || value == \"-11\" \n\
    \        then return 11\n    else if value == \"12\" || value == \"-12\" \n  \
    \      then return 12\n    else if value == \"13\" || value == \"-13\" \n    \
    \    then return 13\n    else if value == \"14\" || value == \"-14\" \n      \
    \  then return 14\n    else if value == \"15\" || value == \"-15\" \n        then\
    \ return 15\n    else if value == \"16\" || value == \"-16\" \n        then return\
    \ 16\n    else if value == \"17\" || value == \"-17\" \n        then return 17\n\
    \    else if value == \"18\" || value == \"-18\" \n        then return 18\n  \
    \  else if value == \"19\" || value == \"-19\" \n        then return 19\n    else\
    \ if value == \"20\" || value == \"-20\" \n        then return 20\n    else if\
    \ value == \"21\" || value == \"-21\" \n        then return 21\n    else if value\
    \ == \"22\" || value == \"-22\" \n        then return 22\n    else if value ==\
    \ \"23\" || value == \"-23\" \n        then return 23\n    else if value == \"\
    24\" || value == \"-24\" \n        then return 24\n    else if value == \"25\"\
    \ || value == \"-25\" \n        then return 25\n    else if value == \"26\" ||\
    \ value == \"-26\" \n        then return 26\n    else if value == \"27\" || value\
    \ == \"-27\" \n        then return 27\n    else if value == \"28\" || value ==\
    \ \"-28\" \n        then return 28\n    else if value == \"29\" || value == \"\
    -29\" \n        ", "    if value == \"\"\n        error(\"The value you entered\
    \ cannot be empty\")\n    else\n        if isnumeric(value) == false\n       \
    \     error(\"The value you entered is not a number\")\n        else\n       \
    \     if value == \"0\"\n                error(\"The value you entered cannot\
    \ be 0\")\n            else\n                if value == \"-0\"\n            \
    \        error(\"The value you entered cannot be -0\")\n                else\n\
    \                    if value == \"-0\"\n                        error(\"The value\
    \ you entered cannot be -0\")\n                    else\n                    \
    \    if value == \"0\"\n                            error(\"The value you entered\
    \ cannot be 0\")\n                        else\n                            if\
    \ value == \"0\"\n                                error(\"The value you entered\
    \ cannot be 0\")\n                            else\n                         \
    \       if value == \"0\"\n                                    error(\"The value\
    \ you entered cannot be 0\")\n                                else\n         \
    \                           if value == \"0\"\n                              \
    \          error(\"The value you entered cannot be 0\")\n                    \
    \                else\n                                        if value == \"\
    0\"\n                                            error(\"The value you entered\
    \ cannot be 0\")\n                                        else\n             \
    \                               if value == \"0\"\n                          \
    \                      error(\"The value you entered cannot be 0\")\n        \
    \                                    else\n                                  \
    \              if value == \"0\"\n                                           \
    \         error(\"The value you entered cannot be 0\")\n                     \
    \                           else\n                                           \
    \         if value == \"0\"\n                                                \
    \        error(\"The value you entered cannot be 0\")\n                      \
    \                              else\n                                        \
    \                if value == \"0\"\n                                         \
    \                   error(\"The value you entered cannot be 0\")\n           \
    \                                             else\n                         \
    \                                   if value == \"0\"\n                      \
    \                                          error(\"The value you entered cannot\
    \ be 0\")\n                                                            else\n\
    \                                                                if value == \"\
    0\"\n                                                                    error(\"\
    The value you entered cannot be 0\")\n                                       \
    \                             else\n                                         \
    \               if value == \"0\"\n                                          \
    \                  error(\"The value you entered cannot be 0\")\n            \
    \                                            else\n                          \
    \                                  if value == \"0\"\n                       \
    \                                         error(\"The value you entered cannot\
    \ be 0\")\n                                                            else\n\
    \                                                                if value == \"\
    0\"\n                                                                    error(\"\
    The value you entered cannot be 0\")\n                                       \
    \                             else\n                                         \
    \               if value == \"0\"\n                                          \
    \                  error(\"The value you entered cannot be 0\")\n            \
    \                                            else\n                          \
    \                                  if value == \"0\"\n                       \
    \                                         error(\"The value you entered cannot\
    \ be 0\")\n                                                            else\n\
    \                                                                if value == \"\
    0\"\n                                                                    error(\"\
    The value you entered cannot be 0\")\n                                       \
    \                             else\n                                         \
    \               if value == \"0\"\n                                          \
    \                  error(\"The value you entered cannot be 0\")\n            \
    \                                            else\n                          \
    \                                  if value == \"0\"\n                       \
    \                                         error(\"The value you entered cannot\
    \ be 0\")\n                                                            else\n\
    \                                                                if value == \"\
    0\"\n                                                                    error(\"\
    The value you entered cannot be 0\")\n                                       \
    \                             else\n                                         \
    \               if value == \"0\"\n                                          \
    \                  error(\"The value you entered cannot be 0\")\n            \
    \                                            else\n                          \
    \                                  if value == \"0\"\n                       \
    \                                         error(\"The value you entered cannot\
    \ be 0\")\n                                                            else\n\
    \                                                                if value == \"\
    0\"\n                                                                    error(\"\
    The value you entered cannot be 0\")\n                                       \
    \                             else\n                                ", "    if\
    \ value == \"\"\n        error(\"Value cannot be empty\")\n    elseif value ==\
    \ \"0\"\n        error(\"Value cannot be 0\")\n    elseif value == \"1\"\n   \
    \     error(\"Value cannot be 1\")\n    elseif value == \"-1\"\n        error(\"\
    Value cannot be -1\")\n    elseif value == \"-2\"\n        error(\"Value cannot\
    \ be -2\")\n    elseif value == \"-3\"\n        error(\"Value cannot be -3\")\n\
    \    elseif value == \"-4\"\n        error(\"Value cannot be -4\")\n    elseif\
    \ value == \"-5\"\n        error(\"Value cannot be -5\")\n    elseif value ==\
    \ \"-6\"\n        error(\"Value cannot be -6\")\n    elseif value == \"-7\"\n\
    \        error(\"Value cannot be -7\")\n    elseif value == \"-8\"\n        error(\"\
    Value cannot be -8\")\n    elseif value == \"-9\"\n        error(\"Value cannot\
    \ be -9\")\n    elseif value == \"-10\"\n        error(\"Value cannot be -10\"\
    )\n    elseif value == \"-11\"\n        error(\"Value cannot be -11\")\n    elseif\
    \ value == \"-12\"\n        error(\"Value cannot be -12\")\n    elseif value ==\
    \ \"-13\"\n        error(\"Value cannot be -13\")\n    elseif value == \"-14\"\
    \n        error(\"Value cannot be -14\")\n    elseif value == \"-15\"\n      \
    \  error(\"Value cannot be -15\")\n    elseif value == \"-16\"\n        error(\"\
    Value cannot be -16\")\n    elseif value == \"-17\"\n        error(\"Value cannot\
    \ be -17\")\n    elseif value == \"-18\"\n        error(\"Value cannot be -18\"\
    )\n    elseif value == \"-19\"\n        error(\"Value cannot be -19\")\n    elseif\
    \ value == \"-20\"\n        error(\"Value cannot be -20\")\n    elseif value ==\
    \ \"-21\"\n        error(\"Value cannot be -21\")\n    elseif value == \"-22\"\
    \n        error(\"Value cannot be -22\")\n    elseif value == \"-23\"\n      \
    \  error(\"Value cannot be -23\")\n    elseif value == \"-24\"\n        error(\"\
    Value cannot be -24\")\n    elseif value == \"-25\"\n        error(\"Value cannot\
    \ be -25\")\n    elseif value == \"-26\"\n        error(\"Value cannot be -26\"\
    )\n    elseif value == \"-27\"\n        error(\"Value cannot be -27\")\n    elseif\
    \ value == \"-28\"\n        error(\"Value cannot be -28\")\n    elseif value ==\
    \ \"-29\"\n        error(\"Value cannot be -29\")\n    elseif value == \"-30\"\
    \n        error(\"Value cannot be -30\")\n    elseif value == \"-31\"\n      \
    \  error(\"Value cannot be -31\")\n    elseif value == \"-32\"\n        error(\"\
    Value cannot be -32\")\n    elseif value == \"-33\"\n        error(\"Value ",
  "    closest_integer = int64(0)\n    for x in string.split(value):\n        closest_integer\
    \ = int64(closest_integer) + int64(parse(x))\n    return int64(closest_integer)\n\
    end\n</cell>\n<code language=julia-1.5>", "    closest_integer = Int(0)\n    \n\
    \    if value == \"\"\n        return closest_integer\n    \n    if value == \"\
    -\"\n        return -closest_integer\n    \n    if value == \"+\"\n        return\
    \ closest_integer\n    \n    if value == \"0\"\n        return 0\n    \n    if\
    \ value == \"1\"\n        return 1\n    \n    if value == \"2\"\n        return\
    \ 2\n    \n    if value == \"3\"\n        return 3\n    \n    if value == \"4\"\
    \n        return 4\n    \n    if value == \"5\"\n        return 5\n    \n    if\
    \ value == \"6\"\n        return 6\n    \n    if value == \"7\"\n        return\
    \ 7\n    \n    if value == \"8\"\n        return 8\n    \n    if value == \"9\"\
    \n        return 9\n    \n    if value == \"10\"\n        return 10\n    \n  \
    \  if value == \"11\"\n        return 11\n    \n    if value == \"12\"\n     \
    \   return 12\n    \n    if value == \"13\"\n        return 13\n    \n    if value\
    \ == \"14\"\n        return 14\n    \n    if value == \"15\"\n        return 15\n\
    \    \n    if value == \"16\"\n        return 16\n    \n    if value == \"17\"\
    \n        return 17\n    \n    if value == \"18\"\n        return 18\n    \n \
    \   if value == \"19\"\n        return 19\n    \n    if value == \"20\"\n    \
    \    return 20\n    \n    if value == \"21\"\n        return 21\n    \n    if\
    \ value == \"22\"\n        return 22\n    \n    if value == \"23\"\n        return\
    \ 23\n    \n    if value == \"24\"\n        return 24\n    \n    if value == \"\
    25\"\n        return 25\n    \n    if value == \"26\"\n        return 26\n   \
    \ \n    if value == \"27\"\n        return 27\n    \n    if value == \"28\"\n\
    \        return 28\n    \n    if value == \"29\"\n        return 29\n    \n  \
    \  if value == \"30\"\n        return 30\n    \n    if value == \"31\"\n     \
    \   return 31\n    \n    if value == \"32\"\n        return 32\n    \n    if value\
    \ == \"33\"\n        return 33\n    \n    if value == \"34\"\n        return 34\n\
    \    \n    if value == \"35\"\n        return 35\n    \n    if value == \"36\"\
    \n        return 36\n    \n    if value == \"37\"\n        return 37\n    \n \
    \   if value == \"38\"\n        return 38\n    \n    if value == \"39\"\n    \
    \    return 39\n    \n    if value == \"40\"\n        return 40\n    \n    if\
    \ value == \"41\"\n        return 41\n    \n    if value == \"42\"\n        return\
    \ 42\n    \n    if value == \"43\"\n        return ", "    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    closest_integer\
    \ = int64(0)\n    closest_integer = int64(0)\n    closest_integer = int64(0)\n\
    \    closest_integer = int64(0)\n    closest_integer = int64(0)\n    ", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value\n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    return closest_integer\nend", "   \
    \ closest_integer = Int(0)\n    \n    if value == \"\"\n        return closest_integer\n\
    \    \n    number = parse(value) \n    \n    if number == Int(0)\n        return\
    \ closest_integer\n    \n    if number < Int(0)\n        closest_integer = Int(0)\n\
    \        return closest_integer\n    \n    if number > Int(0)\n        closest_integer\
    \ = Int(0)\n        return closest_integer\n    \n    if number == Int(1)\n  \
    \      return Int(1)\n    \n    if number == Int(2)\n        return Int(2)\n \
    \   \n    if number == Int(3)\n        return Int(3)\n    \n    if number == Int(4)\n\
    \        return Int(4)\n    \n    if number == Int(5)\n        return Int(5)\n\
    \    \n    if number == Int(6)\n        return Int(6)\n    \n    if number ==\
    \ Int(7)\n        return Int(7)\n    \n    if number == Int(8)\n        return\
    \ Int(8)\n    \n    if number == Int(9)\n        return Int(9)\n    \n    if number\
    \ == Int(10)\n        return Int(10)\n    \n    if number == Int(11)\n       \
    \ return Int(11)\n    \n    if number == Int(12)\n        return Int(12)\n   \
    \ \n    if number == Int(13)\n        return Int(13)\n    \n    if number == Int(14)\n\
    \        return Int(14)\n    \n    if number == Int(15)\n        return Int(15)\n\
    \    \n    if number == Int(16)\n        return Int(16)\n    \n    if number ==\
    \ Int(17)\n        return Int(17)\n    \n    if number == Int(18)\n        return\
    \ Int(18)\n    \n    if number == Int(19)\n        return Int(19)\n    \n    if\
    \ number == Int(20)\n        return Int(20)\n    \n    if number == Int(21)\n\
    \        return Int(21)\n    \n    if number == Int(22)\n        return Int(22)\n\
    \    \n    if number == Int(23)\n        return Int(23)\n    \n    if number ==\
    \ Int(24)\n        return Int(24)\n    \n    if number == Int(25)\n        return\
    \ Int(25)\n    \n    if number == Int(26)\n        return Int(26)\n    \n    if\
    \ number == Int(27)\n        return Int(27)\n    \n    if number == Int(28)\n\
    \        return Int(28)\n    \n    if number == Int(29)\n        return Int(29)\n\
    \    \n    if number == Int(30)\n        return Int(30)\n    \n    if number ==\
    \ Int(31)\n        return Int(31)\n    \n    if number == Int(32)\n        return\
    \ Int(32)\n    \n    if number == Int(33)\n        return Int(33)\n    \n    if\
    \ number == Int(34)\n        return Int(34)\n    \n    if number == Int(35)\n\
    \        return Int(", "    if value == \"-inf\" \n        then return -Infinity\
    \ \n    else if value == \"inf\" \n        then return Infinity \n    else if\
    \ value == \"nan\" \n        then return NaN \n    else \n        local digits\
    \ = split(value, \".\")\n        local digits_length = digits:size() \n      \
    \  if digits_length == 1 \n            then return tonumber(digits[1]) \n    \
    \    else \n            local first_digit = tonumber(digits[1])\n            local\
    \ second_digit = tonumber(digits[2])\n            local third_digit = tonumber(digits[3])\n\
    \            local fourth_digit = tonumber(digits[4])\n            local fifth_digit\
    \ = tonumber(digits[5])\n            local sixth_digit = tonumber(digits[6])\n\
    \            local seventh_digit = tonumber(digits[7])\n            local eighth_digit\
    \ = tonumber(digits[8])\n            local ninth_digit = tonumber(digits[9])\n\
    \            local tenth_digit = tonumber(digits[10])\n            local first_digit_diff\
    \ = abs(first_digit - second_digit)\n            local second_digit_diff = abs(second_digit\
    \ - third_digit)\n            local third_digit_diff = abs(third_digit - fourth_digit)\n\
    \            local fourth_digit_diff = abs(fourth_digit - fifth_digit)\n     \
    \       local fifth_digit_diff = abs(fifth_digit - sixth_digit)\n            local\
    \ sixth_digit_diff = abs(sixth_digit - seventh_digit)\n            local seventh_digit_diff\
    \ = abs(seventh_digit - eighth_digit)\n            local eighth_digit_diff = abs(eighth_digit\
    \ - ninth_digit)\n            local ninth_digit_diff = abs(ninth_digit - tenth_digit)\n\
    \            local tenth_digit_diff = abs(tenth_digit - first_digit)\n       \
    \     local first_digit_diff_max = max(first_digit_diff, second_digit_diff, third_digit_diff,\
    \ fourth_digit_diff, fifth_digit_diff, sixth_digit_diff, seventh_digit_diff, eighth_digit_diff,\
    \ ninth_digit_diff, tenth_digit_diff)\n            local second_digit_diff_max\
    \ = max(second_digit_diff, third_digit_diff, fourth_digit_diff, fifth_digit_diff,\
    \ sixth_digit_diff, seventh_digit_diff, eighth_digit_diff, ninth_digit_diff, tenth_digit_diff)\n\
    \            local third_digit_diff_max = max(third_digit_diff, fourth_digit_diff,\
    \ fifth_digit_diff, sixth_digit_diff, seventh_", "    if value == \"\"\n     \
    \   error(\"Value cannot be empty\")\n    elseif value == \"-\"\n        error(\"\
    Value cannot be negative\")\n    elseif value == \"+\"\n        error(\"Value\
    \ cannot be positive\")\n    elseif value == \"0\"\n        error(\"Value cannot\
    \ be zero\")\n    elseif value == \"1\"\n        error(\"Value cannot be one\"\
    )\n    elseif value == \"2\"\n        error(\"Value cannot be two\")\n    elseif\
    \ value == \"3\"\n        error(\"Value cannot be three\")\n    elseif value ==\
    \ \"4\"\n        error(\"Value cannot be four\")\n    elseif value == \"5\"\n\
    \        error(\"Value cannot be five\")\n    elseif value == \"6\"\n        error(\"\
    Value cannot be six\")\n    elseif value == \"7\"\n        error(\"Value cannot\
    \ be seven\")\n    elseif value == \"8\"\n        error(\"Value cannot be eight\"\
    )\n    elseif value == \"9\"\n        error(\"Value cannot be nine\")\n    elseif\
    \ value == \"10\"\n        error(\"Value cannot be ten\")\n    elseif value ==\
    \ \"11\"\n        error(\"Value cannot be eleven\")\n    elseif value == \"12\"\
    \n        error(\"Value cannot be twelve\")\n    elseif value == \"13\"\n    \
    \    error(\"Value cannot be thirteen\")\n    elseif value == \"14\"\n       \
    \ error(\"Value cannot be fourteen\")\n    elseif value == \"15\"\n        error(\"\
    Value cannot be fifteen\")\n    elseif value == \"16\"\n        error(\"Value\
    \ cannot be sixteen\")\n    elseif value == \"17\"\n        error(\"Value cannot\
    \ be seventeen\")\n    elseif value == \"18\"\n        error(\"Value cannot be\
    \ eighteen\")\n    elseif value == \"19\"\n        error(\"Value cannot be nineteen\"\
    )\n    elseif value == \"20\"\n        error(\"Value cannot be twenty\")\n   \
    \ elseif value == \"30\"\n        error(\"Value cannot be thirty\")\n    elseif\
    \ value == \"40\"\n        error(\"Value cannot be forty\")\n    elseif value\
    \ == \"50\"\n        error(\"Value cannot be fifty\")\n    elseif value == \"\
    60\"\n        error(\"Value cannot be sixty\")\n    elseif value == \"70\"\n \
    \       error(\"Value cannot be seventy\")\n    elseif value == \"80\"\n     \
    \   error(\"Value cannot be eighty\")\n    elseif value == \"90\"\n        error(\"\
    Value cannot be ninety\")\n    elseif value == \"100\"\n        error(\"Value\
    \ cannot be hundred\")\n    elseif value == \"1000\"\n        error(\"Value cannot\
    \ be thousand\")\n    elseif value == \"10000\"\n        error(\"Value cannot\
    \ be ten-thousand\")\n    elseif value == \"100000\"\n        error(\"Value cannot\
    \ be hundred-thous", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer\
    \ == value\n        closest_integer = Int64(math.floor(value))\n    end\n    return\
    \ closest_integer\nend", "    if value == \"\"\n        error(\"value cannot be\
    \ empty\")\n    else\n        num = tonumber(value)\n        if num == NaN\n \
    \           error(\"value cannot be converted to a number\")\n        else\n \
    \           num = round(num)\n            if num == NaN\n                error(\"\
    value cannot be converted to a number\")\n            else\n                if\
    \ num < 0\n                    num = -num\n                else\n            \
    \        num\n            end\n        end\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,rounding |>\nI wrote a package for this:\nhttps://github.com/jrm/rounding\n\
    <code>\nusing Rounding", "    closest_integer = Int(0)\n    if value == \"\"\n\
    \        return closest_integer\n    \n    digits = value.digits\n    \n    if\
    \ digits.length == 0 \n        return closest_integer\n    \n    closest_integer\
    \ = Int(0)\n    \n    if digits.length == 1\n        return Int(digits[0])\n \
    \   \n    closest_integer = Int(digits[0])\n    \n    for digit in digits[1..]\n\
    \        if digit < closest_integer\n            closest_integer = digit\n   \
    \     end\n    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if value == \"\"\n        error(\"value cannot be an empty string\")\n\
    \    end\n    \n    local num = tonumber(value)\n    if num == nil\n        error(\"\
    value must be a number\")\n    end\n    \n    if num < 0\n        error(\"value\
    \ cannot be negative\")\n    end\n    \n    local closest\n    local closestDistance\n\
    \    \n    if num == closest\n        closestDistance = 0\n    else\n        closestDistance\
    \ = abs(num - closest)\n    end\n    \n    if closestDistance < 1\n        closest\
    \ = num\n    else\n        closest = closest\n    end\n    \n    return closest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string representing\
    \ a number and returns the number of characters in the string. For example, the\
    \ string \"123\" has 3 characters. Write a function that takes a string representing\
    \ a number and returns the number of digits. For example, the string \"123\" has\
    \ 3 digits. Write a function that takes a string representing a number and returns\
    \ the number of words in the string. For example, the string \"123 456 789\" has\
    \ 3 words. Write a function that takes a string representing a number and returns\
    \ the number of characters in the string that are not digits. For example, the\
    \ string \"123abc\" has 3 characters. Write a function that takes a string representing\
    \ a number and returns the number of characters in the string that are not digits\
    \ and words. For example, the string \"123abc\" has 3 characters. Write a function\
    \ that takes a string representing a number and returns the number of characters\
    \ in the string that are not digits and words. For example, the string \"123abc\"\
    \ has 3 characters.", "    if value == \"\"\n        error(\"value cannot be empty\"\
    )\n    end\n    \n    if value == \"-\"\n        return -closest_integer(value[end])\n\
    \    end", "    \n    if value == \"\"\n        throw(ArgumentError(\"Value cannot\
    \ be an empty string\"))\n    end\n    \n    if value == \"0\"\n        return\
    \ 0\n    end\n    \n    digits = split(value, \".\")\n    \n    if length(digits)\
    \ < 2\n        throw(ArgumentError(\"Value must contain at least two digits\"\
    ))\n    end\n    \n    digits = digits[2:end]\n    \n    if length(digits) < 2\n\
    \        throw(ArgumentError(\"Value must contain at least two digits\"))\n  \
    \  end\n    \n    digits = digits[2:end]\n    \n    if length(digits) < 2\n  \
    \      throw(ArgumentError(\"Value must contain at least two digits\"))\n    end\n\
    \    \n    digits = digits[2:end]\n    \n    if length(digits) < 2\n        throw(ArgumentError(\"\
    Value must contain at least two digits\"))\n    end\n    \n    digits = digits[2:end]\n\
    \    \n    if length(digits) < 2\n        throw(ArgumentError(\"Value must contain\
    \ at least two digits\"))\n    end\n    \n    digits = digits[2:end]\n    \n \
    \   if length(digits) < 2\n        throw(ArgumentError(\"Value must contain at\
    \ least two digits\"))\n    end\n    \n    digits = digits[2:end]\n    \n    if\
    \ length(digits) < 2\n        throw(ArgumentError(\"Value must contain at least\
    \ two digits\"))\n    end\n    \n    digits = digits[2:end]\n    \n    if length(digits)\
    \ < 2\n        throw(ArgumentError(\"Value must contain at least two digits\"\
    ))\n    end\n    \n    digits = digits[2:end]\n    \n    if length(digits) < 2\n\
    \        throw(ArgumentError(\"Value must contain at least two digits\"))\n  \
    \  end\n    \n    digits = digits[2:end]\n    \n    if length(digits) < 2\n  \
    \      throw(ArgumentError(\"Value must contain at least two digits\"))\n    end\n\
    \    \n    digits = digits[2:end]\n    \n    if length(digits) < 2\n        throw(ArgumentError(\"\
    Value must contain at least two digits\"))\n    end\n    \n    digits = digits[2:end]\n\
    \    \n    if length(digits) < 2\n        throw(ArgumentError(\"Value must contain\
    \ at least two digits\"))\n    end\n    \n    digits = digits[2:end]\n    \n \
    \   if length(digits) < 2\n        throw(ArgumentError(\"Value must contain at\
    \ least two digits\"))\n    end\n    \n    digits = digits[2:end]\n    \n    if\
    \ length(digits) < 2\n        throw(ArgumentError(\"Value must contain at least\
    \ two digits\"))\n    end\n    \n    digits = digits[2:end]\n    \n    if length(digits)\
    \ < 2\n        throw", "    closest_integer = Int64(math.ceil(value))\n    if\
    \ closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    if value == \"\"\n        return\
    \ -1\n    \n    digits = value.chars\n    \n    smallest_digit = digits[0]\n \
    \   \n    for digit in digits[1..]\n        if digit < smallest_digit\n      \
    \      smallest_digit = digit\n    \n    largest_digit = digits[end]\n    \n \
    \   if smallest_digit == largest_digit\n        return smallest_digit\n    \n\
    \    if smallest_digit == 0\n        return largest_digit\n    \n    if largest_digit\
    \ == 0\n        return smallest_digit\n    \n    if smallest_digit > largest_digit\n\
    \        return largest_digit\n    \n    return smallest_digit\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    closest_integer(value::String)", "    \n\
    \    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n  \
    \      \n        if isnumeric(value) == true\n            \n            if isinf(Float64(value))\n\
    \                error(\"value cannot be infinite\")\n            else\n     \
    \           \n                if isinf(Float64(value))\n                    error(\"\
    value cannot be infinite\")\n                else\n                    \n    \
    \                if isinf(Float64(value))\n                        error(\"value\
    \ cannot be infinite\")\n                    else\n                        \n\
    \                        if isinf(Float64(value))\n                          \
    \  error(\"value cannot be infinite\")\n                        else\n       \
    \                     \n                            if isinf(Float64(value))\n\
    \                                error(\"value cannot be infinite\")\n       \
    \                     else\n                                \n               \
    \                 if isinf(Float64(value))\n                                 \
    \   error(\"value cannot be infinite\")\n                                else\n\
    \                                    \n                                    if\
    \ isinf(Float64(value))\n                                        error(\"value\
    \ cannot be infinite\")\n                                    else\n          \
    \                              \n                                        if isinf(Float64(value))\n\
    \                                            error(\"value cannot be infinite\"\
    )\n                                        else\n                            \
    \                \n                                            if isinf(Float64(value))\n\
    \                                                error(\"value cannot be infinite\"\
    )\n                                            else\n                        \
    \                        \n                                                if\
    \ isinf(Float64(value))\n                                                    error(\"\
    value cannot be infinite\")\n                                                else\n\
    \                                                    \n                      \
    \                              if isinf(Float64(value))\n                    \
    \                                    error(\"value cannot be infinite\")\n   \
    \                                                 else\n                     \
    \                                   \n                                       \
    \                 if isinf(Float64(value))\n                                 \
    \                           error(\"value cannot be infinite\")\n            \
    \                                            else\n                          \
    \                                  \n                                        \
    \                    if isinf(Float64(value))\n                              \
    \                                  error(\"value cannot be infinite\")\n     \
    \                                                       else\n               \
    \                                                 \n                         \
    \                                       if isinf(Float64(value))\n           \
    \                                                         error(\"value cannot\
    \ be infinite\")\n                                                           \
    \     else\n                                                                 \
    \   \n                                                                    if isinf(Float64(value))\n\
    \                                                                        error(\"\
    value cannot be infinite\")\n                                                \
    \                    else\n                                                  \
    \                      \n                                                    \
    \                    if isinf(Float64(value))\n                              \
    \                                              error(\"value cannot be infinite\"\
    )\n                                                                        else\n\
    \                                                                            \n\
    \                                                                            \
    \    if isinf(Float64(value))\n                                              \
    \                                      error(\"value cannot be infinite\")\n \
    \                                                                            \
    \   else\n                                                                   \
    \                 \n                                                         \
    \                           if isinf(Float64(value))\n                       \
    \                                                                 error(\"value\
    \ cannot be infinite\")\n                                                    \
    \                                else\n                                      \
    \                                                  \n                        \
    \                                                                if isinf(Float64(value))\n\
    \                                                                            \
    \                error(\"value cannot be infinite\")\n                       \
    \                                                                 else\n     \
    \                                                                            \
    \           \n                                                               \
    \                             if isinf(Float64(value))\n                     \
    \                                                                           error(\"\
    value cannot be infinite\")\n                                                \
    \                                            else\n                          \
    \                                                                      \n    \
    \                                                                            \
    \                if isinf(Float64(value))\n                                  \
    \                                                                  error(\"value\
    \ cannot be infinite\")\n                                                    \
    \                                            else\n                          \
    \                                                                          \n\
    \                                                                            \
    \                        if isin", "    \n    if value == \"\"\n        error(\"\
    value cannot be an empty string\")\n    end", "    closest_integer = Int64(0)\n\
    \    \n    if value == \"\"\n        closest_integer = Int64(0)\n    elseif value\
    \ == \"-\"\n        closest_integer = Int64(0)\n    elseif value == \"0\"\n  \
    \      closest_integer = Int64(0)\n    elseif value == \"1\"\n        closest_integer\
    \ = Int64(1)\n    elseif value == \"2\"\n        closest_integer = Int64(2)\n\
    \    elseif value == \"3\"\n        closest_integer = Int64(3)\n    elseif value\
    \ == \"4\"\n        closest_integer = Int64(4)\n    elseif value == \"5\"\n  \
    \      closest_integer = Int64(5)\n    elseif value == \"6\"\n        closest_integer\
    \ = Int64(6)\n    elseif value == \"7\"\n        closest_integer = Int64(7)\n\
    \    elseif value == \"8\"\n        closest_integer = Int64(8)\n    elseif value\
    \ == \"9\"\n        closest_integer = Int64(9)\n    elseif value == \"10\"\n \
    \       closest_integer = Int64(10)\n    elseif value == \"11\"\n        closest_integer\
    \ = Int64(11)\n    elseif value == \"12\"\n        closest_integer = Int64(12)\n\
    \    elseif value == \"13\"\n        closest_integer = Int64(13)\n    elseif value\
    \ == \"14\"\n        closest_integer = Int64(14)\n    elseif value == \"15\"\n\
    \        closest_integer = Int64(15)\n    elseif value == \"16\"\n        closest_integer\
    \ = Int64(16)\n    elseif value == \"17\"\n        closest_integer = Int64(17)\n\
    \    elseif value == \"18\"\n        closest_integer = Int64(18)\n    elseif value\
    \ == \"19\"\n        closest_integer = Int64(19)\n    elseif value == \"20\"\n\
    \        closest_integer = Int64(20)\n    elseif value == \"21\"\n        closest_integer\
    \ = Int64(21)\n    elseif value == \"22\"\n        closest_integer = Int64(22)\n\
    \    elseif value == \"23\"\n        closest_integer = Int64(23)\n    elseif value\
    \ == \"24\"\n        closest_integer = Int64(24)\n    elseif value == \"25\"\n\
    \        closest_integer = Int64(25)\n    elseif value == \"26\"\n        closest_integer\
    \ = Int64(26)\n    elseif value == \"27\"\n        closest_integer = Int64(27)\n\
    \    elseif value == \"28\"\n        closest_integer = Int64(28)\n    elseif value\
    \ == \"29\"\n        closest_integer = Int64(29)\n    elseif value == \"30\"\n\
    \        closest_integer = Int64(30)\n    elseif value == \"31\"\n        closest_integer\
    \ = Int64(", "    if value == \"-inf\" \n        then return -Infinity \n    else\
    \ if value == \"inf\" \n        then return Infinity \n    else if value == \"\
    nan\" \n        then return NaN \n    else if value == \"-nan\" \n        then\
    \ return NaN \n    else if value == \"0\" \n        then return 0 \n    else if\
    \ value == \"1\" \n        then return 1 \n    else if value == \"2\" \n     \
    \   then return 2 \n    else if value == \"3\" \n        then return 3 \n    else\
    \ if value == \"4\" \n        then return 4 \n    else if value == \"5\" \n  \
    \      then return 5 \n    else if value == \"6\" \n        then return 6 \n \
    \   else if value == \"7\" \n        then return 7 \n    else if value == \"8\"\
    \ \n        then return 8 \n    else if value == \"9\" \n        then return 9\
    \ \n    else if value == \"10\" \n        then return 10 \n    else if value ==\
    \ \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else ",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    local value = tonumber(value)\n        if value == 0\n            error(\"\
    value cannot be 0\")\n        else\n            local closest\n            local\
    \ closestDistance\n            local closestDistanceIndex\n            local closestDistanceValue\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closestDistanceValueIndex\n\
    \            local closestDistanceValueIndex\n            local closest", "  \
    \  closest_integer = Int(0)\n    closest_integer = if value == \"0\" then 0 else\
    \ value\n    closest_integer = if value == \"1\" then 1 else value\n    closest_integer\
    \ = if value == \"2\" then 2 else value\n    closest_integer = if value == \"\
    3\" then 3 else value\n    closest_integer = if value == \"4\" then 4 else value\n\
    \    closest_integer = if value == \"5\" then 5 else value\n    closest_integer\
    \ = if value == \"6\" then 6 else value\n    closest_integer = if value == \"\
    7\" then 7 else value\n    closest_integer = if value == \"8\" then 8 else value\n\
    \    closest_integer = if value == \"9\" then 9 else value\n    closest_integer\
    \ = if value == \"10\" then 10 else value\n    closest_integer = if value == \"\
    11\" then 11 else value\n    closest_integer = if value == \"12\" then 12 else\
    \ value\n    closest_integer = if value == \"13\" then 13 else value\n    closest_integer\
    \ = if value == \"14\" then 14 else value\n    closest_integer = if value == \"\
    15\" then 15 else value\n    closest_integer = if value == \"16\" then 16 else\
    \ value\n    closest_integer = if value == \"17\" then 17 else value\n    closest_integer\
    \ = if value == \"18\" then 18 else value\n    closest_integer = if value == \"\
    19\" then 19 else value\n    closest_integer = if value == \"20\" then 20 else\
    \ value\n    closest_integer = if value == \"21\" then 21 else value\n    closest_integer\
    \ = if value == \"22\" then 22 else value\n    closest_integer = if value == \"\
    23\" then 23 else value\n    closest_integer = if value == \"24\" then 24 else\
    \ value\n    closest_integer = if value == \"25\" then 25 else value\n    closest_integer\
    \ = if value == \"26\" then 26 else value\n    closest_integer = if value == \"\
    27\" then 27 else value\n    closest_integer = if value == \"28\" then 28 else\
    \ value\n    closest_integer = if value == \"29\" then 29 else value\n    closest_integer\
    \ = if value == \"30\" then 30 else value\n    closest_integer = if value == \"\
    31\" then 31 else value\n    closest_integer = if value == \"32\" then 32 else\
    \ value\n    closest_integer = if value == \"33\" then 33 else value\n    closest_integer\
    \ = if value == \"34\" then 34 else value\n    closest_integer = if value == \"\
    35\" then 35 else value\n    closest_integer = if value == \"", "    \n    if\
    \ value == \"0\" \n        then return 0\n    else if value == \"1\" \n      \
    \  then return 1\n    else if value == \"2\" \n        then return 2\n    else\
    \ if value == \"3\" \n        then return 3\n    else if value == \"4\" \n   \
    \     then return 4\n    else if value == \"5\" \n        then return 5\n    else\
    \ if value == \"6\" \n        then return 6\n    else if value == \"7\" \n   \
    \     then return 7\n    else if value == \"8\" \n        then return 8\n    else\
    \ if value == \"9\" \n        then return 9\n    else if value == \"10\" \n  \
    \      then return 10\n    else if value == \"11\" \n        then return 11\n\
    \    else if value == \"12\" \n        then return 12\n    else if value == \"\
    13\" \n        then return 13\n    else if value == \"14\" \n        then return\
    \ 14\n    else if value == \"15\" \n        then return 15\n    else if value\
    \ == \"16\" \n        then return 16\n    else if value == \"17\" \n        then\
    \ return 17\n    else if value == \"18\" \n        then return 18\n    else if\
    \ value == \"19\" \n        then return 19\n    else if value == \"20\" \n   \
    \     then return 20\n    else if value == \"21\" \n        then return 21\n \
    \   else if value == \"22\" \n        then return 22\n    else if value == \"\
    23\" \n        then return 23\n    else if value == \"24\" \n        then return\
    \ 24\n    else if value == \"25\" \n        then return 25\n    else if value\
    \ == \"26\" \n        then return 26\n    else if value == \"27\" \n        then\
    \ return 27\n    else if value == \"28\" \n        then return 28\n    else if\
    \ value == \"29\" \n        then return 29\n    else if value == \"30\" \n   \
    \     then return 30\n    else if value == \"31\" \n        then return 31\n \
    \   else if value == \"32\" \n        then return 32\n    else if value == \"\
    33\" \n        then return 33\n    else if value == \"34\" \n        then return\
    \ 34\n    else if value == \"35\" \n        then return 35\n    else if value\
    \ == \"36\" \n        then return 36\n    else if value == \"37\" \n        then\
    \ return 37\n    else if value == \"38\" \n        then return 38\n    else if\
    \ value == \"39\" \n", "    if value == \"-inf\" || value == \"inf\" \n      \
    \  then return value\n    else\n        local closest_value = math.abs(value)\n\
    \        if closest_value == 0 \n            then return 0\n        elseif closest_value\
    \ == 1 \n            then return value\n        else\n            local closest_integer\
    \ = closest_value / 2\n            if closest_integer == 0 \n                then\
    \ return 0\n            elseif closest_integer == 1 \n                then return\
    \ value\n            else\n                local closest_integer = closest_integer\
    \ * 2\n                if closest_integer == 0 \n                    then return\
    \ 0\n                elseif closest_integer == 1 \n                    then return\
    \ value\n                else\n                    return closest_integer\n  \
    \          end\n        end\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a value (string) representing a number\nand returns the\
    \ closest float to it. If the number is equidistant\nfrom two floats, round it\
    \ away from zero.", "    if value == \"-inf\" || value == \"inf\" \n        then\
    \ return value\n    else if value == \"0\" \n        then return 0\n    else if\
    \ value == \"1\" \n        then return 1\n    else if value == \"2\" \n      \
    \  then return 2\n    else if value == \"3\" \n        then return 3\n    else\
    \ if value == \"4\" \n        then return 4\n    else if value == \"5\" \n   \
    \     then return 5\n    else if value == \"6\" \n        then return 6\n    else\
    \ if value == \"7\" \n        then return 7\n    else if value == \"8\" \n   \
    \     then return 8\n    else if value == \"9\" \n        then return 9\n    else\
    \ if value == \"10\" \n        then return 10\n    else if value == \"11\" \n\
    \        then return 11\n    else if value == \"12\" \n        then return 12\n\
    \    else if value == \"13\" \n        then return 13\n    else if value == \"\
    14\" \n        then return 14\n    else if value == \"15\" \n        then return\
    \ 15\n    else if value == \"16\" \n        then return 16\n    else if value\
    \ == \"17\" \n        then return 17\n    else if value == \"18\" \n        then\
    \ return 18\n    else if value == \"19\" \n        then return 19\n    else if\
    \ value == \"20\" \n        then return 20\n    else if value == \"21\" \n   \
    \     then return 21\n    else if value == \"22\" \n        then return 22\n \
    \   else if value == \"23\" \n        then return 23\n    else if value == \"\
    24\" \n        then return 24\n    else if value == \"25\" \n        then return\
    \ 25\n    else if value == \"26\" \n        then return 26\n    else if value\
    \ == \"27\" \n        then return 27\n    else if value == \"28\" \n        then\
    \ return 28\n    else if value == \"29\" \n        then return 29\n    else if\
    \ value == \"30\" \n        then return 30\n    else if value == \"31\" \n   \
    \     then return 31\n    else if value == \"32\" \n        then return 32\n \
    \   else if value == \"33\" \n        then return 33\n    else if value == \"\
    34\" \n        then return 34\n    else if value == \"35\" \n        then return\
    \ 35\n    else if value == \"36\" \n        then return 36\n    else if value\
    \ == \"37\" \n        then return 37\n    else if value == \"", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    closest_integer = int64(0)\n\
    \    \n    if value == \"\"\n        return int64(0)\n    \n    if value == \"\
    0\"\n        return int64(0)\n    \n    if value == \"1\"\n        return int64(1)\n\
    \    \n    if value == \"2\"\n        return int64(2)\n    \n    if value == \"\
    3\"\n        return int64(3)\n    \n    if value == \"4\"\n        return int64(4)\n\
    \    \n    if value == \"5\"\n        return int64(5)\n    \n    if value == \"\
    6\"\n        return int64(6)\n    \n    if value == \"7\"\n        return int64(7)\n\
    \    \n    if value == \"8\"\n        return int64(8)\n    \n    if value == \"\
    9\"\n        return int64(9)\n    \n    if value == \"10\"\n        return int64(10)\n\
    \    \n    if value == \"11\"\n        return int64(11)\n    \n    if value ==\
    \ \"12\"\n        return int64(12)\n    \n    if value == \"13\"\n        return\
    \ int64(13)\n    \n    if value == \"14\"\n        return int64(14)\n    \n  \
    \  if value == \"15\"\n        return int64(15)\n    \n    if value == \"16\"\n\
    \        return int64(16)\n    \n    if value == \"17\"\n        return int64(17)\n\
    \    \n    if value == \"18\"\n        return int64(18)\n    \n    if value ==\
    \ \"19\"\n        return int64(19)\n    \n    if value == \"20\"\n        return\
    \ int64(20)\n    \n    if value == \"21\"\n        return int64(21)\n    \n  \
    \  if value == \"22\"\n        return int64(22)\n    \n    if value == \"23\"\n\
    \        return int64(23)\n    \n    if value == \"24\"\n        return int64(24)\n\
    \    \n    if value == \"25\"\n        return int64(25)\n    \n    if value ==\
    \ \"26\"\n        return int64(26)\n    \n    if value == \"27\"\n        return\
    \ int64(27)\n    \n    if value == \"28\"\n        return int64(28)\n    \n  \
    \  if value == \"29\"\n        return int64(29)\n    \n    if value == \"30\"\n\
    \        return int64(30)\n    \n    if value == \"31\"\n        return int64(31)\n\
    \    \n    if value == \"32\"\n        return int64(32)\n    \n    if value ==\
    \ \"33\"\n        return int64(33)\n    \n    if value == \"34\"\n        return\
    \ int64(34)\n    \n    if value == \"35\"\n        return int64(35)\n    \n  \
    \  if value == \"36\"\n        return int64(36)\n    \n    if value == \"37\"\n\
    \        return int64(37)\n    \n    if value ", "    closest_integer = Int(0)\n\
    \    \n    if value == \"0\":\n        return closest_integer\n    \n    digits\
    \ = split(value, \".\")\n    \n    if digits.length == 0 or digits.length == 1:\n\
    \        return closest_integer\n    \n    digits_int = digits[1]\n    \n    if\
    \ digits_int == \"0\":\n        return closest_integer\n    \n    digits_int =\
    \ digits_int.to_i()\n    \n    if digits_int == 0 or digits_int == -1:\n     \
    \   return closest_integer\n    \n    digits_int = digits_int - 1\n    \n    if\
    \ digits_int == 0 or digits_int == -1:\n        return closest_integer\n    \n\
    \    digits_int = digits_int + 1\n    \n    if digits_int == 0 or digits_int ==\
    \ -1:\n        return closest_integer\n    \n    digits_int = digits_int - 1\n\
    \    \n    if digits_int == 0 or digits_int == -1:\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0 or digits_int\
    \ == -1:\n        return closest_integer\n    \n    digits_int = digits_int -\
    \ 1\n    \n    if digits_int == 0 or digits_int == -1:\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0 or digits_int\
    \ == -1:\n        return closest_integer\n    \n    digits_int = digits_int -\
    \ 1\n    \n    if digits_int == 0 or digits_int == -1:\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0 or digits_int\
    \ == -1:\n        return closest_integer\n    \n    digits_int = digits_int -\
    \ 1\n    \n    if digits_int == 0 or digits_int == -1:\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0 or digits_int\
    \ == -1:\n        return closest_integer\n    \n    digits_int = digits_int -\
    \ 1\n    \n    if digits_int == 0 or digits_int == -1:\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0 or digits_int\
    \ == -1:\n        return closest_integer\n    \n    digits_int = digits_int -\
    \ 1\n    \n    if digits_int == 0 or digits_int == -1:\n        return closest_integer\n\
    \    \n    digits_int = digits_int + 1\n    \n    if digits_int == 0 or digits_int\
    \ == -1:\n        return closest_integer\n    \n    digits_int = digits_", " \
    \   closest_integer = Int(0)\n    \n    if value == \"\"\n        closest_integer\
    \ = Int(0)\n    elseif value == \"-\"\n        closest_integer = Int(0)\n    elseif\
    \ value == \"+\"\n        closest_integer = Int(0)\n    elseif value == \"0\"\n\
    \        closest_integer = Int(0)\n    elseif value == \"1\"\n        closest_integer\
    \ = Int(1)\n    elseif value == \"2\"\n        closest_integer = Int(2)\n    elseif\
    \ value == \"3\"\n        closest_integer = Int(3)\n    elseif value == \"4\"\n\
    \        closest_integer = Int(4)\n    elseif value == \"5\"\n        closest_integer\
    \ = Int(5)\n    elseif value == \"6\"\n        closest_integer = Int(6)\n    elseif\
    \ value == \"7\"\n        closest_integer = Int(7)\n    elseif value == \"8\"\n\
    \        closest_integer = Int(8)\n    elseif value == \"9\"\n        closest_integer\
    \ = Int(9)\n    elseif value == \"10\"\n        closest_integer = Int(10)\n  \
    \  elseif value == \"11\"\n        closest_integer = Int(11)\n    elseif value\
    \ == \"12\"\n        closest_integer = Int(12)\n    elseif value == \"13\"\n \
    \       closest_integer = Int(13)\n    elseif value == \"14\"\n        closest_integer\
    \ = Int(14)\n    elseif value == \"15\"\n        closest_integer = Int(15)\n \
    \   elseif value == \"16\"\n        closest_integer = Int(16)\n    elseif value\
    \ == \"17\"\n        closest_integer = Int(17)\n    elseif value == \"18\"\n \
    \       closest_integer = Int(18)\n    elseif value == \"19\"\n        closest_integer\
    \ = Int(19)\n    elseif value == \"20\"\n        closest_integer = Int(20)\n \
    \   elseif value == \"21\"\n        closest_integer = Int(21)\n    elseif value\
    \ == \"22\"\n        closest_integer = Int(22)\n    elseif value == \"23\"\n \
    \       closest_integer = Int(23)\n    elseif value == \"24\"\n        closest_integer\
    \ = Int(24)\n    elseif value == \"25\"\n        closest_integer = Int(25)\n \
    \   elseif value == \"26\"\n        closest_integer = Int(26)\n    elseif value\
    \ == \"27\"\n        closest_integer = Int(27)\n    elseif value == \"28\"\n \
    \       closest_integer = Int(28)\n    elseif value == \"29\"\n        closest_integer\
    \ = Int(29)\n    elseif value == \"30\"\n        closest_integer = Int(30)\n \
    \   elseif value == \"31\"\n        closest_integer = Int(31)\n    elseif value\
    \ == \"32\"\n        closest_integer = Int(32)\n    elseif value == \"33", " \
    \   \n    closest_integer = Int64(0)\n    \n    if value == \"0\" || value ==\
    \ \"-0\" \n        then return 0\n    \n    digits = split(value, \".\")\n   \
    \ \n    if length(digits) == 2\n        then digits[1] = digits[1] * -1\n    \n\
    \    digits = digits[2:end]\n    \n    if length(digits) == 0\n        then return\
    \ 0\n    \n    digits = digits[2:end]\n    \n    for d in digits\n        then\
    \ if d == \"0\"\n            then return 0\n            \n            closest_integer\
    \ = min(closest_integer, Int64(floor(Int64(digits[1]) + Int64(digits[2]))))\n\
    \            \n            digits[1] = digits[1] * -1\n            digits[2] =\
    \ digits[2] * -1\n            \n            if length(digits) == 0\n         \
    \       then return 0\n            \n            digits = digits[2:end]\n    \
    \        \n        end\n    \n    return closest_integer\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    closest_integer(value::String)::Int64", " \
    \   closest_integer = Int64(math.ceil(value))\n    if closest_integer == value\
    \ \n        closest_integer = Int64(math.floor(value))\n    end\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if value == \"0\" || value\
    \ == \"-0\" \n        then return 0\n    \n    local num = tonumber(value)\n \
    \   local diff\n    \n    if num == 0 \n        then return 0\n    \n    if num\
    \ < 0 \n        then return tonumber(-value)\n    \n    if num == Inf \n     \
    \   then return num\n    \n    if num == -Inf \n        then return -num\n   \
    \ \n    if num == NaN \n        then return num\n    \n    if num == -NaN \n \
    \       then return -num\n    \n    if num < Inf \n        then return num\n \
    \   \n    if num > -Inf \n        then return -num\n    \n    if num < -Inf \n\
    \        then return -num\n    \n    if num > Inf \n        then return num\n\
    \    \n    if num < -Inf \n        then return -num\n    \n    diff = abs(num\
    \ - floor(num))\n    \n    if diff < 0.5\n        then return floor(num)\n   \
    \ \n    if diff < 2\n        then return floor(num) + 1\n    \n    if diff < 4\n\
    \        then return floor(num) - 1\n    \n    if diff < 8\n        then return\
    \ floor(num) + 1\n    \n    if diff < 16\n        then return floor(num) - 1\n\
    \    \n    if diff < 32\n        then return floor(num) + 1\n    \n    if diff\
    \ < 64\n        then return floor(num) - 1\n    \n    if diff < 128\n        then\
    \ return floor(num) + 1\n    \n    if diff < 256\n        then return floor(num)\
    \ - 1\n    \n    if diff < 512\n        then return floor(num) + 1\n    \n   \
    \ if diff < 1024\n        then return floor(num) - 1\n    \n    if diff < 2048\n\
    \        then return floor(num) + 1\n    \n    if diff < 4096\n        then return\
    \ floor(num) - 1\n    \n    if diff < 8192\n        then return floor(num) + 1\n\
    \    \n    if diff < 16384\n        then return floor(num) - 1\n    \n    if diff\
    \ < 32768\n        then return floor(num) + 1\n    \n    if diff < 65536\n   \
    \     then return floor(num) - 1\n    \n    if diff < 131072\n        then return\
    \ floor(num) + 1\n    \n    if diff < 262144\n        then return floor(num) -\
    \ 1\n    \n    if diff < 524288\n        then return floor(num) + 1\n    \n  \
    \  if diff < 1048576\n        then return floor(num) - 1\n    \n    if diff <\
    \ 2097152\n        ", "    closest_integer = Int64(math.floor(value))\n    if\
    \ closest_integer == value:\n        closest_integer = Int64(math.ceil(value))\n\
    \        if closest_integer == value:\n            closest_integer = Int64(math.round(value))\n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.1>", "    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.ceil(value))\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@test closest_integer(\"10\") == 10\n@test closest_integer(\"\
    15.3\") == 15\n@test closest_integer(\"14.5\") == 15\n@test closest_integer(\"\
    -14.5\") == -15\n</cell>\n<text>\nExercise 2\nWrite a function that takes a value\
    \ (string) representing a number\nand returns the closest float to it. If the\
    \ number is equidistant\nfrom two floats, round it away from zero.", "    closest_integer\
    \ = Int(0)\n    if value == \"\"\n        return closest_integer\n    \n    split_value\
    \ = split(value, \".\")\n    \n    if split_value[1] != \"\"\n        split_value[1]\
    \ = split_value[1].toInt()\n    else\n        split_value[1] = Int(0)\n    \n\
    \    if split_value[1] < Int(0)\n        split_value[1] = Int(0)\n    \n    if\
    \ split_value[1] > Int(10)\n        split_value[1] = Int(10)\n    \n    if split_value[1]\
    \ < Int(0)\n        split_value[1] = Int(0)\n    \n    if split_value[1] > Int(10)\n\
    \        split_value[1] = Int(10)\n    \n    if split_value[1] < Int(0)\n    \
    \    split_value[1] = Int(0)\n    \n    if split_value[1] > Int(10)\n        split_value[1]\
    \ = Int(10)\n    \n    if split_value[1] < Int(0)\n        split_value[1] = Int(0)\n\
    \    \n    if split_value[1] > Int(10)\n        split_value[1] = Int(10)\n   \
    \ \n    if split_value[1] < Int(0)\n        split_value[1] = Int(0)\n    \n  \
    \  if split_value[1] > Int(10)\n        split_value[1] = Int(10)\n    \n    if\
    \ split_value[1] < Int(0)\n        split_value[1] = Int(0)\n    \n    if split_value[1]\
    \ > Int(10)\n        split_value[1] = Int(10)\n    \n    if split_value[1] < Int(0)\n\
    \        split_value[1] = Int(0)\n    \n    if split_value[1] > Int(10)\n    \
    \    split_value[1] = Int(10)\n    \n    if split_value[1] < Int(0)\n        split_value[1]\
    \ = Int(0)\n    \n    if split_value[1] > Int(10)\n        split_value[1] = Int(10)\n\
    \    \n    if split_value[1] < Int(0)\n        split_value[1] = Int(0)\n    \n\
    \    if split_value[1] > Int(10)\n        split_value[1] = Int(10)\n    \n   \
    \ if split_value[1] < Int(0)\n        split_value[1] = Int(0)\n    \n    if split_value[1]\
    \ > Int(10)\n        split_value[1] = Int(10)\n    \n    if split_value[1] < Int(0)\n\
    \        split_value[1] = Int(0)\n    \n    if split_value[1] > Int(10)\n    \
    \    split_value[1] = Int(10)\n    \n    if split_value[1] < Int(0)\n        split_value[1]\
    \ = Int(0)\n    \n    if split_value[1] > Int(10)\n        split_value[1] = Int(10)\n\
    \    \n    if split_value[1] < Int(0)\n        split_value[1] = Int(0)\n    \n\
    \    if split_value[1] > Int(10)\n        split_value[1] = Int(10)\n    \n   \
    \ if split_value[1] < Int(0)\n        split_value[1] = Int(0)", "    if value\
    \ == \"-inf\" || value == \"inf\" || value == \"nan\" \n    then return value\n\
    \    else if value == \"-inf\" \n    then return -value\n    else if value ==\
    \ \"inf\" \n    then return value\n    else if value == \"nan\" \n    then return\
    \ value\n    else if value == \"0\" \n    then return 0\n    else if value ==\
    \ \"1\" \n    then return 1\n    else if value == \"2\" \n    then return 2\n\
    \    else if value == \"3\" \n    then return 3\n    else if value == \"4\" \n\
    \    then return 4\n    else if value == \"5\" \n    then return 5\n    else if\
    \ value == \"6\" \n    then return 6\n    else if value == \"7\" \n    then return\
    \ 7\n    else if value == \"8\" \n    then return 8\n    else if value == \"9\"\
    \ \n    then return 9\n    else if value == \"10\" \n    then return 10\n    else\
    \ if value == \"11\" \n    then return 11\n    else if value == \"12\" \n    then\
    \ return 12\n    else if value == \"13\" \n    then return 13\n    else if value\
    \ == \"14\" \n    then return 14\n    else if value == \"15\" \n    then return\
    \ 15\n    else if value == \"16\" \n    then return 16\n    else if value == \"\
    17\" \n    then return 17\n    else if value == \"18\" \n    then return 18\n\
    \    else if value == \"19\" \n    then return 19\n    else if value == \"20\"\
    \ \n    then return 20\n    else if value == \"21\" \n    then return 21\n   \
    \ else if value == \"22\" \n    then return 22\n    else if value == \"23\" \n\
    \    then return 23\n    else if value == \"24\" \n    then return 24\n    else\
    \ if value == \"25\" \n    then return 25\n    else if value == \"26\" \n    then\
    \ return 26\n    else if value == \"27\" \n    then return 27\n    else if value\
    \ == \"28\" \n    then return 28\n    else if value == \"29\" \n    then return\
    \ 29\n    else if value == \"30\" \n    then return 30\n    else if value == \"\
    31\" \n    then return 31\n    else if value == \"32\" \n    then return 32\n\
    \    else if value == \"33\" \n    then return 33\n    else if value == \"34\"\
    \ \n    then return 34\n", "    closest_integer = Int64(math.ceil(value))\n  \
    \  if closest_integer == value:\n        closest_integer = Int64(math.floor(value))\n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    closest_integer = Int64(math.ceil(Int64(value)))\n    \n    if closest_integer\
    \ == Int64(value) \n        closest_integer = Int64(0)\n    end\n    \n    return\
    \ closest_integer\nend", "    if value == \"\"\n        error(\"value cannot be\
    \ empty\")\n    elseif value == \"-\"\n        error(\"value cannot be -, use\
    \ closest_integer(\\\"0\\\") instead\")\n    elseif value == \"0\"\n        return\
    \ 0\n    elseif value == \"1\"\n        return 1\n    elseif value == \"2\"\n\
    \        return 2\n    elseif value == \"3\"\n        return 3\n    elseif value\
    \ == \"4\"\n        return 4\n    elseif value == \"5\"\n        return 5\n  \
    \  elseif value == \"6\"\n        return 6\n    elseif value == \"7\"\n      \
    \  return 7\n    elseif value == \"8\"\n        return 8\n    elseif value ==\
    \ \"9\"\n        return 9\n    else\n        error(\"value must be an integer\
    \ or -, use closest_integer(\\\"0\\\") instead\")\n    end\nend", "    \n    if\
    \ value == \"\"\n        error(\"Value cannot be empty\")\n    end\n    \n   \
    \ if value == \"0\"\n        return 0\n    end", "    closest_integer = Int64(0)\n\
    \    \n    if value == \"0\" || value == \"-0\" \n        then return 0\n    \n\
    \    else if value == \"1\" || value == \"-1\" \n        then return -1\n    \n\
    \    else if value == \"2\" || value == \"-2\" \n        then return -2\n    \n\
    \    else if value == \"3\" || value == \"-3\" \n        then return -3\n    \n\
    \    else if value == \"4\" || value == \"-4\" \n        then return -4\n    \n\
    \    else if value == \"5\" || value == \"-5\" \n        then return -5\n    \n\
    \    else if value == \"6\" || value == \"-6\" \n        then return -6\n    \n\
    \    else if value == \"7\" || value == \"-7\" \n        then return -7\n    \n\
    \    else if value == \"8\" || value == \"-8\" \n        then return -8\n    \n\
    \    else if value == \"9\" || value == \"-9\" \n        then return -9\n    \n\
    \    else if value == \"10\" || value == \"-10\" \n        then return 10\n  \
    \  \n    else if value == \"11\" || value == \"-11\" \n        then return 11\n\
    \    \n    else if value == \"12\" || value == \"-12\" \n        then return 12\n\
    \    \n    else if value == \"13\" || value == \"-13\" \n        then return 13\n\
    \    \n    else if value == \"14\" || value == \"-14\" \n        then return 14\n\
    \    \n    else if value == \"15\" || value == \"-15\" \n        then return 15\n\
    \    \n    else if value == \"16\" || value == \"-16\" \n        then return 16\n\
    \    \n    else if value == \"17\" || value == \"-17\" \n        then return 17\n\
    \    \n    else if value == \"18\" || value == \"-18\" \n        then return 18\n\
    \    \n    else if value == \"19\" || value == \"-19\" \n        then return 19\n\
    \    \n    else if value == \"20\" || value == \"-20\" \n        then return 20\n\
    \    \n    else if value == \"21\" || value == \"-21\" \n        then return 21\n\
    \    \n    else if value == \"22\" || value == \"-22\" \n        then return 22\n\
    \    \n    else if value == \"23\" || value == \"-23\" \n        then return 23\n\
    \    \n    else if value == \"24\" || value == \"-24\" \n        then return 24\n\
    \    \n    else if value == \"25\" || value == \"-25\" \n        then return 25\n\
    \    \n    else if value == \"26", "    \n    closest_integer = Int64(0)\n   \
    \ \n    if value == \"0\" || value == \"-0\" \n        then return 0\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    closest_integer = Int(0)\n\
    \    \n    if value == \"0\":\n        return closest_integer\n    \n    digits\
    \ = value.split(\".\")\n    \n    if digits[1] == \"0\":\n        digits[1] =\
    \ digits[1][1:]\n    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n\
    \    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n \
    \   if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1]\
    \ == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\"\
    :\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n     \
    \   digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n        digits[1]\
    \ = digits[1][1:]\n    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n\
    \    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n \
    \   if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1]\
    \ == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\"\
    :\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n     \
    \   digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n        digits[1]\
    \ = digits[1][1:]\n    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n\
    \    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n \
    \   if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1]\
    \ == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\"\
    :\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n     \
    \   digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n        digits[1]\
    \ = digits[1][1:]\n    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n\
    \    \n    if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n \
    \   if digits[1] == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1]\
    \ == \"0\":\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\"\
    :\n        digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n     \
    \   digits[1] = digits[1][1:]\n    \n    if digits[1] == \"0\":\n", "    closest_integer\
    \ = int64(0)\n    \n    if value == \"\"\n        return int64(0)\n    \n    if\
    \ value == \"-\"\n        return int64(0)\n    \n    if value == \"0\"\n     \
    \   return int64(0)\n    \n    if value == \"1\"\n        return int64(1)\n  \
    \  \n    if value == \"2\"\n        return int64(2)\n    \n    if value == \"\
    3\"\n        return int64(3)\n    \n    if value == \"4\"\n        return int64(4)\n\
    \    \n    if value == \"5\"\n        return int64(5)\n    \n    if value == \"\
    6\"\n        return int64(6)\n    \n    if value == \"7\"\n        return int64(7)\n\
    \    \n    if value == \"8\"\n        return int64(8)\n    \n    if value == \"\
    9\"\n        return int64(9)\n    \n    if value == \"10\"\n        return int64(10)\n\
    \    \n    if value == \"11\"\n        return int64(11)\n    \n    if value ==\
    \ \"12\"\n        return int64(12)\n    \n    if value == \"13\"\n        return\
    \ int64(13)\n    \n    if value == \"14\"\n        return int64(14)\n    \n  \
    \  if value == \"15\"\n        return int64(15)\n    \n    if value == \"16\"\n\
    \        return int64(16)\n    \n    if value == \"17\"\n        return int64(17)\n\
    \    \n    if value == \"18\"\n        return int64(18)\n    \n    if value ==\
    \ \"19\"\n        return int64(19)\n    \n    if value == \"20\"\n        return\
    \ int64(20)\n    \n    if value == \"21\"\n        return int64(21)\n    \n  \
    \  if value == \"22\"\n        return int64(22)\n    \n    if value == \"23\"\n\
    \        return int64(23)\n    \n    if value == \"24\"\n        return int64(24)\n\
    \    \n    if value == \"25\"\n        return int64(25)\n    \n    if value ==\
    \ \"26\"\n        return int64(26)\n    \n    if value == \"27\"\n        return\
    \ int64(27)\n    \n    if value == \"28\"\n        return int64(28)\n    \n  \
    \  if value == \"29\"\n        return int64(29)\n    \n    if value == \"30\"\n\
    \        return int64(30)\n    \n    if value == \"31\"\n        return int64(31)\n\
    \    \n    if value == \"32\"\n        return int64(32)\n    \n    if value ==\
    \ \"33\"\n        return int64(33)\n    \n    if value == \"34\"\n        return\
    \ int64(34)\n    \n    if value == \"35\"\n        return int64(35)\n    \n  \
    \  if value == \"36\"\n        return int64(36)\n    \n    if value == \"37\"",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    local closest_integer::Int64\n        closest_integer = math.abs(tonumber(value))\n\
    \        if closest_integer == 0\n            error(\"value cannot be equidistant\
    \ from two integers\")\n        else\n            closest_integer = math.floor(closest_integer)\n\
    \        end\n        return closest_integer\n    end\nend\n</cell>\n<text>\n\
    Now let's test our function", "    \n    closest_integer = Int64(0)\n    \n  \
    \  if value == \"-inf\" or value == \"inf\" then\n        return -Inf \n    \n\
    \    if value == \"-inf\" then\n        return -Inf \n    \n    if value == \"\
    inf\" then\n        return Inf \n    \n    if value == \"nan\" then\n        return\
    \ Inf \n    \n    if value == \"0\" then\n        return 0\n    \n    if value\
    \ == \"1\" then\n        return 1\n    \n    if value == \"2\" then\n        return\
    \ 2\n    \n    if value == \"3\" then\n        return 3\n    \n    if value ==\
    \ \"4\" then\n        return 4\n    \n    if value == \"5\" then\n        return\
    \ 5\n    \n    if value == \"6\" then\n        return 6\n    \n    if value ==\
    \ \"7\" then\n        return 7\n    \n    if value == \"8\" then\n        return\
    \ 8\n    \n    if value == \"9\" then\n        return 9\n    \n    if value ==\
    \ \"10\" then\n        return 10\n    \n    if value == \"11\" then\n        return\
    \ 11\n    \n    if value == \"12\" then\n        return 12\n    \n    if value\
    \ == \"13\" then\n        return 13\n    \n    if value == \"14\" then\n     \
    \   return 14\n    \n    if value == \"15\" then\n        return 15\n    \n  \
    \  if value == \"16\" then\n        return 16\n    \n    if value == \"17\" then\n\
    \        return 17\n    \n    if value == \"18\" then\n        return 18\n   \
    \ \n    if value == \"19\" then\n        return 19\n    \n    if value == \"20\"\
    \ then\n        return 20\n    \n    if value == \"21\" then\n        return 21\n\
    \    \n    if value == \"22\" then\n        return 22\n    \n    if value == \"\
    23\" then\n        return 23\n    \n    if value == \"24\" then\n        return\
    \ 24\n    \n    if value == \"25\" then\n        return 25\n    \n    if value\
    \ == \"26\" then\n        return 26\n    \n    if value == \"27\" then\n     \
    \   return 27\n    \n    if value == \"28\" then\n        return 28\n    \n  \
    \  if value == \"29\" then\n        return 29\n    \n    if value == \"30\" then\n\
    \        return 30\n    \n    if value == \"31\" then\n        return 31\n   \
    \ \n    if value == \"32\" then\n        return 32\n    \n    if value == \"33\"\
    \ then\n        return 33\n    \n    if value == \"34\" then\n        return 34\n\
    \    \n    if value == \"35\" then\n        return 35\n    \n    if value == \"\
    36\" then\n        return 36\n    \n    if ", "    closest_integer = Int64(0)\n\
    \    \n    if value == \"\"\n        return closest_integer\n    \n    digits\
    \ = value.digits\n    \n    if digits.length == 1\n        return Int64(digits[0])\n\
    \    \n    if digits.length == 2\n        if digits[0] == digits[1]\n        \
    \    return Int64(digits[0])\n        else\n            return Int64(digits[1])\n\
    \    end\n    \n    if digits.length == 3\n        if digits[0] == digits[1]\n\
    \            if digits[1] == digits[2]\n                return Int64(digits[0])\n\
    \            else\n                return Int64(digits[2])\n        else\n   \
    \         if digits[1] == digits[2]\n                return Int64(digits[1])\n\
    \            else\n                return Int64(digits[2])\n        end\n    end\n\
    \    \n    if digits.length == 4\n        if digits[0] == digits[1]\n        \
    \    if digits[1] == digits[2]\n                if digits[2] == digits[3]\n  \
    \                  return Int64(digits[0])\n                else\n           \
    \         return Int64(digits[3])\n            else\n                if digits[2]\
    \ == digits[3]\n                    return Int64(digits[1])\n                else\n\
    \                    return Int64(digits[3])\n            end\n        else\n\
    \            if digits[1] == digits[2]\n                if digits[2] == digits[3]\n\
    \                    return Int64(digits[1])\n                else\n         \
    \           return Int64(digits[3])\n            else\n                if digits[2]\
    \ == digits[3]\n                    return Int64(digits[2])\n                else\n\
    \                    return Int64(digits[3])\n            end\n        end\n \
    \   end\n    \n    if digits.length == 5\n        if digits[0] == digits[1]\n\
    \            if digits[1] == digits[2]\n                if digits[2] == digits[3]\n\
    \                    if digits[3] == digits[4]\n                        return\
    \ Int64(digits[0])\n                    else\n                        return Int64(digits[4])\n\
    \                else\n                    if digits[3] == digits[4]\n       \
    \                 return Int64(digits[1])\n                    else\n        \
    \                return Int64(digits[4])\n                end\n            else\n\
    \                if digits[2] == digits[3]\n                    if digits[3] ==\
    \ digits[4]\n                        return Int64(digits[2])\n               \
    \     else\n                        return Int64(digits[4])\n                else\n\
    \                    if digits[3] == digits[4]\n                        return\
    \ Int64(digits[3])\n                    else\n                        return Int64(digits[4])\n\
    \                end\n            end\n        else\n            if digits[1]\
    \ == digits[2]\n                if digits[2] == digits[3]\n                  \
    \  if digits[3] == digits[4]\n                        return Int64(digits[1])\n\
    \                    else\n                        return Int64(digits[4])\n \
    \               else\n                    if digits[3] == digits[4]\n        \
    \                return Int64(digits[2])\n                    else\n         \
    \               return Int64(digits[4])\n                end\n            else\n\
    \                if digits[2] == digits[3]\n                    if digits[3] ==\
    \ digits[", "    \n    if value == \"-inf\" \n        then return -Inf \n    else\
    \ if value == \"inf\" \n        then return Inf \n    else if value == \"nan\"\
    \ \n        then return NaN \n    else if value == \"0\" \n        then return\
    \ 0 \n    else if value == \"1\" \n        then return 1 \n    else if value ==\
    \ \"2\" \n        then return 2 \n    else if value == \"3\" \n        then return\
    \ 3 \n    else if value == \"4\" \n        then return 4 \n    else if value ==\
    \ \"5\" \n        then return 5 \n    else if value == \"6\" \n        then return\
    \ 6 \n    else if value == \"7\" \n        then return 7 \n    else if value ==\
    \ \"8\" \n        then return 8 \n    else if value == \"9\" \n        then return\
    \ 9 \n    else if value == \"10\" \n        then return 10 \n    else if value\
    \ == \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else\
    \ if value == \"35\" \n        then return 35 \n    else ", "    closest_integer\
    \ = math.ceil(value)\n    if closest_integer == value:\n        closest_integer\
    \ = math.floor(value)\n    return closest_integer\nend", "    if value == \"\"\
    \n        0\n    else\n        closest_integer(value[end-1]) + 1 \nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Create a function that takes a value (string)\
    \ representing a number\n    and returns the closest float to it. If the number\
    \ is equidistant\n    from two integers, round it away from zero.", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.floor(value))\n        if closest_integer == value:\n         \
    \   closest_integer = Int64(math.round(value))\n            if closest_integer\
    \ == value:\n                closest_integer = Int64(math.trunc(value))\n    return\
    \ closest_integer\nend\n</cell>\n<code language=julia-1.5>", "    closest_integer\
    \ = int64(0)\n    \n    if value == \"\"\n        return closest_integer\n   \
    \ \n    \n    if value == \"0\"\n        return int64(0)\n    \n    \n    if value\
    \ == \"1\"\n        return int64(1)\n    \n    \n    if value == \"2\"\n     \
    \   return int64(2)\n    \n    \n    if value == \"3\"\n        return int64(3)\n\
    \    \n    \n    if value == \"4\"\n        return int64(4)\n    \n    \n    if\
    \ value == \"5\"\n        return int64(5)\n    \n    \n    if value == \"6\"\n\
    \        return int64(6)\n    \n    \n    if value == \"7\"\n        return int64(7)\n\
    \    \n    \n    if value == \"8\"\n        return int64(8)\n    \n    \n    if\
    \ value == \"9\"\n        return int64(9)\n    \n    \n    if value == \"10\"\n\
    \        return int64(10)\n    \n    \n    if value == \"11\"\n        return\
    \ int64(11)\n    \n    \n    if value == \"12\"\n        return int64(12)\n  \
    \  \n    \n    if value == \"13\"\n        return int64(13)\n    \n    \n    if\
    \ value == \"14\"\n        return int64(14)\n    \n    \n    if value == \"15\"\
    \n        return int64(15)\n    \n    \n    if value == \"16\"\n        return\
    \ int64(16)\n    \n    \n    if value == \"17\"\n        return int64(17)\n  \
    \  \n    \n    if value == \"18\"\n        return int64(18)\n    \n    \n    if\
    \ value == \"19\"\n        return int64(19)\n    \n    \n    if value == \"20\"\
    \n        return int64(20)\n    \n    \n    if value == \"21\"\n        return\
    \ int64(21)\n    \n    \n    if value == \"22\"\n        return int64(22)\n  \
    \  \n    \n    if value == \"23\"\n        return int64(23)\n    \n    \n    if\
    \ value == \"24\"\n        return int64(24)\n    \n    \n    if value == \"25\"\
    \n        return int64(25)\n    \n    \n    if value == \"26\"\n        return\
    \ int64(26)\n    \n    \n    if value == \"27\"\n        return int64(27)\n  \
    \  \n    \n    if value == \"28\"\n        return int64(28)\n    \n    \n    if\
    \ value == \"29\"\n        return int64(29)\n    \n    \n    if value == \"30\"\
    \n        return int64(30)\n    \n    \n    if value == \"31\"\n        return\
    \ int64(31)\n    \n    \n    if value == \"32\"\n        return int64(32)\n  \
    \  \n    \n    if value == \"33", "    \n    if value == \"\"\n        error(\"\
    Value cannot be empty\")\n    else\n        if isnumeric(value) == false\n   \
    \         error(\"Value must be a number\")\n        else\n            if value\
    \ == \"0\"\n                error(\"Value cannot be 0\")\n            else\n \
    \               let value = tostring(value)\n                let digits = split(value,\
    \ \".\")\n                let digits_int = digits[1]\n                let digits_frac\
    \ = digits[2]\n                let digits_frac_int = tostring(digits_frac)\n \
    \               let digits_frac_int = digits_frac_int.split(\".\")[1]\n      \
    \          let digits_frac_int = digits_frac_int.split(\".\")[0]\n           \
    \     let digits_frac_int = tostring(digits_frac)\n                let digits_frac_int\
    \ = digits_frac_int.split(\".\")[1]\n                let digits_frac_int = digits_frac_int.split(\"\
    .\")[0]\n                let digits_frac_int = digits_frac_int.split(\".\")[1]\n\
    \                let digits_frac_int = digits_frac_int.split(\".\")[0]\n     \
    \           let digits_frac_int = digits_frac_int.split(\".\")[1]\n          \
    \      let digits_frac_int = digits_frac_int.split(\".\")[0]\n               \
    \ let digits_frac_int = digits_frac_int.split(\".\")[1]\n                let digits_frac_int\
    \ = digits_frac_int.split(\".\")[0]\n                let digits_frac_int = digits_frac_int.split(\"\
    .\")[1]\n                let digits_frac_int = digits_frac_int.split(\".\")[0]\n\
    \                let digits_frac_int = digits_frac_int.split(\".\")[1]\n     \
    \           let digits_frac_int = digits_frac_int.split(\".\")[0]\n          \
    \      let digits_frac_int = digits_frac_int.split(\".\")[1]\n               \
    \ let digits_frac_int = digits_frac_int.split(\".\")[0]\n                let digits_frac_int\
    \ = digits_frac_int.split(\".\")[1]\n                let digits_frac_int = digits_frac_int.split(\"\
    .\")[0]\n                let digits_frac_int = digits_frac_int.split(\".\")[1]\n\
    \                let digits_frac_int = digits_frac_int.split(\".\")[0]\n     \
    \           let digits_frac_int = digits_frac_int.split(\".\")[1]\n          \
    \      let digits_frac_int = digits_frac_int.split(\".\")[0]\n               \
    \ let digits_frac_int = digits_frac_int.split(\".\")[1]\n                let digits_frac_int\
    \ = digits_frac_int.split(\".\")[0]\n                let digits_frac_int = digits_frac_int.split(\"\
    .\")[1]\n                let digits_frac_int = digits_frac_int.split(\".\")[0]\n\
    \                let digits_frac_int = digits_frac_int.split(\".\")[1]\n     \
    \           let digit", "    if value == \"-inf\" \n        then return -Inf \n\
    \    else if value == \"inf\" \n        then return Inf \n    else if value ==\
    \ \"nan\" \n        then return NaN \n    else if value == \"-nan\" \n       \
    \ then return NaN \n    else if value == \"0\" \n        then return 0 \n    else\
    \ if value == \"1\" \n        then return 1 \n    else if value == \"2\" \n  \
    \      then return 2 \n    else if value == \"3\" \n        then return 3 \n \
    \   else if value == \"4\" \n        then return 4 \n    else if value == \"5\"\
    \ \n        then return 5 \n    else if value == \"6\" \n        then return 6\
    \ \n    else if value == \"7\" \n        then return 7 \n    else if value ==\
    \ \"8\" \n        then return 8 \n    else if value == \"9\" \n        then return\
    \ 9 \n    else if value == \"10\" \n        then return 10 \n    else if value\
    \ == \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else ",
  "    if value == \"\"\n        error(\"The value you provided cannot be an empty\
    \ string\")\n    elseif value == \"-\"\n        error(\"The value you provided\
    \ cannot be a negative number\")\n    elseif value == \"+\"\n        error(\"\
    The value you provided cannot be a positive number\")\n    else\n        closest_integer(parse(value))\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    closest_integer(value::Int64)",
  "    closest_integer = Int(0)\n    \n    if value == \"-inf\" or value == \"inf\"\
    \ or value == \"nan\" then\n        return Int(0)\n    end", "    \n    closest_integer\
    \ = Int64(math.ceil(value))\n    \n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.floor(value))\n    \n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if value == \"\"\n        error(\"value\
    \ cannot be empty\")\n    \n    number = tonumber(value)\n    if number == 0\n\
    \        error(\"value cannot be 0\")\n    \n    closest = 0\n    \n    for n\
    \ in [number, number+10, number+100, number+1000, number+10000, number+100000]\n\
    \        if abs(n) < abs(closest)\n            closest = n\n        end\n    end\n\
    \    \n    return closest\nend", "    closest_integer = Int64(0)\n    \n    if\
    \ value == \"0\":\n        return Int64(0)\n    \n    if value == \"1\":\n   \
    \     return Int64(1)\n    \n    if value == \"2\":\n        return Int64(2)\n\
    \    \n    if value == \"3\":\n        return Int64(3)\n    \n    if value ==\
    \ \"4\":\n        return Int64(4)\n    \n    if value == \"5\":\n        return\
    \ Int64(5)\n    \n    if value == \"6\":\n        return Int64(6)\n    \n    if\
    \ value == \"7\":\n        return Int64(7)\n    \n    if value == \"8\":\n   \
    \     return Int64(8)\n    \n    if value == \"9\":\n        return Int64(9)\n\
    \    \n    if value == \"10\":\n        return Int64(10)\n    \n    if value ==\
    \ \"11\":\n        return Int64(11)\n    \n    if value == \"12\":\n        return\
    \ Int64(12)\n    \n    if value == \"13\":\n        return Int64(13)\n    \n \
    \   if value == \"14\":\n        return Int64(14)\n    \n    if value == \"15\"\
    :\n        return Int64(15)\n    \n    if value == \"16\":\n        return Int64(16)\n\
    \    \n    if value == \"17\":\n        return Int64(17)\n    \n    if value ==\
    \ \"18\":\n        return Int64(18)\n    \n    if value == \"19\":\n        return\
    \ Int64(19)\n    \n    if value == \"20\":\n        return Int64(20)\n    \n \
    \   if value == \"21\":\n        return Int64(21)\n    \n    if value == \"22\"\
    :\n        return Int64(22)\n    \n    if value == \"23\":\n        return Int64(23)\n\
    \    \n    if value == \"24\":\n        return Int64(24)\n    \n    if value ==\
    \ \"25\":\n        return Int64(25)\n    \n    if value == \"26\":\n        return\
    \ Int64(26)\n    \n    if value == \"27\":\n        return Int64(27)\n    \n \
    \   if value == \"28\":\n        return Int64(28)\n    \n    if value == \"29\"\
    :\n        return Int64(29)\n    \n    if value == \"30\":\n        return Int64(30)\n\
    \    \n    if value == \"31\":\n        return Int64(31)\n    \n    if value ==\
    \ \"32\":\n        return Int64(32)\n    \n    if value == \"33\":\n        return\
    \ Int64(33)\n    \n    if value == \"34\":\n        return Int64(34)\n    \n \
    \   if value == \"35\":\n        return Int64(35)\n    \n    if value == \"36\"\
    :\n        return Int64(36)\n    \n    if value == \"37\":\n        return Int64(37",
  "    closest_integer = Int(0)\n    if value == \"0\" || value == \"-0\" \n     \
    \   then return 0\n    else if value == \"1\" || value == \"-1\" \n        then\
    \ return -1\n    else if value == \"2\" || value == \"-2\" \n        then return\
    \ -2\n    else if value == \"3\" || value == \"-3\" \n        then return -3\n\
    \    else if value == \"4\" || value == \"-4\" \n        then return -4\n    else\
    \ if value == \"5\" || value == \"-5\" \n        then return -5\n    else if value\
    \ == \"6\" || value == \"-6\" \n        then return -6\n    else if value == \"\
    7\" || value == \"-7\" \n        then return -7\n    else if value == \"8\" ||\
    \ value == \"-8\" \n        then return -8\n    else if value == \"9\" || value\
    \ == \"-9\" \n        then return -9\n    else if value == \"10\" || value ==\
    \ \"-10\" \n        then return -10\n    else if value == \"11\" || value == \"\
    -11\" \n        then return -11\n    else if value == \"12\" || value == \"-12\"\
    \ \n        then return -12\n    else if value == \"13\" || value == \"-13\" \n\
    \        then return -13\n    else if value == \"14\" || value == \"-14\" \n \
    \       then return -14\n    else if value == \"15\" || value == \"-15\" \n  \
    \      then return -15\n    else if value == \"16\" || value == \"-16\" \n   \
    \     then return -16\n    else if value == \"17\" || value == \"-17\" \n    \
    \    then return -17\n    else if value == \"18\" || value == \"-18\" \n     \
    \   then return -18\n    else if value == \"19\" || value == \"-19\" \n      \
    \  then return -19\n    else if value == \"20\" || value == \"-20\" \n       \
    \ then return -20\n    else if value == \"21\" || value == \"-21\" \n        then\
    \ return -21\n    else if value == \"22\" || value == \"-22\" \n        then return\
    \ -22\n    else if value == \"23\" || value == \"-23\" \n        then return -23\n\
    \    else if value == \"24\" || value == \"-24\" \n        then return -24\n \
    \   else if value == \"25\" || value == \"-25\" \n        then return -25\n  \
    \  else if value == \"26\" || value == \"-26\" \n        then return -26\n   \
    \ else if value == \"27\" || value == \"-27\" \n        then return -27\n    else\
    \ if value == \"28\" || value == \"-28\" \n        then return -28", "    \n \
    \   if value == \"\"\n        throw(ArgumentError(\"The value argument cannot\
    \ be an empty string\"))\n    end", "    closest_integer = Int(0)\n    \n    if\
    \ value == \"-inf\" || value == \"inf\" || value == \"nan\"\n        closest_integer\
    \ = Int(0)\n    else\n        closest_integer = Int(value)\n        \n       \
    \ if closest_integer == Int(0)\n            closest_integer = Int(value)\n   \
    \     else\n            closest_integer = Int(closest_integer) + 1\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if value == \"\"\n  \
    \      0\n    else\n        closest_integer(value[end-1]) + 1 \nend", "    \n\
    \    if value == \"\"\n        error(\"value cannot be empty\")\n    end\n   \
    \ \n    local value::Int64 = tonumber(value)\n    \n    if value == 0\n      \
    \  return 0\n    end\n    \n    if value == 1\n        return 1\n    end\n   \
    \ \n    if value == 2\n        return 2\n    end\n    \n    if value == 3\n  \
    \      return 3\n    end\n    \n    if value == 4\n        return 4\n    end\n\
    \    \n    if value == 5\n        return 5\n    end\n    \n    if value == 6\n\
    \        return 6\n    end\n    \n    if value == 7\n        return 7\n    end\n\
    \    \n    if value == 8\n        return 8\n    end\n    \n    if value == 9\n\
    \        return 9\n    end\n    \n    if value == 10\n        return 10\n    end\n\
    \    \n    if value == 11\n        return 11\n    end\n    \n    if value == 12\n\
    \        return 12\n    end\n    \n    if value == 13\n        return 13\n   \
    \ end\n    \n    if value == 14\n        return 14\n    end\n    \n    if value\
    \ == 15\n        return 15\n    end\n    \n    if value == 16\n        return\
    \ 16\n    end\n    \n    if value == 17\n        return 17\n    end\n    \n  \
    \  if value == 18\n        return 18\n    end\n    \n    if value == 19\n    \
    \    return 19\n    end\n    \n    if value == 20\n        return 20\n    end\n\
    \    \n    if value == 21\n        return 21\n    end\n    \n    if value == 22\n\
    \        return 22\n    end\n    \n    if value == 23\n        return 23\n   \
    \ end\n    \n    if value == 24\n        return 24\n    end\n    \n    if value\
    \ == 25\n        return 25\n    end\n    \n    if value == 26\n        return\
    \ 26\n    end\n    \n    if value == 27\n        return 27\n    end\n    \n  \
    \  if value == 28\n        return 28\n    end\n    \n    if value == 29\n    \
    \    return 29\n    end\n    \n    if value == 30\n        return 30\n    end\n\
    \    \n    if value == 31\n        return 31\n    end\n    \n    if value == 32\n\
    \        return 32\n    end\n    \n    if value == 33\n        return 33\n   \
    \ end\n    \n    if value == 34\n        return 34\n    end\n    \n    if value\
    \ == 35\n        return 35\n    end\n    \n    if value == 36\n        return\
    \ 36\n    end\n    \n    if value == 37\n        return 37\n    end\n    \n  \
    \  if value == 38\n        return 38\n    end\n    \n    if value == 39\n    \
    \    return 39\n    end\n    \n    if value == 40\n        return 40\n    end\n\
    \    \n    if value == 41\n        return 41\n    end\n    \n    if value == 42\n\
    \        return 42\n    end\n    \n    if value == 43\n        return 43\n   \
    \ end\n    ", "    closest_integer = Int64(math.floor(Int64(value)))\n    if closest_integer\
    \ == Int64(math.ceil(value))\n        closest_integer = Int64(math.ceil(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    closest_integer = Int(0)\n\
    \    closest_integer = Int(value) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_integer = Int(closest_integer) \n    closest_integer = Int(closest_integer)\
    \ \n    closest_", "    closest_integer = Int64(math.floor(value))\n    if closest_integer\
    \ == value:\n        closest_integer = Int64(math.ceil(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    closest_integers(values::Vector{String})", "    if value == \"-inf\"\
    \ || value == \"inf\" \n        then return value\n    else\n        local closest::Int64\
    \ = math.ceil(value)\n        if math.abs(value - closest) < math.abs(value -\
    \ math.ceil(closest)) \n            then return closest\n        else return math.ceil(closest)\n\
    \    end\nend\n\"\"\"\n    Create a function that takes a value (string) representing\
    \ a number\n    and returns the closest float to it. If the number is equidistant\n\
    \    from two floats, round it away from zero.", "    \n    if value == \"\"\n\
    \        error(\"value cannot be empty\")\n    elseif value == \"-\"\n       \
    \ error(\"value cannot be -, use closest_integer(\\\"0\\\") instead\")\n    elseif\
    \ value == \"0\"\n        error(\"value cannot be 0, use closest_integer(\\\"\
    1\\\") instead\")\n    elseif value == \"1\"\n        error(\"value cannot be\
    \ 1, use closest_integer(\\\"2\\\") instead\")\n    elseif value == \"2\"\n  \
    \      error(\"value cannot be 2, use closest_integer(\\\"3\\\") instead\")\n\
    \    elseif value == \"3\"\n        error(\"value cannot be 3, use closest_integer(\\\
    \"4\\\") instead\")\n    elseif value == \"4\"\n        error(\"value cannot be\
    \ 4, use closest_integer(\\\"5\\\") instead\")\n    elseif value == \"5\"\n  \
    \      error(\"value cannot be 5, use closest_integer(\\\"6\\\") instead\")\n\
    \    elseif value == \"6\"\n        error(\"value cannot be 6, use closest_integer(\\\
    \"7\\\") instead\")\n    elseif value == \"7\"\n        error(\"value cannot be\
    \ 7, use closest_integer(\\\"8\\\") instead\")\n    elseif value == \"8\"\n  \
    \      error(\"value cannot be 8, use closest_integer(\\\"9\\\") instead\")\n\
    \    elseif value == \"9\"\n        error(\"value cannot be 9, use closest_integer(\\\
    \"10\\\") instead\")\n    elseif value == \"10\"\n        error(\"value cannot\
    \ be 10, use closest_integer(\\\"11\\\") instead\")\n    elseif value == \"11\"\
    \n        error(\"value cannot be 11, use closest_integer(\\\"12\\\") instead\"\
    )\n    elseif value == \"12\"\n        error(\"value cannot be 12, use closest_integer(\\\
    \"13\\\") instead\")\n    elseif value == \"13\"\n        error(\"value cannot\
    \ be 13, use closest_integer(\\\"14\\\") instead\")\n    elseif value == \"14\"\
    \n        error(\"value cannot be 14, use closest_integer(\\\"15\\\") instead\"\
    )\n    elseif value == \"15\"\n        error(\"value cannot be 15, use closest_integer(\\\
    \"16\\\") instead\")\n    elseif value == \"16\"\n        error(\"value cannot\
    \ be 16, use closest_integer(\\\"17\\\") instead\")\n    elseif value == \"17\"\
    \n        error(\"value cannot be 17, use closest_integer(\\\"18\\\") instead\"\
    )\n    elseif value == \"18\"\n        error(\"value cannot be 18, use closest_integer(\\\
    \"19\\\") instead\")\n    elseif value == \"19\"\n        error(\"value cannot\
    \ be 19, use closest_integer(\\\"20\\\") instead\")\n    elseif value == \"20\"\
    \n        error(\"value cannot be 20, use closest_integer(\\\"21\\\") instead\"\
    )\n", "    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return\
    \ closest_integer\n    \n    \n    if value == \"0\"\n        return closest_integer\n\
    \    \n    \n    if value == \"1\"\n        return Int64(1) \n    \n    \n   \
    \ if value == \"-1\"\n        return Int64(-1) \n    \n    \n    if value == \"\
    10\"\n        return Int64(10) \n    \n    \n    if value == \"-10\"\n       \
    \ return Int64(-10) \n    \n    \n    if value == \"100\"\n        return Int64(100)\
    \ \n    \n    \n    if value == \"-100\"\n        return Int64(-100) \n    \n\
    \    \n    if value == \"1000\"\n        return Int64(1000) \n    \n    \n   \
    \ if value == \"-1000\"\n        return Int64(-1000) \n    \n    \n    if value\
    \ == \"10000\"\n        return Int64(10000) \n    \n    \n    if value == \"-10000\"\
    \n        return Int64(-10000) \n    \n    \n    if value == \"100000\"\n    \
    \    return Int64(100000) \n    \n    \n    if value == \"-100000\"\n        return\
    \ Int64(-100000) \n    \n    \n    if value == \"1000000\"\n        return Int64(1000000)\
    \ \n    \n    \n    if value == \"-10000000\"\n        return Int64(-1000000)\
    \ \n    \n    \n    if value == \"100000000\"\n        return Int64(100000000)\
    \ \n    \n    \n    if value == \"-1000000000\"\n        return Int64(-100000000)\
    \ \n    \n    \n    if value == \"10000000000\"\n        return Int64(10000000000)\
    \ \n    \n    \n    if value == \"-100000000000\"\n        return Int64(-10000000000)\
    \ \n    \n    \n    if value == \"1000000000000\"\n        return Int64(1000000000000)\
    \ \n    \n    \n    if value == \"-1000000000000\"\n        return Int64(-1000000000000)\
    \ \n    \n    \n    if value == \"10000000000000\"\n        return Int64(10000000000000)\
    \ \n    \n    \n    if value == \"-10000000000000\"\n        return Int64(-10000000000000)\
    \ \n    \n    \n    if value == \"100000000000000\"\n        return Int64(100000000000000)\
    \ \n    \n    \n    if value == \"-100000000000000\"\n        return Int64(-100000000000000)\
    \ \n    \n    \n    if value == \"1000000000000000\"\n        return Int64(1000000000000000)\
    \ \n    \n    \n    if value == \"-1000000000000000\"\n        return Int64(-1000000000000000)\
    \ \n    \n    \n    if value == \"10000000000000000\"\n        return Int64(100",
  "    if value == \"\"\n        error(\"The value you entered is empty\")\n    elseif\
    \ value == \"-\"\n        error(\"The value you entered is negative\")\n    elseif\
    \ value == \"+\"\n        error(\"The value you entered is positive\")\n    elseif\
    \ value == \"0\"\n        error(\"The value you entered is zero\")\n    elseif\
    \ value == \"1\"\n        error(\"The value you entered is one\")\n    elseif\
    \ value == \"2\"\n        error(\"The value you entered is two\")\n    elseif\
    \ value == \"3\"\n        error(\"The value you entered is three\")\n    elseif\
    \ value == \"4\"\n        error(\"The value you entered is four\")\n    elseif\
    \ value == \"5\"\n        error(\"The value you entered is five\")\n    elseif\
    \ value == \"6\"\n        error(\"The value you entered is six\")\n    elseif\
    \ value == \"7\"\n        error(\"The value you entered is seven\")\n    elseif\
    \ value == \"8\"\n        error(\"The value you entered is eight\")\n    elseif\
    \ value == \"9\"\n        error(\"The value you entered is nine\")\n    elseif\
    \ value == \".\"\n        error(\"The value you entered is invalid\")\n    else\n\
    \        error(\"The value you entered is invalid\")\n    end\n    return round(parse(Float64,\
    \ value))\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a number and returns the closest float to it. If the number is\
    \ equidistant from two floats, round it away from zero.", "    \n    closest_integer\
    \ = Int(0)\n    \n    if value == \"0\" || value == \"-0\" \n        then return\
    \ closest_integer\n    \n    digits = split(value, \".\")\n    \n    if length(digits)\
    \ == 1 \n        then return Int(digits[0])\n    \n    digits_int = map(Int, digits)\n\
    \    \n    closest_integer = digits_int[length(digits_int) - 1]\n    \n    for\
    \ digit in digits_int\n        if digit < closest_integer\n            then return\
    \ digit\n            \n            closest_integer = digit\n    \n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"10\")\n</cell>\n<code\
    \ language=julia-1.4>\nclosest_integer(\"15.3\")\n</cell>\n<code language=julia-1.4>\n\
    closest_integer(\"14.5\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"\
    -14.5\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"0\")\n</cell>\n\
    <code language=julia-1.4>\nclosest_integer(\"-0\")\n</cell>\n<code language=julia-1.4>\n\
    closest_integer(\"-1\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"\
    -10\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n\
    <code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\n\
    closest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"\
    -10.0\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n\
    <code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\n\
    closest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"\
    -10.0\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n\
    <code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\n\
    closest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"\
    -10.0\")\n</cell>\n<code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n\
    <code language=julia-1.4>\nclosest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\n\
    closest_integer(\"-10.0\")\n</cell>\n<code language=julia-1.4>\nclosest_", " \
    \   if value == \"-inf\" || value == \"inf\" \n        then return value\n   \
    \ else if value == \"-inf\" \n        then return -value\n    else if value ==\
    \ \"inf\" \n        then return value\n    else if value == \"nan\" \n       \
    \ then return value\n    else if value == \"0\" \n        then return 0\n    else\
    \ if value == \"1\" \n        then return 1\n    else if value == \"2\" \n   \
    \     then return 2\n    else if value == \"3\" \n        then return 3\n    else\
    \ if value == \"4\" \n        then return 4\n    else if value == \"5\" \n   \
    \     then return 5\n    else if value == \"6\" \n        then return 6\n    else\
    \ if value == \"7\" \n        then return 7\n    else if value == \"8\" \n   \
    \     then return 8\n    else if value == \"9\" \n        then return 9\n    else\
    \ if value == \"10\" \n        then return 10\n    else if value == \"11\" \n\
    \        then return 11\n    else if value == \"12\" \n        then return 12\n\
    \    else if value == \"13\" \n        then return 13\n    else if value == \"\
    14\" \n        then return 14\n    else if value == \"15\" \n        then return\
    \ 15\n    else if value == \"16\" \n        then return 16\n    else if value\
    \ == \"17\" \n        then return 17\n    else if value == \"18\" \n        then\
    \ return 18\n    else if value == \"19\" \n        then return 19\n    else if\
    \ value == \"20\" \n        then return 20\n    else if value == \"21\" \n   \
    \     then return 21\n    else if value == \"22\" \n        then return 22\n \
    \   else if value == \"23\" \n        then return 23\n    else if value == \"\
    24\" \n        then return 24\n    else if value == \"25\" \n        then return\
    \ 25\n    else if value == \"26\" \n        then return 26\n    else if value\
    \ == \"27\" \n        then return 27\n    else if value == \"28\" \n        then\
    \ return 28\n    else if value == \"29\" \n        then return 29\n    else if\
    \ value == \"30\" \n        then return 30\n    else if value == \"31\" \n   \
    \     then return 31\n    else if value == \"32\" \n        then return 32\n \
    \   else if value == \"33\" \n        then return 33\n    else if value == \"\
    34\" \n        then return 34\n    else if value ", "    closest_integer = Int64(0)\n\
    \    \n    if value == \"-inf\" or value == \"inf\" or value == \"nan\" \n   \
    \     then return value\n    \n    if value == \"0\" \n        then return 0\n\
    \    \n    if value == \"1\" \n        then return 1\n    \n    if value == \"\
    2\" \n        then return 2\n    \n    if value == \"3\" \n        then return\
    \ 3\n    \n    if value == \"4\" \n        then return 4\n    \n    if value ==\
    \ \"5\" \n        then return 5\n    \n    if value == \"6\" \n        then return\
    \ 6\n    \n    if value == \"7\" \n        then return 7\n    \n    if value ==\
    \ \"8\" \n        then return 8\n    \n    if value == \"9\" \n        then return\
    \ 9\n    \n    if value == \"10\" \n        then return 10\n    \n    if value\
    \ == \"11\" \n        then return 11\n    \n    if value == \"12\" \n        then\
    \ return 12\n    \n    if value == \"13\" \n        then return 13\n    \n   \
    \ if value == \"14\" \n        then return 14\n    \n    if value == \"15\" \n\
    \        then return 15\n    \n    if value == \"16\" \n        then return 16\n\
    \    \n    if value == \"17\" \n        then return 17\n    \n    if value ==\
    \ \"18\" \n        then return 18\n    \n    if value == \"19\" \n        then\
    \ return 19\n    \n    if value == \"20\" \n        then return 20\n    \n   \
    \ if value == \"21\" \n        then return 21\n    \n    if value == \"22\" \n\
    \        then return 22\n    \n    if value == \"23\" \n        then return 23\n\
    \    \n    if value == \"24\" \n        then return 24\n    \n    if value ==\
    \ \"25\" \n        then return 25\n    \n    if value == \"26\" \n        then\
    \ return 26\n    \n    if value == \"27\" \n        then return 27\n    \n   \
    \ if value == \"28\" \n        then return 28\n    \n    if value == \"29\" \n\
    \        then return 29\n    \n    if value == \"30\" \n        then return 30\n\
    \    \n    if value == \"31\" \n        then return 31\n    \n    if value ==\
    \ \"32\" \n        then return 32\n    \n    if value == \"33\" \n        then\
    \ return 33\n    \n    if value == \"34\" \n        then return 34\n    \n   \
    \ if value == \"35\" \n        then return 35\n    \n    if value == \"36\" \n\
    \        then return 36\n    \n    if value ", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value:\n        closest_integer = Int64(math.floor(value))\n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.5>", "    closest_integer\
    \ = Int(0)\n    \n    if value == \"0\" || value == \"-0\" \n        then return\
    \ 0\n    \n    digits = split(value, \".\")\n    \n    if digits.length == 0 ||\
    \ digits.length == 1\n        then return Int(value)\n    \n    digits_int = digits[1]\n\
    \    \n    if digits_int == \"0\"\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int.toInt()\n    \n    if digits_int == 0\n        then\
    \ return Int(digits[0])\n    \n    digits_int = digits_int - 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int - 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int + 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ - 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int + 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int - 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int - 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int + 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ - 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int + 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n    digits_int = digits_int - 1\n    \n    if digits_int\
    \ == 0\n        then return Int(digits[0])\n    \n    digits_int = digits_int\
    \ + 1\n    \n    if digits_int == 0\n        then return Int(digits[0])\n    \n\
    \    digits_int = digits_int - 1\n    \n    if digits_int == 0\n        then return\
    \ Int(digits[0])\n    \n", "    closest_integer = math.ceil(value)\n    if closest_integer\
    \ == value:\n        closest_integer = math.floor(value)\n    return closest_integer\n\
    end", "    if value == \"-inf\" \n        then return -Inf \n    else if value\
    \ == \"inf\" \n        then return Inf \n    else if value == \"nan\" \n     \
    \   then return NaN \n    else if value == \"0\" \n        then return 0 \n  \
    \  else if value == \"1\" \n        then return 1 \n    else if value == \"2\"\
    \ \n        then return 2 \n    else if value == \"3\" \n        then return 3\
    \ \n    else if value == \"4\" \n        then return 4 \n    else if value ==\
    \ \"5\" \n        then return 5 \n    else if value == \"6\" \n        then return\
    \ 6 \n    else if value == \"7\" \n        then return 7 \n    else if value ==\
    \ \"8\" \n        then return 8 \n    else if value == \"9\" \n        then return\
    \ 9 \n    else if value == \"10\" \n        then return 10 \n    else if value\
    \ == \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else\
    \ if value == \"35\" \n        then return 35 \n    else if value ", "    \n \
    \   if value == \"\"\n        error(\"value cannot be empty\")\n    \n    if value\
    \ == \"0\"\n        return 0\n    \n    if value == \"1\"\n        return 1\n\
    \    \n    if value == \"-1\"\n        return -1\n    \n    if value == \"10\"\
    \n        return 10\n    \n    if value == \"-10\"\n        return -10\n    \n\
    \    if value == \"100\"\n        return 100\n    \n    if value == \"-100\"\n\
    \        return -100\n    \n    if value == \"1000\"\n        return 1000\n  \
    \  \n    if value == \"-1000\"\n        return -1000\n    \n    if value == \"\
    10000\"\n        return 10000\n    \n    if value == \"-10000\"\n        return\
    \ -10000\n    \n    if value == \"100000\"\n        return 100000\n    \n    if\
    \ value == \"-100000\"\n        return -100000\n    \n    if value == \"10000000\"\
    \n        return 10000000\n    \n    if value == \"-100000000\"\n        return\
    \ -100000000\n    \n    if value == \"1000000000\"\n        return 1000000000\n\
    \    \n    if value == \"-10000000000\"\n        return -10000000000\n    \n \
    \   if value == \"100000000000\"\n        return 100000000000\n    \n    if value\
    \ == \"-1000000000000\"\n        return -1000000000000\n    \n    if value ==\
    \ \"10000000000000\"\n        return 10000000000000\n    \n    if value == \"\
    -100000000000000\"\n        return -100000000000000\n    \n    if value == \"\
    1000000000000000\"\n        return 1000000000000000\n    \n    if value == \"\
    -10000000000000000\"\n        return -10000000000000000\n    \n    if value ==\
    \ \"100000000000000000\"\n        return 100000000000000000\n    \n    if value\
    \ == \"-1000000000000000000\"\n        return -1000000000000000000\n    \n   \
    \ if value == \"10000000000000000000\"\n        return 10000000000000000000\n\
    \    \n    if value == \"-100000000000000000000\"\n        return -100000000000000000000\n\
    \    \n    if value == \"1000000000000000000000\"\n        return 1000000000000000000000\n\
    \    \n    if value == \"-10000000000000000000000\"\n        return -10000000000000000000000\n\
    \    \n    if value == \"1000000000000000000000000\"\n        return 1000000000000000000000000\n\
    \    \n    if value == \"-10000000000000000000000000\"\n        return -10000000000000000000000000\n\
    \    \n    if value == \"100000000000000000000000000\"\n        return 100000000000000000000000000\n\
    \    \n    if value == \"-1000000000000000000000000000\"\n        return -1000000000000000000000000000\n\
    \    \n    if value == \"10000000000000000000000000000\"\n        return 10000000000000000000000000000\n\
    \    \n    if value == \"-100000000000000000000000000000\"\n        return -100000000000000000000000000000\n\
    \    \n    if value == \"1000000000000000000000000000000\"\n        return 1000000000000000000000000000000\n\
    \    \n    if value == \"-10000000000000000000000000000000\"\n        return -10000000000000000000000000000000\n",
  "    closest_integer = Int(0)\n    closest_integer = if value == \"0\" then 0 else\
    \ value\n    closest_integer = if value == \"1\" then 1 else value\n    closest_integer\
    \ = if value == \"2\" then 2 else value\n    closest_integer = if value == \"\
    3\" then 3 else value\n    closest_integer = if value == \"4\" then 4 else value\n\
    \    closest_integer = if value == \"5\" then 5 else value\n    closest_integer\
    \ = if value == \"6\" then 6 else value\n    closest_integer = if value == \"\
    7\" then 7 else value\n    closest_integer = if value == \"8\" then 8 else value\n\
    \    closest_integer = if value == \"9\" then 9 else value\n    closest_integer\
    \ = if value == \"10\" then 10 else value\n    closest_integer = if value == \"\
    11\" then 11 else value\n    closest_integer = if value == \"12\" then 12 else\
    \ value\n    closest_integer = if value == \"13\" then 13 else value\n    closest_integer\
    \ = if value == \"14\" then 14 else value\n    closest_integer = if value == \"\
    15\" then 15 else value\n    closest_integer = if value == \"16\" then 16 else\
    \ value\n    closest_integer = if value == \"17\" then 17 else value\n    closest_integer\
    \ = if value == \"18\" then 18 else value\n    closest_integer = if value == \"\
    19\" then 19 else value\n    closest_integer = if value == \"20\" then 20 else\
    \ value\n    closest_integer = if value == \"21\" then 21 else value\n    closest_integer\
    \ = if value == \"22\" then 22 else value\n    closest_integer = if value == \"\
    23\" then 23 else value\n    closest_integer = if value == \"24\" then 24 else\
    \ value\n    closest_integer = if value == \"25\" then 25 else value\n    closest_integer\
    \ = if value == \"26\" then 26 else value\n    closest_integer = if value == \"\
    27\" then 27 else value\n    closest_integer = if value == \"28\" then 28 else\
    \ value\n    closest_integer = if value == \"29\" then 29 else value\n    closest_integer\
    \ = if value == \"30\" then 30 else value\n    closest_integer = if value == \"\
    31\" then 31 else value\n    closest_integer = if value == \"32\" then 32 else\
    \ value\n    closest_integer = if value == \"33\" then 33 else value\n    closest_integer\
    \ = if value == \"34\" then 34 else value\n    closest_integer = if value == \"\
    35\" then 35 else value\n    closest_integer = if value == \"", "    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.ceil(value))\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test it out\nclosest_integer(\"10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"\
    14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"\
    -10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"\
    -14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"-10\")\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"\
    0\")\nclosest_integer(\"-10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"\
    14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"\
    -10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"\
    -14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"-10\")\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"\
    0\")\nclosest_integer(\"-10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"\
    14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"\
    -10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"\
    -14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"-10\")\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"\
    0\")\nclosest_integer(\"-10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"\
    14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"\
    -10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"\
    -14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"-10\")\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"\
    0\")\nclosest_integer(\"-10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"\
    14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"\
    -10\")\nclosest_integer(\"15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"\
    -14.5\")\nclosest_integer(\"0\")\nclosest_integer(\"-10\")\nclosest_integer(\"\
    15.3\")\nclosest_integer(\"14.5\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be -, use closest_integer(\\\"0\\\")\"\
    )\n    elseif value == \"0\"\n        return 0\n    elseif value == \"1\"\n  \
    \      return 1\n    elseif value == \"2\"\n        return 2\n    elseif value\
    \ == \"3\"\n        return 3\n    elseif value == \"4\"\n        return 4\n  \
    \  elseif value == \"5\"\n        return 5\n    elseif value == \"6\"\n      \
    \  return 6\n    elseif value == \"7\"\n        return 7\n    elseif value ==\
    \ \"8\"\n        return 8\n    elseif value == \"9\"\n        return 9\n    else\n\
    \        error(\"value must be an integer, use closest_integer(\\\"0\\\")\")\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ representing a number and returns the closest integer to the number in base\
    \ 10. If the number is equidistant from two integers, round it away from zero.",
  "    closest_integer = Int64(math.floor(value))\n    if closest_integer == value\
    \ \n        closest_integer = Int64(math.ceil(value))\n    end\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integers(values::Vector{String})",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be negative\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be positive\")\n    elseif value == \"0\"\n\
    \        error(\"value cannot be zero\")\n    elseif value == \"1\"\n        error(\"\
    value cannot be one\")\n    elseif value == \"2\"\n        error(\"value cannot\
    \ be two\")\n    elseif value == \"3\"\n        error(\"value cannot be three\"\
    )\n    elseif value == \"4\"\n        error(\"value cannot be four\")\n    elseif\
    \ value == \"5\"\n        error(\"value cannot be five\")\n    elseif value ==\
    \ \"6\"\n        error(\"value cannot be six\")\n    elseif value == \"7\"\n \
    \       error(\"value cannot be seven\")\n    elseif value == \"8\"\n        error(\"\
    value cannot be eight\")\n    elseif value == \"9\"\n        error(\"value cannot\
    \ be nine\")\n    elseif value == \".\"\n        error(\"value cannot be a decimal\
    \ point\")\n    elseif value == \"e\"\n        error(\"value cannot be an exponent\"\
    )\n    elseif value == \"E\"\n        error(\"value cannot be an exponent with\
    \ capital E\")\n    elseif value == \"+\"\n        error(\"value cannot be a plus\
    \ sign\")\n    elseif value == \"-\"\n        error(\"value cannot be a minus\
    \ sign\")\n    elseif value == \"*\"\n        error(\"value cannot be a multiplication\
    \ sign\")\n    elseif value == \"/\"\n        error(\"value cannot be a division\
    \ sign\")\n    elseif value == \"%\"\n        error(\"value cannot be a modulus\
    \ sign\")\n    elseif value == \"^\"\n        error(\"value cannot be an exponent\
    \ with capital E\")\n    elseif value == \"~\"\n        error(\"value cannot be\
    \ a tilde sign\")\n    elseif value == \"(\"\n        error(\"value cannot be\
    \ a left parenthesis\")\n    elseif value == \")\"\n        error(\"value cannot\
    \ be a right parenthesis\")\n    elseif value == \"[\"\n        error(\"value\
    \ cannot be a left square bracket\")\n    elseif value == \"]\"\n        error(\"\
    value cannot be a right square bracket\")\n    elseif value == \"{\"\n       \
    \ error(\"value cannot be a left curly bracket\")\n    elseif value == \"}\"\n\
    \        error(\"value cannot be a right curly bracket\")\n    elseif value ==\
    \ \"<\"\n        error(\"value cannot be a left angle bracket\")\n    elseif value\
    \ == \">\"\n        error(\"value cannot be a right angle bracket\")\n    elseif\
    \ value == \"=\"\n        error(\"value cannot be an equal sign\")\n    elseif\
    \ value == \"+\"\n        error(\"value cannot be a plus sign\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be ", "    \n    if value == \"\"\n \
    \       error(\"Value cannot be empty\")\n    \n    digits = value.digits\n  \
    \  \n    if digits == 0\n        error(\"Value cannot be empty\")\n    \n    digits\
    \ = digits[1..]\n    \n    if digits == []\n        error(\"Value cannot be empty\"\
    )\n    \n    digits = digits[0..]\n    \n    if digits == []\n        error(\"\
    Value cannot be empty\")\n    \n    digits = digits[1..]\n    \n    if digits\
    \ == []\n        error(\"Value cannot be empty\")\n    \n    digits = digits[0..]\n\
    \    \n    if digits == []\n        error(\"Value cannot be empty\")\n    \n \
    \   digits = digits[1..]\n    \n    if digits == []\n        error(\"Value cannot\
    \ be empty\")\n    \n    digits = digits[0..]\n    \n    if digits == []\n   \
    \     error(\"Value cannot be empty\")\n    \n    digits = digits[1..]\n    \n\
    \    if digits == []\n        error(\"Value cannot be empty\")\n    \n    digits\
    \ = digits[0..]\n    \n    if digits == []\n        error(\"Value cannot be empty\"\
    )\n    \n    digits = digits[1..]\n    \n    if digits == []\n        error(\"\
    Value cannot be empty\")\n    \n    digits = digits[0..]\n    \n    if digits\
    \ == []\n        error(\"Value cannot be empty\")\n    \n    digits = digits[1..]\n\
    \    \n    if digits == []\n        error(\"Value cannot be empty\")\n    \n \
    \   digits = digits[0..]\n    \n    if digits == []\n        error(\"Value cannot\
    \ be empty\")\n    \n    digits = digits[1..]\n    \n    if digits == []\n   \
    \     error(\"Value cannot be empty\")\n    \n    digits = digits[0..]\n    \n\
    \    if digits == []\n        error(\"Value cannot be empty\")\n    \n    digits\
    \ = digits[1..]\n    \n    if digits == []\n        error(\"Value cannot be empty\"\
    )\n    \n    digits = digits[0..]\n    \n    if digits == []\n        error(\"\
    Value cannot be empty\")\n    \n    digits = digits[1..]\n    \n    if digits\
    \ == []\n        error(\"Value cannot be empty\")\n    \n    digits = digits[0..]\n\
    \    \n    if digits == []\n        error(\"Value cannot be empty\")\n    \n \
    \   digits = digits[1..]\n    \n    if digits == []\n        error(\"Value cannot\
    \ be empty\")\n    \n", "    closest_integer = Int64(math.ceil(value))\n    if\
    \ closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    closest_integer_with_precision(value::String)::Int64", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    closest_integers(values::Vector{String})",
  "    closest_integer = math.ceil(value)\n    if closest_integer == value:\n    \
    \    closest_integer = math.floor(value)\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>", "    if value == \"-inf\" || value == \"inf\" \n \
    \       then return value\n    else if value == \"0\" \n        then return 0\n\
    \    else if value == \"1\" \n        then return 1\n    else if value == \"2\"\
    \ \n        then return 2\n    else if value == \"3\" \n        then return 3\n\
    \    else if value == \"4\" \n        then return 4\n    else if value == \"5\"\
    \ \n        then return 5\n    else if value == \"6\" \n        then return 6\n\
    \    else if value == \"7\" \n        then return 7\n    else if value == \"8\"\
    \ \n        then return 8\n    else if value == \"9\" \n        then return 9\n\
    \    else if value == \"10\" \n        then return 10\n    else if value == \"\
    11\" \n        then return 11\n    else if value == \"12\" \n        then return\
    \ 12\n    else if value == \"13\" \n        then return 13\n    else if value\
    \ == \"14\" \n        then return 14\n    else if value == \"15\" \n        then\
    \ return 15\n    else if value == \"16\" \n        then return 16\n    else if\
    \ value == \"17\" \n        then return 17\n    else if value == \"18\" \n   \
    \     then return 18\n    else if value == \"19\" \n        then return 19\n \
    \   else if value == \"20\" \n        then return 20\n    else if value == \"\
    21\" \n        then return 21\n    else if value == \"22\" \n        then return\
    \ 22\n    else if value == \"23\" \n        then return 23\n    else if value\
    \ == \"24\" \n        then return 24\n    else if value == \"25\" \n        then\
    \ return 25\n    else if value == \"26\" \n        then return 26\n    else if\
    \ value == \"27\" \n        then return 27\n    else if value == \"28\" \n   \
    \     then return 28\n    else if value == \"29\" \n        then return 29\n \
    \   else if value == \"30\" \n        then return 30\n    else if value == \"\
    31\" \n        then return 31\n    else if value == \"32\" \n        then return\
    \ 32\n    else if value == \"33\" \n        then return 33\n    else if value\
    \ == \"34\" \n        then return 34\n    else if value == \"35\" \n        then\
    \ return 35\n    else if value == \"36\" \n        then return 36\n    else if\
    \ value == \"37\" \n        then return 37\n    else if value == \"", "    closest_integer\
    \ = Int(0)\n    \n    if value == \"0\":\n        return Int(0)\n    \n    if\
    \ value == \"1\":\n        return Int(1)\n    \n    if value == \"2\":\n     \
    \   return Int(2)\n    \n    if value == \"3\":\n        return Int(3)\n    \n\
    \    if value == \"4\":\n        return Int(4)\n    \n    if value == \"5\":\n\
    \        return Int(5)\n    \n    if value == \"6\":\n        return Int(6)\n\
    \    \n    if value == \"7\":\n        return Int(7)\n    \n    if value == \"\
    8\":\n        return Int(8)\n    \n    if value == \"9\":\n        return Int(9)\n\
    \    \n    if value == \"10\":\n        return Int(10)\n    \n    if value ==\
    \ \"11\":\n        return Int(11)\n    \n    if value == \"12\":\n        return\
    \ Int(12)\n    \n    if value == \"13\":\n        return Int(13)\n    \n    if\
    \ value == \"14\":\n        return Int(14)\n    \n    if value == \"15\":\n  \
    \      return Int(15)\n    \n    if value == \"16\":\n        return Int(16)\n\
    \    \n    if value == \"17\":\n        return Int(17)\n    \n    if value ==\
    \ \"18\":\n        return Int(18)\n    \n    if value == \"19\":\n        return\
    \ Int(19)\n    \n    if value == \"20\":\n        return Int(20)\n    \n    if\
    \ value == \"21\":\n        return Int(21)\n    \n    if value == \"22\":\n  \
    \      return Int(22)\n    \n    if value == \"23\":\n        return Int(23)\n\
    \    \n    if value == \"24\":\n        return Int(24)\n    \n    if value ==\
    \ \"25\":\n        return Int(25)\n    \n    if value == \"26\":\n        return\
    \ Int(26)\n    \n    if value == \"27\":\n        return Int(27)\n    \n    if\
    \ value == \"28\":\n        return Int(28)\n    \n    if value == \"29\":\n  \
    \      return Int(29)\n    \n    if value == \"30\":\n        return Int(30)\n\
    \    \n    if value == \"31\":\n        return Int(31)\n    \n    if value ==\
    \ \"32\":\n        return Int(32)\n    \n    if value == \"33\":\n        return\
    \ Int(33)\n    \n    if value == \"34\":\n        return Int(34)\n    \n    if\
    \ value == \"35\":\n        return Int(35)\n    \n    if value == \"36\":\n  \
    \      return Int(36)\n    \n    if value == \"37\":\n        return Int(37)\n\
    \    \n    if value == \"38\":\n        return Int(38)\n    \n    if value ==\
    \ \"39\":\n        return Int(39)\n    \n    if value == \"40\":\n        return\
    \ Int(40)", "    closest_integer = Int64(math.floor(value))\n    if closest_integer\
    \ == value:\n        closest_integer = Int64(math.ceil(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    closest_integer(value::Float64)",
  "    \n    if value == \"\"\n        error(\"Value cannot be empty\")\n    \n  \
    \  number = tonumber(value)\n    if number == 0\n        error(\"Value cannot\
    \ be 0\")\n    \n    if number < 0\n        error(\"Value cannot be negative\"\
    )\n    \n    if number == 0\n        return 0\n    \n    diff = abs(number - floor(value))\n\
    \    if diff < 0.5\n        return floor(value)\n    else\n        return ceil(value)\n\
    end", "    \n    closest_integer = Int64(0)\n    \n    if value == \"\"\n    \
    \    return closest_integer\n    \n    \n    if value == \"0\"\n        return\
    \ closest_integer\n    \n    if value == \"1\"\n        return closest_integer\n\
    \    \n    if value == \"2\"\n        return closest_integer\n    \n    if value\
    \ == \"3\"\n        return closest_integer\n    \n    if value == \"4\"\n    \
    \    return closest_integer\n    \n    if value == \"5\"\n        return closest_integer\n\
    \    \n    if value == \"6\"\n        return closest_integer\n    \n    if value\
    \ == \"7\"\n        return closest_integer\n    \n    if value == \"8\"\n    \
    \    return closest_integer\n    \n    if value == \"9\"\n        return closest_integer\n\
    \    \n    if value == \"10\"\n        return closest_integer\n    \n    if value\
    \ == \"11\"\n        return closest_integer\n    \n    if value == \"12\"\n  \
    \      return closest_integer\n    \n    if value == \"13\"\n        return closest_integer\n\
    \    \n    if value == \"14\"\n        return closest_integer\n    \n    if value\
    \ == \"15\"\n        return closest_integer\n    \n    if value == \"16\"\n  \
    \      return closest_integer\n    \n    if value == \"17\"\n        return closest_integer\n\
    \    \n    if value == \"18\"\n        return closest_integer\n    \n    if value\
    \ == \"19\"\n        return closest_integer\n    \n    if value == \"20\"\n  \
    \      return closest_integer\n    \n    if value == \"21\"\n        return closest_integer\n\
    \    \n    if value == \"22\"\n        return closest_integer\n    \n    if value\
    \ == \"23\"\n        return closest_integer\n    \n    if value == \"24\"\n  \
    \      return closest_integer\n    \n    if value == \"25\"\n        return closest_integer\n\
    \    \n    if value == \"26\"\n        return closest_integer\n    \n    if value\
    \ == \"27\"\n        return closest_integer\n    \n    if value == \"28\"\n  \
    \      return closest_integer\n    \n    if value == \"29\"\n        return closest_integer\n\
    \    \n    if value == \"30\"\n        return closest_integer\n    \n    if value\
    \ == \"31\"\n        return closest_integer\n    \n    if value == \"32\"\n  \
    \      return closest_integer\n    \n    if value == \"33\"\n        return closest_integer\n\
    \    \n    if value == \"34\"\n        return closest_integer\n    \n    if value\
    \ == \"35\"\n        return closest_integer\n    \n    if value == \"36\"\n  \
    \      return closest_integer\n    \n    if value == \"37\"\n        return closest_integer\n\
    \    \n    if value == \"38\"\n        return closest_integer\n    \n    if value\
    \ == \"39\"\n        return closest_integer\n    \n    if value == \"40\"\n  \
    \      return closest_integer\n    \n    if value == \"4", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value \n        closest_integer\
    \ = Int64(math.floor(value))\n    end\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)", "   \
    \ if value == \"\"\n        0\n    else\n        closest_integer(value[end-1])\
    \ + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a\
    \ function that takes a value (string) representing a number\n    and returns\
    \ the closest float to it. If the number is equidistant\n    from two integers,\
    \ round it away from zero.", "    \n    if value == \"\"\n        return -1\n\
    \    \n    digits = value.digits\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n    digits = digits[0..-2]\n    \n    if digits == []\n        return -1\n\
    \    \n", "    if value == \"\"\n        error(\"value cannot be empty\")\n  \
    \  else\n        closest_integer(parse(Float64, value))\n    end\nend", "    if\
    \ value == \"\"\n        0\n    else\n        closest_integer(value[end-1]) +\
    \ 1 \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string representing a number and returns the number of characters in the string.",
  "    closest_integer = Int(0)\n    closest_integer = if value == \"0\" then 0 else\
    \ Int(value)\n    closest_integer = if closest_integer == 0 then 1 else closest_integer\n\
    \    closest_integer = if closest_integer == 1 then 1 else closest_integer\n \
    \   closest_integer = if closest_integer == 2 then 2 else closest_integer\n  \
    \  closest_integer = if closest_integer == 3 then 3 else closest_integer\n   \
    \ closest_integer = if closest_integer == 4 then 4 else closest_integer\n    closest_integer\
    \ = if closest_integer == 5 then 5 else closest_integer\n    closest_integer =\
    \ if closest_integer == 6 then 6 else closest_integer\n    closest_integer = if\
    \ closest_integer == 7 then 7 else closest_integer\n    closest_integer = if closest_integer\
    \ == 8 then 8 else closest_integer\n    closest_integer = if closest_integer ==\
    \ 9 then 9 else closest_integer\n    closest_integer = if closest_integer == 10\
    \ then 10 else closest_integer\n    closest_integer = if closest_integer == 11\
    \ then 11 else closest_integer\n    closest_integer = if closest_integer == 12\
    \ then 12 else closest_integer\n    closest_integer = if closest_integer == 13\
    \ then 13 else closest_integer\n    closest_integer = if closest_integer == 14\
    \ then 14 else closest_integer\n    closest_integer = if closest_integer == 15\
    \ then 15 else closest_integer\n    closest_integer = if closest_integer == 16\
    \ then 16 else closest_integer\n    closest_integer = if closest_integer == 17\
    \ then 17 else closest_integer\n    closest_integer = if closest_integer == 18\
    \ then 18 else closest_integer\n    closest_integer = if closest_integer == 19\
    \ then 19 else closest_integer\n    closest_integer = if closest_integer == 20\
    \ then 20 else closest_integer\n    closest_integer = if closest_integer == 21\
    \ then 21 else closest_integer\n    closest_integer = if closest_integer == 22\
    \ then 22 else closest_integer\n    closest_integer = if closest_integer == 23\
    \ then 23 else closest_integer\n    closest_integer = if closest_integer == 24\
    \ then 24 else closest_integer\n    closest_integer = if closest_integer == 25\
    \ then 25 else closest_integer\n    closest_integer = if closest_integer == 26\
    \ then 26 else closest_integer\n    closest_integer = if closest_integer == 27\
    \ then 27 else closest_integer\n    closest_integer = if closest_integer == 28\
    \ then 28 else closest_integer\n    closest_integer = if closest_integer == 29\
    \ then 29 else closest_integer\n    closest_integer = if closest_integer == 30\
    \ then 30 else closest_integer\n    closest_integer = if closest_integer == 31\
    \ then 31 else closest_integer\n    closest_integer = if closest_integer == 32\
    \ then 32 else closest_integer\n", "    if value == \"-inf\" \n        then return\
    \ -Inf \n    else if value == \"inf\" \n        then return Inf \n    else if\
    \ value == \"nan\" \n        then return NaN \n    else if value == \"0\" \n \
    \       then return 0 \n    else if value == \"1\" \n        then return 1 \n\
    \    else if value == \"2\" \n        then return 2 \n    else if value == \"\
    3\" \n        then return 3 \n    else if value == \"4\" \n        then return\
    \ 4 \n    else if value == \"5\" \n        then return 5 \n    else if value ==\
    \ \"6\" \n        then return 6 \n    else if value == \"7\" \n        then return\
    \ 7 \n    else if value == \"8\" \n        then return 8 \n    else if value ==\
    \ \"9\" \n        then return 9 \n    else if value == \"10\" \n        then return\
    \ 10 \n    else if value == \"11\" \n        then return 11 \n    else if value\
    \ == \"12\" \n        then return 12 \n    else if value == \"13\" \n        then\
    \ return 13 \n    else if value == \"14\" \n        then return 14 \n    else\
    \ if value == \"15\" \n        then return 15 \n    else if value == \"16\" \n\
    \        then return 16 \n    else if value == \"17\" \n        then return 17\
    \ \n    else if value == \"18\" \n        then return 18 \n    else if value ==\
    \ \"19\" \n        then return 19 \n    else if value == \"20\" \n        then\
    \ return 20 \n    else if value == \"21\" \n        then return 21 \n    else\
    \ if value == \"22\" \n        then return 22 \n    else if value == \"23\" \n\
    \        then return 23 \n    else if value == \"24\" \n        then return 24\
    \ \n    else if value == \"25\" \n        then return 25 \n    else if value ==\
    \ \"26\" \n        then return 26 \n    else if value == \"27\" \n        then\
    \ return 27 \n    else if value == \"28\" \n        then return 28 \n    else\
    \ if value == \"29\" \n        then return 29 \n    else if value == \"30\" \n\
    \        then return 30 \n    else if value == \"31\" \n        then return 31\
    \ \n    else if value == \"32\" \n        then return 32 \n    else if value ==\
    \ \"33\" \n        then return 33 \n    else if value == \"34\" \n        then\
    \ return 34 \n    else if value == \"35\" \n        then return 35 \n    else\
    \ if value ", "    \n    if value == \"\"\n        error(\"value cannot be empty\"\
    )\n    \n    if value == \"-\"\n        return -closest_integer(value[1:])\n \
    \   \n    number = tonumber(value)\n    if number == 0\n        error(\"value\
    \ cannot be 0\")\n    \n    diff = abs(number - number)\n    if diff < 1e-6\n\
    \        return number\n    \n    if diff < 1e-10\n        return number\n   \
    \ \n    if diff < 1e-15\n        return number\n    \n    if diff < 1e-20\n  \
    \      return number\n    \n    if diff < 1e-25\n        return number\n    \n\
    \    if diff < 1e-30\n        return number\n    \n    if diff < 1e-35\n     \
    \   return number\n    \n    if diff < 1e-40\n        return number\n    \n  \
    \  if diff < 1e-45\n        return number\n    \n    if diff < 1e-50\n       \
    \ return number\n    \n    if diff < 1e-55\n        return number\n    \n    if\
    \ diff < 1e-60\n        return number\n    \n    if diff < 1e-65\n        return\
    \ number\n    \n    if diff < 1e-70\n        return number\n    \n    if diff\
    \ < 1e-75\n        return number\n    \n    if diff < 1e-80\n        return number\n\
    \    \n    if diff < 1e-85\n        return number\n    \n    if diff < 1e-90\n\
    \        return number\n    \n    if diff < 1e-95\n        return number\n   \
    \ \n    if diff < 1e-100\n        return number\n    \n    if diff < 1e-105\n\
    \        return number\n    \n    if diff < 1e-110\n        return number\n  \
    \  \n    if diff < 1e-115\n        return number\n    \n    if diff < 1e-120\n\
    \        return number\n    \n    if diff < 1e-125\n        return number\n  \
    \  \n    if diff < 1e-130\n        return number\n    \n    if diff < 1e-135\n\
    \        return number\n    \n    if diff < 1e-140\n        return number\n  \
    \  \n    if diff < 1e-145\n        return number\n    \n    if diff < 1e-150\n\
    \        return number\n    \n    if diff < 1e-155\n        return number\n  \
    \  \n    if diff < 1e-160\n        return number\n    \n    if diff < 1e-165\n\
    \        return number\n    \n    if diff < 1e-170\n        return number\n  \
    \  \n    if diff < 1e-175\n        return number\n    \n    if diff < 1e-180\n\
    \        return number\n    \n    if diff < 1e-185\n        return number\n  \
    \  \n    if diff < 1e-190\n        return number\n    \n    if diff < 1e-195\n\
    \        return number\n    \n    if diff < 1e-200\n        return number\n  \
    \  \n    if diff < 1e-205\n        return number\n    \n    if diff < ", "   \
    \ if value == \"\"\n        error(\"value cannot be empty\")\n    else\n     \
    \   closest_integer(parse(Float64, value)).round()\n    end\nend", "    \n   \
    \ if value == \"\"\n        error(\"value cannot be an empty string\")\n    elseif\
    \ value == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif\
    \ value == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif\
    \ value == \"0\"\n        error(\"value cannot be a zero\")\n    elseif value\
    \ == \"1\"\n        error(\"value cannot be a one\")\n    elseif value == \"2\"\
    \n        error(\"value cannot be a two\")\n    elseif value == \"3\"\n      \
    \  error(\"value cannot be a three\")\n    elseif value == \"4\"\n        error(\"\
    value cannot be a four\")\n    elseif value == \"5\"\n        error(\"value cannot\
    \ be a five\")\n    elseif value == \"6\"\n        error(\"value cannot be a six\"\
    )\n    elseif value == \"7\"\n        error(\"value cannot be a seven\")\n   \
    \ elseif value == \"8\"\n        error(\"value cannot be a eight\")\n    elseif\
    \ value == \"9\"\n        error(\"value cannot be a nine\")\n    elseif value\
    \ == \".\"\n        error(\"value cannot be a decimal point\")\n    elseif value\
    \ == \"e\"\n        error(\"value cannot be an exponent\")\n    elseif value ==\
    \ \"E\"\n        error(\"value cannot be an exponent with capital E\")\n    elseif\
    \ value == \"+\"\n        error(\"value cannot be a plus sign\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a minus sign\")\n    elseif value\
    \ == \"*\"\n        error(\"value cannot be a multiplication sign\")\n    elseif\
    \ value == \"/\"\n        error(\"value cannot be a division sign\")\n    elseif\
    \ value == \"%\"\n        error(\"value cannot be a modulus sign\")\n    elseif\
    \ value == \"^\"\n        error(\"value cannot be an exponent with capital E\"\
    )\n    elseif value == \"(\"\n        error(\"value cannot be a left parenthesis\"\
    )\n    elseif value == \")\"\n        error(\"value cannot be a right parenthesis\"\
    )\n    elseif value == \"[\"\n        error(\"value cannot be a left square bracket\"\
    )\n    elseif value == \"]\"\n        error(\"value cannot be a right square bracket\"\
    )\n    elseif value == \"{\"\n        error(\"value cannot be a left curly bracket\"\
    )\n    elseif value == \"}\"\n        error(\"value cannot be a right curly bracket\"\
    )\n    elseif value == \"<\"\n        error(\"value cannot be a left angle bracket\"\
    )\n    elseif value == \">\"\n        error(\"value cannot be a right angle bracket\"\
    )\n    elseif value == \"=\"\n        error(\"value cannot be an equals sign\"\
    )\n    elseif value == \"+\"\n        error(\"value cannot be a plus sign\")\n\
    \    elseif value == \"-\"\n        error(\"value ", "    if value == \"\"\n \
    \       error(\"value cannot be empty\")\n    elseif value == \"-\"\n        error(\"\
    value cannot be -, use closest_integer(\\\"0\\\")\")\n    elseif value == \"0\"\
    \n        error(\"value cannot be 0, use closest_integer(\\\"1\\\")\")\n    elseif\
    \ value == \"1\"\n        error(\"value cannot be 1, use closest_integer(\\\"\
    2\\\")\")\n    elseif value == \"2\"\n        error(\"value cannot be 2, use closest_integer(\\\
    \"3\\\")\")\n    elseif value == \"3\"\n        error(\"value cannot be 3, use\
    \ closest_integer(\\\"4\\\")\")\n    elseif value == \"4\"\n        error(\"value\
    \ cannot be 4, use closest_integer(\\\"5\\\")\")\n    elseif value == \"5\"\n\
    \        error(\"value cannot be 5, use closest_integer(\\\"6\\\")\")\n    elseif\
    \ value == \"6\"\n        error(\"value cannot be 6, use closest_integer(\\\"\
    7\\\")\")\n    elseif value == \"7\"\n        error(\"value cannot be 7, use closest_integer(\\\
    \"8\\\")\")\n    elseif value == \"8\"\n        error(\"value cannot be 8, use\
    \ closest_integer(\\\"9\\\")\")\n    elseif value == \"9\"\n        error(\"value\
    \ cannot be 9, use closest_integer(\\\"10\\\")\")\n    elseif value == \"10\"\n\
    \        error(\"value cannot be 10, use closest_integer(\\\"11\\\")\")\n    elseif\
    \ value == \"11\"\n        error(\"value cannot be 11, use closest_integer(\\\"\
    12\\\")\")\n    elseif value == \"12\"\n        error(\"value cannot be 12, use\
    \ closest_integer(\\\"13\\\")\")\n    elseif value == \"13\"\n        error(\"\
    value cannot be 13, use closest_integer(\\\"14\\\")\")\n    elseif value == \"\
    14\"\n        error(\"value cannot be 14, use closest_integer(\\\"15\\\")\")\n\
    \    elseif value == \"15\"\n        error(\"value cannot be 15, use closest_integer(\\\
    \"16\\\")\")\n    elseif value == \"16\"\n        error(\"value cannot be 16,\
    \ use closest_integer(\\\"17\\\")\")\n    elseif value == \"17\"\n        error(\"\
    value cannot be 17, use closest_integer(\\\"18\\\")\")\n    elseif value == \"\
    18\"\n        error(\"value cannot be 18, use closest_integer(\\\"19\\\")\")\n\
    \    elseif value == \"19\"\n        error(\"value cannot be 19, use closest_integer(\\\
    \"20\\\")\")\n    elseif value == \"20\"\n        error(\"value cannot be 20,\
    \ use closest_integer(\\\"21\\\")\")\n    elseif value == \"21\"\n        error(\"\
    value cannot be 21, use closest_integer(\\\"22\\\")\")\n    elseif ", "    \n\
    \    closest_integer = Int(0)\n    \n    if value == \"0\" || value == \"-0\"\
    \ \n        then return 0\n    \n    digits = split(value, \".\")\n    \n    if\
    \ digits.length == 0 \n        then return Int(0)\n    \n    digits_int = digits_to_integer(digits)\n\
    \    \n    if digits_int == Int(0)\n        then return Int(0)\n    \n    digits_int\
    \ = digits_int - Int(digits_int)\n    \n    if digits_int < 0\n        then digits_int\
    \ = digits_int + Int(10)\n    \n    digits_int = digits_int + Int(digits_int)\n\
    \    \n    if digits_int < Int(0)\n        then return Int(0)\n    \n    closest_integer\
    \ = digits_int\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value\
    \ \n        closest_integer = Int64(math.floor(value))\n    end\n    return closest_integer\n\
    end", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer ==\
    \ value\n        closest_integer = Int64(math.floor(value))\n    end\n    return\
    \ closest_integer\nend", "    if value == \"\"\n        error(\"value cannot be\
    \ empty\")\n    else\n        closest_integer(parse(Float64, value)).round()\n\
    \    end\nend", "    closest_integer = Int(0)\n    \n    if value == \"0\" ||\
    \ value == \"-0\" \n        then return 0\n    \n    digits = split(value, \"\
    .\")\n    \n    if length(digits) == 1 \n        then return digits[0]\n    \n\
    \    digits_int = map(Int, digits)\n    \n    if length(digits_int) == 1 \n  \
    \      then return digits_int[0]\n    \n    digits_int_sorted = sort(digits_int)\n\
    \    \n    if length(digits_int_sorted) == 1 \n        then return digits_int_sorted[0]\n\
    \    \n    digits_int_sorted_reversed = reverse(digits_int_sorted)\n    \n   \
    \ if length(digits_int_sorted_reversed) == 1 \n        then return digits_int_sorted_reversed[0]\n\
    \    \n    digits_int_sorted_reversed_sorted = sort(digits_int_sorted_reversed)\n\
    \    \n    if length(digits_int_sorted_reversed_sorted) == 1 \n        then return\
    \ digits_int_sorted_reversed_sorted[0]\n    \n    digits_int_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted)\n    \n    if length(digits_int_sorted_reversed_sorted_reversed)\
    \ == 1 \n        then return digits_int_sorted_reversed_sorted_reversed[0]\n \
    \   \n    digits_int_sorted_reversed_sorted_reversed_sorted = sort(digits_int_sorted_reversed_sorted_reversed)\n\
    \    \n    if length(digits_int_sorted_reversed_sorted_reversed_sorted) == 1 \n\
    \        then return digits_int_sorted_reversed_sorted_reversed_sorted[0]\n  \
    \  \n    digits_int_sorted_reversed_sorted_reversed_sorted_reversed = reverse(digits_int_sorted_reversed_sorted_reversed_sorted)\n\
    \    \n    if length(digits_int_sorted_reversed_sorted_reversed_sorted_reversed)\
    \ == 1 \n        then return digits_int_sorted_reversed_sorted_reversed_sorted_reversed[0]\n\
    \    \n    digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted =\
    \ sort(digits_int_sorted_reversed_sorted_reversed_sorted_reversed)\n    \n   \
    \ if length(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\
    \ == 1 \n        then return digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted[0]\n\
    \    \n    digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = reverse(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\n\
    \    \n    if length(digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)\
    \ == 1 \n        then return digits_int_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    closest_integer(parse(Float64, value))\n    end\nend", "    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.ceil(value))\n        if closest_integer == value:\n          \
    \  closest_integer = Int64(math.round(value))\n            if closest_integer\
    \ == value:\n                closest_integer = Int64(math.trunc(value))\n    \
    \            if closest_integer == value:\n                    closest_integer\
    \ = Int64(math.floor(value))\n                    if closest_integer == value:\n\
    \                        closest_integer = Int64(math.ceil(value))\n         \
    \               if closest_integer == value:\n                            closest_integer\
    \ = Int64(math.round(value))\n                            if closest_integer ==\
    \ value:\n                                closest_integer = Int64(math.trunc(value))\n\
    \                                if closest_integer == value:\n              \
    \                      closest_integer = Int64(math.floor(value))\n          \
    \                          if closest_integer == value:\n                    \
    \                    closest_integer = Int64(math.ceil(value))\n             \
    \                           if closest_integer == value:\n                   \
    \                         closest_integer = Int64(math.round(value))\n       \
    \                                     if closest_integer == value:\n         \
    \                                       closest_integer = Int64(math.trunc(value))\n\
    \                                                if closest_integer == value:\n\
    \                                                    closest_integer = Int64(math.floor(value))\n\
    \                                                    if closest_integer == value:\n\
    \                                                        closest_integer = Int64(math.ceil(value))\n\
    \                                                        if closest_integer ==\
    \ value:\n                                                            closest_integer\
    \ = Int64(math.round(value))\n                                               \
    \             if closest_integer == value:\n                                 \
    \                               closest_integer = Int64(math.trunc(value))\n \
    \                                                               if closest_integer\
    \ == value:\n                                                                \
    \    closest_integer = Int64(math.floor(value))\n                            \
    \                                        if closest_integer == value:\n      \
    \                                                                  closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \        if closest_integer == value:\n                                      \
    \                      closest_integer = Int64(math.round(value))\n          \
    \                                                  if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \         if closest_integer == value:\n                                     \
    \                       closest_integer = Int64(math.floor(value))\n         \
    \                                                   if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \        if closest_integer == value:\n                                      \
    \                      closest_integer = Int64(math.round(value))\n          \
    \                                                  if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \         if closest_integer == value:\n                                     \
    \                       closest_integer = Int64(math.floor(value))\n         \
    \                                                   if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \        if closest_integer == value:\n                                      \
    \                      closest_integer = Int64(math.round(value))\n          \
    \                                                  if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \         if closest_integer == value:\n                                     \
    \                       closest_integer = Int64(math.floor(value))\n         \
    \                                                   if ", "    closest_integer\
    \ = Int(0)\n    \n    if value == \"\"\n        return closest_integer\n    \n\
    \    number = Float(value)\n    \n    if number < 0\n        closest_integer =\
    \ Int(0)\n    else\n        closest_integer = Int(ceil(number))\n    \n    return\
    \ closest_integer\nend", "    closest_integer = math.ceil(value)\n    if closest_integer\
    \ == value:\n        closest_integer = math.floor(value)\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Float64)",
  "    \n    if value == \"-inf\" \n        then return -Inf \n    else if value ==\
    \ \"inf\" \n        then return Inf \n    else if value == \"nan\" \n        then\
    \ return NaN \n    else if value == \"0\" \n        then return 0 \n    else if\
    \ value == \"1\" \n        then return 1 \n    else if value == \"2\" \n     \
    \   then return 2 \n    else if value == \"3\" \n        then return 3 \n    else\
    \ if value == \"4\" \n        then return 4 \n    else if value == \"5\" \n  \
    \      then return 5 \n    else if value == \"6\" \n        then return 6 \n \
    \   else if value == \"7\" \n        then return 7 \n    else if value == \"8\"\
    \ \n        then return 8 \n    else if value == \"9\" \n        then return 9\
    \ \n    else if value == \"10\" \n        then return 10 \n    else if value ==\
    \ \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else\
    \ if value == \"35\" \n        then return 35 \n    else ", "    if value == \"\
    \"\n        error(\"value cannot be empty\")\n    else\n        local num = tonumber(value)\n\
    \        if num == nil\n            error(\"value must be a number\")\n      \
    \  else\n            local closest\n            local closestDiff\n          \
    \  local closestDiffAbs\n            local closestDiffAbsInt\n            local\
    \ closestDiffAbsIntInt\n            local closestDiffAbsIntIntInt\n          \
    \  local closestDiffAbsIntIntIntInt\n            local closestDiffAbsIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntInt\n            local closestDiffAbsIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntInt\n            local closestDiffAbsIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntInt\n            local\
    \ closestDiffAbsIntIntIntIntIntIntIntIntInt\n            local closestDiffAbsIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntInt\n         \
    \   local closestDiffAbsIntIntIntIntIntIntIntIntIntIntInt\n            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntInt\n      \
    \      local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntInt\n         \
    \   local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n         \
    \   local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n      \
    \      local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt\n\
    \            local closestDiffAbsIntIntIntIntIntIntIntIntIntInt", "    closest_integer\
    \ = Int64(math.floor(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.ceil(value))\n    return closest_integer\nend\n</cell>\n<code language=julia-1.3>",
  "    closest_integer = Int(0)\n    \n    if value == \"0\" || value == \"-0\" \n\
    \        then return 0\n    \n    digits = split(value, \".\")\n    \n    if length(digits)\
    \ == 2\n        then digits[1] = digits[1] * -1\n    \n    digits[1] = digits[1]\
    \ * -1\n    \n    if digits[1] < 0\n        then digits[1] = digits[1] * -1\n\
    \    \n    digits[1] = digits[1] * -1\n    \n    if digits[1] < 0\n        then\
    \ digits[1] = digits[1] * -1\n    \n    digits[1] = digits[1] * -1\n    \n   \
    \ if digits[1] < 0\n        then digits[1] = digits[1] * -1\n    \n    digits[1]\
    \ = digits[1] * -1\n    \n    if digits[1] < 0\n        then digits[1] = digits[1]\
    \ * -1\n    \n    digits[1] = digits[1] * -1\n    \n    if digits[1] < 0\n   \
    \     then digits[1] = digits[1] * -1\n    \n    digits[1] = digits[1] * -1\n\
    \    \n    if digits[1] < 0\n        then digits[1] = digits[1] * -1\n    \n \
    \   digits[1] = digits[1] * -1\n    \n    if digits[1] < 0\n        then digits[1]\
    \ = digits[1] * -1\n    \n    digits[1] = digits[1] * -1\n    \n    if digits[1]\
    \ < 0\n        then digits[1] = digits[1] * -1\n    \n    digits[1] = digits[1]\
    \ * -1\n    \n    if digits[1] < 0\n        then digits[1] = digits[1] * -1\n\
    \    \n    digits[1] = digits[1] * -1\n    \n    if digits[1] < 0\n        then\
    \ digits[1] = digits[1] * -1\n    \n    digits[1] = digits[1] * -1\n    \n   \
    \ if digits[1] < 0\n        then digits[1] = digits[1] * -1\n    \n    digits[1]\
    \ = digits[1] * -1\n    \n    if digits[1] < 0\n        then digits[1] = digits[1]\
    \ * -1\n    \n    digits[1] = digits[1] * -1\n    \n    if digits[1] < 0\n   \
    \     then digits[1] = digits[1] * -1\n    \n    digits[1] = digits[1] * -1\n\
    \    \n    if digits[1] < 0\n        then digits[1] = digits[1] * -1\n    \n \
    \   digits[1] = digits[1] * -1\n    \n    if digits[1] < 0\n        then digits[1]\
    \ = digits[1] * -1\n    \n    digits[1] = digits[1] * -1\n    \n    if digits[1]\
    \ < 0\n        then digits[1] = digit", "    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    else\n        local closest_integer = math.floor(value)\n\
    \        if closest_integer == value\n            error(\"value cannot be equidistant\
    \ from two integers\")\n        else\n            return closest_integer\n   \
    \     end\n    end\nend\n\"\"\"\n    Create a function that takes a value (string)\
    \ representing a number\n    and returns the closest float to it. If the number\
    \ is equidistant\n    from two floats, round it away from zero.", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.floor(value))\n        if closest_integer == value:\n         \
    \   closest_integer = Int64(math.ceil(value))\n            if closest_integer\
    \ == value:\n                closest_integer = Int64(math.floor(value))\n    \
    \            if closest_integer == value:\n                    closest_integer\
    \ = Int64(math.ceil(value))\n                    if closest_integer == value:\n\
    \                        closest_integer = Int64(math.floor(value))\n        \
    \                if closest_integer == value:\n                            closest_integer\
    \ = Int64(math.ceil(value))\n                            if closest_integer ==\
    \ value:\n                                closest_integer = Int64(math.floor(value))\n\
    \                                if closest_integer == value:\n              \
    \                      closest_integer = Int64(math.ceil(value))\n           \
    \                         if closest_integer == value:\n                     \
    \                   closest_integer = Int64(math.floor(value))\n             \
    \                           if closest_integer == value:\n                   \
    \                         closest_integer = Int64(math.ceil(value))\n        \
    \                                    if closest_integer == value:\n          \
    \                                      closest_integer = Int64(math.floor(value))\n\
    \                                                if closest_integer == value:\n\
    \                                                    closest_integer = Int64(math.ceil(value))\n\
    \                                                    if closest_integer == value:\n\
    \                                                        closest_integer = Int64(math.floor(value))\n\
    \                                                        if closest_integer ==\
    \ value:\n                                                            closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                if closest_integer == value:\n                              \
    \                                      closest_integer = Int64(math.floor(value))\n\
    \                                                                    if closest_integer\
    \ == value:\n                                                                \
    \        closest_integer = Int64(math.ceil(value))\n                         \
    \                                               if closest_integer == value:\n\
    \                                                                            closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                             if closest_integer == value:\n                 \
    \                                                               closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                                if closest_integer == value:\n              \
    \                                                                      closest_integer\
    \ = Int64(math.floor(value))\n                                               \
    \                                     if closest_integer == value:\n         \
    \                                                                            \
    \   closest_integer = Int64(math.ceil(value))\n                              \
    \                                                          if closest_integer\
    \ == value:\n                                                                \
    \                            closest_integer = Int64(math.floor(value))\n    \
    \                                                                            \
    \            if closest_integer == value:\n                                  \
    \                                                              closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                                                if closest_integer == value:\n\
    \                                                                            \
    \                        closest_integer = Int64(math.floor(value))\n        \
    \                                                                            \
    \                if closest_integer == value:\n                              \
    \                                                                          closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \                                                        if closest_integer ==\
    \ value:\n                                                                   \
    \                                         closest_integer = Int64(math.floor(value))\n\
    \                                                                            \
    \                                if closest_integer == value:\n              \
    \                                                                            \
    \                      closest_integer = Int64(math.ceil(value))\n           \
    \                                                                            \
    \                         if closest_integer == value:\n                     \
    \                                                                            \
    \                   closest_integer = Int64(math.floor(value))\n             \
    \                                                                            \
    \                           if closest_integer ", "    closest_integer = Int(0)\n\
    \    if value == \"0\" {\n        closest_integer = Int(0)\n    } else {\n   \
    \     closest_integer = Int(value)\n        if closest_integer == Int(value) &&\
    \ value != \"0\" {\n            closest_integer = Int(value)\n        }\n    }\n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    closest_integer_with_precision(value::String)::Int64", "    closest_integer\
    \ = Int64(math.ceil(value))\n    if closest_integer == value:\n        closest_integer\
    \ = Int64(math.floor(value))\n    return closest_integer\nend", "    \n    if\
    \ value == \"\"\n        return -1\n    \n    number = parse(Float64, value)\n\
    \    \n    if number == 0\n        return 0\n    \n    if number < 0\n       \
    \ return -1\n    \n    if number > 1\n        return 1\n    \n    diff = abs(number\
    \ - 1)\n    \n    if diff < abs(number - 2)\n        return number - 1\n    \n\
    \    if diff < abs(number - 3)\n        return number - 2\n    \n    if diff <\
    \ abs(number - 4)\n        return number - 3\n    \n    if diff < abs(number -\
    \ 5)\n        return number - 4\n    \n    if diff < abs(number - 6)\n       \
    \ return number - 5\n    \n    if diff < abs(number - 7)\n        return number\
    \ - 6\n    \n    if diff < abs(number - 8)\n        return number - 7\n    \n\
    \    if diff < abs(number - 9)\n        return number - 8\n    \n    if diff <\
    \ abs(number - 10)\n        return number - 9\n    \n    if diff < abs(number\
    \ - 11)\n        return number - 10\n    \n    if diff < abs(number - 12)\n  \
    \      return number - 11\n    \n    if diff < abs(number - 13)\n        return\
    \ number - 12\n    \n    if diff < abs(number - 14)\n        return number - 13\n\
    \    \n    if diff < abs(number - 15)\n        return number - 14\n    \n    if\
    \ diff < abs(number - 16)\n        return number - 15\n    \n    if diff < abs(number\
    \ - 17)\n        return number - 16\n    \n    if diff < abs(number - 18)\n  \
    \      return number - 17\n    \n    if diff < abs(number - 19)\n        return\
    \ number - 18\n    \n    if diff < abs(number - 20)\n        return number - 19\n\
    \    \n    if diff < abs(number - 21)\n        return number - 20\n    \n    if\
    \ diff < abs(number - 22)\n        return number - 21\n    \n    if diff < abs(number\
    \ - 23)\n        return number - 22\n    \n    if diff < abs(number - 24)\n  \
    \      return number - 23\n    \n    if diff < abs(number - 25)\n        return\
    \ number - 24\n    \n    if diff < abs(number - 26)\n        return number - 25\n\
    \    \n    if diff < abs(number - 27)\n        return number - 26\n    \n    if\
    \ diff < abs(number - 28)\n        return number - 27\n    \n    if diff < abs(number\
    \ - 29)\n        return number - 28\n    \n    if diff < abs(number - 30)\n  \
    \      return number - 29\n    \n    if diff < abs(number - 31)\n        return\
    \ number - 30\n    ", "    closest_integer = Int(0)\n    \n    if value == \"\"\
    \n        closest_integer = Int(0)\n    elseif value == \"-\"\n        closest_integer\
    \ = Int(0)\n    elseif value == \"+\"\n        closest_integer = Int(0)\n    elseif\
    \ value == \"0\"\n        closest_integer = Int(0)\n    elseif value == \"1\"\n\
    \        closest_integer = Int(1)\n    elseif value == \"2\"\n        closest_integer\
    \ = Int(2)\n    elseif value == \"3\"\n        closest_integer = Int(3)\n    elseif\
    \ value == \"4\"\n        closest_integer = Int(4)\n    elseif value == \"5\"\n\
    \        closest_integer = Int(5)\n    elseif value == \"6\"\n        closest_integer\
    \ = Int(6)\n    elseif value == \"7\"\n        closest_integer = Int(7)\n    elseif\
    \ value == \"8\"\n        closest_integer = Int(8)\n    elseif value == \"9\"\n\
    \        closest_integer = Int(9)\n    else\n        closest_integer = Int(Int(value)\
    \ + 1)\n    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = math.ceil(value)\n    if closest_integer == value:\n    \
    \    closest_integer = math.floor(value)\n    return closest_integer\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your function against the built in function\n\
    @test closest_integer(10) == 10\n@test closest_integer(15.3) == 15\n@test closest_integer(\"\
    10\") == 10\n@test closest_integer(\"15.3\") == 15\n</cell>\n<text>\nNow that\
    \ we have written a function to round a number to the closest integer, let's see\
    \ how we can use it!", "    closest_integer = math.ceil(value)\n    if closest_integer\
    \ == value:\n        closest_integer = math.floor(value)\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer(value::Int64)",
  "    if value == \"\"\n        error(\"Value cannot be empty\")\n    else\n    \
    \    closest_integer(value::Int64)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = Int64(math.floor(value))\n    if closest_integer == value:\n\
    \        closest_integer = Int64(math.ceil(value))\n        if closest_integer\
    \ == value:\n            closest_integer = Int64(math.round(value))\n        \
    \    if closest_integer == value:\n                closest_integer = Int64(math.trunc(value))\n\
    \                if closest_integer == value:\n                    closest_integer\
    \ = Int64(math.floor(value))\n                    if closest_integer == value:\n\
    \                        closest_integer = Int64(math.ceil(value))\n         \
    \               if closest_integer == value:\n                            closest_integer\
    \ = Int64(math.round(value))\n                            if closest_integer ==\
    \ value:\n                                closest_integer = Int64(math.trunc(value))\n\
    \                                if closest_integer == value:\n              \
    \                      closest_integer = Int64(math.floor(value))\n          \
    \                          if closest_integer == value:\n                    \
    \                    closest_integer = Int64(math.ceil(value))\n             \
    \                           if closest_integer == value:\n                   \
    \                         closest_integer = Int64(math.round(value))\n       \
    \                                     if closest_integer == value:\n         \
    \                                       closest_integer = Int64(math.trunc(value))\n\
    \                                                if closest_integer == value:\n\
    \                                                    closest_integer = Int64(math.floor(value))\n\
    \                                                    if closest_integer == value:\n\
    \                                                        closest_integer = Int64(math.ceil(value))\n\
    \                                                        if closest_integer ==\
    \ value:\n                                                            closest_integer\
    \ = Int64(math.round(value))\n                                               \
    \             if closest_integer == value:\n                                 \
    \                               closest_integer = Int64(math.trunc(value))\n \
    \                                                               if closest_integer\
    \ == value:\n                                                                \
    \    closest_integer = Int64(math.floor(value))\n                            \
    \                                        if closest_integer == value:\n      \
    \                                                                  closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \        if closest_integer == value:\n                                      \
    \                      closest_integer = Int64(math.round(value))\n          \
    \                                                  if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \         if closest_integer == value:\n                                     \
    \                       closest_integer = Int64(math.floor(value))\n         \
    \                                                   if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \        if closest_integer == value:\n                                      \
    \                      closest_integer = Int64(math.round(value))\n          \
    \                                                  if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \         if closest_integer == value:\n                                     \
    \                       closest_integer = Int64(math.floor(value))\n         \
    \                                                   if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.ceil(value))\n                                                \
    \        if closest_integer == value:\n                                      \
    \                      closest_integer = Int64(math.round(value))\n          \
    \                                                  if closest_integer == value:\n\
    \                                                                closest_integer\
    \ = Int64(math.trunc(value))\n                                               \
    \         if closest_integer == value:\n                                     \
    \                       closest_integer = Int64(math.floor(value))\n         \
    \                                                   if ", "    \n    if value\
    \ == \"\"\n        error(\"value cannot be an empty string\")\n    end\n    \n\
    \    if value == \"0\"\n        return 0\n    end\n    \n    if value == \"1\"\
    \n        return 1\n    end\n    \n    if value == \"-1\"\n        return -1\n\
    \    end\n    \n    if value == \"10\"\n        return 10\n    end\n    \n   \
    \ if value == \"-10\"\n        return -10\n    end\n    \n    if value == \"100\"\
    \n        return 100\n    end\n    \n    if value == \"-100\"\n        return\
    \ -100\n    end\n    \n    if value == \"1000\"\n        return 1000\n    end\n\
    \    \n    if value == \"-1000\"\n        return -1000\n    end\n    \n    if\
    \ value == \"10000\"\n        return 10000\n    end\n    \n    if value == \"\
    -10000\"\n        return -10000\n    end\n    \n    if value == \"100000\"\n \
    \       return 100000\n    end\n    \n    if value == \"-100000\"\n        return\
    \ -100000\n    end\n    \n    if value == \"10000000\"\n        return 10000000\n\
    \    end\n    \n    if value == \"-100000000\"\n        return -100000000\n  \
    \  end\n    \n    if value == \"1000000000\"\n        return 1000000000\n    end\n\
    \    \n    if value == \"-10000000000\"\n        return -10000000000\n    end\n\
    \    \n    if value == \"100000000000\"\n        return 100000000000\n    end\n\
    \    \n    if value == \"-1000000000000\"\n        return -1000000000000\n   \
    \ end\n    \n    if value == \"10000000000000\"\n        return 10000000000000\n\
    \    end\n    \n    if value == \"-100000000000000\"\n        return -100000000000000\n\
    \    end\n    \n    if value == \"1000000000000000\"\n        return 1000000000000000\n\
    \    end\n    \n    if value == \"-10000000000000000\"\n        return -10000000000000000\n\
    \    end\n    \n    if value == \"100000000000000000\"\n        return 100000000000000000\n\
    \    end\n    \n    if value == \"-1000000000000000000\"\n        return -1000000000000000000\n\
    \    end\n    \n    if value == \"10000000000000000000\"\n        return 10000000000000000000\n\
    \    end\n    \n    if value == \"-100000000000000000000\"\n        return -100000000000000000000\n\
    \    end\n    \n    if value == \"1000000000000000000000\"\n        return 1000000000000000000000\n\
    \    end\n    \n    if value == \"-10000000000000000000000\"\n        return -10000000000000000000000\n\
    \    end\n    \n    if value == \"100000000000000000000000\"\n        return 100000000000000000000000\n\
    \    end\n    \n    if value == \"-1000000000000000000000000\"\n        return\
    \ -1000000000000000000000000\n    end\n    \n    if value == \"10000000000000000000000000\"\
    \n        return 10000000000000000000000000\n    end\n    \n    if value == \"\
    -10000000000000000000000000000000000\"\n        return -10000000000000000000000000000000000\n\
    \    end\n    ", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer\
    \ == value \n        closest_integer = Int64(math.floor(value))\n    end\n   \
    \ return closest_integer\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  closest_integer_with_error(value::String)::Int64", "    \n    if value == \"\
    \"\n        throw(ArgumentError(\"The value argument cannot be an empty string\"\
    ))\n    end", "    \n    if value == \"\"\n        error(\"value cannot be empty\"\
    )\n    elseif value == \"0\"\n        error(\"value cannot be 0\")\n    elseif\
    \ value == \"1\"\n        error(\"value cannot be 1\")\n    elseif value == \"\
    -1\"\n        error(\"value cannot be -1\")\n    elseif value == \"-2\"\n    \
    \    error(\"value cannot be -2\")\n    elseif value == \"-21\"\n        error(\"\
    value cannot be -21\")\n    elseif value == \"-32\"\n        error(\"value cannot\
    \ be -32\")\n    elseif value == \"-64\"\n        error(\"value cannot be -64\"\
    )\n    elseif value == \"-128\"\n        error(\"value cannot be -128\")\n   \
    \ elseif value == \"-256\"\n        error(\"value cannot be -256\")\n    elseif\
    \ value == \"-512\"\n        error(\"value cannot be -512\")\n    elseif value\
    \ == \"-1024\"\n        error(\"value cannot be -1024\")\n    elseif value ==\
    \ \"-2048\"\n        error(\"value cannot be -2048\")\n    elseif value == \"\
    -4096\"\n        error(\"value cannot be -4096\")\n    elseif value == \"-8192\"\
    \n        error(\"value cannot be -8192\")\n    elseif value == \"-16384\"\n \
    \       error(\"value cannot be -16384\")\n    elseif value == \"-32768\"\n  \
    \      error(\"value cannot be -32768\")\n    elseif value == \"-65536\"\n   \
    \     error(\"value cannot be -65536\")\n    elseif value == \"-131072\"\n   \
    \     error(\"value cannot be -131072\")\n    elseif value == \"-262144\"\n  \
    \      error(\"value cannot be -262144\")\n    elseif value == \"-524288\"\n \
    \       error(\"value cannot be -524288\")\n    elseif value == \"-1048576\"\n\
    \        error(\"value cannot be -1048576\")\n    elseif value == \"-2097152\"\
    \n        error(\"value cannot be -2097152\")\n    elseif value == \"-4194304\"\
    \n        error(\"value cannot be -4194304\")\n    elseif value == \"-8388608\"\
    \n        error(\"value cannot be -8388608\")\n    elseif value == \"-16777216\"\
    \n        error(\"value cannot be -16777216\")\n    elseif value == \"-33554432\"\
    \n        error(\"value cannot be -33554432\")\n    elseif value == \"-67108864\"\
    \n        error(\"value cannot be -67108864\")\n    elseif value == \"-134217728\"\
    \n        error(\"value cannot be -134217728\")\n    elseif value == \"-268435456\"\
    \n        error(\"value cannot be -268435456\")\n    elseif value == \"", "  \
    \  \n    closest_integer = Int64(0)\n    \n    if value == \"-inf\" || value ==\
    \ \"inf\" \n        closest_integer = Int64(0)\n    else\n        closest_integer\
    \ = Int64(math.ceil(value))\n    end\n    \n    return closest_integer\nend",
  "    \n    if value == \"\"\n        error(\"Value cannot be empty\")\n    end",
  "    closest_integer = Int64(math.ceil(value))\n    if closest_integer == value\
    \ \n        closest_integer = Int64(math.floor(value))\n    end\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    if value == \"\"\n        error(\"\
    value cannot be an empty string\")\n    else\n        closest_integer(parse(Float64,\
    \ value))\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a value (string) representing a number\nand returns the closest integer to it.\
    \ If the number is equidistant\n    from two integers, round it away from zero.",
  "    closest_integer = Int(0)\n    \n    if value == \"0\" || value == \"-0\" \n\
    \        then return 0\n    \n    digits = split(value, \".\")\n    \n    if length(digits)\
    \ == 1 \n        then return Int(digits[0])\n    \n    digits_int = map(digits_to_int,\
    \ digits)\n    \n    if length(digits_int) == 1 \n        then return Int(digits_int[0])\n\
    \    \n    closest_integer = Int(0)\n    \n    for digit in digits_int\n     \
    \   do if digit < closest_integer\n            then closest_integer = digit\n\
    \        end\n    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    closest_integer(value::String)::Int64", "    \n    closest_integer\
    \ = Int64(0)\n    \n    for x in Int64(value):\n        if x == closest_integer:\n\
    \            continue\n        if abs(x - closest_integer) < abs(closest_integer\
    \ - x):\n            closest_integer = x\n    return closest_integer\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if value == \"\"\
    \n        error(\"value cannot be empty\")\n    elseif value == \"-\"\n      \
    \  error(\"value cannot be negative\")\n    elseif value == \"+\"\n        error(\"\
    value cannot be positive\")\n    elseif value == \"0\"\n        error(\"value\
    \ cannot be 0\")\n    elseif value == \"1\"\n        error(\"value cannot be 1\"\
    )\n    elseif value == \"2\"\n        error(\"value cannot be 2\")\n    elseif\
    \ value == \"3\"\n        error(\"value cannot be 3\")\n    elseif value == \"\
    4\"\n        error(\"value cannot be 4\")\n    elseif value == \"5\"\n       \
    \ error(\"value cannot be 5\")\n    elseif value == \"6\"\n        error(\"value\
    \ cannot be 6\")\n    elseif value == \"7\"\n        error(\"value cannot be 7\"\
    )\n    elseif value == \"8\"\n        error(\"value cannot be 8\")\n    elseif\
    \ value == \"9\"\n        error(\"value cannot be 9\")\n    else\n        error(\"\
    value cannot be converted to Int64\")\n    end\n    \n    if value == \"-\"\n\
    \        return -closest_integer(value)\n    elseif value == \"+\"\n        return\
    \ closest_integer(value)\n    elseif value == \"0\"\n        return 0\n    elseif\
    \ value == \"1\"\n        return 1\n    elseif value == \"2\"\n        return\
    \ 2\n    elseif value == \"3\"\n        return 3\n    elseif value == \"4\"\n\
    \        return 4\n    elseif value == \"5\"\n        return 5\n    elseif value\
    \ == \"6\"\n        return 6\n    elseif value == \"7\"\n        return 7\n  \
    \  elseif value == \"8\"\n        return 8\n    elseif value == \"9\"\n      \
    \  return 9\n    else\n        error(\"value cannot be converted to Int64\")\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    closest_integer(value::Int64)",
  "    if value == \"0\" \n        then return 0\n    else if value == \"1\" \n  \
    \      then return 1\n    else if value == \"2\" \n        then return 2\n   \
    \ else if value == \"3\" \n        then return 3\n    else if value == \"4\" \n\
    \        then return 4\n    else if value == \"5\" \n        then return 5\n \
    \   else if value == \"6\" \n        then return 6\n    else if value == \"7\"\
    \ \n        then return 7\n    else if value == \"8\" \n        then return 8\n\
    \    else if value == \"9\" \n        then return 9\n    else if value == \"10\"\
    \ \n        then return 10\n    else if value == \"11\" \n        then return\
    \ 11\n    else if value == \"12\" \n        then return 12\n    else if value\
    \ == \"13\" \n        then return 13\n    else if value == \"14\" \n        then\
    \ return 14\n    else if value == \"15\" \n        then return 15\n    else if\
    \ value == \"16\" \n        then return 16\n    else if value == \"17\" \n   \
    \     then return 17\n    else if value == \"18\" \n        then return 18\n \
    \   else if value == \"19\" \n        then return 19\n    else if value == \"\
    20\" \n        then return 20\n    else if value == \"21\" \n        then return\
    \ 21\n    else if value == \"22\" \n        then return 22\n    else if value\
    \ == \"23\" \n        then return 23\n    else if value == \"24\" \n        then\
    \ return 24\n    else if value == \"25\" \n        then return 25\n    else if\
    \ value == \"26\" \n        then return 26\n    else if value == \"27\" \n   \
    \     then return 27\n    else if value == \"28\" \n        then return 28\n \
    \   else if value == \"29\" \n        then return 29\n    else if value == \"\
    30\" \n        then return 30\n    else if value == \"31\" \n        then return\
    \ 31\n    else if value == \"32\" \n        then return 32\n    else if value\
    \ == \"33\" \n        then return 33\n    else if value == \"34\" \n        then\
    \ return 34\n    else if value == \"35\" \n        then return 35\n    else if\
    \ value == \"36\" \n        then return 36\n    else if value == \"37\" \n   \
    \     then return 37\n    else if value == \"38\" \n        then return 38\n \
    \   else if value == \"39\" \n        then ", "    if value == \"-inf\" \n   \
    \     then return -Infinity \n    else if value == \"inf\" \n        then return\
    \ Infinity \n    else if value == \"0\" \n        then return 0 \n    else if\
    \ value == \"1\" \n        then return 1 \n    else if value == \"2\" \n     \
    \   then return 2 \n    else if value == \"3\" \n        then return 3 \n    else\
    \ if value == \"4\" \n        then return 4 \n    else if value == \"5\" \n  \
    \      then return 5 \n    else if value == \"6\" \n        then return 6 \n \
    \   else if value == \"7\" \n        then return 7 \n    else if value == \"8\"\
    \ \n        then return 8 \n    else if value == \"9\" \n        then return 9\
    \ \n    else if value == \"10\" \n        then return 10 \n    else if value ==\
    \ \"11\" \n        then return 11 \n    else if value == \"12\" \n        then\
    \ return 12 \n    else if value == \"13\" \n        then return 13 \n    else\
    \ if value == \"14\" \n        then return 14 \n    else if value == \"15\" \n\
    \        then return 15 \n    else if value == \"16\" \n        then return 16\
    \ \n    else if value == \"17\" \n        then return 17 \n    else if value ==\
    \ \"18\" \n        then return 18 \n    else if value == \"19\" \n        then\
    \ return 19 \n    else if value == \"20\" \n        then return 20 \n    else\
    \ if value == \"21\" \n        then return 21 \n    else if value == \"22\" \n\
    \        then return 22 \n    else if value == \"23\" \n        then return 23\
    \ \n    else if value == \"24\" \n        then return 24 \n    else if value ==\
    \ \"25\" \n        then return 25 \n    else if value == \"26\" \n        then\
    \ return 26 \n    else if value == \"27\" \n        then return 27 \n    else\
    \ if value == \"28\" \n        then return 28 \n    else if value == \"29\" \n\
    \        then return 29 \n    else if value == \"30\" \n        then return 30\
    \ \n    else if value == \"31\" \n        then return 31 \n    else if value ==\
    \ \"32\" \n        then return 32 \n    else if value == \"33\" \n        then\
    \ return 33 \n    else if value == \"34\" \n        then return 34 \n    else\
    \ if value == \"35\" \n        then return 35 \n    else if value == \"36\" \n\
    \        then return 36 \n    else if value == \"", "    if value == \"\"\n  \
    \      error(\"value cannot be an empty string\")\n    elseif value == \"-\"\n\
    \        error(\"value cannot be a negative number\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be a positive number\")\n    elseif value ==\
    \ \"0\"\n        error(\"value cannot be zero\")\n    elseif value == \"1\"\n\
    \        error(\"value cannot be one\")\n    elseif value == \"2\"\n        error(\"\
    value cannot be two\")\n    elseif value == \"3\"\n        error(\"value cannot\
    \ be three\")\n    elseif value == \"4\"\n        error(\"value cannot be four\"\
    )\n    elseif value == \"5\"\n        error(\"value cannot be five\")\n    elseif\
    \ value == \"6\"\n        error(\"value cannot be six\")\n    elseif value ==\
    \ \"7\"\n        error(\"value cannot be seven\")\n    elseif value == \"8\"\n\
    \        error(\"value cannot be eight\")\n    elseif value == \"9\"\n       \
    \ error(\"value cannot be nine\")\n    elseif value == \".\"\n        error(\"\
    value cannot be a decimal point\")\n    elseif value == \"e\"\n        error(\"\
    value cannot be an exponent\")\n    elseif value == \"E\"\n        error(\"value\
    \ cannot be an exponent with negative sign\")\n    elseif value == \"+\"\n   \
    \     error(\"value cannot be a positive number\")\n    elseif value == \"-\"\n\
    \        error(\"value cannot be a negative number\")\n    elseif value == \"\
    +\"\n        error(\"value cannot be a positive number\")\n    elseif value ==\
    \ \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number\")\n    elseif value\
    \ == \"-\"\n        error(\"value cannot be a negative number\")\n    elseif value\
    \ == \"+\"\n        error(\"value cannot be a positive number", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if value == \"\"\n        error(\"\
    value cannot be empty\")\n    else\n        closest_integer(parse(Float64, value))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    closest_integer = Int64(0)\n\
    \    \n    if value == \"\"\n        return closest_integer\n    \n    if value\
    \ == 0\n        return closest_integer\n    \n    if value == 1\n        return\
    \ closest_integer\n    \n    if value == 2\n        return closest_integer\n \
    \   \n    if value == 3\n        return closest_integer\n    \n    if value ==\
    \ 4\n        return closest_integer\n    \n    if value == 5\n        return closest_integer\n\
    \    \n    if value == 6\n        return closest_integer\n    \n    if value ==\
    \ 7\n        return closest_integer\n    \n    if value == 8\n        return closest_integer\n\
    \    \n    if value == 9\n        return closest_integer\n    \n    if value ==\
    \ 10\n        return closest_integer\n    \n    if value == 11\n        return\
    \ closest_integer\n    \n    if value == 12\n        return closest_integer\n\
    \    \n    if value == 13\n        return closest_integer\n    \n    if value\
    \ == 14\n        return closest_integer\n    \n    if value == 15\n        return\
    \ closest_integer\n    \n    if value == 16\n        return closest_integer\n\
    \    \n    if value == 17\n        return closest_integer\n    \n    if value\
    \ == 18\n        return closest_integer\n    \n    if value == 19\n        return\
    \ closest_integer\n    \n    if value == 20\n        return closest_integer\n\
    \    \n    if value == 21\n        return closest_integer\n    \n    if value\
    \ == 22\n        return closest_integer\n    \n    if value == 23\n        return\
    \ closest_integer\n    \n    if value == 24\n        return closest_integer\n\
    \    \n    if value == 25\n        return closest_integer\n    \n    if value\
    \ == 26\n        return closest_integer\n    \n    if value == 27\n        return\
    \ closest_integer\n    \n    if value == 28\n        return closest_integer\n\
    \    \n    if value == 29\n        return closest_integer\n    \n    if value\
    \ == 30\n        return closest_integer\n    \n    if value == 31\n        return\
    \ closest_integer\n    \n    if value == 32\n        return closest_integer\n\
    \    \n    if value == 33\n        return closest_integer\n    \n    if value\
    \ == 34\n        return closest_integer\n    \n    if value == 35\n        return\
    \ closest_integer\n    \n    if value == 36\n        return closest_integer\n\
    \    \n    if value == 37\n        return closest_integer\n    \n    if value\
    \ == 38\n        return closest_integer\n    \n    if value == 39\n        return\
    \ closest_integer\n    \n    if value == 40\n        return closest_integer\n\
    \    \n    if value == 41\n        return closest_integer\n    \n    if value\
    \ == 42\n        return closest_integer\n    \n    if value == 43\n        return\
    \ closest_integer\n    \n    if value == 44\n        return closest_integer\n\
    \    \n    if value == 45\n        return closest_integer\n    \n    if value\
    \ == 46\n        return closest_integer\n    \n    if value == 47\n        return\
    \ closest_integer\n    \n    if value == 48\n        return closest_integer\n\
    \    \n    if value == ", "    closest_integer = Int64(math.ceil(value))\n   \
    \ if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    closest_integer = Int(0)\n\
    \    \n    if value == \"-inf\" or value == \"inf\" then\n        return Int(0)\n\
    \    end", "    if value == \"\"\n        error(\"value cannot be empty\")\n \
    \   elseif value == \"-\"\n        error(\"value cannot be negative\")\n    elseif\
    \ value == \"+\"\n        error(\"value cannot be positive\")\n    elseif value\
    \ == \"0\"\n        error(\"value cannot be zero\")\n    elseif value == \"1\"\
    \n        error(\"value cannot be one\")\n    elseif value == \"2\"\n        error(\"\
    value cannot be two\")\n    elseif value == \"3\"\n        error(\"value cannot\
    \ be three\")\n    elseif value == \"4\"\n        error(\"value cannot be four\"\
    )\n    elseif value == \"5\"\n        error(\"value cannot be five\")\n    elseif\
    \ value == \"6\"\n        error(\"value cannot be six\")\n    elseif value ==\
    \ \"7\"\n        error(\"value cannot be seven\")\n    elseif value == \"8\"\n\
    \        error(\"value cannot be eight\")\n    elseif value == \"9\"\n       \
    \ error(\"value cannot be nine\")\n    elseif value == \".\"\n        error(\"\
    value cannot be a decimal point\")\n    elseif value == \"e\"\n        error(\"\
    value cannot be an exponent\")\n    elseif value == \"E\"\n        error(\"value\
    \ cannot be an exponent with capital E\")\n    elseif value == \"+\"\n       \
    \ error(\"value cannot be an exponent with plus sign\")\n    elseif value == \"\
    -\"\n        error(\"value cannot be an exponent with minus sign\")\n    elseif\
    \ value == \"*\"\n        error(\"value cannot be an exponent with asterisk\"\
    )\n    elseif value == \"/\"\n        error(\"value cannot be an exponent with\
    \ division sign\")\n    elseif value == \"%\"\n        error(\"value cannot be\
    \ an exponent with percent sign\")\n    elseif value == \"^\"\n        error(\"\
    value cannot be an exponent with caret sign\")\n    elseif value == \"~\"\n  \
    \      error(\"value cannot be an exponent with tilde sign\")\n    elseif value\
    \ == \"(\"\n        error(\"value cannot be an exponent with opening parenthesis\"\
    )\n    elseif value == \")\"\n        error(\"value cannot be an exponent with\
    \ closing parenthesis\")\n    elseif value == \"[\"\n        error(\"value cannot\
    \ be an exponent with opening square bracket\")\n    elseif value == \"]\"\n \
    \       error(\"value cannot be an exponent with closing square bracket\")\n \
    \   elseif value == \"{\"\n        error(\"value cannot be an exponent with opening\
    \ curly bracket\")\n    elseif value == \"}\"\n        error(\"value cannot be\
    \ an exponent with closing curly bracket\")\n    elseif value == \"+\"\n     \
    \   error(\"value cannot be an exponent with plus sign\")\n    elseif value ==\
    \ \"-\"\n        error(\"value cannot be an exponent with minus sign\")\n    elseif\
    \ value == \"*\"\n        error(\"value cannot be an exponent with asterisk\")",
  "    if value == \"0\" \n        then return 0\n    else if value == \"1\" \n  \
    \      then return 1\n    else if value == \"2\" \n        then return 2\n   \
    \ else if value == \"3\" \n        then return 3\n    else if value == \"4\" \n\
    \        then return 4\n    else if value == \"5\" \n        then return 5\n \
    \   else if value == \"6\" \n        then return 6\n    else if value == \"7\"\
    \ \n        then return 7\n    else if value == \"8\" \n        then return 8\n\
    \    else if value == \"9\" \n        then return 9\n    else if value == \"10\"\
    \ \n        then return 10\n    else if value == \"11\" \n        then return\
    \ 11\n    else if value == \"12\" \n        then return 12\n    else if value\
    \ == \"13\" \n        then return 13\n    else if value == \"14\" \n        then\
    \ return 14\n    else if value == \"15\" \n        then return 15\n    else if\
    \ value == \"16\" \n        then return 16\n    else if value == \"17\" \n   \
    \     then return 17\n    else if value == \"18\" \n        then return 18\n \
    \   else if value == \"19\" \n        then return 19\n    else if value == \"\
    20\" \n        then return 20\n    else if value == \"21\" \n        then return\
    \ 21\n    else if value == \"22\" \n        then return 22\n    else if value\
    \ == \"23\" \n        then return 23\n    else if value == \"24\" \n        then\
    \ return 24\n    else if value == \"25\" \n        then return 25\n    else if\
    \ value == \"26\" \n        then return 26\n    else if value == \"27\" \n   \
    \     then return 27\n    else if value == \"28\" \n        then return 28\n \
    \   else if value == \"29\" \n        then return 29\n    else if value == \"\
    30\" \n        then return 30\n    else if value == \"31\" \n        then return\
    \ 31\n    else if value == \"32\" \n        then return 32\n    else if value\
    \ == \"33\" \n        then return 33\n    else if value == \"34\" \n        then\
    \ return 34\n    else if value == \"35\" \n        then return 35\n    else if\
    \ value == \"36\" \n        then return 36\n    else if value == \"37\" \n   \
    \     then return 37\n    else if value == \"38\" \n        then return 38\n \
    \   else if value == \"39\" \n        then ", "    closest_integer = Int64(math.ceil(value))\n\
    \    if closest_integer == value \n        closest_integer = Int64(math.floor(value))\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.4>",
  "    if value == \"0\" || value == \"-0\" \n    then return 0 \n    else if value\
    \ == \"1\" || value == \"-1\" \n    then return 1 \n    else if value == \"2\"\
    \ || value == \"-2\" \n    then return 2 \n    else if value == \"3\" || value\
    \ == \"-3\" \n    then return 3 \n    else if value == \"4\" || value == \"-4\"\
    \ \n    then return 4 \n    else if value == \"5\" || value == \"-5\" \n    then\
    \ return 5 \n    else if value == \"6\" || value == \"-6\" \n    then return 6\
    \ \n    else if value == \"7\" || value == \"-7\" \n    then return 7 \n    else\
    \ if value == \"8\" || value == \"-8\" \n    then return 8 \n    else if value\
    \ == \"9\" || value == \"-9\" \n    then return 9 \n    else if value == \"10\"\
    \ || value == \"-10\" \n    then return 10 \n    else if value == \"11\" || value\
    \ == \"-11\" \n    then return 11 \n    else if value == \"12\" || value == \"\
    -12\" \n    then return 12 \n    else if value == \"13\" || value == \"-13\" \n\
    \    then return 13 \n    else if value == \"14\" || value == \"-14\" \n    then\
    \ return 14 \n    else if value == \"15\" || value == \"-15\" \n    then return\
    \ 15 \n    else if value == \"16\" || value == \"-16\" \n    then return 16 \n\
    \    else if value == \"17\" || value == \"-17\" \n    then return 17 \n    else\
    \ if value == \"18\" || value == \"-18\" \n    then return 18 \n    else if value\
    \ == \"19\" || value == \"-19\" \n    then return 19 \n    else if value == \"\
    20\" || value == \"-20\" \n    then return 20 \n    else if value == \"21\" ||\
    \ value == \"-21\" \n    then return 21 \n    else if value == \"22\" || value\
    \ == \"-22\" \n    then return 22 \n    else if value == \"23\" || value == \"\
    -23\" \n    then return 23 \n    else if value == \"24\" || value == \"-24\" \n\
    \    then return 24 \n    else if value == \"25\" || value == \"-25\" \n    then\
    \ return 25 \n    else if value == \"26\" || value == \"-26\" \n    then return\
    \ 26 \n    else if value == \"27\" || value == \"-27\" \n    then return 27 \n\
    \    else if value == \"28\" || value == \"-28\" \n    then return 28 \n    else\
    \ if value == \"29\" || value == \"-29\" \n    ", "    closest_integer = Int(0)\n\
    \    \n    if value == \"-inf\" or value == \"inf\" or value == \"nan\" or value\
    \ == \"\"\n        closest_integer = Int(0)\n    else\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(0)\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value)\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) - 1\n    \
    \    closest_integer = Int(value)\n    end\n    \n    if closest_integer == Int(value)\
    \ + 1\n        closest_integer = Int(value)\n    end\n    \n    if closest_integer\
    \ == Int(value) + 2\n        closest_integer = Int(value)\n    end\n    \n   \
    \ if closest_integer == Int(value) + 3\n        closest_integer = Int(value)\n\
    \    end\n    \n    if closest_integer == Int(value) + 4\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) + 5\n    \
    \    closest_integer = Int(value)\n    end\n    \n    if closest_integer == Int(value)\
    \ + 6\n        closest_integer = Int(value)\n    end\n    \n    if closest_integer\
    \ == Int(value) + 7\n        closest_integer = Int(value)\n    end\n    \n   \
    \ if closest_integer == Int(value) + 8\n        closest_integer = Int(value)\n\
    \    end\n    \n    if closest_integer == Int(value) + 9\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) + 10\n   \
    \     closest_integer = Int(value)\n    end\n    \n    if closest_integer == Int(value)\
    \ + 11\n        closest_integer = Int(value)\n    end\n    \n    if closest_integer\
    \ == Int(value) + 12\n        closest_integer = Int(value)\n    end\n    \n  \
    \  if closest_integer == Int(value) + 13\n        closest_integer = Int(value)\n\
    \    end\n    \n    if closest_integer == Int(value) + 14\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) + 15\n   \
    \     closest_integer = Int(value)\n    end\n    \n    if closest_integer == Int(value)\
    \ + 16\n        closest_integer = Int(value)\n    end\n    \n    if closest_integer\
    \ == Int(value) + 17\n        closest_integer = Int(value)\n    end\n    \n  \
    \  if closest_integer == Int(value) + 18\n        closest_integer = Int(value)\n\
    \    end\n    \n    if closest_integer == Int(value) + 19\n        closest_integer\
    \ = Int(value)\n    end\n    \n    if closest_integer == Int(value) + 20\n   \
    \     closest_integer = Int(value)\n    end\n    \n    if closest_integer == Int(value)\
    \ + 21\n        closest_integ", "    closest_integer = math.ceil(value)\n    if\
    \ closest_integer == value:\n        closest_integer = math.floor(value)\n   \
    \ return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  closest_integer(value::Float64)", "    \n    closest_integer = Int64(0)\n \
    \   \n    digits = value.digits\n    \n    for digit in digits:\n        if digit\
    \ < closest_integer:\n            closest_integer = digit\n    \n    return closest_integer\n\
    end", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer ==\
    \ value:\n        closest_integer = Int64(math.floor(value))\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    if value == \"\"\n        error(\"\
    The value cannot be empty\")\n    else\n        if isnumeric(value)\n        \
    \    if value == \"0\"\n                error(\"The value cannot be 0\")\n   \
    \         else\n                if value == \"-\"\n                    error(\"\
    The value cannot be negative\")\n                else\n                    let\
    \ x = tofloat(value)\n                    let y = tofloat(tostring(x))\n     \
    \               if y == 0.0\n                        error(\"The value cannot\
    \ be 0\")\n                    else\n                        if y > 0.0\n    \
    \                        if y > x\n                                return y\n\
    \                            else\n                                return x\n\
    \                        else\n                            if y < x\n        \
    \                        return x\n                            else\n        \
    \                        return y\n                end\n        end\n    end\n\
    end\n\"\"\"\n    Create a function that takes a value (string) representing a\
    \ number\n    and returns the closest float to it. If the number is equidistant\n\
    \    from two floats, round it away from zero.", "    if value == \"\"\n     \
    \   error(\"value cannot be empty\")\n    else\n        closest_integer(parse(Float64,\
    \ value))\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    closest_integer(value::Float64)",
  "    closest_integer = int64(0)\n    \n    for x in string.split(value)\n      \
    \  if x != \"\"\n            closest_integer = int64(math.ceil(closest_integer))\n\
    \    end\n    \n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function by calling it on a few examples to see what it produces\n\
    @test closest_integer(\"10\") == 10\n@test closest_integer(\"15.3\") == 15\n@test\
    \ closest_integer(\"14.5\") == 15\n@test closest_integer(\"101\") == 10\n@test\
    \ closest_integer(\"-10\") == -10\n@test closest_integer(\"10.1\") == 10\n@test\
    \ closest_integer(\"10a\") == 10\n@test closest_integer(\"-10a\") == -10\n@test\
    \ closest_integer(\"10.1a\") == 10\n@test closest_integer(\"10A\") == 10\n@test\
    \ closest_integer(\"-10A\") == -10\n@test closest_integer(\"10.1A\") == 10\n@test\
    \ closest_integer(\"10A1\") == 10\n@test closest_integer(\"-10A1\") == -10\n@test\
    \ closest_integer(\"10.1A1\") == 10\n@test closest_integer(\"10A11\") == 10\n\
    @test closest_integer(\"-10A11\") == -10\n@test closest_integer(\"10.1A1A\") ==\
    \ 10\n@test closest_integer(\"10A111\") == 10\n@test closest_integer(\"-10A111\"\
    ) == -10\n@test closest_integer(\"10.1A1A1\") == 10\n@test closest_integer(\"\
    10A1111\") == 10\n@test closest_integer(\"-10A1111\") == -10\n@test closest_integer(\"\
    10.1A1A1A\") == 10\n@test closest_integer(\"10A11111\") == 10\n@test closest_integer(\"\
    -10A11111\") == -10\n@test closest_integer(\"10.1A1A1A1A\") == 10\n@test closest_integer(\"\
    10A111111\") == 10\n@test closest_integer(\"-10A111111\") == -10\n@test closest_integer(\"\
    10.1A1A1A1A1A\") == 10\n@test closest_integer(\"10A1111111\") == 10\n@test closest_integer(\"\
    -10A1111111\") == -10\n@test closest_integer(\"10.1A1A1A1A1A\") == 10\n@test closest_integer(\"\
    10A11111111\") == 10\n@test closest_integer(\"-10A11111111\") == -10\n@test closest_integer(\"\
    10.1A1A1A1A1A1A\") == 10\n@test closest_integer(\"10A111111111\") == 10\n@test\
    \ closest_integer(\"-10A111111111\") == -10\n@", "    closest_integer = Int64(math.ceil(Int64(value)))\n\
    \    if closest_integer == Int64(value)\n        closest_integer = Int64(0)\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if value == \"-inf\" or value == \"inf\" then return value\n    \n  \
    \  digits = value.digits\n    \n    if digits[1] == 0 then return digits[2]\n\
    \    \n    if digits[1] > digits[2] then return digits[2]\n    \n    if digits[1]\
    \ < digits[2] then return digits[1]\n    \n    if digits[1] == digits[2] then\
    \ return digits[1]\n    \n    return digits[1]\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    closest_integer(value::Float64)", "    \n    if value == \"0\" ||\
    \ value == \"-0\" \n        then return 0\n    \n    else if value == \"1\" ||\
    \ value == \"-1\" \n        then return 1\n    \n    else if value == \"2\" ||\
    \ value == \"-2\" \n        then return 2\n    \n    else if value == \"3\" ||\
    \ value == \"-3\" \n        then return 3\n    \n    else if value == \"4\" ||\
    \ value == \"-4\" \n        then return 4\n    \n    else if value == \"5\" ||\
    \ value == \"-5\" \n        then return 5\n    \n    else if value == \"6\" ||\
    \ value == \"-6\" \n        then return 6\n    \n    else if value == \"7\" ||\
    \ value == \"-7\" \n        then return 7\n    \n    else if value == \"8\" ||\
    \ value == \"-8\" \n        then return 8\n    \n    else if value == \"9\" ||\
    \ value == \"-9\" \n        then return 9\n    \n    else if value == \"10\" ||\
    \ value == \"-10\" \n        then return 10\n    \n    else if value == \"11\"\
    \ || value == \"-11\" \n        then return 11\n    \n    else if value == \"\
    12\" || value == \"-12\" \n        then return 12\n    \n    else if value ==\
    \ \"13\" || value == \"-13\" \n        then return 13\n    \n    else if value\
    \ == \"14\" || value == \"-14\" \n        then return 14\n    \n    else if value\
    \ == \"15\" || value == \"-15\" \n        then return 15\n    \n    else if value\
    \ == \"16\" || value == \"-16\" \n        then return 16\n    \n    else if value\
    \ == \"17\" || value == \"-17\" \n        then return 17\n    \n    else if value\
    \ == \"18\" || value == \"-18\" \n        then return 18\n    \n    else if value\
    \ == \"19\" || value == \"-19\" \n        then return 19\n    \n    else if value\
    \ == \"20\" || value == \"-20\" \n        then return 20\n    \n    else if value\
    \ == \"21\" || value == \"-21\" \n        then return 21\n    \n    else if value\
    \ == \"22\" || value == \"-22\" \n        then return 22\n    \n    else if value\
    \ == \"23\" || value == \"-23\" \n        then return 23\n    \n    else if value\
    \ == \"24\" || value == \"-24\" \n        then return 24\n    \n    else if value\
    \ == \"25\" || value == \"-25\" \n        then return 25\n    \n    else if value\
    \ == \"26\" || value == \"-26\" \n        ", "    closest_integer = Int(0)\n \
    \   closest_integer = if value == \"-inf\" then -Inf else 0\n    closest_integer\
    \ = if value == \"inf\" then Inf else 0\n    closest_integer = if value == \"\
    nan\" then NaN else 0\n    closest_integer = if value == \"0\" then 0 else value\n\
    \    closest_integer = if value == \"1\" then 1 else value\n    closest_integer\
    \ = if value == \"2\" then 2 else value\n    closest_integer = if value == \"\
    3\" then 3 else value\n    closest_integer = if value == \"4\" then 4 else value\n\
    \    closest_integer = if value == \"5\" then 5 else value\n    closest_integer\
    \ = if value == \"6\" then 6 else value\n    closest_integer = if value == \"\
    7\" then 7 else value\n    closest_integer = if value == \"8\" then 8 else value\n\
    \    closest_integer = if value == \"9\" then 9 else value\n    closest_integer\
    \ = if value == \"10\" then 10 else value\n    closest_integer = if value == \"\
    11\" then 11 else value\n    closest_integer = if value == \"12\" then 12 else\
    \ value\n    closest_integer = if value == \"13\" then 13 else value\n    closest_integer\
    \ = if value == \"14\" then 14 else value\n    closest_integer = if value == \"\
    15\" then 15 else value\n    closest_integer = if value == \"16\" then 16 else\
    \ value\n    closest_integer = if value == \"17\" then 17 else value\n    closest_integer\
    \ = if value == \"18\" then 18 else value\n    closest_integer = if value == \"\
    19\" then 19 else value\n    closest_integer = if value == \"20\" then 20 else\
    \ value\n    closest_integer = if value == \"21\" then 21 else value\n    closest_integer\
    \ = if value == \"22\" then 22 else value\n    closest_integer = if value == \"\
    23\" then 23 else value\n    closest_integer = if value == \"24\" then 24 else\
    \ value\n    closest_integer = if value == \"25\" then 25 else value\n    closest_integer\
    \ = if value == \"26\" then 26 else value\n    closest_integer = if value == \"\
    27\" then 27 else value\n    closest_integer = if value == \"28\" then 28 else\
    \ value\n    closest_integer = if value == \"29\" then 29 else value\n    closest_integer\
    \ = if value == \"30\" then 30 else value\n    closest_integer = if value == \"\
    31\" then 31 else value\n    closest_integer = if value == \"32\" then 32 else\
    \ value\n    closest_", "    closest_integer = Int(0)\n    \n    if value == \"\
    \"\n        return closest_integer\n    \n    digits = value.digits\n    \n  \
    \  if digits == 0\n        return closest_integer\n    \n    closest_integer =\
    \ Int(digits[0])\n    \n    for digit in digits[1..]\n        if digit < closest_integer\n\
    \            closest_integer = digit\n        end\n    end\n    \n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    closest_integer_with_precision(value::String)::Int64",
  "    closest_integer = Int64(math.floor(Int64(value)))\n    if closest_integer ==\
    \ Int64(value)\n        closest_integer = Int64(0)\n    end\n    return closest_integer\n\
    end", "    closest_integer = Int64(math.ceil(value))\n    if closest_integer ==\
    \ value\n        closest_integer = Int64(math.floor(value))\n    end\n    return\
    \ closest_integer\nend", "    \n    if value == \"\"\n        throw(ArgumentError(\"\
    value cannot be an empty string\"))\n    end\n    \n    digits = value.digits\n\
    \    \n    if length(digits) == 0\n        throw(ArgumentError(\"value cannot\
    \ be an empty string\"))\n    end\n    \n    closest_integer = digits[1]\n   \
    \ \n    for digit in digits[2:end]\n        if digit == 0\n            throw(ArgumentError(\"\
    value cannot be an empty string\"))\n        end\n        \n        if digit <\
    \ closest_integer\n            closest_integer = digit\n        end\n    end\n\
    \    \n    return closest_integer\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if value == \"\"\n        0\n    else\n        closest_integer(value[1..])\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\n<code>",
  "    if value == \"\"\n        error(\"value cannot be empty\")\n    else\n    \
    \    local num = tonumber(value)\n        if num == nil\n            error(\"\
    value cannot be converted to a number\")\n        else\n            local closest\n\
    \            if num == 0 || num == 1\n                closest = num\n        \
    \    else\n                local closest\n                local closest2\n   \
    \             if num < 0\n                    closest = -num\n               \
    \     closest2 = -num\n                else\n                    closest = num\n\
    \                    closest2 = num\n                end\n                if closest\
    \ == closest2\n                    closest2 = closest2 + 1\n                end\n\
    \                while closest2 > closest\n                    closest2 = closest2\
    \ - 1\n                end\n                closest = closest2\n            end\n\
    \            return closest\n        end\n    end\nend\n</cell>\n<text>\nThe function\
    \ closest_integer takes one argument, value::String, which represents the number\
    \ you want to find the closest integer to. Its return value is the closest integer\
    \ to the given number. If the given number is equidistant from two integers, round\
    \ it away from zero. For example, closest_integer(\"14.5\") should return 15 and\
    \ closest_integer(\"-14.5\") should return -15.", "    \n    if value == \"\"\n\
    \        error(\"The value must be a string\")\n    end", "    \n    if value\
    \ == \"\"\n        error(\"value cannot be empty\")\n    elseif value == \"-\"\
    \n        error(\"value cannot be negative\")\n    elseif value == \"+\"\n   \
    \     error(\"value cannot be positive\")\n    elseif value == \"0\"\n       \
    \ error(\"value cannot be 0\")\n    elseif value == \"1\"\n        error(\"value\
    \ cannot be 1\")\n    elseif value == \"2\"\n        error(\"value cannot be 2\"\
    )\n    elseif value == \"3\"\n        error(\"value cannot be 3\")\n    elseif\
    \ value == \"4\"\n        error(\"value cannot be 4\")\n    elseif value == \"\
    5\"\n        error(\"value cannot be 5\")\n    elseif value == \"6\"\n       \
    \ error(\"value cannot be 6\")\n    elseif value == \"7\"\n        error(\"value\
    \ cannot be 7\")\n    elseif value == \"8\"\n        error(\"value cannot be 8\"\
    )\n    elseif value == \"9\"\n        error(\"value cannot be 9\")\n    else\n\
    \        error(\"value must be an integer, not $value\")\n    end\n    \n    local\
    \ digits = value.digits\n    local closest = digits[0]\n    local closest2 = digits[1]\n\
    \    local closest3 = digits[2]\n    local closest4 = digits[3]\n    local closest5\
    \ = digits[4]\n    local closest6 = digits[5]\n    local closest7 = digits[6]\n\
    \    local closest8 = digits[7]\n    local closest9 = digits[8]\n    local closest10\
    \ = digits[9]\n    \n    if closest10 == closest\n        error(\"value cannot\
    \ be equidistant from two integers\")\n    elseif closest10 == closest2\n    \
    \    error(\"value cannot be equidistant from two integers\")\n    elseif closest10\
    \ == closest3\n        error(\"value cannot be equidistant from two integers\"\
    )\n    elseif closest10 == closest4\n        error(\"value cannot be equidistant\
    \ from two integers\")\n    elseif closest10 == closest5\n        error(\"value\
    \ cannot be equidistant from two integers\")\n    elseif closest10 == closest6\n\
    \        error(\"value cannot be equidistant from two integers\")\n    elseif\
    \ closest10 == closest7\n        error(\"value cannot be equidistant from two\
    \ integers\")\n    elseif closest10 == closest8\n        error(\"value cannot\
    \ be equidistant from two integers\")\n    elseif closest10 == closest9\n    \
    \    error(\"value cannot be equidistant from two integers\")\n    else\n    \
    \    local closest1 = closest\n        local closest2 = closest2\n        local\
    \ closest3 = closest3\n        local closest4 = closest4\n        local closest5\
    \ = closest5\n        local closest6 = closest6\n        local closest7 = closest7\n\
    \        local closest8 = closest8", "    closest_integer = Int(0)\n    closest_integer\
    \ = if value == \"0\" then 0 else value\n    closest_integer = if value == \"\
    1\" then 1 else value\n    closest_integer = if value == \"2\" then 2 else value\n\
    \    closest_integer = if value == \"3\" then 3 else value\n    closest_integer\
    \ = if value == \"4\" then 4 else value\n    closest_integer = if value == \"\
    5\" then 5 else value\n    closest_integer = if value == \"6\" then 6 else value\n\
    \    closest_integer = if value == \"7\" then 7 else value\n    closest_integer\
    \ = if value == \"8\" then 8 else value\n    closest_integer = if value == \"\
    9\" then 9 else value\n    closest_integer = if value == \"10\" then 10 else value\n\
    \    closest_integer = if value == \"11\" then 11 else value\n    closest_integer\
    \ = if value == \"12\" then 12 else value\n    closest_integer = if value == \"\
    13\" then 13 else value\n    closest_integer = if value == \"14\" then 14 else\
    \ value\n    closest_integer = if value == \"15\" then 15 else value\n    closest_integer\
    \ = if value == \"16\" then 16 else value\n    closest_integer = if value == \"\
    17\" then 17 else value\n    closest_integer = if value == \"18\" then 18 else\
    \ value\n    closest_integer = if value == \"19\" then 19 else value\n    closest_integer\
    \ = if value == \"20\" then 20 else value\n    closest_integer = if value == \"\
    21\" then 21 else value\n    closest_integer = if value == \"22\" then 22 else\
    \ value\n    closest_integer = if value == \"23\" then 23 else value\n    closest_integer\
    \ = if value == \"24\" then 24 else value\n    closest_integer = if value == \"\
    25\" then 25 else value\n    closest_integer = if value == \"26\" then 26 else\
    \ value\n    closest_integer = if value == \"27\" then 27 else value\n    closest_integer\
    \ = if value == \"28\" then 28 else value\n    closest_integer = if value == \"\
    29\" then 29 else value\n    closest_integer = if value == \"30\" then 30 else\
    \ value\n    closest_integer = if value == \"31\" then 31 else value\n    closest_integer\
    \ = if value == \"32\" then 32 else value\n    closest_integer = if value == \"\
    33\" then 33 else value\n    closest_integer = if value == \"34\" then 34 else\
    \ value\n    closest_integer = if value == \"35\" then 35 else value\n    closest_integer\
    \ = if value == \"", "    closest_integer = math.ceil(value)\n    if closest_integer\
    \ == value:\n        closest_integer = math.floor(value)\n    return closest_integer\n\
    end\n</cell>\n<code language=julia-1.5>", "    closest_integer = Int(0)\n    closest_integer\
    \ = if value == \"0\" then 0 else closest_integer\n    closest_integer = if value\
    \ == \"1\" then 1 else closest_integer\n    closest_integer = if value == \"2\"\
    \ then 2 else closest_integer\n    closest_integer = if value == \"3\" then 3\
    \ else closest_integer\n    closest_integer = if value == \"4\" then 4 else closest_integer\n\
    \    closest_integer = if value == \"5\" then 5 else closest_integer\n    closest_integer\
    \ = if value == \"6\" then 6 else closest_integer\n    closest_integer = if value\
    \ == \"7\" then 7 else closest_integer\n    closest_integer = if value == \"8\"\
    \ then 8 else closest_integer\n    closest_integer = if value == \"9\" then 9\
    \ else closest_integer\n    closest_integer = if value == \"10\" then 10 else\
    \ closest_integer\n    closest_integer = if value == \"11\" then 11 else closest_integer\n\
    \    closest_integer = if value == \"12\" then 12 else closest_integer\n    closest_integer\
    \ = if value == \"13\" then 13 else closest_integer\n    closest_integer = if\
    \ value == \"14\" then 14 else closest_integer\n    closest_integer = if value\
    \ == \"15\" then 15 else closest_integer\n    closest_integer = if value == \"\
    16\" then 16 else closest_integer\n    closest_integer = if value == \"17\" then\
    \ 17 else closest_integer\n    closest_integer = if value == \"18\" then 18 else\
    \ closest_integer\n    closest_integer = if value == \"19\" then 19 else closest_integer\n\
    \    closest_integer = if value == \"20\" then 20 else closest_integer\n    closest_integer\
    \ = if value == \"21\" then 21 else closest_integer\n    closest_integer = if\
    \ value == \"22\" then 22 else closest_integer\n    closest_integer = if value\
    \ == \"23\" then 23 else closest_integer\n    closest_integer = if value == \"\
    24\" then 24 else closest_integer\n    closest_integer = if value == \"25\" then\
    \ 25 else closest_integer\n    closest_integer = if value == \"26\" then 26 else\
    \ closest_integer\n    closest_integer = if value == \"27\" then 27 else closest_integer\n\
    \    closest_integer = if value == \"28\" then 28 else closest_integer\n    closest_integer\
    \ = if value == \"29\" then 29 else closest_integer\n    closest_integer = if\
    \ value == \"30\" then 30 else closest_integer\n    closest_integer = if value\
    \ == \"31\" then 31 else closest_integer\n    closest_integer = if value == \"\
    32\" then 32 else closest_integer\n    closest_integer = if value == \"33\" then\
    \ 33 else closest_integer\n    ", "    closest_integer = Int64(math.ceil(Int64(value)))\n\
    \    if closest_integer == Int64(value)\n        closest_integer = Int64(0)\n\
    \    end\n    return closest_integer\nend\n</cell>\n<code language=julia-1.5>",
  "    closest_integer = Int64(0)\n    \n    if value == \"\"\n        return closest_integer\n\
    \    \n    value_int = parse_value(value)\n    \n    if value_int == 0\n     \
    \   return closest_integer\n    \n    if value_int < 0\n        closest_integer\
    \ = -value_int - 1\n    else\n        closest_integer = value_int - 1\n    \n\
    \    return closest_integer\nend\n</cell>\n<code language=julia-1.5>", "    closest_integer\
    \ = Int(0)\n    \n    if value == \"0\" || value == \"-0\" \n        then return\
    \ 0\n    \n    if value == \"1\" || value == \"-1\" \n        then return 1\n\
    \    \n    if value == \"2\" || value == \"-2\" \n        then return 2\n    \n\
    \    if value == \"3\" || value == \"-3\" \n        then return 3\n    \n    if\
    \ value == \"4\" || value == \"-4\" \n        then return 4\n    \n    if value\
    \ == \"5\" || value == \"-5\" \n        then return 5\n    \n    if value == \"\
    6\" || value == \"-6\" \n        then return 6\n    \n    if value == \"7\" ||\
    \ value == \"-7\" \n        then return 7\n    \n    if value == \"8\" || value\
    \ == \"-8\" \n        then return 8\n    \n    if value == \"9\" || value == \"\
    -9\" \n        then return 9\n    \n    if value == \"10\" || value == \"-10\"\
    \ \n        then return 10\n    \n    if value == \"11\" || value == \"-11\" \n\
    \        then return 11\n    \n    if value == \"12\" || value == \"-12\" \n \
    \       then return 12\n    \n    if value == \"13\" || value == \"-13\" \n  \
    \      then return 13\n    \n    if value == \"14\" || value == \"-14\" \n   \
    \     then return 14\n    \n    if value == \"15\" || value == \"-15\" \n    \
    \    then return 15\n    \n    if value == \"16\" || value == \"-16\" \n     \
    \   then return 16\n    \n    if value == \"17\" || value == \"-17\" \n      \
    \  then return 17\n    \n    if value == \"18\" || value == \"-18\" \n       \
    \ then return 18\n    \n    if value == \"19\" || value == \"-19\" \n        then\
    \ return 19\n    \n    if value == \"20\" || value == \"-20\" \n        then return\
    \ 20\n    \n    if value == \"21\" || value == \"-21\" \n        then return 21\n\
    \    \n    if value == \"22\" || value == \"-22\" \n        then return 22\n \
    \   \n    if value == \"23\" || value == \"-23\" \n        then return 23\n  \
    \  \n    if value == \"24\" || value == \"-24\" \n        then return 24\n   \
    \ \n    if value == \"25\" || value == \"-25\" \n        then return 25\n    \n\
    \    if value == \"26\" || value == \"-26\" \n        then return 26\n    \n \
    \   if value == \"27\" || value == \"-27\" \n        then return 27\n    \n  \
    \  if value == \"28\" || value == \"-28\" \n        then return 28\n    \n   \
    \ if value == \"", "    if value == \"\"\n        error(\"value cannot be empty\"\
    )\n    elseif value == \"-\"\n        error(\"value cannot be negative\")\n  \
    \  elseif value == \"+\"\n        error(\"value cannot be positive\")\n    elseif\
    \ value == \"0\"\n        error(\"value cannot be zero\")\n    elseif value ==\
    \ \"1\"\n        error(\"value cannot be one\")\n    elseif value == \"2\"\n \
    \       error(\"value cannot be two\")\n    elseif value == \"3\"\n        error(\"\
    value cannot be three\")\n    elseif value == \"4\"\n        error(\"value cannot\
    \ be four\")\n    elseif value == \"5\"\n        error(\"value cannot be five\"\
    )\n    elseif value == \"6\"\n        error(\"value cannot be six\")\n    elseif\
    \ value == \"7\"\n        error(\"value cannot be seven\")\n    elseif value ==\
    \ \"8\"\n        error(\"value cannot be eight\")\n    elseif value == \"9\"\n\
    \        error(\"value cannot be nine\")\n    elseif value == \".\"\n        error(\"\
    value cannot be a decimal point\")\n    elseif value == \"e\"\n        error(\"\
    value cannot be an exponent\")\n    elseif value == \"E\"\n        error(\"value\
    \ cannot be an exponent with capital E\")\n    elseif value == \"+\"\n       \
    \ error(\"value cannot be an exponent\")\n    elseif value == \"-\"\n        error(\"\
    value cannot be an exponent\")\n    elseif value == \"*\"\n        error(\"value\
    \ cannot be an exponent\")\n    elseif value == \"/\"\n        error(\"value cannot\
    \ be an exponent\")\n    elseif value == \"%\"\n        error(\"value cannot be\
    \ an exponent\")\n    elseif value == \"^\"\n        error(\"value cannot be an\
    \ exponent\")\n    elseif value == \"~\"\n        error(\"value cannot be an exponent\"\
    )\n    elseif value == \"(\"\n        error(\"value cannot be an exponent\")\n\
    \    elseif value == \")\"\n        error(\"value cannot be an exponent\")\n \
    \   elseif value == \"+\"\n        error(\"value cannot be an exponent\")\n  \
    \  elseif value == \"-\"\n        error(\"value cannot be an exponent\")\n   \
    \ elseif value == \"*\"\n        error(\"value cannot be an exponent\")\n    elseif\
    \ value == \"/\"\n        error(\"value cannot be an exponent\")\n    elseif value\
    \ == \"%\"\n        error(\"value cannot be an exponent\")\n    elseif value ==\
    \ \"^\"\n        error(\"value cannot be an exponent\")\n    elseif value == \"\
    ~\"\n        error(\"value cannot be an exponent\")\n    elseif value == \"(\"\
    \n        error(\"value cannot be an exponent\")\n    elseif value == \")\"\n\
    \        error(\"value cannot be an exponent\")\n    elseif value == \"+\"\n \
    \       error(\"value cannot be an exponent\")\n    elseif value == \"-\"\n  \
    \      error(\"value cannot be an exponent\")\n    else", "    if value == \"\
    0\" \n        then return 0\n    else if value == \"1\" \n        then return\
    \ 1\n    else if value == \"2\" \n        then return 2\n    else if value ==\
    \ \"3\" \n        then return 3\n    else if value == \"4\" \n        then return\
    \ 4\n    else if value == \"5\" \n        then return 5\n    else if value ==\
    \ \"6\" \n        then return 6\n    else if value == \"7\" \n        then return\
    \ 7\n    else if value == \"8\" \n        then return 8\n    else if value ==\
    \ \"9\" \n        then return 9\n    else if value == \"10\" \n        then return\
    \ 10\n    else if value == \"11\" \n        then return 11\n    else if value\
    \ == \"12\" \n        then return 12\n    else if value == \"13\" \n        then\
    \ return 13\n    else if value == \"14\" \n        then return 14\n    else if\
    \ value == \"15\" \n        then return 15\n    else if value == \"16\" \n   \
    \     then return 16\n    else if value == \"17\" \n        then return 17\n \
    \   else if value == \"18\" \n        then return 18\n    else if value == \"\
    19\" \n        then return 19\n    else if value == \"20\" \n        then return\
    \ 20\n    else if value == \"21\" \n        then return 21\n    else if value\
    \ == \"22\" \n        then return 22\n    else if value == \"23\" \n        then\
    \ return 23\n    else if value == \"24\" \n        then return 24\n    else if\
    \ value == \"25\" \n        then return 25\n    else if value == \"26\" \n   \
    \     then return 26\n    else if value == \"27\" \n        then return 27\n \
    \   else if value == \"28\" \n        then return 28\n    else if value == \"\
    29\" \n        then return 29\n    else if value == \"30\" \n        then return\
    \ 30\n    else if value == \"31\" \n        then return 31\n    else if value\
    \ == \"32\" \n        then return 32\n    else if value == \"33\" \n        then\
    \ return 33\n    else if value == \"34\" \n        then return 34\n    else if\
    \ value == \"35\" \n        then return 35\n    else if value == \"36\" \n   \
    \     then return 36\n    else if value == \"37\" \n        then return 37\n \
    \   else if value == \"38\" \n        then return 38\n    else if value == \"\
    39\" \n        then ", "    closest_integer = math.ceil(value)\n    if closest_integer\
    \ == value:\n        closest_integer = math.floor(value)\n    return closest_integer\n\
    end", "    closest_integer = Int(0)\n    \n    if value == \"0\" \n        closest_integer\
    \ = Int(0)\n    elseif value == \"1\" \n        closest_integer = Int(1)\n   \
    \ elseif value == \"2\" \n        closest_integer = Int(2)\n    elseif value ==\
    \ \"3\" \n        closest_integer = Int(3)\n    elseif value == \"4\" \n     \
    \   closest_integer = Int(4)\n    elseif value == \"5\" \n        closest_integer\
    \ = Int(5)\n    elseif value == \"6\" \n        closest_integer = Int(6)\n   \
    \ elseif value == \"7\" \n        closest_integer = Int(7)\n    elseif value ==\
    \ \"8\" \n        closest_integer = Int(8)\n    elseif value == \"9\" \n     \
    \   closest_integer = Int(9)\n    elseif value == \"10\" \n        closest_integer\
    \ = Int(10)\n    elseif value == \"11\" \n        closest_integer = Int(11)\n\
    \    elseif value == \"12\" \n        closest_integer = Int(12)\n    elseif value\
    \ == \"13\" \n        closest_integer = Int(13)\n    elseif value == \"14\" \n\
    \        closest_integer = Int(14)\n    elseif value == \"15\" \n        closest_integer\
    \ = Int(15)\n    elseif value == \"16\" \n        closest_integer = Int(16)\n\
    \    elseif value == \"17\" \n        closest_integer = Int(17)\n    elseif value\
    \ == \"18\" \n        closest_integer = Int(18)\n    elseif value == \"19\" \n\
    \        closest_integer = Int(19)\n    elseif value == \"20\" \n        closest_integer\
    \ = Int(20)\n    elseif value == \"21\" \n        closest_integer = Int(21)\n\
    \    elseif value == \"22\" \n        closest_integer = Int(22)\n    elseif value\
    \ == \"23\" \n        closest_integer = Int(23)\n    elseif value == \"24\" \n\
    \        closest_integer = Int(24)\n    elseif value == \"25\" \n        closest_integer\
    \ = Int(25)\n    elseif value == \"26\" \n        closest_integer = Int(26)\n\
    \    elseif value == \"27\" \n        closest_integer = Int(27)\n    elseif value\
    \ == \"28\" \n        closest_integer = Int(28)\n    elseif value == \"29\" \n\
    \        closest_integer = Int(29)\n    elseif value == \"30\" \n        closest_integer\
    \ = Int(30)\n    elseif value == \"31\" \n        closest_integer = Int(31)\n\
    \    elseif value == \"32\" \n        closest_integer = Int(32)\n    elseif value\
    \ == \"33\" \n        closest_integer = Int(33)\n    elseif value == \"34\" \n\
    \        closest_integer = Int(34)\n    elseif value == \"35\" \n        ", " \
    \   if value == \"\"\n        0\n    else\n        closest_integer(value[end-1])\
    \ + 1 \nend\n</cell>\n<text>\nExercise\nWrite a function that takes a string representing\
    \ a number and returns the closest float.", "    if value == \"-inf\" \n     \
    \   then return -Inf \n    else if value == \"inf\" \n        then return Inf\
    \ \n    else if value == \"nan\" \n        then return NaN \n    else if value\
    \ == \"-nan\" \n        then return NaN \n    else if value == \"0\" \n      \
    \  then return 0 \n    else if value == \"1\" \n        then return 1 \n    else\
    \ if value == \"2\" \n        then return 2 \n    else if value == \"3\" \n  \
    \      then return 3 \n    else if value == \"4\" \n        then return 4 \n \
    \   else if value == \"5\" \n        then return 5 \n    else if value == \"6\"\
    \ \n        then return 6 \n    else if value == \"7\" \n        then return 7\
    \ \n    else if value == \"8\" \n        then return 8 \n    else if value ==\
    \ \"9\" \n        then return 9 \n    else if value == \"10\" \n        then return\
    \ 10 \n    else if value == \"11\" \n        then return 11 \n    else if value\
    \ == \"12\" \n        then return 12 \n    else if value == \"13\" \n        then\
    \ return 13 \n    else if value == \"14\" \n        then return 14 \n    else\
    \ if value == \"15\" \n        then return 15 \n    else if value == \"16\" \n\
    \        then return 16 \n    else if value == \"17\" \n        then return 17\
    \ \n    else if value == \"18\" \n        then return 18 \n    else if value ==\
    \ \"19\" \n        then return 19 \n    else if value == \"20\" \n        then\
    \ return 20 \n    else if value == \"21\" \n        then return 21 \n    else\
    \ if value == \"22\" \n        then return 22 \n    else if value == \"23\" \n\
    \        then return 23 \n    else if value == \"24\" \n        then return 24\
    \ \n    else if value == \"25\" \n        then return 25 \n    else if value ==\
    \ \"26\" \n        then return 26 \n    else if value == \"27\" \n        then\
    \ return 27 \n    else if value == \"28\" \n        then return 28 \n    else\
    \ if value == \"29\" \n        then return 29 \n    else if value == \"30\" \n\
    \        then return 30 \n    else if value == \"31\" \n        then return 31\
    \ \n    else if value == \"32\" \n        then return 32 \n    else if value ==\
    \ \"33\" \n        then return 33 \n    else if value == \"34\" \n        then\
    \ return 34 \n    else ", "    if value == \"\"\n        error(\"value cannot\
    \ be an empty string\")\n    elseif value == \"-\"\n        error(\"value cannot\
    \ be a negative number\")\n    elseif value == \"+\"\n        error(\"value cannot\
    \ be a positive number\")\n    else\n        local value = tonumber(value)\n \
    \       if value == 0\n            error(\"value cannot be 0\")\n        elseif\
    \ value == 1\n            error(\"value cannot be 1\")\n        elseif value ==\
    \ -1\n            error(\"value cannot be -1\")\n        else\n            local\
    \ closest = 0\n            local closestDiff = abs(value - closest)\n        \
    \    local closestDiffAbs = abs(closestDiff)\n            local closestDiffAbsMax\
    \ = closestDiffAbs\n            local closestDiffAbsMin = closestDiffAbs\n   \
    \         local closestDiffAbsMaxIndex = closestDiffAbsMax\n            local\
    \ closestDiffAbsMinIndex = closestDiffAbsMin\n            local closestDiffAbsMaxIndexIndex\
    \ = closestDiffAbsMaxIndex\n            local closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n\
    \            local closestDiffAbsMaxIndex = closestDiffAbsMax\n            local\
    \ closestDiffAbsMinIndex = closestDiffAbsMin\n            local closestDiffAbsMaxIndexIndex\
    \ = closestDiffAbsMaxIndex\n            local closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n\
    \            local closestDiffAbsMaxIndexIndex = closestDiffAbsMaxIndex\n    \
    \        local closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n        \
    \    local closestDiffAbsMaxIndexIndex = closestDiffAbsMaxIndex\n            local\
    \ closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n            local closestDiffAbsMaxIndexIndex\
    \ = closestDiffAbsMaxIndex\n            local closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n\
    \            local closestDiffAbsMaxIndexIndex = closestDiffAbsMaxIndex\n    \
    \        local closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n        \
    \    local closestDiffAbsMaxIndexIndex = closestDiffAbsMaxIndex\n            local\
    \ closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n            local closestDiffAbsMaxIndexIndex\
    \ = closestDiffAbsMaxIndex\n            local closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n\
    \            local closestDiffAbsMaxIndexIndex = closestDiffAbsMaxIndex\n    \
    \        local closestDiffAbsMinIndexIndex = closestDiffAbsMinIndex\n        \
    \    local closestDiffAbsMaxIndexIndex = closestDiffAbsMaxIndex\n            local\
    \ closestDiffAbsMinIndexIndex = closestDiffAbs", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
