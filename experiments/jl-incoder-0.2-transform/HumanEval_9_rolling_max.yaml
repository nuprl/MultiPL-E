name: HumanEval_9_rolling_max
language: jl
prompt: "\"\"\" From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4,\
  \ 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
  \ 100, 100])\nend\n"
completions: ["    rolling_max = numbers[end]\n    for n in numbers[2:end]\n     \
    \   rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    local maxes = []\n    local max = 0\n \
    \   local i = 1\n    \n    while i <= length(numbers) do\n        if numbers[i]\
    \ > max then\n            max = numbers[i]\n        end\n        \n        if\
    \ i == length(numbers) then\n            maxes = [max]\n        else\n       \
    \     push!(maxes, max)\n        end\n        \n        i = i + 1\n    end\n \
    \   \n    return maxes\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max = Vector{Int64}()\n\
    \    rolling_max.push!(numbers[1])\n    for n in numbers[2:end]\n        if rolling_max.last()\
    \ > n\n            rolling_max.push!(n)\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend", "    \n    maximum = numbers[1]\n    \n    for\
    \ n in numbers[2:end]\n        if n > maximum\n            maximum = n\n     \
    \   end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a random integer between $0$ and $1$ and returns its value if\
    \ it is in the given interval or $0$ if it is not.", "    \n    rolling_max =\
    \ numbers[end]\n    for n in numbers[2:end]\n        if n > rolling_max\n    \
    \        rolling_max = n\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[1]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend", "    rolling_max_rolling_window(numbers, 1)\nend\n\
    </cell>\n<code language=julia-1.4>", "    \n    rolling_max_array = []\n    \n\
    \    for number in numbers\n        rolling_max_array.append(number)\n    end\n\
    \    \n    return rolling_max_array\nend", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    local rolling_max_result = []\n    local\
    \ rolling_max_index = 0\n    local rolling_max_value = numbers[1]\n    local rolling_max_window\
    \ = numbers[1]\n    local rolling_max_window_size = numbers[1]\n    \n    for\
    \ i = 2:length(numbers)\n        if numbers[i] > rolling_max_value\n         \
    \   rolling_max_value = numbers[i]\n            rolling_max_window = rolling_max_value\n\
    \            rolling_max_window_size = i\n        else\n            rolling_max_value\
    \ = rolling_max_value\n            rolling_max_window = rolling_max_value\n  \
    \          rolling_max_window_size = i\n        end\n    end\n    \n    rolling_max_result\
    \ = [rolling_max_value] + rolling_max_result\n    \n    while rolling_max_window_size\
    \ < length(numbers)\n        rolling_max_value = numbers[rolling_max_window_size]\n\
    \        rolling_max_window = rolling_max_value\n        rolling_max_window_size\
    \ = rolling_max_window_size + 1\n        \n        for i = rolling_max_window_size\
    \ + 2:length(numbers)\n            if numbers[i] > rolling_max_value\n       \
    \         rolling_max_value = numbers[i]\n                rolling_max_window =\
    \ rolling_max_value\n                rolling_max_window_size = i\n           \
    \ else\n                rolling_max_value = rolling_max_value\n              \
    \  rolling_max_window = rolling_max_value\n                rolling_max_window_size\
    \ = i\n            end\n        end\n        \n        rolling_max_result = [rolling_max_value]\
    \ + rolling_max_result\n    end\n    \n    return rolling_max_result\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    rolling_max_list = Vector{Int64}()\n  \
    \  \n    for n in numbers\n        if n != rolling_max_list[-1]\n            rolling_max_list\
    \ << n\n        else\n            rolling_max_list << rolling_max_list[-1]\n \
    \       end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(Int64,\
    \ length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n    end\n    return\
    \ rolling_max_array\nend\n</cell>\n<text>\nrolling_max_index\nThe function rolling_max_index\
    \ returns the index of the rolling maximum element found until a given moment\
    \ in the sequence.", "    \n    rolling_max_list = Vector{Int64}()\n    \n   \
    \ for n in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    rolling_max_list = rolling_max_list\
    \ + numbers\n    \n    rolling_max_list = rolling_max_list[2:end]\n    \n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        push!(rolling_max,\
    \ maximum(rolling_max))\n        push!(rolling_max, n)\n    end\n    \n    return\
    \ rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    maximum =\
    \ numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
