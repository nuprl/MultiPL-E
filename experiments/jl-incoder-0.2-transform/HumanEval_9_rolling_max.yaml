name: HumanEval_9_rolling_max
language: jl
prompt: "\"\"\" From a given list of integers, generate a list of rolling maximum\
  \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4,\
  \ 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3,\
  \ 100, 100])\nend\n"
completions: ["    rolling_max = numbers[end]\n    for n in numbers[2:end]\n     \
    \   rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    local maxes = []\n    local max = 0\n \
    \   local i = 1\n    \n    while i <= length(numbers) do\n        if numbers[i]\
    \ > max then\n            max = numbers[i]\n        end\n        \n        if\
    \ i == length(numbers) then\n            maxes = [max]\n        else\n       \
    \     push!(maxes, max)\n        end\n        \n        i = i + 1\n    end\n \
    \   \n    return maxes\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max = Vector{Int64}()\n\
    \    rolling_max.push!(numbers[1])\n    for n in numbers[2:end]\n        if rolling_max.last()\
    \ > n\n            rolling_max.push!(n)\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend", "    \n    maximum = numbers[1]\n    \n    for\
    \ n in numbers[2:end]\n        if n > maximum\n            maximum = n\n     \
    \   end\n    end\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a random integer between $0$ and $1$ and returns its value if\
    \ it is in the given interval or $0$ if it is not.", "    \n    rolling_max =\
    \ numbers[end]\n    for n in numbers[2:end]\n        if n > rolling_max\n    \
    \        rolling_max = n\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[1]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend", "    rolling_max_rolling_window(numbers, 1)\nend\n\
    </cell>\n<code language=julia-1.4>", "    \n    rolling_max_array = []\n    \n\
    \    for number in numbers\n        rolling_max_array.append(number)\n    end\n\
    \    \n    return rolling_max_array\nend", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    local rolling_max_result = []\n    local\
    \ rolling_max_index = 0\n    local rolling_max_value = numbers[1]\n    local rolling_max_window\
    \ = numbers[1]\n    local rolling_max_window_size = numbers[1]\n    \n    for\
    \ i = 2:length(numbers)\n        if numbers[i] > rolling_max_value\n         \
    \   rolling_max_value = numbers[i]\n            rolling_max_window = rolling_max_value\n\
    \            rolling_max_window_size = i\n        else\n            rolling_max_value\
    \ = rolling_max_value\n            rolling_max_window = rolling_max_value\n  \
    \          rolling_max_window_size = i\n        end\n    end\n    \n    rolling_max_result\
    \ = [rolling_max_value] + rolling_max_result\n    \n    while rolling_max_window_size\
    \ < length(numbers)\n        rolling_max_value = numbers[rolling_max_window_size]\n\
    \        rolling_max_window = rolling_max_value\n        rolling_max_window_size\
    \ = rolling_max_window_size + 1\n        \n        for i = rolling_max_window_size\
    \ + 2:length(numbers)\n            if numbers[i] > rolling_max_value\n       \
    \         rolling_max_value = numbers[i]\n                rolling_max_window =\
    \ rolling_max_value\n                rolling_max_window_size = i\n           \
    \ else\n                rolling_max_value = rolling_max_value\n              \
    \  rolling_max_window = rolling_max_value\n                rolling_max_window_size\
    \ = i\n            end\n        end\n        \n        rolling_max_result = [rolling_max_value]\
    \ + rolling_max_result\n    end\n    \n    return rolling_max_result\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    rolling_max_list = Vector{Int64}()\n  \
    \  \n    for n in numbers\n        if n != rolling_max_list[-1]\n            rolling_max_list\
    \ << n\n        else\n            rolling_max_list << rolling_max_list[-1]\n \
    \       end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(Int64,\
    \ length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        rolling_max_array[i] = max(numbers[i-1], numbers[i])\n    end\n    return\
    \ rolling_max_array\nend\n</cell>\n<text>\nrolling_max_index\nThe function rolling_max_index\
    \ returns the index of the rolling maximum element found until a given moment\
    \ in the sequence.", "    \n    rolling_max_list = Vector{Int64}()\n    \n   \
    \ for n in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    rolling_max_list = rolling_max_list\
    \ + numbers\n    \n    rolling_max_list = rolling_max_list[2:end]\n    \n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        push!(rolling_max,\
    \ maximum(rolling_max))\n        push!(rolling_max, n)\n    end\n    \n    return\
    \ rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    maximum =\
    \ numbers[1]\n    for i in 2:length(numbers)\n        if numbers[i] > maximum\n\
    \            maximum = numbers[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        rolling_max_list = rolling_max_list + [rolling_max(n)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(numbers, number)]\n\
    \    end\n    \n    return rolling_max_list\nend", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for number in numbers\n        rolling_max_list\
    \ = append(rolling_max_list, maximum(rolling_max_list, number))\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", " \
    \   rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list.\n>>> square_sum([1,\
    \ 2, 3, 4])\n25\n>>> square_sum([1, 2, 3])\n6\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n\
    0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, ", "    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n \
    \       if n > maximum\n            maximum = n\n        end\n    end\n    \n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        if n == rolling_max[1]\n\
    \            rolling_max[1] = n\n        else\n            push!(rolling_max,\
    \ n)\n        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.3>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n\
    \            rolling_max[i] = numbers[i]\n        else\n            rolling_max[i]\
    \ = rolling_max[i-1]\n        end\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(n)]\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max_list\
    \ <- []\n    rolling_max_list <- numbers[end]\n    for n in numbers[2:end]\n \
    \       rolling_max_list <- max(rolling_max_list, rolling_max(n))\n    end\n \
    \   rolling_max_list\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ generates a random integer between $0$ and $1$, inclusive.", "    \n    rolling_max_list\
    \ <- []\n    \n    for number in numbers\n        rolling_max_list <- append(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        if n > rolling_max\n            rolling_max\
    \ = n\n        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_array = zeros(Int64, length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</code>\n<|/ a tags=julia,arrays,performance\
    \ |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got an\
    \ error `MethodError: no method matching maximum(::Array{Int64,1}, ::Int64)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix the error. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got\
    \ an error `MethodError: no method matching maximum(::Array{Int64,1}, ::Int64)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix the error. Sorry for the confusion.\n\
    <|/ c |>\n<| a tags=julia,arrays,performance |>\nI wrote a package called RollingMax\
    \ which does exactly that:\n<code>\njulia> using RollingMax", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > rolling_max_list[1]\n\
    \            rolling_max_list.append(numbers[i])\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the rolling mean of a given list of integers. \nThe rolling mean is defined\
    \ as the arithmetic mean of the elements over a given window of length $k$. \n\
    For example, if the input list is [1, 2, 3, 4, 5] and the window length is $k$,\
    \ then the rolling mean is defined as the arithmetic mean of the elements over\
    \ the window: [1, 2, 3, 4] with $k$ equal to 2.", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ <- Vector{Int64}(undef, 0)\n    rolling_max_list <- rolling_max_list ++ numbers\n\
    \    rolling_max_list <- rolling_max_list |> maximum\n    rolling_max_list\nend\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 3: Rolling average\nWrite a function that takes a vector of numbers and returns\
    \ the rolling average of the numbers. \nThe rolling average of a vector is the\
    \ sum of the elements divided by the number of elements in the vector.\nThe rolling\
    \ average of a vector is defined as the average of the last $k$ elements of the\
    \ vector.\nFor example, if the vector is [1,2,3,4,5] and the window size is 3,\
    \ the rolling average is calculated as (1+2+3)/3 = 2.5.\nThe function should return\
    \ the rolling average of the given vector.\nThe function should work for both\
    \ vectors and matrices.\nThe function should work for both positive and negative\
    \ numbers.\nThe function should work for both positive and negative numbers, provided\
    \ that $k$ is less than or equal to the length of the vector.\nThe function should\
    \ work for both positive and negative numbers, provided that $k$ is less than\
    \ or equal to the length of the vector.\nThe function should work for both positive\
    \ and negative numbers, provided that $k$ is less than or equal to the length\
    \ of the vector.\nThe function should work for both positive and negative numbers,\
    \ provided that $k$ is less than or equal to the length of the vector.\nThe function\
    \ should work for both positive and negative numbers, provided that $k$ is less\
    \ than or equal to the length of the vector.\nThe function should work for both\
    \ positive and negative numbers, provided that $k$ is less than or equal to the\
    \ length of the vector.\nThe function should work for both positive and negative\
    \ numbers, provided that $k$ is less than or equal to the length of the vector.\n\
    The function should work for both positive and negative numbers, provided that\
    \ $k$ is less than or equal to the length of the vector.\nThe function should\
    \ work for both positive and negative numbers, provided that $k$ is less than\
    \ or equal to the length of the vector.\nThe function should work for both positive\
    \ and negative numbers, provided that $k$ is less than or equal to the length\
    \ of the vector.\nThe function should work for both positive and negative numbers,\
    \ provided that $k$ is less than or equal to the length of the vector.\nThe function\
    \ should work for both positive and negative numbers, provided that $k$ is less\
    \ than or equal to the length of the vector.\nThe function should work for both\
    \ positive and negative numbers, provided that $k$ is less than or equal to the\
    \ length of the vector.\nThe function should work for both positive and negative\
    \ numbers, provided that $k$ is less than or equal to the length of the vector.\n\
    The function should work for both positive and negative numbers, provided that\
    \ $k$ is less than or equal to the length of the vector.\nThe function should\
    \ work for both positive and negative numbers, provided that $k$ is less than\
    \ or equal to the length of the vector.\nThe function ", "    rolling_max = numbers[1]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ <- Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_list\
    \ <- append(rolling_max_list, maximum(rolling_max_list), length(rolling_max_list))\n\
    \    end\n    \n    return rolling_max_list\nend", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i] = numbers[i]\n\
    \        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n     \
    \   end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n    \
    \    rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list, n))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n  \
    \  for i = 2:length(numbers)\n        if numbers[i] > rolling_max[i-1]\n     \
    \       rolling_max[i] = numbers[i]\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_result\
    \ = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_result[i-1]\n            rolling_max_result[i]\
    \ = numbers[i]\n        else\n            rolling_max_result[i] = rolling_max_result[i-1]\n\
    \        end\n    end\n    return rolling_max_result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max = Vector{Int64}()\n\
    \    rolling_max[1] = numbers[1]\n    for n in numbers[2:end]\n        if rolling_max[n]\
    \ < rolling_max[1]\n            rolling_max[n] = rolling_max[1]\n        end\n\
    \    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", " \
    \   rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n        end\n  \
    \  end\n    return rolling_max_list\nend", "    \n    rolling_max_list = []\n\
    \    \n    for number in numbers\n        rolling_max_list.append(number)\n  \
    \  end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a list of rolling minimum element found until given moment in\
    \ the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 2]\n\
    </text>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i] = numbers[i]\n\
    \        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n     \
    \   end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    rolling_max = numbers[1]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        push!(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end", "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n\
    \ > rolling_max\n            rolling_max = n\n        end\n    end\n    rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        if n > rolling_max\n  \
    \          rolling_max = n\n        end\n    end\n    return rolling_max\nend\n\
    </cell>\n<code language=julia-1.3>", "    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i], rolling_max_array[i-1])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list.append(n)\n        end\n    end\n    rolling_max_list\nend\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend\n</cell>\n<code language=julia-1.4>", "    rolling_max\
    \ = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max[i-1]\n            rolling_max[i] = numbers[i]\n\
    \        else\n            rolling_max[i] = rolling_max[i-1]\n        end\n  \
    \  end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.4>", "  \
    \  rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for number in numbers[2:end]\n        if number > rolling_max_list[1]\n \
    \           rolling_max_list.append(number)\n        end\n    end\n    rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = Array{Int64}(length(numbers),\
    \ length(numbers))\n    for i = 1:length(numbers)\n        rolling_max_array[i,\
    \ :] = rolling_max(numbers[i:i+1])\n    end\n    return rolling_max_array\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    rolling_max_list <- Vector{Int64}()\n\
    \    \n    for number in numbers\n        \n        if number > rolling_max_list[1]\n\
    \            rolling_max_list <- append(rolling_max_list, number)\n        end\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n\
    \            rolling_max = n\n        end\n    end\n    return rolling_max\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        rolling_max_list = append!(rolling_max_list,\
    \ rolling_max(n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_array = zeros(Int, length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_array[i-1]\n\
    \            rolling_max_array[i] = numbers[i]\n        else\n            rolling_max_array[i]\
    \ = rolling_max_array[i-1]\n        end\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    rolling_max_list = Vector{Int64}()\n    \n    for\
    \ n in numbers\n        if rolling_max_list.length == 0 || rolling_max_list[-1]\
    \ < n\n            rolling_max_list << n\n        else\n            rolling_max_list\
    \ << rolling_max_list[-1]\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n\
    \    for i = length(numbers)-1 downto 1 do\n        if numbers[i] > rolling_max\n\
    \            rolling_max = numbers[i]\n        end\n    end\n    \n    return\
    \ rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    maximum =\
    \ numbers[1]\n    \n    for n in numbers[2:end]\n        if n > maximum\n    \
    \        maximum = n\n        end\n    end\n    \n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max_list[1]\n            rolling_max_list.append(n)\n      \
    \  end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_array = zeros(length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.4>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates the cumulative sum of a given vector.", "    \n    rolling_max\
    \ = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n    \
    \        rolling_max = n\n        end\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<text>\nrolling_max", "    \n    rolling_max = numbers[end]\n  \
    \  for i = end - 1 ; i >= 0 ; i--\n        rolling_max = max(numbers[i], rolling_max)\n\
    \    end\n    \n    return rolling_max\nend", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  if rolling_max_list[-1] < n\n            rolling_max_list.append(n)\n     \
    \   end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list .+ numbers\n    rolling_max_list = rolling_max_list .+ rolling_max(numbers[2:end])\n\
    \    \n    return rolling_max_list\nend", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend", "    rolling_max_array = zeros(Int64, length(numbers))\n\
    \    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)-1])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list =  []\n    rolling_max_list.append(numbers[1])\n    for n\
    \ in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    return rolling_max_list\nend\n</cell>\n\
    <text>\nrolling_max_list function will return the rolling maximum element found\
    \ until given moment in the sequence.", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n  \
    \      if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i]\
    \ = numbers[i]\n        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n\
    \        end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i]\
    \ = numbers[i]\n        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n\
    \        end\n    end\n    return rolling_max_list\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=2 |>\nHere is a solution that uses only built-in functions:\n\
    <code>", "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in\
    \ numbers\n        push!(rolling_max, maximum(rolling_max))\n    end\n    \n \
    \   return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_array\
    \ = zeros(length(numbers))\n    rolling_max_array[1] = numbers[1]\n    for i =\
    \ 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the sum of the\
    \ squares of the numbers.\n    >>> sum_square([1, 2, 3])\n    6\n    >>> sum_square([-1,\
    \ -2, -3])\n    9\n    \"\"\"", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = copy(numbers)\n    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]",
  "    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n    \
    \    rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n \
    \   end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = Vector{Int64}(undef,\
    \ 0)\n    \n    for n in numbers\n        rolling_max = [rolling_max[i] | rolling_max[i+1]\
    \ | rolling_max[i+2] | rolling_max[i+3] | rolling_max[i+4] | rolling_max[i+5]\
    \ | rolling_max[i+6] | rolling_max[i+7] | rolling_max[i+8] | rolling_max[i+9]\
    \ | rolling_max[i+10] | rolling_max[i+11] | rolling_max[i+12] | rolling_max[i+13]\
    \ | rolling_max[i+14] | rolling_max[i+15] | rolling_max[i+16] | rolling_max[i+17]\
    \ | rolling_max[i+18] | rolling_max[i+19] | rolling_max[i+20] | rolling_max[i+21]\
    \ | rolling_max[i+22] | rolling_max[i+23] | rolling_max[i+24] | rolling_max[i+25]\
    \ | rolling_max[i+26] | rolling_max[i+27] | rolling_max[i+28] | rolling_max[i+29]\
    \ | rolling_max[i+30] | rolling_max[i+31] | rolling_max[i+32] | rolling_max[i+33]\
    \ | rolling_max[i+34] | rolling_max[i+35] | rolling_max[i+36] | rolling_max[i+37]\
    \ | rolling_max[i+38] | rolling_max[i+39] | rolling_max[i+40] | rolling_max[i+41]\
    \ | rolling_max[i+42] | rolling_max[i+43] | rolling_max[i+44] | rolling_max[i+45]\
    \ | rolling_max[i+46] | rolling_max[i+47] | rolling_max[i+48] | rolling_max[i+49]\
    \ | rolling_max[i+50] | rolling_max[i+51] | rolling_max[i+52] | rolling_max[i+53]\
    \ | rolling_max[i+54] | rolling_max[i+55] | rolling_max[i+56] | rolling_max[i+57]\
    \ | rolling_max[i+58] | rolling_max[i+59] | rolling_max[i+60] | rolling_max[i+61]\
    \ | rolling_max[i+62] | rolling_max[i+63] | rolling_max[i+64] | rolling_max[i+65]\
    \ | rolling_max[i+66] | rolling_max[i+67] | rolling_max[i+68] | rolling_max[i+69]\
    \ | rolling_", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that generates the cumulative\
    \ sum of a given vector.", "    \n    rolling_max = numbers[end]\n    for n in\
    \ numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n    \n \
    \   return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n@time rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ the cumulative sum of a given vector of integers. \nThe cumulative sum is the\
    \ sum of the first element of the vector followed by all the elements \nof the\
    \ vector, starting from the second element.\nThe function should return an array\
    \ of integers, containing the cumulative sum of the given vector.\nThe function\
    \ should work for vectors of any length.\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vectors\
    \ of any type of elements (including strings).\nThe function should work for vector",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.3>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector and returns the vector with the minimum\
    \ element replaced by 0.", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max = Vector{Int64}(undef, 0)\n    for\
    \ n in numbers\n        push!(rolling_max, max(n))\n    end\n    return rolling_max\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that generates a vector with\
    \ random integers within a given range.", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  rolling_max_list.append(max(rolling_max_list[-1], rolling_max_list[n-1]))\n\
    \    end\n    rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    rolling_max_list =  []\n    \n    for n in numbers\n\
    \        rolling_max_list .= [rolling_max(n)]\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i =\
    \ 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    \n    return rolling_max_array\nend", "    \n    local max = 0\n\
    \    local max_index = 0\n    local max_value = numbers[1]\n    local max_index\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > max_value\
    \ then\n            max_value = numbers[i]\n            max_index = i\n      \
    \  end\n    end\n    \n    local new_max = max_value\n    local new_max_index\
    \ = max_index\n    for i = 2:length(numbers)\n        if numbers[i] > new_max\
    \ then\n            new_max = numbers[i]\n            new_max_index = i\n    \
    \    end\n    end\n    \n    local new_numbers = Vector{Int64}()\n    for i =\
    \ 2:length(numbers)\n        if numbers[i] > new_max then\n            new_numbers[i]\
    \ = numbers[i]\n        else\n            new_numbers[i] = new_max\n        end\n\
    \    end\n    \n    return new_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list <- rolling_max_list ++ [rolling_max(n)]\n    end\n \
    \   \n    return rolling_max_list\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that generates a rolling average of a given list of integers until a given moment\
    \ in the sequence.\n    >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n    [1.5,\
    \ 2.5, 3.5, 4.5, 5.5, 6.5]\n    \"\"\"", "    rolling_max = numbers[end]\n   \
    \ for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend", "    rolling_max_list = Vector{Int64}(undef, 0)\n\
    \    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i] = numbers[i]\n\
    \        end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n \
    \       push!(rolling_max, maximum(n))\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    maximums = Vector{Int64}()\n\
    \    \n    for n in numbers\n        maximums.push(n)\n    end\n    \n    maximums\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n\
    \    for i = end - 1; i >= 1; i--\n        rolling_max = max(numbers[i], rolling_max)\n\
    \    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n      \
    \  if rolling_max == Vector{Int64}(undef, 0)\n            rolling_max = n\n  \
    \      else\n            if n > rolling_max\n                rolling_max = n\n\
    \            end\n        end\n    end\n    \n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_rolling_window(numbers, length(numbers),\
    \ 1)\nend\n</cell>\n<code language=julia-1.3>", "    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    rolling_max\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    The function should raise an error if the list is empty.\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([", "    \n\
    \    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend", "    rolling_max_rolling_window(numbers,\
    \ length(numbers))\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for n in numbers\n        if rolling_max_list.length\
    \ == 0 || rolling_max_list[-1] < n\n            rolling_max_list << n\n      \
    \  else\n            rolling_max_list << rolling_max_list[-1]\n        end\n \
    \   end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    rolling_max = numbers[end]\n    for i = length(numbers):-1:1\n        if\
    \ numbers[i] > rolling_max\n            rolling_max = numbers[i]\n        end\n\
    \    end\n    return rolling_max\nend\n</cell>\n<text>\nRolling mean function",
  "    \n    rolling_max = numbers[end]\n    for i = length(numbers)-1 downto 1 do\n\
    \        if numbers[i] > rolling_max then\n            rolling_max = numbers[i]\n\
    \        end\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<text>\n\
    The function rolling_max is now ready to be used.", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        if n > rolling_max\n            rolling_max\
    \ = n\n        end\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that generates the cumulative sum of a given vector.", "    rolling_max\
    \ = Vector{Int64}(undef, 0)\n    rolling_max[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max[i-1]\n            rolling_max[i] = numbers[i]\n\
    \        else\n            rolling_max[i] = rolling_max[i-1]\n        end\n  \
    \  end\n    return rolling_max\nend", "    rolling_max_list = Vector{Int64}(undef,\
    \ 0)\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rolling_max_list = Vector{Int64}()\n  \
    \  \n    for number in numbers\n        rolling_max_list = append(rolling_max_list,\
    \ maximum(rolling_max_list, number))\n    end\n    \n    return rolling_max_list\n\
    end", "    \n    maximum = numbers[1]\n    \n    for number in numbers[2:end]\n\
    \        if number > maximum\n            maximum = number\n        end\n    end\n\
    \    \n    return maximum\nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that generates a vector with all the prime numbers up to a given limit.\nHint:\
    \ use Sieve of Eratosthenes", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > rolling_max_list[1]\n\
    \            rolling_max_list.append(numbers[i])\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max\
    \ = numbers[end]\n    for n in numbers[2:end]\n        rolling_max = max(rolling_max,\
    \ n)\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rolling_max_array\
    \ = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n        rolling_max_array[i]\
    \ = maximum(rolling_max_array[i-1], numbers[i])\n    end\n    \n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[end]\n  \
    \  for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n        if\
    \ rolling_max == Vector{Int64}(undef, 0)\n            rolling_max = Vector{Int64}(undef,\
    \ 0)\n        else\n            push!(rolling_max, maximum(rolling_max))\n   \
    \     end\n    end\n    \n    return rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates the rolling mean of a given list of integers\
    \ until a given moment in the sequence.", "    rolling_max = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n > rolling_max\n            rolling_max = n\n\
    \        end\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        if n\
    \ > rolling_max\n            rolling_max = n\n        end\n    end\n    \n   \
    \ return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max_result\
    \ = Vector{Int64}(undef, 0)\n    \n    for number in numbers\n        rolling_max_result\
    \ = rolling_max_result .+ [number]\n    end\n    \n    return rolling_max_result\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i] = numbers[i]\n\
    \        else\n            rolling_max_list[i] = rolling_max_list[i-1]\n     \
    \   end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max_vector = Vector{Int64}(undef, 0)\n\
    \    \n    for number in numbers\n        rolling_max_vector = append(rolling_max_vector,\
    \ maximum(rolling_max_vector))\n    end\n    \n    return rolling_max_vector\n\
    end", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_list[i-1]\n            rolling_max_list[i]\
    \ = numbers[i]\n        end\n    end\n    return rolling_max_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_result\
    \ = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n    for i = 2:length(numbers)\n\
    \        if numbers[i] > rolling_max_result[i-1]\n            rolling_max_result[i]\
    \ = numbers[i]\n        else\n            rolling_max_result[i] = rolling_max_result[i-1]\n\
    \        end\n    end\n    return rolling_max_result\nend\n</cell>\n<text>\nThe\
    \ function rolling_max is implemented in the file rolling_max.jl", "    \n   \
    \ rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<text>\nrolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n > rolling_max\n\
    \            rolling_max = n\n        end\n    end\n    rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rolling_max = numbers[end]\n    for n in\
    \ numbers[2:end]\n        if n > rolling_max\n            rolling_max = n\n  \
    \      end\n    end\n    \n    return rolling_max\nend", "    \n    rolling_max_list\
    \ = Vector{Int64}()\n    \n    for n in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_array = zeros(Int, length(numbers))\n\
    \    rolling_max_array[1] = numbers[1]\n    for i = 2:length(numbers)\n      \
    \  rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1], numbers[i])\n  \
    \  end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)-1])\n    end\n\
    \    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[1]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[2]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[3]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[4]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[5]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[6]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[7]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[8]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[9]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[10]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[11]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[12]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[13]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[14]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[15]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[16]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[17]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[18]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[19]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[20]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[21]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[22]]\n\
    \    rolling_max_", "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        if n > rolling_max\n            rolling_max = n\n        end\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list\
    \ = rolling_max_list + numbers\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend", "    \n    maximum = numbers[1]\n    \n  \
    \  for n in numbers[2:end]\n        if n > maximum\n            maximum = n\n\
    \        end\n    end\n    \n    maximum\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<text>\n\
    rolling_max", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n \
    \       rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    rolling_max_array = zeros(length(numbers))\n\
    \    \n    for i = 1:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1],\
    \ numbers[i])\n    end\n    \n    return rolling_max_array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\n\
    end", "    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n   \
    \     rolling_max = max(rolling_max, n)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>", "    rolling_max = numbers[1]\n    for\
    \ n in numbers[2:end]\n        rolling_max = max(rolling_max, n)\n    end\n  \
    \  return rolling_max\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[1]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[2]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[3]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[4]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[5]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[6]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[7]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[8]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[9]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[10]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[11]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[12]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[13]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[14]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[15]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[16]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[17]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[18]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[19]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[20]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[21]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[22]]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=rolling_max_list[23]]\n    rolling_max_list\
    \ = ", "    \n    rolling_max_array = []\n    \n    for number in numbers\n  \
    \      rolling_max_array.append(number)\n    end\n    \n    return rolling_max_array\n\
    end", "    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ <- Vector{Int64}(undef, 0)\n    rolling_max_list <- rolling_max_list ++ numbers\n\
    \    rolling_max_list <- rolling_max_list[length(rolling_max_list):end]\n    return\
    \ rolling_max_list\nend", "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend", "    rolling_max_list\
    \ = Vector{Int64}()\n    rolling_max_list = rolling_max_list + numbers\n    rolling_max_list\
    \ = rolling_max_list[2:end]\n    return rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rolling_max_result = Vector{Int64}(undef, 0)\n  \
    \  rolling_max_result[1] = numbers[1]\n    for i = 2:length(numbers)\n       \
    \ if numbers[i] > rolling_max_result[1]\n            rolling_max_result[1] = numbers[i]\n\
    \        else\n            rolling_max_result = [rolling_max_result[1], numbers[i]]\n\
    \        end\n    end\n    return rolling_max_result\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>",
  "    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for number in numbers[2:end]\n        if number > rolling_max_list[1]\n \
    \           rolling_max_list.append(number)\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>", "    rolling_max_list\
    \ = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list + numbers\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for n in numbers\n        rolling_max_list = append(rolling_max_list,\
    \ maximum(rolling_max_list, n))\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list = rolling_max_list .+ numbers\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_", "    \n    rolling_max_list = Vector{Int64}()\n\
    \    \n    for number in numbers\n        rolling_max_list = push!(rolling_max_list,\
    \ maximum(rolling_max_list))\n    end\n    \n    return rolling_max_list\nend\n\
    </cell>\n<code language=julia-1.5>", "    rolling_max_list = Vector{Int64}()\n\
    \    rolling_max_list.append(numbers[1])\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max_list[1]\n            rolling_max_list.append(n)\n      \
    \  end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
