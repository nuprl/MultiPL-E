language: jl
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for elem in\
    \ lst1\n        if elem < lst2\n            lst3 += elem\n        end\n    end\n\
    \    return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts a string and returns the number of occurrences\
    \ of the letter 'a' in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7k6naz4.jl:29\nin expression starting at\
    \ /tmp/tmpy7k6naz4.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for elem\
    \ in lst1\n        if elem == \"\"\n            lst3 += lst2\n        else\n \
    \           lst3 += filter(elem < lst2, lst1)\n        end\n    end\n    \n  \
    \  return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\",\
    \ \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts a string and returns the number of chars in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ht8m0ko.jl:33\nin expression starting at\
    \ /tmp/tmp5ht8m0ko.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    \n    for\
    \ elem in lst2\n        if elem == \"\"\n            lst3 = lst3\n        else\n\
    \            lst3 = lst3 ++ [elem]\n        end\n    end\n    \n    return lst3\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhwe218t.jl:33\nin expression starting at\
    \ /tmp/tmpjhwe218t.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    lst4 = lst2\n\
    \    \n    for i in 1:length(lst1)\n        \n        if lst1[i] < lst2[i]\n \
    \           lst3 = lst3 ++ lst4\n            lst4 = lst4\n        else\n     \
    \       lst3 = lst3 ++ lst4\n            lst4 = lst4\n        end\n    end\n \
    \   \n    return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\"\
    , \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\"\
    , \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\"\
    , \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp73lgo2mp.jl:37\nin expression starting at\
    \ /tmp/tmp73lgo2mp.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for x in lst1\n\
    \        if x in lst2\n            push!(lst3, x)\n        end\n    end\n    return\
    \ lst3\nend\n</cell>\n<code language=julia-1.3>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.3>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.3>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.3>\ntotal_match([\"4\"\
    ], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n\
    </cell>\n<code language=julia-1.3>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"\
    14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\",\
    \ \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\"\
    , \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\"\
    , \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\"\
    , \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\"\
    , \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\"\
    , \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\"\
    , \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\"\
    , \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"\
    103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\"\
    , \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\"\
    , \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\"\
    , \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2sfbs7fk.jl:29\nin expression starting at\
    \ /tmp/tmp2sfbs7fk.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    lst4 = lst2\n\
    \    \n    \n    for str1 in lst1\n        for str2 in lst2\n            if str1\
    \ < str2\n                lst3 = lst3\n                lst4 = lst4\n         \
    \       break\n        end\n    end\n    \n    \n    for str1 in lst3\n      \
    \  for str2 in lst4\n            if str1 < str2\n                lst3 = lst3\n\
    \                lst4 = lst4\n                break\n        end\n    end\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpvg4_o_cf.jl:35\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvg4_o_cf.jl:1\n\
    in expression starting at /tmp/tmpvg4_o_cf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for x in lst1\n\
    \        if x in lst2\n            push!(lst3, x)\n        end\n    end\n    return\
    \ lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\", \"hi\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwfcsmjq.jl:29\nin expression starting at\
    \ /tmp/tmphwfcsmjq.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for str1\
    \ in lst1\n        for str2 in lst2\n            if str1 < str2\n            \
    \    push!(lst3, str1)\n            else\n                push!(lst3, str2)\n\
    \            end\n        end\n    end\n    \n    return lst3\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjb0p7rb3.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpjb0p7rb3.jl:41\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"hi\", \"admin\", \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjb0p7rb3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpjb0p7rb3.jl:39\ntest set: Test Failed at /tmp/tmpjb0p7rb3.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"]\n   Evaluated: [\"hi\", \"hi\", \"admin\", \"hi\", \"\
    admin\", \"admin\", \"admin\", \"admin\"] == [\"hi\", \"admin\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjb0p7rb3.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjb0p7rb3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpjb0p7rb3.jl:43\n  Expression: candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n   Evaluated: [\"1\", \"2\", \"3\", \"\
    4\", \"4\"] == [\"4\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjb0p7rb3.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjb0p7rb3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpjb0p7rb3.jl:44\n  Expression: candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n   Evaluated: [\"hI\", \"Hi\", \"admin\"\
    , \"Hi\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjb0p7rb3.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n"
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for str1 in\
    \ lst1\n        for str2 in lst2\n            if str1 < str2\n               \
    \ lst3 += str1\n            else\n                lst3 += str2\n            end\n\
    \        end\n    end\n    return lst3\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a string and returns the number of times the string occurs in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90yyy06h.jl:33\nin expression starting at\
    \ /tmp/tmp90yyy06h.jl:33\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    else\n        \n        lst3 = lst1\n        \n    \
    \    for i = 1:length(lst2)\n            \n            if length(lst3) == length(lst2)\n\
    \                \n                if lst3[end] == lst2[i]\n                 \
    \   lst3 = lst3[end+1:end]\n                else\n                    lst3 = lst3[end+1:end]\n\
    \                end\n            else\n                \n                if lst3[end]\
    \ == lst2[i]\n                    lst3 = lst3[end+1:end]\n                else\n\
    \                    lst3 = lst3[end+1:end]\n                end\n           \
    \ end\n        end\n        \n        return lst3\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that accepts a string and returns the string with\
    \ all vowels removed. \nThe vowels are a, e, i, o, u. \nThe function should remove\
    \ all vowels and return a new string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_m08m7v.jl:49\nin expression starting at\
    \ /tmp/tmpu_m08m7v.jl:49\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    lst4 = lst2\n\
    \    \n    \n    for str1 in lst1\n        for str2 in lst2\n            \n  \
    \          if str1 < str2\n                lst3 = lst3\n                lst4 =\
    \ lst4\n            else\n                lst3 = lst3\n            end\n     \
    \   end\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3uytsbs7.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3uytsbs7.jl:1\n\
    in expression starting at /tmp/tmp3uytsbs7.jl:1\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for str1\
    \ in lst1\n        for str2 in lst2\n            if str1 < str2\n            \
    \    lst3 += str1\n            elseif str1 == str2\n                lst3 += str2\n\
    \            else\n                lst3 += str2\n            end\n        end\n\
    \    end\n    \n    return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpov3cqtxr.jl:37\nin expression starting at\
    \ /tmp/tmpov3cqtxr.jl:37\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for str1 in\
    \ lst1\n        for str2 in lst2\n            if str1 < str2\n               \
    \ lst3 += str1\n            else\n                lst3 += str2\n            end\n\
    \        end\n    end\n    return lst3\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp57svkfah.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp57svkfah.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  MethodError: no method matching +(::Vector{Any}, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp57svkfah.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp57svkfah.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp57svkfah.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp57svkfah.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  MethodError: no method matching +(::Vector{Any}, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(::Array,\
    \ !Matched::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp57svkfah.jl:27\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp57svkfah.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    lst4 = lst2\n\
    \    \n    \n    for elem in lst3\n        if elem == \"\"\n            lst3 =\
    \ lst3[1..end]\n        else\n            lst3 = lst3[1..end]\n            break\n\
    \    end\n    \n    for elem in lst4\n        if elem == \"\"\n            lst4\
    \ = lst4[1..end]\n        else\n            lst4 = lst4[1..end]\n            break\n\
    \        end\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpfgwlkdxk.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfgwlkdxk.jl:1\n\
    in expression starting at /tmp/tmpfgwlkdxk.jl:1\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for x in lst1\n\
    \        if x in lst2\n            push!(lst3, x)\n        end\n    end\n    return\
    \ lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts a string and returns the number of times the\
    \ string appears in the string.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnymirxp.jl:29\nin expression starting at\
    \ /tmp/tmpdnymirxp.jl:29\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    else\n        \n        lst3 = []\n        for elem\
    \ in lst1\n            if elem < lst2\n                push!(lst3, elem)\n   \
    \         end\n        end\n        \n        return lst3\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbam33zi_.jl:35\nin expression starting at\
    \ /tmp/tmpbam33zi_.jl:35\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for i\
    \ in eachindex(lst1)\n        \n        if length(lst1[i]) < length(lst2[i])\n\
    \            lst3 += lst1[i]\n        else\n            lst3 += lst2[i]\n    \
    \    end\n    end\n    \n    return lst3\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbgcwabi.jl:34\nin expression starting at\
    \ /tmp/tmpvbgcwabi.jl:34\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    lst4 = lst2\n\
    \    \n    \n    for elem in lst3\n        if elem == lst4\n            lst3 =\
    \ lst3\n        else\n            lst3 = lst3 + [elem]\n        end\n    end\n\
    \    \n    return lst3\nend\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.4>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.4>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.4>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.4>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.4>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.4>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.4>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.4>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.4>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4p5vgov.jl:35\nin expression starting at\
    \ /tmp/tmpv4p5vgov.jl:35\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    lst4 = lst2\n\
    \    \n    \n    for ele in lst3\n        if ele == lst4[1]\n            lst4\
    \ = lst4[2:end]\n        else\n            lst4 = lst4[1:end]\n        end\n \
    \   end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqgyf4qcj.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqgyf4qcj.jl:1\n\
    in expression starting at /tmp/tmpqgyf4qcj.jl:1\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for elem\
    \ in lst1\n        if elem == \"\"\n            lst3 += lst2\n        else\n \
    \           lst3 += filter(elem < lst2, lst1)\n    end\n    \n    return lst3\n\
    end\n</cell>\n<code language=julia-1.3>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.3>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts a string and returns a string with all the\
    \ chars replaced by '?'\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8j178p9.jl:32\nin expression starting at\
    \ /tmp/tmpm8j178p9.jl:32\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for str1\
    \ in lst1\n        for str2 in lst2\n            if str1 < str2\n            \
    \    lst3 += str1\n            elseif str2 < str1\n                lst3 += str2\n\
    \            else\n                lst3 += str1\n                lst3 += str2\n\
    \            end\n        end\n    end\n    \n    return lst3\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp52i3o136.jl:40

    '
  stdout: "test set: Error During Test at /tmp/tmp52i3o136.jl:44\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  MethodError: no method matching +(::Vector{Any}, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp52i3o136.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52i3o136.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp52i3o136.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp52i3o136.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  MethodError: no method matching +(::Vector{Any}, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(::Array,\
    \ !Matched::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp52i3o136.jl:30\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp52i3o136.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1"
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = Vector{String}(undef,\
    \ 0)\n    \n    for str1 in lst1\n        for str2 in lst2\n            lst3 =\
    \ lst3 + (str1 == str2)\n        end\n    end\n    \n    return lst3\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts a string and returns the number of chars in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6av0qxs.jl:31\nin expression starting at\
    \ /tmp/tmpg6av0qxs.jl:31\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for str1\
    \ in lst1\n        for str2 in lst2\n            if str1 < str2\n            \
    \    push!(lst3, str1)\n            else\n                push!(lst3, str2)\n\
    \            end\n        end\n    end\n    \n    return lst3\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpelwui77d.jl:35\nin expression starting at\
    \ /tmp/tmpelwui77d.jl:35\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) == length(lst2)\n\
    \        \n        lst3 = lst1\n        \n        for i = 2:length(lst1)\n   \
    \         \n            if lst1[i] < lst2[i]\n                lst3 = lst3 .+ [lst1[i]]\n\
    \            else\n                lst3 = lst3 .+ [lst2[i]]\n            end\n\
    \            \n        end\n        \n        return lst3\n        \n    else\n\
    \        \n        return lst1\n        \n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpoyg6r7r3.jl:45

    '
  stdout: "test set: Error During Test at /tmp/tmpoyg6r7r3.jl:49\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  MethodError: no method matching +(::String, ::String)\n  Closest candidates\
    \ are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \      @ Main /tmp/tmpoyg6r7r3.jl:28\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpoyg6r7r3.jl:49 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpoyg6r7r3.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpoyg6r7r3.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]\n  MethodError:\
    \ no method matching +(::String, ::String)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670\
    \ [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n\
    \    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @\
    \ ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860\
    \ [inlined]\n    [6] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \      @ Main /tmp/tmpoyg6r7r3.jl:30\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpoyg6r7r3.jl:52 [inlined]\n\
    \    [9] macro expansion\n"
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    \n    for\
    \ elem in lst2\n        if elem == \"\"\n            lst3 = lst3\n        else\n\
    \            lst3 = lst3 ++ [elem]\n        end\n    end\n    \n    return lst3\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhwe218t.jl:33\nin expression starting at\
    \ /tmp/tmpjhwe218t.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) == length(lst2)\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zzpy3sf.jl:1\nin expression starting at /tmp/tmp1zzpy3sf.jl:1\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    \n    for\
    \ str in lst2\n        if str in lst3\n            lst3 = lst3 .- str\n      \
    \  else\n            lst3 = lst3 .+ str\n        end\n    end\n    \n    return\
    \ lst3\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjmae0ma2.jl:39\n  Test threw
    exception\n  Expression: candidate(["hi", "admin"], ["hi", "hi"]) == ["hi", "hi"]\n  MethodError:
    no method matching -(::String, ::String)\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @
    ./broadcast.jl:670 [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643
    [inlined]\n    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @
    ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860
    [inlined]\n    [6] total_match(lst1::Vector{String}, lst2::Vector{String})\n      @
    Main /tmp/tmpjmae0ma2.jl:25\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [8] macro expansion\n      @ /tmp/tmpjmae0ma2.jl:39 [inlined]\n    [9]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [10] top-level scope\n      @ /tmp/tmpjmae0ma2.jl:37\ntest set:
    Error During Test at /tmp/tmpjmae0ma2.jl:40\n  Test threw exception\n  Expression:
    candidate(["hi", "admin"], ["hi", "hi", "admin", "project"]) == ["hi", "admin"]\n  MethodError:
    no method matching -(::String, ::String)\n  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @
    ./broadcast.jl:670 [inlined]\n    [2] _broadcast_getindex\n      @ ./broadcast.jl:643
    [inlined]\n    [3] getindex\n      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @
    ./broadcast.jl:899 [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860
    [inlined]\n    [6] total_match(lst1::Vector{String}, lst2::Vector{String})\n      @
    Main /tmp/tmpjmae0ma2.jl:25\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n    [8] macro expansion\n      @ /tmp/tmpjmae0ma2.jl:40 [inlined]\n    [9]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [10] top-level scope\n      @ /tmp/tmpjmae0ma2.jl:37\ntest set:
    Error During Test at /tmp/tmpjmae0ma2.jl:41\n  Test'
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    \n    for\
    \ elem in lst2\n        if elem < lst3\n            lst3 = lst3\n        else\n\
    \            lst3 = lst3 ++ [elem]\n        end\n    end\n    \n    return lst3\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nWrite\
    \ a function that accepts a string and returns the number of chars in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv18_jtb8.jl:33\nin expression starting at\
    \ /tmp/tmpv18_jtb8.jl:33\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    \n    for\
    \ elem in lst2\n        if elem == \"\"\n            lst3 = lst3\n        else\n\
    \            lst3 = lst3 ++ [elem]\n        end\n    end\n    \n    return lst3\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhwe218t.jl:33\nin expression starting at\
    \ /tmp/tmpjhwe218t.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) != length(lst2)\n\
    \        error(\"Lists must have the same length\")\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf17iecuj.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf17iecuj.jl:1\n\
    in expression starting at /tmp/tmpf17iecuj.jl:1\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for x in lst1\n\
    \        if x in lst2\n            push!(lst3, x)\n        end\n    end\n    \n\
    \    return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8histjp.jl:30\nin expression starting at\
    \ /tmp/tmpg8histjp.jl:30\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = lst1\n    lst4 = lst2\n\
    \    \n    \n    for x in lst3\n        \n        for y in lst4\n            \n\
    \            if x == y\n                \n                lst3 = lst3[lst3 !=\
    \ x]\n                lst4 = lst4[lst4 != y]\n                \n            else\n\
    \                \n                lst3 = lst3[lst3 != x]\n                lst4\
    \ = lst4[lst4 != y]\n                \n            end\n            \n       \
    \ end\n        \n    end\n    \n    return lst3\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpcj4o6pkx.jl:49

    '
  stdout: "test set: Error During Test at /tmp/tmpcj4o6pkx.jl:53\n  Test threw exception\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"\
    hi\"]\n  ArgumentError: invalid index: true of type Bool\n  Stacktrace:\n   [1]\
    \ to_index(i::Bool)\n     @ Base ./indices.jl:293\n   [2] to_index(A::Vector{String},\
    \ i::Bool)\n     @ Base ./indices.jl:277\n   [3] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpcj4o6pkx.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpcj4o6pkx.jl:53 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpcj4o6pkx.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpcj4o6pkx.jl:54\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  ArgumentError: invalid index: true of type Bool\n  Stacktrace:\n\
    \   [1] to_index(i::Bool)\n     @ Base ./indices.jl:293\n   [2] to_index(A::Vector{String},\
    \ i::Bool)\n     @ Base ./indices.jl:277\n   [3] total_match(lst1::Vector{String},\
    \ lst2::Vector{String})\n     @ Main /tmp/tmpcj4o6pkx.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpcj4o6pkx.jl:54 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpcj4o6pkx.jl:51\ntest set:\
    \ Error During Test at /tmp/tmpcj4o6pkx.jl:55\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  ArgumentError:\
    \ invalid index: true of type Bool\n  Stacktrace:\n   [1] to_index(i::Bool)\n\
    \     @ Base ./indices.jl:293\n   [2] to_index(A::Vector{String}, i::Bool)\n \
    \    @ Base ./indices.jl:277\n   [3] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpcj4o6pkx.jl:0\n   [4] macro expansion\n     @ ~/.conda/envs/polyglot/sh"
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) == length(lst2)\n\
    \        \n        lst3 = lst1\n        \n        for i = 1:length(lst1)\n   \
    \         \n            if lst1[i] < lst2[i]\n                \n             \
    \   lst3 = lst3 ++ lst2\n                \n                break\n           \
    \ end\n        end\n        \n        return lst3\n    end\n    \n    return lst1\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\", \"hi\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptsa0o9q4.jl:40\nin expression starting at\
    \ /tmp/tmptsa0o9q4.jl:40\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for str1\
    \ in lst1\n        for str2 in lst2\n            if str1 < str2\n            \
    \    lst3 += str1\n            else\n                lst3 += str2\n          \
    \  end\n        end\n    end\n    \n    return lst3\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"\
    ], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\"])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4w6x2um.jl:35\nin expression starting at\
    \ /tmp/tmpw4w6x2um.jl:35\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    if length(lst1) != length(lst2)\n\
    \        error(\"Lists have different lengths\")\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8r9nkk54.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8r9nkk54.jl:1\n\
    in expression starting at /tmp/tmp8r9nkk54.jl:1\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    for x in lst1\n\
    \        for y in lst2\n            if x < y\n                push!(lst3, x)\n\
    \                break\n        end\n    end\n    return lst3\nend\n</cell>\n\
    <code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.0>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.0>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_o2uoub.jl:31\nin expression starting at\
    \ /tmp/tmpb_o2uoub.jl:31\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxhyjogz3.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxhyjogz3.jl:1\n\
    in expression starting at /tmp/tmpxhyjogz3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    >>> total_match([], [])\n    []\n\
    \    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\", \"Hi\"\
    ]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    \n    lst3 = []\n    \n    for elem\
    \ in lst1\n        if elem == \"\"\n            lst3 += lst2\n        else\n \
    \           lst3 += filter(elem < lst2, lst1)\n        end\n    end\n    \n  \
    \  return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\",\
    \ \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"admin\", \"project\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"project\", \"hi\", \"hi\"\
    ])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\"\
    , \"admin\", \"project\", \"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"project\", \"hi\", \"hi\"\
    , \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"\
    admin\"], [\"hi\", \"admin\", \"project\", \"hi\", \"hi\", \"hi\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hi\", \"admin\", \"project\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"admin\", \"project\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"admin\", \"project\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"\
    hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m1pnm50.jl:33\nin expression starting at\
    \ /tmp/tmp5m1pnm50.jl:33\n"
  stdout: ''
  timestamp: 1659822940
