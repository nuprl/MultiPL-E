name: HumanEval_94_skjkasdkd
language: jl
prompt: "\"\"\"You are given a list of integers.\n    You need to find the largest\
  \ prime value and return the sum of its digits.\n\n    Examples:\n    >>> skjkasdkd([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n    10\n\
  \    >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\
  \    25\n    >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3])\n    13\n    >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6])\n    11\n    >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n    3\n    >>>\
  \ skjkasdkd([0, 8, 1, 2, 1, 7])\n    7\n    \"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
  \t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) ==\
  \ 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0,\
  \ 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191,\
  \ 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n"
completions: ["    primes = primes(length(lst))\n    largest = primes[end]\n    largest\
    \ = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = lar", "    largest = 0\n    largestPrime\
    \ = 0\n    for x in lst\n        if x == largestPrime\n            largestPrime\
    \ = largestPrime + 1\n        else\n            if largestPrime > largest\n  \
    \              largestPrime = largest\n            largest = largestPrime\n  \
    \          largestPrime = x\n        end\n    end\n    return largestPrime\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for elt in\
    \ lst\n        if elt > largest\n            largest = elt\n        end\n    end\n\
    \    for elt in lst\n        if elt == largest\n            sum += elt\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000, 10000))\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of all its digits.", "   \
    \ \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigitsPrime = 0\n    \n    for elt in lst\n        if elt\
    \ > largest\n            largest = elt\n            largestPrime = elt\n     \
    \       largestSum = 0\n            largestSumDigits = 0\n            largestSumDigitsPrime\
    \ = 0\n        elseif elt > largestPrime\n            largestPrime = elt\n   \
    \         largestSumDigitsPrime += elt\n        else\n            largestSum +=\
    \ elt\n            largestSumDigits += elt % 10\n            largestSumDigitsPrime\
    \ += elt % 10\n        end\n    end\n    \n    return largestSumDigits + largestSumDigitsPrime\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @test skjkasdkd([3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3]) == 10\n@test skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1]) == 25\n@test skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3]) == 13\n@test skjkasdkd([0, 724, 32, 71, 99, 32,\
    \ 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@test skjkasdkd([0, 81, 12, 3, 1, 21]) ==\
    \ 3\n@test skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of prime numbers less than a given integer\
    \ $n$. \nThe function should take one argument, an integer $n$.", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit = 0\n   \
    \ largestSumDigit2 = 0\n    largestSumDigit3 = 0\n    largestSumDigit4 = 0\n \
    \   largestSumDigit5 = 0\n    largestSumDigit6 = 0\n    largestSumDigit7 = 0\n\
    \    largestSumDigit8 = 0\n    largestSumDigit9 = 0\n    largestSumDigit10 = 0\n\
    \    largestSumDigit11 = 0\n    largestSumDigit12 = 0\n    largestSumDigit13 =\
    \ 0\n    largestSumDigit14 = 0\n    largestSumDigit15 = 0\n    largestSumDigit16\
    \ = 0\n    largestSumDigit17 = 0\n    largestSumDigit18 = 0\n    largestSumDigit19\
    \ = 0\n    largestSumDigit20 = 0\n    largestSumDigit21 = 0\n    largestSumDigit22\
    \ = 0\n    largestSumDigit23 = 0\n    largestSumDigit24 = 0\n    largestSumDigit25\
    \ = 0\n    largestSumDigit26 = 0\n    largestSumDigit27 = 0\n    largestSumDigit28\
    \ = 0\n    largestSumDigit29 = 0\n    largestSumDigit30 = 0\n    largestSumDigit31\
    \ = 0\n    largestSumDigit32 = 0\n    largestSumDigit33 = 0\n    largestSumDigit34\
    \ = 0\n    largestSumDigit35 = 0\n    largestSumDigit36 = 0\n    largestSumDigit37\
    \ = 0\n    largestSumDigit38 = 0\n    largestSumDigit39 = 0\n    largestSumDigit40\
    \ = 0\n    largestSumDigit41 = 0\n    largestSumDigit42 = 0\n    largestSumDigit43\
    \ = 0\n    largestSumDigit44 = 0\n    largestSumDigit45 = 0\n    largestSumDigit46\
    \ = 0\n    largestSumDigit47 = 0\n    largestSumDigit48 = 0\n    largestSumDigit49\
    \ = 0\n    largestSumDigit50 = 0\n    largestSumDigit51 = 0\n    largestSumDigit52\
    \ = 0\n    largestSumDigit53 = 0\n    largestSumDigit54 = 0\n    largestSumDigit55\
    \ = 0\n    largestSumDigit56 = 0\n    largestSumDigit57 = 0\n    largestSumDigit58\
    \ = 0\n    largestSumDigit59 = 0\n    largestSumDigit60 = 0\n    largestSumDigit61\
    \ = 0\n    largestSumDigit", "    \n    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest",
  "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigits\
    \ = digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n\
    \    \n    largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ skjkasdkd([3, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97]) == 19\n@assert skjkasdkd([3, 7, 9, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) ==\
    \ 19\n@assert skjkasdkd([3, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 19\n@assert skjkasdkd([3, 7, 9,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]) == 19\n@assert skjkasdkd([3, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 19\n@assert skjkasdkd([3,\
    \ 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]) == 19\n@assert skjkasdkd([3, 7, 9, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 19\n@assert skjkasdkd([3,\
    \ 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]) == 19\n@assert skjkasdkd([3, 7, 9, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 19\n@assert skjkasdkd([3,\
    \ 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]) == 19\n@assert skjkasdk", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n\
    \    largestSumPrime3 = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n\
    \    largestSumPrime6 = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n\
    \    largestSumPrime9 = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 =\
    \ 0\n    largestSumPrime12 = 0\n    largestSumPrime13 = 0\n    largestSumPrime14\
    \ = 0\n    largestSumPrime15 = 0\n    largestSumPrime16 = 0\n    largestSumPrime17\
    \ = 0\n    largestSumPrime18 = 0\n    largestSumPrime19 = 0\n    largestSumPrime20\
    \ = 0\n    largestSumPrime21 = 0\n    largestSumPrime22 = 0\n    largestSumPrime23\
    \ = 0\n    largestSumPrime24 = 0\n    largestSumPrime25 = 0\n    largestSumPrime26\
    \ = 0\n    largestSumPrime27 = 0\n    largestSumPrime28 = 0\n    largestSumPrime29\
    \ = 0\n    largestSumPrime30 = 0\n    largestSumPrime31 = 0\n    largestSumPrime32\
    \ = 0\n    largestSumPrime33 = 0\n    largestSumPrime34 = 0\n    largestSumPrime35\
    \ = 0\n    largestSumPrime36 = 0\n    largestSumPrime37 = 0\n    largestSumPrime38\
    \ = 0\n    largestSumPrime39 = 0\n    largestSumPrime40 = 0\n    largestSumPrime41\
    \ = 0\n    largestSumPrime42 = 0\n    largestSumPrime43 = 0\n    largestSumPrime44\
    \ = 0\n    largestSumPrime45 = 0\n    largestSumPrime46 = 0\n    largestSumPrime47\
    \ = 0\n    largestSumPrime48 = 0\n    largestSumPrime49 = 0\n    largestSumPrime50\
    \ = 0\n    largestSumPrime51 = 0\n    largestSumPrime52 = 0\n    largestSumPrime53\
    \ = 0\n    largestSumPrime54 = 0\n    largestSumPrime55", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for elt in lst\n        if elt >\
    \ largest\n            largest = elt\n        end\n    end\n    for elt in lst\n\
    \        if elt == largest\n            sum += elt\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,\
    \ 10000));\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ all prime numbers less than or equal to a given number.", "    \n    primes\
    \ = primes(length(lst))\n    \n    largest = 0\n    \n    for p in primes\n  \
    \      if lst .contains p\n            largest = p\n            break\n      \
    \  end\n    end\n    \n    sum = 0\n    for p in primes\n        if lst .contains\
    \ p\n            sum += lst .index(p)\n        end\n    end\n    \n    return\
    \ sum + largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, ", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = lar", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    sum = 0\n    for n in lst\n        if n % largest == 0\n            sum +=\
    \ largest\n            largest = primes[end]\n        else\n            largest\
    \ = primes[end]\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    \n    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeSum = 0\n\
    \    for n in lst\n        if primes[n] == largestPrime\n            largestPrimeSum\
    \ += n\n        end\n    end\n    return largestPrimeSum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nThe Fibonacci sequence is defined by the recurrence\
    \ relation:", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = lar", "    \n    primes = primes(lst)\n    largest\
    \ = primes[end]\n    largest = largest.digits[1]\n    largest = largest.digits[2]\n\
    \    largest = largest.digits[3]\n    largest = largest.digits[4]\n    largest\
    \ = largest.digits[5]\n    largest = largest.digits[6]\n    largest = largest.digits[7]\n\
    \    largest = largest.digits[8]\n    largest = largest.digits[9]\n    largest\
    \ = largest.digits[10]\n    largest = largest.digits[11]\n    largest = largest.digits[12]\n\
    \    largest = largest.digits[13]\n    largest = largest.digits[14]\n    largest\
    \ = largest.digits[15]\n    largest = largest.digits[16]\n    largest = largest.digits[17]\n\
    \    largest = largest.digits[18]\n    largest = largest.digits[19]\n    largest\
    \ = largest.digits[20]\n    largest = largest.digits[21]\n    largest = largest.digits[22]\n\
    \    largest = largest.digits[23]\n    largest = largest.digits[24]\n    largest\
    \ = largest.digits[25]\n    largest = largest.digits[26]\n    largest = largest.digits[27]\n\
    \    largest = largest.digits[28]\n    largest = largest.digits[29]\n    largest\
    \ = largest.digits[30]\n    largest = largest.digits[31]\n    largest = largest.digits[32]\n\
    \    largest = largest.digits[33]\n    largest = largest.digits[34]\n    largest\
    \ = largest.digits[35]\n    largest = largest.digits[36]\n    largest = largest.digits[37]\n\
    \    largest = largest.digits[38]\n    largest = largest.digits[39]\n    largest\
    \ = largest.digits[40]\n    largest = largest.digits[41]\n    largest = largest.digits[42]\n\
    \    largest = lar", "    \n    largest = 0\n    largestPrime = 0\n    largestPrimeSum\
    \ = 0\n    \n    for x in lst\n        if x == largestPrime\n            largestPrimeSum\
    \ += largestPrime\n            largestPrime = 0\n        else\n            largestPrime\
    \ += 1\n        end\n    end\n    largestPrimeSum += largestPrime\n    return\
    \ largestPrimeSum\nend", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    primes = primes(length(lst))\n    largest = primes[end]\n    sum\
    \ = 0\n    for p in primes\n        if p > largest\n            largest = p\n\
    \        end\n    end\n    for p in primes\n        if p > largest\n         \
    \   sum += lst[p]\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkas", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestPrimeIndex = 0\n    largestPrimeValue = 0\n    largestPrimeValueIndex\
    \ = 0\n    largestPrimeValueSum = 0\n    largestPrimeValueSumIndex = 0\n    \n\
    \    for i in lst\n        if i%2 == 0\n            largestPrime = i\n       \
    \     largestPrimeIndex = i\n            largestPrimeValue = i\n            largestPrimeValueIndex\
    \ = i\n            largestPrimeValueSum = 0\n            largestPrimeValueSumIndex\
    \ = i\n        else\n            if i%3 == 0\n                largestPrime = largestPrime\
    \ + i\n                largestPrimeIndex = largestPrimeIndex + i\n           \
    \     largestPrimeValue = largestPrimeValue + i\n                largestPrimeValueIndex\
    \ = largestPrimeValueIndex + i\n                largestPrimeValueSum = largestPrimeValueSum\
    \ + i\n                largestPrimeValueSumIndex = largestPrimeValueSumIndex +\
    \ i\n            else\n                if i%5 == 0\n                    largestPrime\
    \ = largestPrime + i\n                    largestPrimeIndex = largestPrimeIndex\
    \ + i\n                    largestPrimeValue = largestPrimeValue + i\n       \
    \             largestPrimeValueIndex = largestPrimeValueIndex + i\n          \
    \          largestPrimeValueSum = largestPrimeValueSum + i\n                 \
    \   largestPrimeValueSumIndex = largestPrimeValueSumIndex + i\n              \
    \  else\n                    if i%7 == 0\n                        largestPrime\
    \ = largestPrime + i\n                        largestPrimeIndex = largestPrimeIndex\
    \ + i\n                        largestPrimeValue = largestPrimeValue + i\n   \
    \                     largestPrimeValueIndex = largestPrimeValueIndex + i\n  \
    \                      largestPrimeValueSum = largestPrimeValueSum + i\n     \
    \                   largestPrimeValueSumIndex = largestPrimeValueSumIndex + i\n\
    \                    else\n                        if i%11 == 0\n            \
    \                largestPrime = largestPrime + i\n                           \
    \ largestPrimeIndex = largestPrimeIndex + i\n                            largestPrimeValue\
    \ = largestPrimeValue + i\n                            largestPrimeValueIndex\
    \ = largestPrimeValueIndex + i\n                            largestPrimeValueSum\
    \ = largestPrimeValueSum + i\n                            largestPrimeValueSum",
  "    \n    primes = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n\
    \    for i in primes\n        if lst[i] > largest\n            largest = lst[i]\n\
    \        end\n    end\n    for i in primes\n        if lst[i] < largest\n    \
    \        sum += lst[i]\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the numbers.", "    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    for i in lst\n        if i%2 == 0\n            largestPrime = i\n \
    \           largestSum = largestSum + i\n        else\n            if largestPrime\
    \ == 0\n                largestPrime = i\n                largestSum = largestSum\
    \ + i\n            else\n                if largestPrime > i\n               \
    \     largestPrime = i\n                    largestSum = largestSum + i\n    \
    \            else\n                    if largestPrime == i\n                \
    \        largestPrime = i\n                        largestSum = largestSum + i\n\
    \                    else\n                        if largestPrime < i\n     \
    \                       largestPrime = i\n                            largestSum\
    \ = largestSum + i\n                        else\n                           \
    \ if largestPrime > i\n                                largestPrime = i\n    \
    \                            largestSum = largestSum + i\n                   \
    \         else\n                                if largestPrime == i\n       \
    \                             largestPrime = i\n                             \
    \       largestSum = largestSum + i\n                                else\n  \
    \                                  if largestPrime < i\n                     \
    \                   largestPrime = i\n                                       \
    \ largestSum = largestSum + i\n                                    else\n    \
    \                                    if largestPrime > i\n                   \
    \                         largestPrime = i\n                                 \
    \           largestSum = largestSum + i\n                                    \
    \    else\n                                            if largestPrime == i\n\
    \                                                largestPrime = i\n          \
    \                                      largestSum = largestSum + i\n         \
    \                                   else\n                                   \
    \             if largestPrime < i\n                                          \
    \          largestPrime = i\n                                                \
    \    largestSum = largestSum + i\n                                           \
    \     else\n                                                    if largestPrime\
    \ > i\n                                                        largestPrime =\
    \ i\n                                                        largestSum = largestSum\
    \ + i\n                                                    else\n            \
    \                                            if largestPrime == i\n          \
    \                                                  largestPrime = i\n        \
    \                                                    largestSum = largestSum +\
    \ i\n                                                        else\n          \
    \                                                  largestPrime = 0\n        \
    \                                                    largestSum = 0\n    end\n\
    \    return largestSum\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigit\
    \ = digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigit)\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPri", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for x in lst\n\
    \        if x == largest\n            sum += largest\n        else\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns the sum of the digits in each number.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for x in lst\n        if x == largest\n\
    \            sum += largest\n        else\n            largest = primes[end]\n\
    \            sum += largest\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 0, 0])\n</cell>\n<code language=julia-", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p == largest\n            sum += lst[p]\n   \
    \     end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:100000));\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the digits of an integer.", "    \n    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    largestSum = 0\n    for x in lst\n  \
    \      if x % largestPrime == 0\n            largestSum += x % largestPrime\n\
    \        end\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    largest = findmax(lst)\n    sum = 0\n\
    \    for x in lst\n        if x == largest\n            sum += largest\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of prime numbers less than a given integer $n$. \nThe function\
    \ should take one argument, an integer $n$, and return an integer $k$, where $k$\
    \ is the number of prime numbers less than $n$.", "    \n    largest = 0\n   \
    \ largestPrime = 0\n    largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2\
    \ = 0\n    largestSumPrime3 = 0\n    largestSumPrime4 = 0\n    largestSumPrime5\
    \ = 0\n    largestSumPrime6 = 0\n    largestSumPrime7 = 0\n    largestSumPrime8\
    \ = 0\n    largestSumPrime9 = 0\n    largestSumPrime10 = 0\n    largestSumPrime11\
    \ = 0\n    largestSumPrime12 = 0\n    largestSumPrime13 = 0\n    largestSumPrime14\
    \ = 0\n    largestSumPrime15 = 0\n    largestSumPrime16 = 0\n    largestSumPrime17\
    \ = 0\n    largestSumPrime18 = 0\n    largestSumPrime19 = 0\n    largestSumPrime20\
    \ = 0\n    largestSumPrime21 = 0\n    largestSumPrime22 = 0\n    largestSumPrime23\
    \ = 0\n    largestSumPrime24 = 0\n    largestSumPrime25 = 0\n    largestSumPrime26\
    \ = 0\n    largestSumPrime27 = 0\n    largestSumPrime28 = 0\n    largestSumPrime29\
    \ = 0\n    largestSumPrime30 = 0\n    largestSumPrime31 = 0\n    largestSumPrime32\
    \ = 0\n    largestSumPrime33 = 0\n    largestSumPrime34 = 0\n    largestSumPrime35\
    \ = 0\n    largestSumPrime36 = 0\n    largestSumPrime37 = 0\n    largestSumPrime38\
    \ = 0\n    largestSumPrime39 = 0\n    largestSumPrime40 = 0\n    largestSumPrime41\
    \ = 0\n    largestSumPrime42 = 0\n    largestSumPrime43 = 0\n    largestSumPrime44\
    \ = 0\n    largestSumPrime45 = 0\n    largestSumPrime46 = 0\n    largestSumPrime47\
    \ = 0\n    largestSumPrime48 = 0\n    largestSumPrime49 = 0\n    largestSumPrime50\
    \ = 0\n    largestSumPrime51 = 0\n    largestSumPrime52 = 0\n    largestSumPrime53\
    \ = 0\n    largestSumPrime54 = 0\n    largestSumPrime55", "    \n    largest =\
    \ 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for x in lst\n      \
    \  if x == largestPrime\n            largestPrime = 0\n            largestSum\
    \ = 0\n        else\n            if largestPrime == 0\n                largestPrime\
    \ = x\n                largestSum = x\n            else\n                if x\
    \ > largestPrime\n                    largestPrime = x\n                    largestSum\
    \ = x\n                else\n                    if largestSum > x\n         \
    \               largestSum = x\n                    end\n                end\n\
    \            end\n        end\n    end\n    \n    return largestSum\nend", " \
    \   primes = primes(length(lst))\n    largest = primes[end]\n    largest = 0\n\
    \    for p in primes\n        if p > largest\n            largest = p\n      \
    \  end\n    end\n    sum = 0\n    for x in lst\n        if x == largest\n    \
    \        sum += largest\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@test skjkasdkd([2, 3, 1, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n@test skjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n@test skjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n@test skjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@test skjkasdkd([0, 81,\
    \ 12, 3, 1, 21]) == 3\n@test skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    \n    largest = Int64(0)\n\
    \    largestPrime = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex2\
    \ = Int64(0)\n    largestPrimeIndex3 = Int64(0)\n    largestPrimeIndex4 = Int64(0)\n\
    \    largestPrimeIndex5 = Int64(0)\n    largestPrimeIndex6 = Int64(0)\n    largestPrimeIndex7\
    \ = Int64(0)\n    largestPrimeIndex8 = Int64(0)\n    largestPrimeIndex9 = Int64(0)\n\
    \    largestPrimeIndex10 = Int64(0)\n    largestPrimeIndex11 = Int64(0)\n    largestPrimeIndex12\
    \ = Int64(0)\n    largestPrimeIndex13 = Int64(0)\n    largestPrimeIndex14 = Int64(0)\n\
    \    largestPrimeIndex15 = Int64(0)\n    largestPrimeIndex16 = Int64(0)\n    largestPrimeIndex17\
    \ = Int64(0)\n    largestPrimeIndex18 = Int64(0)\n    largestPrimeIndex19 = Int64(0)\n\
    \    largestPrimeIndex20 = Int64(0)\n    largestPrimeIndex21 = Int64(0)\n    largestPrimeIndex22\
    \ = Int64(0)\n    largestPrimeIndex23 = Int64(0)\n    largestPrimeIndex24 = Int64(0)\n\
    \    largestPrimeIndex25 = Int64(0)\n    largestPrimeIndex26 = Int64(0)\n    largestPrimeIndex27\
    \ = Int64(0)\n    largestPrimeIndex28 = Int64(0)\n    largestPrimeIndex29 = Int64(0)\n\
    \    largestPrimeIndex30 = Int64(0)\n    largestPrimeIndex31 = Int64(0)\n    largestPrimeIndex32\
    \ = Int64(0)\n    largestPrimeIndex33 = Int64(0)\n    largestPrimeIndex34 = Int64(0)\n\
    \    largestPrimeIndex35 = Int64(0)\n    largestPrimeIndex36 = Int64(0)\n    largestPrimeIndex37\
    \ = Int64(0)\n    largestPrimeIndex38 = Int64(0)\n    largestPrimeIndex39 = Int64(0)\n\
    \    largestPrimeIndex40 = Int64(0)\n    largestPrimeIndex41 = Int64(0)\n    largestPrimeIndex42\
    \ = Int64(0)\n    ", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = 0\n    \n    for i in lst\n        if primes[i] == largestPrime\n\
    \            largestSum += i\n        end\n    end\n    \n    return largestSum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += lst[p]\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:100));\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of prime numbers\
    \ less than a given number.", "    \n    largest = findlargest(lst)\n    largest\
    \ = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumPrime = 0\n   \
    \ largestSumPrime2 = 0\n    largestSumPrime3 = 0\n    largestSumPrime4 = 0\n \
    \   largestSumPrime5 = 0\n    largestSumPrime6 = 0\n    largestSumPrime7 = 0\n\
    \    largestSumPrime8 = 0\n    largestSumPrime9 = 0\n    largestSumPrime10 = 0\n\
    \    largestSumPrime11 = 0\n    largestSumPrime12 = 0\n    largestSumPrime13 =\
    \ 0\n    largestSumPrime14 = 0\n    largestSumPrime15 = 0\n    largestSumPrime16\
    \ = 0\n    largestSumPrime17 = 0\n    largestSumPrime18 = 0\n    largestSumPrime19\
    \ = 0\n    largestSumPrime20 = 0\n    largestSumPrime21 = 0\n    largestSumPrime22\
    \ = 0\n    largestSumPrime23 = 0\n    largestSumPrime24 = 0\n    largestSumPrime25\
    \ = 0\n    largestSumPrime26 = 0\n    largestSumPrime27 = 0\n    largestSumPrime28\
    \ = 0\n    largestSumPrime29 = 0\n    largestSumPrime30 = 0\n    largestSumPrime31\
    \ = 0\n    largestSumPrime32 = 0\n    largestSumPrime33 = 0\n    largestSumPrime34\
    \ = 0\n    largestSumPrime35 = 0\n    largestSumPrime36 = 0\n    largestSumPrime37\
    \ = 0\n    largestSumPrime38 = 0\n    largestSumPrime39 = 0\n    largestSumPrime40\
    \ = 0\n    largestSumPrime41 = 0\n    largestSumPrime42 = 0\n    largestSumPrime43\
    \ = 0\n    largestSumPrime44 = 0\n    largestSumPrime45 = 0\n    largestSumPrime46\
    \ = 0\n    largestSumPrime47 = 0\n    largestSumPrime48 = 0\n    largestSumPrime49\
    \ = 0\n    largestSumPrime50 = 0\n    largestSumPrime51 = 0\n    largestSumPrime52\
    \ = 0\n    largestSumPrime53 = 0\n    largestSumPrime54 = 0\n    largestSumPrime55",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = lar", " \
    \   \n    largest = Int.(Int64.(1))\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * lar", "    largest =\
    \ 0\n    largestPrime = 0\n    for x in lst\n        if x == largestPrime\n  \
    \          largestPrime = largestPrime + 1\n        else\n            if largestPrime\
    \ > largest\n                largestPrime = largest\n            largest = largestPrime\n\
    \            largestPrime = x\n        end\n    end\n    return largestPrime\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3", "    \n    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for el in lst\n        if el == largest\n\
    \            sum += el\n        else\n            largest = el\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,\
    \ 3, 1, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2, 3, 1, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,\
    \ 3, 1, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2, 3, 1, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,\
    \ 3, 1, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 3, 2])\n</cell>\n", " \
    \   \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigits\
    \ = digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPri", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumOfDigits = 0\n\
    \    largestSumOfDigitsOfPrimes = 0\n    largestSumOfDigitsOfPrimesOfPrimes =\
    \ 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimes = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes = 0\n  \
    \  largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes = 0\n  \
    \  largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = 0\n    largestSumOfDigitsOfPrimesOfPrimesOfPrimesOfPrimes", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for x in lst\n    \
    \    if x == largestPrime\n            largestPrime = largestPrime + 1\n     \
    \       largestSum = largestSum + x\n        else\n            if largestPrime\
    \ == 0\n                largestPrime = x\n                largestSum = x\n   \
    \         else\n                if largestPrime > x\n                    largestPrime\
    \ = x\n                    largestSum = x\n                else\n            \
    \        largestPrime = largestPrime + 1\n                    largestSum = largestSum\
    \ + x\n                end\n            end\n        end\n    end\n    return\
    \ largestSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nThe prime factors of\
    \ 13195 are 5, 7, 13 and 29.", "    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    for x in lst\n        if x == largestPrime\n            largestPrime\
    \ = 0\n            largestSum = 0\n        else\n            if largestPrime ==\
    \ 0\n                largestPrime = x\n                largestSum = x\n      \
    \      else\n                if x > largestPrime\n                    largestPrime\
    \ = x\n                    largestSum = x\n                else\n            \
    \        largestSum = largestSum + x\n                end\n            end\n \
    \       end\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for\
    \ elt in lst\n        if elt > largest\n            largest = elt\n        end\n\
    \    end\n    for elt in lst\n        if elt > largest\n            sum += elt\
    \ - largest\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise: Find the largest prime factor of a number\nThe function\
    \ prime_factors takes in a number and returns the prime factors of the number.\
    \ For example, prime_factors(12) returns [2, 3]. Your function should return the\
    \ largest prime factor of the number passed in.", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for i in primes\n\
    \        if i > largest\n            largest = i\n        end\n    end\n    \n\
    \    for i in primes\n        if i == largest\n            sum += i\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumPrime = 0\n   \
    \ largestSumPrime2 = 0\n    largestSumPrime3 = 0\n    largestSumPrime4 = 0\n \
    \   largestSumPrime5 = 0\n    largestSumPrime6 = 0\n    largestSumPrime7 = 0\n\
    \    largestSumPrime8 = 0\n    largestSumPrime9 = 0\n    largestSumPrime10 = 0\n\
    \    largestSumPrime11 = 0\n    largestSumPrime12 = 0\n    largestSumPrime13 =\
    \ 0\n    largestSumPrime14 = 0\n    largestSumPrime15 = 0\n    largestSumPrime16\
    \ = 0\n    largestSumPrime17 = 0\n    largestSumPrime18 = 0\n    largestSumPrime19\
    \ = 0\n    largestSumPrime20 = 0\n    largestSumPrime21 = 0\n    largestSumPrime22\
    \ = 0\n    largestSumPrime23 = 0\n    largestSumPrime24 = 0\n    largestSumPrime25\
    \ = 0\n    largestSumPrime26 = 0\n    largestSumPrime27 = 0\n    largestSumPrime28\
    \ = 0\n    largestSumPrime29 = 0\n    largestSumPrime30 = 0\n    largestSumPrime31\
    \ = 0\n    largestSumPrime32 = 0\n    largestSumPrime33 = 0\n    largestSumPrime34\
    \ = 0\n    largestSumPrime35 = 0\n    largestSumPrime36 = 0\n    largestSumPrime37\
    \ = 0\n    largestSumPrime38 = 0\n    largestSumPrime39 = 0\n    largestSumPrime40\
    \ = 0\n    largestSumPrime41 = 0\n    largestSumPrime42 = 0\n    largestSumPrime43\
    \ = 0\n    largestSumPrime44 = 0\n    largestSumPrime45 = 0\n    largestSumPrime46\
    \ = 0\n    largestSumPrime47 = 0\n    largestSumPrime48 = 0\n    largestSumPrime49\
    \ = 0\n    largestSumPrime50 = 0\n    largestSumPrime51 = 0\n    largestSumPrime52\
    \ = 0\n    largestSumPrime53 = 0\n    largestSumPrime54 = 0\n    largestSumPrime55",
  "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeSum\
    \ = 0\n    for x in lst\n        if x % largestPrime == 0\n            largestPrimeSum\
    \ += x % largestPrime\n        end\n    end\n    return largestPrimeSum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list of integers and returns the sum of the squares of the integers in the list.",
  "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigit2 = 0\n    largestSumDigit3 = 0\n    largestSumDigit4\
    \ = 0\n    largestSumDigit5 = 0\n    largestSumDigit6 = 0\n    largestSumDigit7\
    \ = 0\n    largestSumDigit8 = 0\n    largestSumDigit9 = 0\n    largestSumDigit10\
    \ = 0\n    largestSumDigit11 = 0\n    largestSumDigit12 = 0\n    largestSumDigit13\
    \ = 0\n    largestSumDigit14 = 0\n    largestSumDigit15 = 0\n    largestSumDigit16\
    \ = 0\n    largestSumDigit17 = 0\n    largestSumDigit18 = 0\n    largestSumDigit19\
    \ = 0\n    largestSumDigit20 = 0\n    largestSumDigit21 = 0\n    largestSumDigit22\
    \ = 0\n    largestSumDigit23 = 0\n    largestSumDigit24 = 0\n    largestSumDigit25\
    \ = 0\n    largestSumDigit26 = 0\n    largestSumDigit27 = 0\n    largestSumDigit28\
    \ = 0\n    largestSumDigit29 = 0\n    largestSumDigit30 = 0\n    largestSumDigit31\
    \ = 0\n    largestSumDigit32 = 0\n    largestSumDigit33 = 0\n    largestSumDigit34\
    \ = 0\n    largestSumDigit35 = 0\n    largestSumDigit36 = 0\n    largestSumDigit37\
    \ = 0\n    largestSumDigit38 = 0\n    largestSumDigit39 = 0\n    largestSumDigit40\
    \ = 0\n    largestSumDigit41 = 0\n    largestSumDigit42 = 0\n    largestSumDigit43\
    \ = 0\n    largestSumDigit44 = 0\n    largestSumDigit45 = 0\n    largestSumDigit46\
    \ = 0\n    largestSumDigit47 = 0\n    largestSumDigit48 = 0\n    largestSumDigit49\
    \ = 0\n    largestSumDigit50 = 0\n    largestSumDigit51 = 0\n    largestSumDigit52\
    \ = 0\n    largestSumDigit53 = 0\n    largestSumDigit54 = 0\n    largestSumDigit55\
    \ = 0\n    largestSumDigit56 = 0\n    largestSumDigit57 = 0\n    largestSumDigit58\
    \ = 0\n    largestSumDigit59 = 0\n    largestSumDigit60 = 0\n    largestSumDigit61\
    \ = 0\n    largestSumDigit", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n   \
    \ largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = lar",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the number of integers in the vector that are divisible by 3.",
  "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    \n    primes\
    \ = primes(lst)\n    largest = primes[end]\n    sum = 0\n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    for\
    \ p in primes\n        if p == largest\n            sum += p\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>",
  "    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    for i in lst\n \
    \       if isPrime(i)\n            if i > largestPrime\n                largestPrime\
    \ = i\n                largestSum = 0\n            largestSum += i\n        end\n\
    \    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.0>\nskjkasdkd([2,\
    \ 3, 5, 7, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the digits of an integer.", "    largest = 0\n    largestPrime =\
    \ 0\n    largestSum = 0\n    for x in lst\n        if x == largestPrime\n    \
    \        largestPrime = 0\n            largestSum = 0\n        else\n        \
    \    if largestPrime == 0\n                largestPrime = x\n                largestSum\
    \ = x\n            else\n                if x > largestPrime\n               \
    \     largestPrime = x\n                    largestSum = x\n                else\n\
    \                    largestSum = largestSum + x\n                end\n      \
    \      end\n        end\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    sum = 0\n    for p in primes\n\
    \        if p == largest\n            sum += lst[p]\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,\
    \ 3, 2, 7, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 2, 7,\
    \ 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 2, 7, 3, 2])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 2, 7, 3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2, 3, 2, 7, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2, 3, 2, 7, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,\
    \ 3, 2, 7, 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 2, 7,\
    \ 3, 2])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 2, 7, 3, 2])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 2, 7, 3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2, 3, 2, 7, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2, 3, 2, ", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = 0\n    for x in lst\n        if x % largestPrime == 0\n    \
    \        largestSum += x % largestPrime\n        end\n    end\n    return largestSum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nWrite a function that takes a vector\
    \ of integers and returns the number of unique elements in the vector.", "   \
    \ primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = lar", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = 0\n    for el in lst\n        if el == largest\n           \
    \ largestSum = largestSum + el\n        elseif el == largestPrime\n          \
    \  largestSum = largestSum + el\n        else\n            largestSum = largestSum\
    \ + el % largestPrime\n        end\n    end\n    return largestSum\nend", "  \
    \  \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumPrime\
    \ = 0\n    largestSumPrime2 = 0\n    largestSumPrime3 = 0\n    largestSumPrime4\
    \ = 0\n    largestSumPrime5 = 0\n    largestSumPrime6 = 0\n    largestSumPrime7\
    \ = 0\n    largestSumPrime8 = 0\n    largestSumPrime9 = 0\n    largestSumPrime10\
    \ = 0\n    largestSumPrime11 = 0\n    largestSumPrime12 = 0\n    largestSumPrime13\
    \ = 0\n    largestSumPrime14 = 0\n    largestSumPrime15 = 0\n    largestSumPrime16\
    \ = 0\n    largestSumPrime17 = 0\n    largestSumPrime18 = 0\n    largestSumPrime19\
    \ = 0\n    largestSumPrime20 = 0\n    largestSumPrime21 = 0\n    largestSumPrime22\
    \ = 0\n    largestSumPrime23 = 0\n    largestSumPrime24 = 0\n    largestSumPrime25\
    \ = 0\n    largestSumPrime26 = 0\n    largestSumPrime27 = 0\n    largestSumPrime28\
    \ = 0\n    largestSumPrime29 = 0\n    largestSumPrime30 = 0\n    largestSumPrime31\
    \ = 0\n    largestSumPrime32 = 0\n    largestSumPrime33 = 0\n    largestSumPrime34\
    \ = 0\n    largestSumPrime35 = 0\n    largestSumPrime36 = 0\n    largestSumPrime37\
    \ = 0\n    largestSumPrime38 = 0\n    largestSumPrime39 = 0\n    largestSumPrime40\
    \ = 0\n    largestSumPrime41 = 0\n    largestSumPrime42 = 0\n    largestSumPrime43\
    \ = 0\n    largestSumPrime44 = 0\n    largestSumPrime45 = 0\n    largestSumPrime46\
    \ = 0\n    largestSumPrime47 = 0\n    largestSumPrime48 = 0\n    largestSumPrime49\
    \ = 0\n    largestSumPrime50 = 0\n    largestSumPrime51 = 0\n    largestSumPrime52\
    \ = 0\n    largestSumPrime53 = 0\n    largestSumPrime54 = 0\n    largestSumPrime55",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for elt in lst\n        if elt > largest\n           \
    \ largest = elt\n        end\n    end\n    \n    for elt in lst\n        if elt\
    \ == largest\n            sum += elt\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestPrimeIndex = 0\n    largestSum = 0\n    \n    for index in 1:length(lst)\n\
    \        \n        current = lst[index]\n        \n        if current == largestPrime\n\
    \            largestPrimeIndex += 1\n            largestPrime = current\n    \
    \        largestSum = 0\n        else\n            largestPrimeIndex = 0\n   \
    \     end\n        \n        if current > largestPrime\n            largestPrime\
    \ = current\n            largestSum = 0\n        end\n        \n        largestSum\
    \ += current\n    end\n    \n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    \n    primes = primes(lst)\n    \n\
    \    largest = primes[end]\n    \n    sum = 0\n    \n    for i in primes\n   \
    \     if i == largest\n            sum += i\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7,\
    \ 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list of integers and returns the sum of the squares of the integers in the list.",
  "    largest = minimum(lst)\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest", "    primes = primes(lst)\n    largest = primes[end]\n    largest\
    \ = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = 0\n    for x in lst\n        if x %\
    \ largest == 0\n            largest = x\n        end\n    end\n    return sum(map(x\
    \ -> x % largest, lst))\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, ", "    \n    largest = 0\n    largestPrime = 0\n\
    \    largestSum = 0\n    largestSumDigit = 0\n    largestSumDigit2 = 0\n    largestSumDigit3\
    \ = 0\n    largestSumDigit4 = 0\n    largestSumDigit5 = 0\n    largestSumDigit6\
    \ = 0\n    largestSumDigit7 = 0\n    largestSumDigit8 = 0\n    largestSumDigit9\
    \ = 0\n    largestSumDigit10 = 0\n    largestSumDigit11 = 0\n    largestSumDigit12\
    \ = 0\n    largestSumDigit13 = 0\n    largestSumDigit14 = 0\n    largestSumDigit15\
    \ = 0\n    largestSumDigit16 = 0\n    largestSumDigit17 = 0\n    largestSumDigit18\
    \ = 0\n    largestSumDigit19 = 0\n    largestSumDigit20 = 0\n    largestSumDigit21\
    \ = 0\n    largestSumDigit22 = 0\n    largestSumDigit23 = 0\n    largestSumDigit24\
    \ = 0\n    largestSumDigit25 = 0\n    largestSumDigit26 = 0\n    largestSumDigit27\
    \ = 0\n    largestSumDigit28 = 0\n    largestSumDigit29 = 0\n    largestSumDigit30\
    \ = 0\n    largestSumDigit31 = 0\n    largestSumDigit32 = 0\n    largestSumDigit33\
    \ = 0\n    largestSumDigit34 = 0\n    largestSumDigit35 = 0\n    largestSumDigit36\
    \ = 0\n    largestSumDigit37 = 0\n    largestSumDigit38 = 0\n    largestSumDigit39\
    \ = 0\n    largestSumDigit40 = 0\n    largestSumDigit41 = 0\n    largestSumDigit42\
    \ = 0\n    largestSumDigit43 = 0\n    largestSumDigit44 = 0\n    largestSumDigit45\
    \ = 0\n    largestSumDigit46 = 0\n    largestSumDigit47 = 0\n    largestSumDigit48\
    \ = 0\n    largestSumDigit49 = 0\n    largestSumDigit50 = 0\n    largestSumDigit51\
    \ = 0\n    largestSumDigit52 = 0\n    largestSumDigit53 = 0\n    largestSumDigit54\
    \ = 0\n    largestSumDigit55 = 0\n    largestSumDigit56 = 0\n    largestSumDigit57\
    \ = 0\n    largestSumDigit58 = 0\n    largestSumDigit59 = 0\n    largestSumDigit60\
    \ = 0\n    largestSumDigit61 = 0\n    largestSumDigit", "    \n    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    largestPrimeDigits = digits[largestPrime]\n\
    \    largestPrimeDigitSum = sum(largestPrimeDigits)\n    return largestPrimeDigitSum\n\
    end", "    \n    largest = Int64(0)\n    largestPrime = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    lar", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        end\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, ", "    \n    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    largestSum = 0\n    for elt in lst\n        if elt >\
    \ largest\n            largestPrime = primes[elt]\n            largestSum = 0\n\
    \        end\n        if elt == largestPrime\n            largestSum += elt\n\
    \        end\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    largest = minimum(lst)\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest", "    primes = primes(length(lst))\n    largest\
    \ = 0\n    for p in primes\n        if lst .contains p\n            largest =\
    \ p\n            break\n        end\n    end\n    return sum(lst .- largest)\n\
    end\n</cell>\n<code language=julia-1.0>\nskjkasdkd([2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += lst[p]\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    primes = primes(lst)\n  \
    \  \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p > largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = lar", "    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    for x in lst\n        if x == largestPrime\n  \
    \          largestPrime = 0\n            largestSum = 0\n        else\n      \
    \      if largestPrime == 0\n                largestPrime = x\n              \
    \  largestSum = x\n            else\n                if x > largestPrime\n   \
    \                 largestPrime = x\n                    largestSum = x\n     \
    \           else\n                    largestSum = largestSum + x\n          \
    \      end\n            end\n        end\n    end\n    return largestSum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nThe prime factors of 13195 are\
    \ 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143\
    \ ?", "    primes = primes(length(lst))\n    largest = primes[end]\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = lar", "    largest = findmax(lst)\n    largest = largest[1]\n    largest =\
    \ largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]", "    \n    largest = lst[1]\n    largestPrime\
    \ = primes[largest]\n    largestPrimeDigit = digits[largestPrime]\n    largestPrimeDigitSum\
    \ = 0\n    for element in lst[2:end]\n        element = digits[element]\n    \
    \    elementDigitSum = 0\n        for digit in element\n            elementDigitSum\
    \ += digits[digit]\n        if elementDigitSum > largestPrimeDigitSum\n      \
    \      largestPrimeDigitSum = elementDigitSum\n            largestPrime = element\n\
    \        end\n    end\n    return largestPrimeDigitSum + largestPrime\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    largest = 0\n    largestPrime = 0\n   \
    \ largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    largest = minimum(lst)\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = lar", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n\
    \    largestSumPrime3 = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n\
    \    largestSumPrime6 = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n\
    \    largestSumPrime9 = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 =\
    \ 0\n    largestSumPrime12 = 0\n    largestSumPrime13 = 0\n    largestSumPrime14\
    \ = 0\n    largestSumPrime15 = 0\n    largestSumPrime16 = 0\n    largestSumPrime17\
    \ = 0\n    largestSumPrime18 = 0\n    largestSumPrime19 = 0\n    largestSumPrime20\
    \ = 0\n    largestSumPrime21 = 0\n    largestSumPrime22 = 0\n    largestSumPrime23\
    \ = 0\n    largestSumPrime24 = 0\n    largestSumPrime25 = 0\n    largestSumPrime26\
    \ = 0\n    largestSumPrime27 = 0\n    largestSumPrime28 = 0\n    largestSumPrime29\
    \ = 0\n    largestSumPrime30 = 0\n    largestSumPrime31 = 0\n    largestSumPrime32\
    \ = 0\n    largestSumPrime33 = 0\n    largestSumPrime34 = 0\n    largestSumPrime35\
    \ = 0\n    largestSumPrime36 = 0\n    largestSumPrime37 = 0\n    largestSumPrime38\
    \ = 0\n    largestSumPrime39 = 0\n    largestSumPrime40 = 0\n    largestSumPrime41\
    \ = 0\n    largestSumPrime42 = 0\n    largestSumPrime43 = 0\n    largestSumPrime44\
    \ = 0\n    largestSumPrime45 = 0\n    largestSumPrime46 = 0\n    largestSumPrime47\
    \ = 0\n    largestSumPrime48 = 0\n    largestSumPrime49 = 0\n    largestSumPrime50\
    \ = 0\n    largestSumPrime51 = 0\n    largestSumPrime52 = 0\n    largestSumPrime53\
    \ = 0\n    largestSumPrime54 = 0\n    largestSumPrime55", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = lar",
  "    \n    largest = Int.(max(lst))\n    largestPrime = Int.(largest)\n    largestPrimePrime\
    \ = Int.(largestPrime)\n    largestPrimePrimePrime = Int.(largestPrimePrime)\n\
    \    largestPrimePrimePrimePrime = Int.(largestPrimePrimePrime)\n    largestPrimePrimePrimePrimePrime\
    \ = Int.(largestPrimePrimePrimePrime)\n    largestPrimePrimePrimePrimePrimePrime\
    \ = Int.(largestPrimePrimePrimePrimePrime)\n    largestPrimePrimePrimePrimePrimePrime\
    \ = Int.(largestPrimePrimePrimePrimePrimePrime)\n    largestPrimePrimePrimePrimePrimePrimePrime\
    \ = Int.(largestPrimePrimePrimePrimePrimePrimePrimePrime)\n    largestPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Int.(largestPrimePrimePrimePrimePrimePrimePrimePrimePrime)\n    largestPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Int.(largestPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime)\n    largestPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = Int.(largestPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime)\n   \
    \ largestPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = Int.(largestPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime)\n\
    \    largestPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = Int.(largestPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime)\n\
    \    largestPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = Int.(largestPri",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for el in lst\n        if el == largest\n            sum\
    \ += el\n        else\n            largest = el\n        end\n    end\n    \n\
    \    return sum\nend", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestPrimeSum = 0\n    for x in lst\n        if x % largestPrime == 0\n\
    \            largestPrimeSum += x % largestPrime\n        end\n    end\n    return\
    \ largestPrimeSum\nend\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.3>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.3>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, ", "    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    for x in lst\n        if x == largestPrime\n            largestPrime\
    \ = 0\n            largestSum = 0\n        else\n            if largestPrime ==\
    \ 0\n                largestPrime = x\n                largestSum = x\n      \
    \      else\n                if largestPrime > x\n                    largestPrime\
    \ = x\n                    largestSum = x\n                end\n            end\n\
    \        end\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestSum\
    \ = sum(digits[largestPrime])\n    \n    for i in lst\n        if primes[i] ==\
    \ largestPrime\n            largestSum += digits[largestPrime][i]\n        end\n\
    \    end\n    \n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the number of prime numbers less than a given integer n.", "    \n \
    \   primes = primes(length(lst))\n    \n    largest = 0\n    \n    for p in primes\n\
    \        if lst .contains p\n            largest = p\n            break\n    \
    \    end\n    end\n    \n    sum = 0\n    for n in lst\n        if n == largest\n\
    \            sum += n\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    primes = primes(length(lst))\n    \n    largest = 0\n    largestPrime = 0\n\
    \    largestSum = 0\n    \n    for prime in primes\n        \n        sum = 0\n\
    \        \n        for element in lst\n            if element % prime == 0\n \
    \               sum += element\n            end\n        end\n        \n     \
    \   if sum > largestSum\n            largestSum = sum\n            largestPrime\
    \ = prime\n            largest = prime\n        end\n    end\n    \n    return\
    \ largestSum + largestPrime\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a vector of integers and returns the number of positive integers less\
    \ than or equal to each of the integers in the vector.", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p != largest\n            if p % largest == 0\n\
    \                sum += p\n            end\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:1000000000));\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers and\
    \ returns the number of unique prime numbers less than or equal to the length\
    \ of the vector.", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n      \
    \      largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p != largest\n            if p % largest == 0\n                sum += p\n  \
    \          end\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the number of unique prime numbers less than or equal to the given number.",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for i in primes\n        if lst .contains i\n        \
    \    sum += i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector.", "    \n    primes\
    \ = primes(length(lst))\n    \n    largest = 0\n    \n    for p in primes\n  \
    \      if lst .contains p\n            largest = largest+p\n        end\n    end\n\
    \    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,", "    \n    largest = 0\n \
    \   largestPrime = 0\n    largestSum = 0\n    largestSumDigit = 0\n    \n    for\
    \ x in lst\n        if x == largestPrime\n            largestPrime = 0\n     \
    \       largestSumDigit = 0\n            largestSum = 0\n            largest =\
    \ largestPrime\n        else\n            if largestPrime == 0\n             \
    \   largestPrime = x\n                largestSumDigit = 0\n                largestSum\
    \ = x\n            else\n                if largestPrime == x\n              \
    \      largestPrime = x\n                    largestSumDigit += 1\n          \
    \      else\n                    if largestSumDigit == largestSumDigit\n     \
    \                   largestSum = largestSum + largestPrime\n                 \
    \       largestPrime = 0\n                        largestSumDigit = 0\n      \
    \              else\n                        largestPrime = x\n              \
    \          largestSumDigit = 1\n                        largestSum = x\n     \
    \           end\n            end\n        end\n    end\n    \n    return largestSum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ list of integers and returns the sum of the squares of the integers in the list.",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p == largest\n\
    \            sum += lst[p]\n        end\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,\
    \ 10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,\
    \ 10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<code language=julia-1.5",
  "    \n    largest = findlargest(lst)\n    largest = largest.largest\n    largest\
    \ = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest\n    largest = largest.largest\n    largest = largest.largest\n\
    \    largest = largest.largest", "    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    largestPrimeDigits = digits[largestPrime]\n    largestPrimeDigitSum\
    \ = sum(largestPrimeDigits)\n    return largestPrimeDigitSum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise: Find the largest prime factor of a number", "    \n\
    \    primes = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    for p in primes\n        if p > largest\n            largest = p\n      \
    \  end\n    end\n    \n    for p in primes\n        if p > largest\n         \
    \   sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number n.", "    primes = primes(length(lst))\n  \
    \  largest = primes[end]\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = lar", "    \n    primes = primes(lst)\n \
    \   \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p > largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,\
    \ 7, 2, 7, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7,\
    \ 3, 7, 3, 7, 3, ", "    largest = 0\n    largestPrime = 0\n    largestSum = 0\n\
    \    for x in lst\n        if x == largestPrime\n            largestPrime = largestPrime\
    \ + x\n            largestSum = largestSum + x\n        else\n            if largestPrime\
    \ == 0\n                largestPrime = x\n                largestSum = x\n   \
    \         else\n                if largestPrime > x\n                    largestPrime\
    \ = x\n                    largestSum = x\n                end\n            end\n\
    \        end\n    end\n    return largestSum\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>", "    \n    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    largestPrimeDigits = digits[largestPrime]\n    largestPrimeDigitSum\
    \ = sum(largestPrimeDigits)\n    \n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    \n    return largestPrimeDigitSum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\
    What is the largest prime factor of the number 600851475143 ?", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = lar", "    \n    largest = 0\n   \
    \ largestPrime = 0\n    largestSum = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    lar", "    \n  \
    \  largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigit\
    \ = digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigit)\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPri", "    largest =\
    \ Int.(minimum(lst))\n    largest = largest * largest\n    largest = largest *\
    \ largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n", "    \n    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigits =\
    \ digits[largestPrime]\n    largestPrimeDigitSum = 0\n    for digit in largestPrimeDigits\n\
    \        largestPrimeDigitSum += digit\n    end\n    return largestPrimeDigitSum\n\
    end\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.3>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nA perfect number is a number for\
    \ which the sum of its proper divisors is exactly equal to the number. For example,\
    \ the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which\
    \ means that 28 is a perfect number.", "    \n    primes = Primes(lst)\n    largest\
    \ = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n  \
    \          largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p <= largest\n            sum += p\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkas", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    largest = 0\n    for p in\
    \ primes\n        if p > largest\n            largest = p\n        end\n    end\n\
    \    sum = 0\n    for p in primes\n        if p == largest\n            sum +=\
    \ lst[p]\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a vector of integers and returns the number of unique elements in\
    \ the vector.", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = lar", "    primes = primes(length(lst))\n\
    \    largest = 0\n    for p in primes\n        if lst.contains(p)\n          \
    \  largest = largest+p\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    lar", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for elt in lst\n\
    \        if elt > largest\n            largest = elt\n        end\n    end\n \
    \   \n    for elt in lst\n        if elt == largest\n            sum += elt\n\
    \        end\n    end\n    \n    return sum\nend", "    \n    largest = Int.(max(lst))\n\
    \    largestPrime = Int.(primes[largest])\n    largestPrimeDigit = Int.(digits[largestPrime])\n\
    \    largestPrimeDigitSum = Int.(digits[largestPrime])\n    \n    for element\
    \ in lst\n        if element == largest\n            return largestPrimeDigitSum\n\
    \        elseif element == largestPrime\n            largestPrimeDigitSum += largestPrimeDigit\n\
    \        else\n            largestPrimeDigit = Int.(digits[element])\n       \
    \     largestPrimeDigitSum = Int.(digits[largestPrime])\n        end\n    end\n\
    \    \n    return largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nThe prime factors of 13195 are 5, 7, 13 and 29.",
  "    primes = primes(lst)\n    largest = primes[end]\n    sum = 0\n    for p in\
    \ primes\n        if p > largest\n            largest = p\n        end\n    end\n\
    \    for p in primes\n        if p > largest\n            sum += p - largest\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    \n    primes\
    \ = primes(length(lst))\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    \n    for i in lst\n        if i == largest\n            sum += i\n     \
    \   else\n            largest = primes[end]\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time sk", "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n\
    \    largestSumDigit = 0\n    largestSumDigit2 = 0\n    largestSumDigit3 = 0\n\
    \    largestSumDigit4 = 0\n    largestSumDigit5 = 0\n    largestSumDigit6 = 0\n\
    \    largestSumDigit7 = 0\n    largestSumDigit8 = 0\n    largestSumDigit9 = 0\n\
    \    largestSumDigit10 = 0\n    largestSumDigit11 = 0\n    largestSumDigit12 =\
    \ 0\n    largestSumDigit13 = 0\n    largestSumDigit14 = 0\n    largestSumDigit15\
    \ = 0\n    largestSumDigit16 = 0\n    largestSumDigit17 = 0\n    largestSumDigit18\
    \ = 0\n    largestSumDigit19 = 0\n    largestSumDigit20 = 0\n    largestSumDigit21\
    \ = 0\n    largestSumDigit22 = 0\n    largestSumDigit23 = 0\n    largestSumDigit24\
    \ = 0\n    largestSumDigit25 = 0\n    largestSumDigit26 = 0\n    largestSumDigit27\
    \ = 0\n    largestSumDigit28 = 0\n    largestSumDigit29 = 0\n    largestSumDigit30\
    \ = 0\n    largestSumDigit31 = 0\n    largestSumDigit32 = 0\n    largestSumDigit33\
    \ = 0\n    largestSumDigit34 = 0\n    largestSumDigit35 = 0\n    largestSumDigit36\
    \ = 0\n    largestSumDigit37 = 0\n    largestSumDigit38 = 0\n    largestSumDigit39\
    \ = 0\n    largestSumDigit40 = 0\n    largestSumDigit41 = 0\n    largestSumDigit42\
    \ = 0\n    largestSumDigit43 = 0\n    largestSumDigit44 = 0\n    largestSumDigit45\
    \ = 0\n    largestSumDigit46 = 0\n    largestSumDigit47 = 0\n    largestSumDigit48\
    \ = 0\n    largestSumDigit49 = 0\n    largestSumDigit50 = 0\n    largestSumDigit51\
    \ = 0\n    largestSumDigit52 = 0\n    largestSumDigit53 = 0\n    largestSumDigit54\
    \ = 0\n    largestSumDigit55 = 0\n    largestSumDigit56 = 0\n    largestSumDigit57\
    \ = 0\n    largestSumDigit58 = 0\n    largestSumDigit59 = 0\n    largestSumDigit60\
    \ = 0\n    largestSumDigit61 = 0\n    largestSumDigit", "    largest = minimum(lst)\n\
    \    largestPrime = primes[largest]\n    largestSum = sum(digits[largestPrime])\n\
    \    for elt in lst\n        if elt < largest\n            largestPrime = primes[elt]\n\
    \            largestSum = sum(digits[largestPrime])\n        else\n          \
    \  break\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.0>\n\
    @time skjkasdkd(rand(1:10000000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that will find the largest prime factor of a given integer. \nThe function should\
    \ return -1 if the integer is negative.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for i in primes\n\
    \        if lst[i] > largest\n            largest = lst[i]\n        end\n    end\n\
    \    \n    for i in primes\n        if lst[i] <= largest\n            sum += lst[i]\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000, 10000));\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the sum of the digits of an integer.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = 0\n    for p in primes\n        if p\
    \ > largest\n            largest = p\n        end\n    end\n    sum = 0\n    for\
    \ x in lst\n        if x == largest\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for x in lst\n\
    \        if x % largest == 0\n            sum += largest\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, ", "    \n    largest = lst[1]\n    largestPrime\
    \ = primes[largest]\n    largestPrimeDigit = digits[largestPrime]\n    largestPrimeDigitSum\
    \ = sum(largestPrimeDigit)\n    \n    for elt in lst[2:end]\n        \n      \
    \  prime = primes[elt]\n        primeDigit = digits[prime]\n        primeDigitSum\
    \ = sum(primeDigit)\n        \n        if primeDigitSum > largestPrimeDigitSum\n\
    \            largestPrime = prime\n            largestPrimeDigit = primeDigit\n\
    \            largestPrimeDigitSum = primeDigitSum\n        end\n    end\n    \n\
    \    return largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise: Find the largest prime\
    \ factor of a number\nThe prime factors of a number are all the numbers that divide\
    \ it other than itself.", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    primes\
    \ = primes(lst)\n    largest = primes[end]\n    sum = 0\n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    for\
    \ p in primes\n        if p <= largest\n            sum += p\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of prime numbers less than a given number. \nThe function\
    \ should take one argument, x, and return a number.", "    \n    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for n in lst\n        if n <= largest\n\
    \            sum += n\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector.", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = lar", "    \n    primes = primes(lst)\n    \n\
    \    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n   \
    \     if p > largest\n            largest = p\n        end\n    end\n    \n  \
    \  for p in primes\n        if p <= largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    sum = 0\n    for x in lst\n        if x % largest == 0\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n      \
    \      largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p > largest\n            sum += p\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of prime numbers\
    \ less than a given integer $n$. \nThe function should take one argument, an integer\
    \ $n$, and return an integer $n$. \nThe function should return $n$ if $n$ is prime.",
  "    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    for x in lst\n \
    \       if x == largestPrime\n            largestPrime = largestPrime + 1\n  \
    \      else\n            if largestPrime == 0\n                largestPrime =\
    \ 1\n            largestPrime = largestPrime - 1\n            if largestPrime\
    \ > largest\n                largest = largestPrime\n                largestSum\
    \ = largestPrime\n            else\n                largestPrime = largestPrime\
    \ + 1\n            end\n        end\n    end\n    return largestSum\nend\n</cell>\n\
    <code language=julia-1.0>", "    \n    primes = primes(length(lst))\n    \n  \
    \  largest = primes[end]\n    \n    sum = 0\n    \n    for elt in lst\n      \
    \  if elt > largest\n            largest = elt\n        end\n    end\n    \n \
    \   for elt in lst\n        if elt == largest\n            sum += elt\n      \
    \  end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of prime numbers less than a given integer $n$. \nThe\
    \ function should take $n$ as an argument and return a number.", "    \n    primes\
    \ = primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n    \n  \
    \  for p in primes\n        if p > largest\n            largest = p\n        end\n\
    \    end\n    \n    for p in primes\n        if p > largest\n            sum +=\
    \ p\n        end\n    end\n    \n    return sum\nend", "    \n    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for x in lst\n        if x % largest\
    \ == 0\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the digits of an integer.",
  "    \n    primes = primes(lst)\n    largest = primes[end]\n    sum = 0\n    for\
    \ p in primes\n        if p > largest\n            largest = p\n        end\n\
    \    end\n    for p in primes\n        if p == largest\n            sum += p\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestPrimeIndex = 0\n    largestPrimeDigit = 0\n    largestPrimeDigitIndex\
    \ = 0\n    largestPrimeDigitSum = 0\n    largestPrimeDigitSumIndex = 0\n    \n\
    \    for x in lst\n        if x == largestPrime\n            largestPrimeDigitSum\
    \ += largestPrimeDigit\n            largestPrimeDigitSumIndex += 1\n         \
    \   if largestPrimeDigitSumIndex > largestPrimeDigitIndex\n                largestPrimeDigitSumIndex\
    \ = 0\n                largestPrimeDigitIndex += 1\n            end\n        else\n\
    \            if largestPrimeIndex == largestPrimeDigitIndex\n                largestPrimeIndex\
    \ += 1\n                largestPrimeDigitIndex += 1\n                largestPrimeDigitSum\
    \ = 0\n                largestPrimeDigitSumIndex = 0\n            end\n      \
    \      largestPrimeDigit = x % 10\n            if largestPrime == 0\n        \
    \        largestPrime = largestPrimeDigit\n                largestPrimeIndex =\
    \ largestPrimeDigitIndex\n                largestPrimeDigitSum = largestPrimeDigitSum\n\
    \                largestPrimeDigitSumIndex = largestPrimeDigitSumIndex\n     \
    \       end\n        end\n    end\n    return largestPrimeDigitSum + largestPrimeDigit\n\
    end\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime numbers less than a given number.", "    \n    largest =\
    \ 0\n    largestPrime = 0\n    largestPrimeIndex = 0\n    largestSum = 0\n   \
    \ largestSumIndex = 0\n    \n    for index in 1:length(lst)\n        \n      \
    \  prime = primeFactors(lst[index])[1]\n        \n        if prime > largestPrime\n\
    \            largestPrime = prime\n            largestPrimeIndex = index\n   \
    \     end\n        \n        sum = lst[index]\n        \n        if sum > largestSum\n\
    \            largestSum = sum\n            largestSumIndex = index\n        end\n\
    \    end\n    \n    largestPrime = primeFactors(lst[largestPrimeIndex])[1]\n \
    \   largestSum = lst[largestSumIndex]\n    \n    return largestPrime + largestSum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ list of integers and returns the sum of the squares of the integers in the list.",
  "    \n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64", "    \n    primes = primes(lst)\n    \n  \
    \  largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n     \
    \   if p > largest\n            largest = p\n        end\n    end\n    \n    for\
    \ p in primes\n        if p != largest\n            sum += digits(p)[end]\n  \
    \      end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    @time skjkasdkd(rand(1:1000000))\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    lar", "    \n    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest", "    \n    primes = primes(lst)\n    \n \
    \   largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n    \
    \    if p > largest\n            largest = p\n        end\n    end\n    \n   \
    \ for p in primes\n        if p > largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:100000));\n</cell>\n<text>\nExercise: Find the largest prime\
    \ factor of a number\nWrite a function that returns the largest prime factor of\
    \ a number. For example, if the number is 12, the largest prime factor is 2. Your\
    \ function should return the largest prime factor of the number as an integer.\
    \ Your function should work for any positive integer.", "    largest = 0\n   \
    \ largestPrime = 0\n    for x in lst\n        if x == largestPrime\n         \
    \   largestPrime = largestPrime + 1\n        else\n            if largestPrime\
    \ == 0\n                largestPrime = x\n            else\n                if\
    \ largestPrime > x\n                    largestPrime = x\n                end\n\
    \            end\n        end\n    end\n    return largestPrime\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    largest = 0\n    largestPrime = 0\n   \
    \ largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    sum = 0\n    for el in lst\n        if el == largest\n  \
    \          sum += el\n        else\n            largest = el\n        end\n  \
    \  end\n    return sum\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for\
    \ your answer. Could you please explain why you use Vector{Int64}? I thought that\
    \ Vector{Int} would work too.\n<|/ c |>\n<| c |>\n`Vector{Int}` is an alias for\
    \ `Vector{Int64}`. `Vector{Int}` is just an alias for `Vector{Int64}`.\n<|/ c\
    \ |>\n<| c |>\nThanks for your explanation. Could you please explain why you use\
    \ Vector{Int64}? I thought that Vector{Int} would work too.\n<|/ c |>\n<| c |>\n\
    `Vector{Int}` is an alias for `Vector{Int64}`. `Vector{Int}` is just an alias\
    \ for `Vector{Int64}`.\n<|/ c |>\n<| c |>\nThanks for your explanation. Could\
    \ you please explain why you use Vector{Int64}? I thought that Vector{Int} would\
    \ work too.\n<|/ c |>\n<| a dscore=1 |>\nThe other answers here are great, but\
    \ I thought I'd add my own solution as well. \n<code>", "    \n    primes = Primes(lst)\n\
    \    largest = primes[end]\n    largest.sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    lar", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    sum = 0\n    for el in lst\n        if el == largest\n            sum +=\
    \ el\n        else\n            largest = el\n            sum += largest\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2,\
    \ 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83,\
    \ 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    \n    largest = 0\n   \
    \ largestPrime = 0\n    largestSum = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    lar", "    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestSum = 0\n   \
    \ for x in lst\n        if x % largestPrime == 0\n            largestSum += x\
    \ % largestPrime\n        end\n    end\n    return largestSum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2, 3, 1, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
    \ 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 1, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 510", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    sum = 0\n    for n in lst\n        if n <= largest\n      \
    \      sum += n\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    \n    largest = 0\n   \
    \ largestPrime = 0\n    largestSum = 0\n    largestSumDigit = 0\n    largestSumDigit2\
    \ = 0\n    largestSumDigit3 = 0\n    largestSumDigit4 = 0\n    largestSumDigit5\
    \ = 0\n    largestSumDigit6 = 0\n    largestSumDigit7 = 0\n    largestSumDigit8\
    \ = 0\n    largestSumDigit9 = 0\n    largestSumDigit10 = 0\n    largestSumDigit11\
    \ = 0\n    largestSumDigit12 = 0\n    largestSumDigit13 = 0\n    largestSumDigit14\
    \ = 0\n    largestSumDigit15 = 0\n    largestSumDigit16 = 0\n    largestSumDigit17\
    \ = 0\n    largestSumDigit18 = 0\n    largestSumDigit19 = 0\n    largestSumDigit20\
    \ = 0\n    largestSumDigit21 = 0\n    largestSumDigit22 = 0\n    largestSumDigit23\
    \ = 0\n    largestSumDigit24 = 0\n    largestSumDigit25 = 0\n    largestSumDigit26\
    \ = 0\n    largestSumDigit27 = 0\n    largestSumDigit28 = 0\n    largestSumDigit29\
    \ = 0\n    largestSumDigit30 = 0\n    largestSumDigit31 = 0\n    largestSumDigit32\
    \ = 0\n    largestSumDigit33 = 0\n    largestSumDigit34 = 0\n    largestSumDigit35\
    \ = 0\n    largestSumDigit36 = 0\n    largestSumDigit37 = 0\n    largestSumDigit38\
    \ = 0\n    largestSumDigit39 = 0\n    largestSumDigit40 = 0\n    largestSumDigit41\
    \ = 0\n    largestSumDigit42 = 0\n    largestSumDigit43 = 0\n    largestSumDigit44\
    \ = 0\n    largestSumDigit45 = 0\n    largestSumDigit46 = 0\n    largestSumDigit47\
    \ = 0\n    largestSumDigit48 = 0\n    largestSumDigit49 = 0\n    largestSumDigit50\
    \ = 0\n    largestSumDigit51 = 0\n    largestSumDigit52 = 0\n    largestSumDigit53\
    \ = 0\n    largestSumDigit54 = 0\n    largestSumDigit55 = 0\n    largestSumDigit56\
    \ = 0\n    largestSumDigit57 = 0\n    largestSumDigit58 = 0\n    largestSumDigit59\
    \ = 0\n    largestSumDigit60 = 0\n    largestSumDigit61 = 0\n    largestSumDigit",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = lar", "    \n    largest = findlargest(lst)\n    sum = 0\n    for\
    \ i in lst\n        if i==largest\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of prime numbers less than a given integer n.", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = lar", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    \n    for p in primes\n        if p > largest\n\
    \            sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:100000));\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = lar",
  "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigitPrime = 0\n    largestSumDigitPrimeDigit = 0\n    largestSumDigitPrimeDigitPrime\
    \ = 0\n    largestSumDigitPrimeDigitPrimeDigit = 0\n    largestSumDigitPrimeDigitPrimeDigitPrime\
    \ = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigit = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrime\
    \ = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit\
    \ = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrime\
    \ = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit =\
    \ 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n\
    \    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n \
    \   largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n  \
    \  largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n   \
    \ largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit\
    \ = 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit =\
    \ 0\n    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n\
    \    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n \
    \   largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n  \
    \  largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigit = 0\n   \
    \ largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrime = 0\n\
    \    largestSumDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrimeDigitPrime =\
    \ 0\n    lar", "    \n    largest = 0\n    largestPrime = 0\n    largestSum =\
    \ 0\n    largestSumDigit = 0\n    largestSumDigit2 = 0\n    largestSumDigit3 =\
    \ 0\n    largestSumDigit4 = 0\n    largestSumDigit5 = 0\n    largestSumDigit6\
    \ = 0\n    largestSumDigit7 = 0\n    largestSumDigit8 = 0\n    largestSumDigit9\
    \ = 0\n    largestSumDigit10 = 0\n    largestSumDigit11 = 0\n    largestSumDigit12\
    \ = 0\n    largestSumDigit13 = 0\n    largestSumDigit14 = 0\n    largestSumDigit15\
    \ = 0\n    largestSumDigit16 = 0\n    largestSumDigit17 = 0\n    largestSumDigit18\
    \ = 0\n    largestSumDigit19 = 0\n    largestSumDigit20 = 0\n    largestSumDigit21\
    \ = 0\n    largestSumDigit22 = 0\n    largestSumDigit23 = 0\n    largestSumDigit24\
    \ = 0\n    largestSumDigit25 = 0\n    largestSumDigit26 = 0\n    largestSumDigit27\
    \ = 0\n    largestSumDigit28 = 0\n    largestSumDigit29 = 0\n    largestSumDigit30\
    \ = 0\n    largestSumDigit31 = 0\n    largestSumDigit32 = 0\n    largestSumDigit33\
    \ = 0\n    largestSumDigit34 = 0\n    largestSumDigit35 = 0\n    largestSumDigit36\
    \ = 0\n    largestSumDigit37 = 0\n    largestSumDigit38 = 0\n    largestSumDigit39\
    \ = 0\n    largestSumDigit40 = 0\n    largestSumDigit41 = 0\n    largestSumDigit42\
    \ = 0\n    largestSumDigit43 = 0\n    largestSumDigit44 = 0\n    largestSumDigit45\
    \ = 0\n    largestSumDigit46 = 0\n    largestSumDigit47 = 0\n    largestSumDigit48\
    \ = 0\n    largestSumDigit49 = 0\n    largestSumDigit50 = 0\n    largestSumDigit51\
    \ = 0\n    largestSumDigit52 = 0\n    largestSumDigit53 = 0\n    largestSumDigit54\
    \ = 0\n    largestSumDigit55 = 0\n    largestSumDigit56 = 0\n    largestSumDigit57\
    \ = 0\n    largestSumDigit58 = 0\n    largestSumDigit59 = 0\n    largestSumDigit60\
    \ = 0\n    largestSumDigit61 = 0\n    largestSumDigit", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:1000000));\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of its digits.", "    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    for x in lst\n        if\
    \ isPrime(x)\n            if x > largestPrime\n                largestPrime =\
    \ x\n                largestSum = 0\n            largestSum += x\n        end\n\
    \    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the number of prime numbers less than\
    \ or equal to the sum of the integers in the vector.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        end\n    end\n    \n\
    \    return sum\nend", "    primes = primes(lst)\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest", "    \n    largest =\
    \ 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit = 0\n    largestSumDigit2\
    \ = 0\n    largestSumDigit3 = 0\n    largestSumDigit4 = 0\n    largestSumDigit5\
    \ = 0\n    largestSumDigit6 = 0\n    largestSumDigit7 = 0\n    largestSumDigit8\
    \ = 0\n    largestSumDigit9 = 0\n    largestSumDigit10 = 0\n    largestSumDigit11\
    \ = 0\n    largestSumDigit12 = 0\n    largestSumDigit13 = 0\n    largestSumDigit14\
    \ = 0\n    largestSumDigit15 = 0\n    largestSumDigit16 = 0\n    largestSumDigit17\
    \ = 0\n    largestSumDigit18 = 0\n    largestSumDigit19 = 0\n    largestSumDigit20\
    \ = 0\n    largestSumDigit21 = 0\n    largestSumDigit22 = 0\n    largestSumDigit23\
    \ = 0\n    largestSumDigit24 = 0\n    largestSumDigit25 = 0\n    largestSumDigit26\
    \ = 0\n    largestSumDigit27 = 0\n    largestSumDigit28 = 0\n    largestSumDigit29\
    \ = 0\n    largestSumDigit30 = 0\n    largestSumDigit31 = 0\n    largestSumDigit32\
    \ = 0\n    largestSumDigit33 = 0\n    largestSumDigit34 = 0\n    largestSumDigit35\
    \ = 0\n    largestSumDigit36 = 0\n    largestSumDigit37 = 0\n    largestSumDigit38\
    \ = 0\n    largestSumDigit39 = 0\n    largestSumDigit40 = 0\n    largestSumDigit41\
    \ = 0\n    largestSumDigit42 = 0\n    largestSumDigit43 = 0\n    largestSumDigit44\
    \ = 0\n    largestSumDigit45 = 0\n    largestSumDigit46 = 0\n    largestSumDigit47\
    \ = 0\n    largestSumDigit48 = 0\n    largestSumDigit49 = 0\n    largestSumDigit50\
    \ = 0\n    largestSumDigit51 = 0\n    largestSumDigit52 = 0\n    largestSumDigit53\
    \ = 0\n    largestSumDigit54 = 0\n    largestSumDigit55 = 0\n    largestSumDigit56\
    \ = 0\n    largestSumDigit57 = 0\n    largestSumDigit58 = 0\n    largestSumDigit59\
    \ = 0\n    largestSumDigit60 = 0\n    largestSumDigit61 = 0\n    largestSumDigit",
  "    largest = lst[1]\n    largest = largest * largest\n    for i in lst[2:end]\n\
    \        if i > largest\n            largest = i\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for i in primes\n\
    \        if lst.contains(i)\n            sum += i\n        end\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise: Find the largest prime\
    \ factor of a number\nThe largest prime factor of a number $n$ is $n$ itself,\
    \ or $n-1$ when $n$ is divisible by $n-1$. For example, 6 is a prime factor of\
    \ $6$, since $6$ is divisible by $3$ and $3$ is divisible by $2$. Write a function\
    \ that returns the largest prime factor of a given number.", "    \n    primes\
    \ = primes(length(lst))\n    \n    largest = 0\n    largestPrime = 0\n    \n \
    \   for prime in primes\n        if prime > largest\n            largestPrime\
    \ = prime\n            largest = prime\n        elseif prime == largestPrime\n\
    \            largestPrime += lst[prime]\n        end\n    end\n    \n    return\
    \ largestPrime\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of its digits.", "    \n    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for elt in\
    \ lst\n        if elt > largest\n            largest = elt\n        end\n    end\n\
    \    for elt in lst\n        if elt == largest\n            sum += elt\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.3>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.3>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise: Find the largest prime\
    \ factor of a given number", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ lar", "    primes = primes(length(lst))\n    largest = primes[end]\n    largest\
    \ = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest * 10\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    lar", "    largest = minimum(lst)\n    largestPrime = primes[largest]\n \
    \   sum = 0\n    for x in lst\n        if x % largestPrime == 0\n            sum\
    \ += largestPrime\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for small lists,\
    \ but for large lists it is very slow. Do you know any way to make it faster?\n\
    <|/ c |>\n<| c |>\nI added a faster version\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for small lists, but for large lists it is\
    \ very slow. Do you know any way to make it faster?\n<|/ c |>\n<| c |>\nI added\
    \ a faster version\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for small lists, but for large lists it is very slow. Do you know\
    \ any way to make it faster?\n<|/ c |>\n<| a tags=primes,julia,performance |>\n\
    I wrote a Julia package called Primes.jl that does this in about half a second\
    \ on my machine.\n<code>\njulia> using Primes", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumDigits = 0\n    largestSumDigitsPrime\
    \ = 0\n    largestSumDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrime\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrime\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrime\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n\
    \    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n\
    \    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n\
    \    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n\
    \    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n\
    \    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits\
    \ = 0\n    largestSumDigitsPrimeDigitsPrimeDigitsPrimeDigitsPrimeDigits = 0\n\
    \    largestSumDigitsPrime", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.floor()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.floor()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ lar", "    \n    primes = primes(lst)\n    largest = primes[end]\n    sum =\
    \ 0\n    for p in primes\n        if p > largest\n            largest = p\n  \
    \      end\n    end\n    for p in primes\n        if p <= largest\n          \
    \  sum += p\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000, 10000))\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = lar", " \
    \   primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = lar", "    \n    largest = Int64(Inf)\n    largestPrime = Int64(Inf)\n\
    \    largestPrimeIndex = Int64(Inf)\n    largestPrimeIndex2 = Int64(Inf)\n   \
    \ largestPrimeIndex3 = Int64(Inf)\n    largestPrimeIndex4 = Int64(Inf)\n    largestPrimeIndex5\
    \ = Int64(Inf)\n    largestPrimeIndex6 = Int64(Inf)\n    largestPrimeIndex7 =\
    \ Int64(Inf)\n    largestPrimeIndex8 = Int64(Inf)\n    largestPrimeIndex9 = Int64(Inf)\n\
    \    largestPrimeIndex10 = Int64(Inf)\n    largestPrimeIndex11 = Int64(Inf)\n\
    \    largestPrimeIndex12 = Int64(Inf)\n    largestPrimeIndex13 = Int64(Inf)\n\
    \    largestPrimeIndex14 = Int64(Inf)\n    largestPrimeIndex15 = Int64(Inf)\n\
    \    largestPrimeIndex16 = Int64(Inf)\n    largestPrimeIndex17 = Int64(Inf)\n\
    \    largestPrimeIndex18 = Int64(Inf)\n    largestPrimeIndex19 = Int64(Inf)\n\
    \    largestPrimeIndex20 = Int64(Inf)\n    largestPrimeIndex21 = Int64(Inf)\n\
    \    largestPrimeIndex22 = Int64(Inf)\n    largestPrimeIndex23 = Int64(Inf)\n\
    \    largestPrimeIndex24 = Int64(Inf)\n    largestPrimeIndex25 = Int64(Inf)\n\
    \    largestPrimeIndex26 = Int64(Inf)\n    largestPrimeIndex27 = Int64(Inf)\n\
    \    largestPrimeIndex28 = Int64(Inf)\n    largestPrimeIndex29 = Int64(Inf)\n\
    \    largestPrimeIndex30 = Int64(Inf)\n    largestPrimeIndex31 = Int64(Inf)\n\
    \    largestPrimeIndex32 = Int64(Inf)\n    largestPrimeIndex33 = Int64(Inf)\n\
    \    largestPrimeIndex34 = Int64(Inf)\n    largestPrimeIndex35 = Int64(Inf)\n\
    \    largestPrimeIndex36 = Int64(Inf)\n    largestPrimeIndex37 = Int64(Inf)\n\
    \    largestPrimeIndex38 = Int64(Inf)\n    largestPrimeIndex39 = Int", "    \n\
    \    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigits\
    \ = 0\n    \n    for x in lst\n        if x == largestPrime\n            largestSum\
    \ += largestPrime\n            largestSumDigits += largestPrime\n        else\n\
    \            if isPrime(x)\n                largestPrime = x\n               \
    \ largestSum = x\n                largestSumDigits = x\n            else\n   \
    \             if largestPrime == 0\n                    largestPrime = x\n   \
    \                 largestSum = x\n                    largestSumDigits = x\n \
    \               else\n                    if largestSum < x\n                \
    \        largestSum = x\n                        largestSumDigits = x\n      \
    \              else\n                        if largestSumDigits < x\n       \
    \                     largestSumDigits = x\n                        end\n    \
    \                end\n                end\n            end\n        end\n    end\n\
    \    \n    return largestSumDigits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000, 10000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of the digits of all the integers\
    \ in the list.", "    \n    primes = primes(length(lst))\n    largest = 0\n  \
    \  largestPrime = 0\n    for p in primes\n        if lst.contains(p)\n       \
    \     largestPrime = p\n            largest = sum(lst[p])\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 7", "    \n    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestSum = 0\n   \
    \ for x in lst\n        if x % largestPrime == 0\n            largestSum += x\
    \ % largestPrime\n        end\n    end\n    return largestSum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    sum = 0\n    for p in primes\n\
    \        if p == largest\n            sum += lst[p]\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.(lst)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestPrimeDigits = digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n\
    \    \n    largestPrimeDigitSum = largestPrimeDigitSum + sum(lst)\n    \n    return\
    \ largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.5>\n@test skjkasdkd([2,\
    \ 3, 1, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10\n@test\
    \ skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) == 25\n\
    @test skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1,\
    \ 9, 3]) == 13\n@test skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5,\
    \ 6]) == 11\n@test skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n@test skjkasdkd([0,\
    \ 8, 1, 2, 1, 7]) == 7\n</cell>\n<text>\nProblem 3\nThe prime factors of 13195\
    \ are 5, 7, 13 and 29.", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    \n    for x in lst\n        if x == largestPrime\n            largestPrime\
    \ = 0\n            largestSum = 0\n            largest = largestPrime\n      \
    \  else\n            if largestPrime == 0\n                largestPrime = x\n\
    \                largestSum = x\n            else\n                if x > largestPrime\n\
    \                    largestPrime = x\n                    largestSum = x\n  \
    \              else\n                    if largestSum < x\n                 \
    \       largestSum = x\n                    end\n                end\n       \
    \     end\n        end\n    end\n    \n    return largestSum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = 0\n    largestPrime = 0\n    for x in lst\n\
    \        if x == largestPrime\n            largestPrime = largestPrime + 1\n \
    \       else\n            if largestPrime == 0\n                largestPrime =\
    \ 1\n            largestPrime = largestPrime + 1\n            if largestPrime\
    \ > x\n                largestPrime = x\n            end\n        end\n    end\n\
    \    return largestPrime\nend", "    \n    largest = minimum(lst)\n    largestPrime\
    \ = findPrime(largest)\n    largestPrimeDigits = findDigits(largestPrime)\n  \
    \  largestPrimeSum = sum(largestPrimeDigits)\n    return largestPrimeSum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nThe sum of the primes below 10\
    \ is 2 + 3 + 5 + 7 = 17.\nThe longest prime factor of the number 600851475143\
    \ is\n600851475143 \xD7 39 \xD7 17 \xD7 13 \xD7 10 \xD7 5 \xD7 3 \xD7 2 \xD7 1\
    \ = 362.\nFind the sum of all prime numbers less than 10^18.", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigits = 0\n  \
    \  largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n  \
    \  largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n \
    \   largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n \
    \   largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n\
    \    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n\
    \    lar", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestSum = 0\n    for el in lst\n        if el == largest\n           \
    \ largestSum += largestPrime\n        else\n            largestPrime = primes[el]\n\
    \            largestSum += largestPrime\n        end\n    end\n    return largestSum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 1000))\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.", "    primes =\
    \ primes(length(lst))\n    largest = 0\n    for p in primes\n        if lst.last()\
    \ > p\n            largest = lst.last()\n            break\n        end\n    end\n\
    \    sum = 0\n    for p in primes\n        if lst.last() > p\n            sum\
    \ += lst.last() - p\n            lst = lst[end-1:end]\n            break\n   \
    \     end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, ", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = 0\n    for p in primes\n        if p\
    \ > largest\n            largest = p\n        end\n    end\n    sum = 0\n    for\
    \ x in lst\n        if x == largest\n            sum += largest\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nThe prime factors of\
    \ 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143\
    \ ?"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
