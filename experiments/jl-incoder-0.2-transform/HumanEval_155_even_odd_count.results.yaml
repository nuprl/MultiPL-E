language: jl
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5max2b_.jl:25\nin expression starting at\
    \ /tmp/tmpy5max2b_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The argument must be positive\")\n\
    \    end\n    even, odd = 0, 0\n    for i in 1:num\n        if i % 2 == 0\n  \
    \          even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.3>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that integer.\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3x2u8vvt.jl:23\nin expression starting at\
    \ /tmp/tmp3x2u8vvt.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  elseif num == 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2\
    \ == 0 for num in num::Int64)\n        even_count = sum(num % 2 == 1 for num in\
    \ num::Int64)\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the number of digits in $n$. \nThe function should raise an\
    \ error if the input is not an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) ==\
    \ (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) == (3,\
    \ 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\
    \t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxten9tb.jl:20\nin expression starting at\
    \ /tmp/tmpsxten9tb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0 \n        error(\"The input must be positive\")\n  \
    \  else if num == 0\n        return (1, 0)\n    else \n        odd_count = 0\n\
    \        even_count = 0\n        digit = num % 10\n        while digit > 0\n \
    \           if digit % 2 == 0\n                even_count += 1\n            else\n\
    \                odd_count += 1\n            digit = num % 10\n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoed9rot.jl:12\nin expression starting at\
    \ /tmp/tmpwoed9rot.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        for n\
    \ in num\n            if n % 2 == 0\n                even += 1\n            else\n\
    \                odd += 1\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbdgk0fxk.jl:24\nin expression starting at\
    \ /tmp/tmpbdgk0fxk.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3bel7u8.jl:24\nin expression starting at\
    \ /tmp/tmpo3bel7u8.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 2\n   \
    \     even_count = num - odd_count\n        return (even_count, odd_count)\n \
    \   end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ and returns the sum of the digits of that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cvi8as4.jl:20\nin expression starting at\
    \ /tmp/tmp9cvi8as4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        return (1, 0)\n    else\n        even, odd = 0, 0\n\
    \        while num != 0\n            digit = num % 10\n            if digit %\
    \ 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjm10xuxh.jl:28\nin expression starting at\
    \ /tmp/tmpjm10xuxh.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for i in 1:num\n        if i % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\
    \t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211)\
    \ == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) ==\
    \ (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5yzmf88.jl:23\nin expression starting at\
    \ /tmp/tmpk5yzmf88.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvi8onv6m.jl:25\nin expression starting at\
    \ /tmp/tmpvi8onv6m.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n            num /= 2\n        else\n            odd +=\
    \ 1\n            num /= 2\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp118a3p88.jl:25\nin expression starting at\
    \ /tmp/tmp118a3p88.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even = num % 2 == 0\n    odd = num % 2 != 0\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3a9v7q1.jl:17\nin expression starting at\
    \ /tmp/tmpw3a9v7q1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n   \
    \     if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuns3ncq.jl:25\nin expression starting at\
    \ /tmp/tmpmuns3ncq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even = 0\n    odd = 0\n    while num > 0\n        if num % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydl2tro8.jl:25\nin expression starting at\
    \ /tmp/tmpydl2tro8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in reverse(digits(num))\n\
    \        if i%2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
    \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
    \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3,\
    \ 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\
    \t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds_ftko7.jl:24\nin expression starting at\
    \ /tmp/tmpds_ftko7.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnk0l2vc.jl:24\nin expression starting at\
    \ /tmp/tmpxnk0l2vc.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"Invalid input\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += digit\n        else\n            odd += digit\n\
    \        end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5nbeoht.jl:25\nin expression starting at\
    \ /tmp/tmpg5nbeoht.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 1)\n    else\n        even = num % 2 == 0\n   \
    \     odd = num % 2 != 0\n        if even\n            even = even + 1\n     \
    \   else\n            odd = odd + 1 \n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer $n$ and returns the number of digits in $n$. \nThe function\
    \ should raise an error if the input is not an integer.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnz3zdx2.jl:24\nin expression starting at\
    \ /tmp/tmpgnz3zdx2.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The input must be positive\")\n   \
    \ elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n  \
    \      even_count = num - odd_count\n        return (odd_count, even_count)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the sum of the digits of that integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = even_odd_count;\n\t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78)\
    \ == (1, 1))\n\t@test(candidate(3452) == (2, 2))\n\t@test(candidate(346211) ==\
    \ (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\t@test(candidate(-2) == (1,\
    \ 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0) == (1, 0))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43yrslto.jl:20\nin expression starting at\
    \ /tmp/tmp43yrslto.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given an integer. return a tuple that has the number of even and\
    \ odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n   \
    \ (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
    \ Int64} \n    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = sum(num\
    \ % 2 == 0 for num in num::Int64)\n        even_count = sum(num % 2 == 1 for num\
    \ in num::Int64)\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\
    \t@test(candidate(7) == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452)\
    \ == (2, 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821)\
    \ == (3, 3))\n\t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2,\
    \ 3))\n\t@test(candidate(0) == (1, 0))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcvzhf7d.jl:20\nin expression starting at\
    \ /tmp/tmpqcvzhf7d.jl:20\n"
  stdout: ''
