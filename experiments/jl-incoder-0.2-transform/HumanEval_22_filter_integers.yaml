name: HumanEval_22_filter_integers
language: jl
prompt: "\"\"\" Filter given list of any python values only for integers\n    >>>\
  \ filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
  \ \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"])\
  \ == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
  end\n"
completions: ["    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, String))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all strings from given list of any python values", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out any python values that are not integers\nWe will filter out any python values\
    \ that are not integers", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all non-integers\nFilter out all non-integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values other than integers\nWe will use the same\
    \ filter_integers function as before, but this time we will filter out any python\
    \ values other than integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    values = filter(values, x -> x\
    \ != \"\")\n    values = filter(values, x -> x != \"\")\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nThe function below filters\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> !isa(x, Dict))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> isa(x, Int))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    Filter out all non-integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ integers\nFilter given list of any python values only for integers\nFilter given\
    \ list of any python values only for integers\nFilter given list of any python\
    \ values only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given list of any python values\
    \ only for integers\nFilter given list of any python values only for integers\n\
    Filter given list of any python values only for integers\nFilter given list of\
    \ any python values only for integers\nFilter given ", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out any python values that are not integers\nThe function below filters out\
    \ any python values that are not integers", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values from given\
    \ list of any python values", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Dict))\n    return values\nend", " \
    \   filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14]\n\
    \    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0, 3.0,\
    \ Dict(), []]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all values that are not integers\n\
    We can also filter out all values that are not integers. We can do this by using\
    \ the filter function and passing a predicate to it.", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out strings and dictionaries", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14,\
    \ 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0,\
    \ 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.4>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    The function below filters out any python values which are not integers", "  \
    \  values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x == x)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    We will filter out any python values which are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> x != 0)\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, String))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all strings from given list", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x != x)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Dict))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nWe will filter out any python\
    \ values that are not integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.3>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out any python values that are not integers\nThe function below filters out\
    \ any python values that are not integers", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x ->\
    \ x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Dict))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nThe function below filters\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ given list of any python values", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all non-integers", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  return values\nend", "    values = filter(values, x -> isa(x, Int64))\n   \
    \ values = filter(values, x -> x != 0)\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x == x)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nThe function below will filter\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out any python values that are\
    \ not integers\nThis can be done by applying the function filter_integers to each\
    \ element of the vector", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend\n</cell>\n<code language=julia-1.4>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out all strings from given list", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14]\n\
    \    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0]\n\
    \    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out strings and dictionaries", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ given list", "    values = filter(values, x -> isa(x, Int64))\n    values =\
    \ filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Dict))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ which are not integers\nWe will filter out any python values which are not integers",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values except integers\n\
    We will filter out any python values except integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers\nWe can filter out any python values that are not integers\
    \ by using filter_integers and isa functions.", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x == x)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given list of any python values only for floats\n    >>> filter_floats([\"a\"\
    , 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nWe will filter out\
    \ any python values which are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values that are not integers\nWe\
    \ will filter out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nThe function below filters\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, String))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out all strings from given list", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    We will filter out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    return values\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values\nThe function below filters out all non-integer values from a list of\
    \ any python values", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x != 0)\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x == x)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n>>> filter_floats([\"a\", 3.14, 5])\n    [3.14]\n  \
    \  >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0, 3.0,\
    \ Dict(), []]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out any python values that are not integers", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integers", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values that are not integers\nThe function below\
    \ filters out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    values =\
    \ filter(values, x -> x != \"\")\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    values = filter(values, x -> x != \"\")\n    values = filter(values,\
    \ x -> x != \"\")\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    We will filter out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, String))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out strings from a list of strings", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all non-integers", "    values = filter(values, x -> isa(x, Int64))\n  \
    \  return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    We will filter out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values that are not integers\nWe will filter out\
    \ any python values that are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from\
    \ given list of any python values", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nThe function below\
    \ filters out any python values that aren't integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14,\
    \ 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0,\
    \ 3.0, Dict(), []]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nWe will filter out\
    \ any python values which are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values which are not integers\nWe will filter out\
    \ any python values which are not integers", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all strings that are not valid Python identifiers:", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Integer))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given list of any python values only for floats\n>>> filter_integers([\"\
    a\", 3.14, 5])\n[3.14, 5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    [1, 2, 3]\n</text>\n<code language=julia-1.5>", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values except integers\nWe will\
    \ filter out any python values except integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.4>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out all non-numeric values", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> isa(x, Int))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values which are not integers\nThe function below filters\
    \ out any python values which are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x == x)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\nThe function filter_non_integers\
    \ filters out all non-integers from a list of any python values", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x,\
    \ Dict))\n    values = filter(values, x -> !isa(x, Vector))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any python values that are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    We will filter out any python values which are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> !isa(x, String))\n    values = filter(values,\
    \ x -> !isa(x, Symbol))\n    values = filter(values, x -> !isa(x, Any))\n    values\
    \ = filter(values, x -> !isa(x, Bool))\n    values = filter(values, x -> !isa(x,\
    \ Float64))\n    values = filter(values, x -> !isa(x, Float32))\n    values =\
    \ filter(values, x -> !isa(x, Int64))\n    values = filter(values, x -> !isa(x,\
    \ Int8))\n    values = filter(values, x -> !isa(x, Int))\n    values = filter(values,\
    \ x -> !isa(x, Uint))\n    values = filter(values, x -> !isa(x, UInt8))\n    values\
    \ = filter(values, x -> !isa(x, UInt))\n    values = filter(values, x -> !isa(x,\
    \ Bool))\n    values = filter(values, x -> !isa(x, String))\n    values = filter(values,\
    \ x -> !isa(x, Symbol))\n    values = filter(values, x -> !isa(x, Any))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> !isa(x, Dict))\n    values = filter(values,\
    \ x -> !isa(x, Bool))\n    values = filter(values, x -> !isa(x, Float64))\n  \
    \  values = filter(values, x -> !isa(x, Float32))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int8))\n    values\
    \ = filter(values, x -> !isa(x, Int))\n    values = filter(values, x -> !isa(x,\
    \ Uint))\n    values = filter(values, x -> !isa(x, UInt8))\n    values = filter(values,\
    \ x -> !isa(x, UInt))\n    values = filter(values, x -> !isa(x, Bool))\n    values\
    \ = filter(values, x -> !isa(x, String))\n    values = filter(values, x -> !isa(x,\
    \ Symbol))\n    values = filter(values, x -> !isa(x, Any))\n    values = filter(values, ",
  "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nWe will filter out any python\
    \ values that are not integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all non-integer values", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings from given list of any\
    \ python values", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x,\
    \ Vector))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> x != 0)\n    return values\nend",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14,\
    \ 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0,\
    \ 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x == x)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all non-integer values from given list", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    We will filter out any python values which are not integers", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> x != 0)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, String))\n    return values\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python\
    \ values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14]\n\
    \    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0, 3.0,\
    \ Dict(), []]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Dict))\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out any python values that are not integers\nWe will filter out any python\
    \ values that are not integers", "    filter(values, x -> isa(x, Int64))\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers\nWe will filter out any python values that are not integers",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings that are not integers",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> !isa(x, Dict))\n    return values\nend", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    values = filter(values, x -> !isa(x, Int64))\n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3, \"abc\",\
    \ Dict(), []])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    The function below filters out any python values that are not integers", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x ->\
    \ x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values that are not integers\n\
    We will use filter to filter out any python values that are not integers", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Integer))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Integer))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n   \
    \ values = filter(values, x -> isa(x, Int))\n    values = filter(values, x ->\
    \ isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x,\
    \ Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> isa(x,\
    \ Int))\n    values = filter(values, x -> isa(x, Integer))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Integer))\n    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    values = filter(values,\
    \ x -> isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n   \
    \ values = filter(values, x -> isa(x, Int))\n    values = filter(values, x ->\
    \ isa(x, Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> isa(x, Int))\n    values = filter(values, x -> isa(x,\
    \ Integer))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Integer))\n    values\
    \ = filter(values, ", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given list of any python values only for floats\n    >>> filter_floats([\"a\"\
    , 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ which are not integers\nThe function below filters out any python values which\
    \ are not integers", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> x != 0)\n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given list of any python values only for\
    \ floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values which are not integers\n\
    This filter will remove any python values which are not integers", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    values = filter(values, x -> x != \"\")\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    return values\nend", "  \
    \  filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given list\
    \ of any python values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n\
    \    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1.0,\
    \ 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n \
    \   values = filter(values, x -> x != 0)\n    return values\nend", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    values = filter(values, x -> x != \"\")\n    return values\nend", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> isa(x, Int))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given list of any python values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0, 3.0, Dict(), []]\n    \"\"\"", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out any python values that are not integers\nThe\
    \ function below will filter out any python values that are not integers", " \
    \   values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x == x)\n    values = filter(values, x -> x == x)\n    values = filter(values,\
    \ x -> x == x)\n    return values\nend", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    values = filter(values,\
    \ x -> !isa(x, Vector))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any python values\
    \ that are not integers\nThe function below filters out any python values that\
    \ are not integers"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
