name: HumanEval_78_hex_key
language: jl
prompt: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    digits that are\
  \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
  \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume\
  \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
  \ always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
  1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
  )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction hex_key(num::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
  AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
  ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
  ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
completions: ["    \n    primes = prime_digits(num)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    prime_digits_count = prime_digits_count - 1\n  \
    \  \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime", "    \n    primes = primes_list(num) \n    primes_count = length(primes)\
    \ \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 ", "    \n    primes = primes_list(10)\n\
    \    \n    hex_list = num.chars().filter(x -> x>='0' and x<='9').collect()\n \
    \   \n    hex_list.filter(x -> x in primes).count()\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a string and returns the number of characters that are not letters.\nExamples:\n\
    >>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World!!\")\n3\n>>> not_letters(\"Hello World!!!\")\n2\n\
    >>> not_letters(\"Hello World!!!!\")\n1\n>>> not_letters(\"Hello World!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    local digits\
    \ = num\n    local primes = Set{Int64}()\n    local prime_digits = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set_size =\
    \ Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    ", "    \n    local digits = num\n    local primes = prime_digits(digits)\n\
    \    local prime_digits_count = length(primes)\n    local prime_digits_count_2\
    \ = prime_digits_count / 2\n    local prime_digits_count_3 = prime_digits_count\
    \ / 3\n    local prime_digits_count_4 = prime_digits_count / 4\n    local prime_digits_count_5\
    \ = prime_digits_count / 5\n    local prime_digits_count_6 = prime_digits_count\
    \ / 6\n    local prime_digits_count_7 = prime_digits_count / 7\n    local prime_digits_count_8\
    \ = prime_digits_count / 8\n    local prime_digits_count_9 = prime_digits_count\
    \ / 9\n    local prime_digits_count_10 = prime_digits_count / 10\n    local prime_digits_count_11\
    \ = prime_digits_count / 11\n    local prime_digits_count_12 = prime_digits_count\
    \ / 12\n    local prime_digits_count_13 = prime_digits_count / 13\n    local prime_digits_count_14\
    \ = prime_digits_count / 14\n    local prime_digits_count_15 = prime_digits_count\
    \ / 15\n    local prime_digits_count_16 = prime_digits_count / 16\n    local prime_digits_count_17\
    \ = prime_digits_count / 17\n    local prime_digits_count_18 = prime_digits_count\
    \ / 18\n    local prime_digits_count_19 = prime_digits_count / 19\n    local prime_digits_count_20\
    \ = prime_digits_count / 20\n    local prime_digits_count_21 = prime_digits_count\
    \ / 21\n    local prime_digits_count_22 = prime_digits_count / 22\n    local prime_digits_count_23\
    \ = prime_digits_count / 23\n    local prime_digits_count_24 = prime_digits_count\
    \ / 24\n    local prime_digits_count_25 = prime_digits_count / 25\n    local prime_digits_count_26\
    \ = prime_digits_count / 26\n    local prime_digits_count_27 = prime_digits_count\
    \ / 27\n    local prime_digits_count_28 = prime_digits_count / 28\n    local prime_digits_count_29\
    \ = prime_digits_count / 29\n    local prime_digits_count_30 = prime_digits_count\
    \ / 30\n", "    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        \n       \
    \ if primes_count < prime\n            \n            primes_count += 1\n     \
    \       \n        end\n    end\n    \n    return primes_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a positive integer and returns the number of \n    digits\
    \ that are not prime numbers.\n    Examples:\n    >>> count_digits(10)\n    1\n\
    \    >>> count_digits(100)\n    2\n    >>> count_digits(1000)\n    3\n    >>>\
    \ count_digits(10000)\n    4\n    >>> count_digits(100000)\n    5\n    >>> count_digits(1000000)\n\
    \    6\n    >>> count_digits(10000000)\n    7\n    >>> count_digits(100000000)\n\
    \    8\n    >>> count_digits(1000000000)\n    9\n    >>> count_digits(10000000000)\n\
    \    10\n    >>> count_digits(100000000000)\n    11\n    >>> count_digits(1000000000000)\n\
    \    12\n    >>> count_digits(10000000000000)\n    13\n    >>> count_digits(1000000000000000)\n\
    \    14\n    >>> count_digits(10000000000000000)\n    15\n    >>> count_digits(100000000000000000)\n\
    \    16\n    >>> count_digits(1000000000000000000)\n    17\n    >>> count_digits(10000000000000000000)\n\
    \    18\n    >>> count_digits(100000000000000000000)\n    19\n    >>> count_digits(1000000000000000000000)\n\
    \    20\n    >>> count_digits(10000000000000000000000)\n    21\n    >>> count_digits(100000000000000000000000)\n\
    \    22\n    >>> count_digits(1000000000000000000000000)\n    23\n    >>> count_digits(10000000000000000000000000)\n\
    \    24\n    >>> count_digits(100000000000000000000000000)\n    25\n    >>> count_digits(1000000000000000000000000000)\n\
    \    26\n    >>> count_digits(10000000000000000000000000000)\n    27\n    >>>\
    \ count_digits(100000000000000000000000000000)\n    28\n    >>> count_digits(1000000000000000000000000000000)\n\
    \    29\n    >>> count_digits(10000000000000000000000000000000)\n", "    \n  \
    \  prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hexdigits = num.chars\n   \
    \ \n    hexdigits_prime = hexdigits.filter(x -> x in prime_digits)\n    \n   \
    \ hexdigits_prime_length = hexdigits_prime.len()\n    \n    if hexdigits_prime_length\
    \ == 0 \n        \n        return 0\n    \n    hexdigits_prime_length = hexdigits_prime_length\
    \ + 1\n    \n    hexdigits_prime_prime = hexdigits_prime.filter(x -> x % 2 ==\
    \ 0)\n    \n    hexdigits_prime_prime_length = hexdigits_prime_prime.len()\n \
    \   \n    if hexdigits_prime_prime_length == 0 \n        \n        return 0\n\
    \    \n    hexdigits_prime_prime_length = hexdigits_prime_prime_length + 1\n \
    \   \n    hexdigits_prime_prime_prime = hexdigits_prime_prime.filter(x -> x %\
    \ 3 == 0)\n    \n    hexdigits_prime_prime_prime_length = hexdigits_prime_prime_prime.len()\n\
    \    \n    if hexdigits_prime_prime_prime_length == 0 \n        \n        return\
    \ 0\n    \n    hexdigits_prime_prime_prime_length = hexdigits_prime_prime_prime_length\
    \ + 1\n    \n    hexdigits_prime_prime_prime_prime = hexdigits_prime_prime_prime.filter(x\
    \ -> x % 5 == 0)\n    \n    hexdigits_prime_prime_prime_prime_length = hexdigits_prime_prime_prime_prime.len()\n\
    \    \n    if hexdigits_prime_prime_prime_prime_length == 0 \n        \n     \
    \   return 0\n    \n    hexdigits_prime_prime_prime_prime_length = hexdigits_prime_prime_prime_prime_length\
    \ + 1\n    \n    hexdigits_prime_prime_prime_prime_prime = hexdigits_prime_prime_prime_prime_prime.filter(x\
    \ -> x % 7 == 0)\n    \n    hexdigits_prime_prime_prime_prime_prime_length = hexdigits_prime_prime_prime_prime_prime_prime.len()\n\
    \    \n    if hexdigits_prime_prime_prime_prime_prime_length == 0 \n        \n\
    \        return 0\n    \n    hexdigits_prime_prime_prime_prime_prime_length =\
    \ hexdigits_prime_prime_prime_", "    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,24",
  "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_digits = num.chars\n\
    \    \n    prime_digits_count = 0\n    \n    for digit in hex_digits\n       \
    \ if digit in prime_digits\n            prime_digits_count += 1\n            \n\
    \    return prime_digits_count\nend\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters.\nExamples:\n>>> not_letters(\"\
    AB\")\n2\n>>> not_letters(\"1077E\")\n4\n>>> not_letters(\"ABED1A33\")\n6\n>>>\
    \ not_letters(\"123456789ABCDEF0\")\n10\n>>> not_letters(\"2020\")\n2\n\"\"\"",
  "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_digits = num.chars\n\
    \    \n    hex_digits_len = len(hex_digits)\n    \n    prime_digits_len = len(prime_digits)\n\
    \    \n    prime_digits_sum = 0\n    \n    for i in prime_digits:\n        prime_digits_sum\
    \ += i\n    \n    prime_digits_sum *= prime_digits_len\n    \n    prime_digits_sum\
    \ = int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n  \
    \  \n    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum\
    \ -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n  \
    \  \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n\
    \    \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum =\
    \ int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n    \n\
    \    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n\
    \    \n    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum\
    \ -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n  \
    \  \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n\
    \    \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum =\
    \ int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n    \n\
    \    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n\
    \    \n    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum\
    \ -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n  \
    \  \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n",
  "    \n    primes = primes_list(10)\n    \n    hex = num\n    \n    hex = hex.upper()\n\
    \    \n    hex = hex.split(\"0\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    A\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"B\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"C\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"D\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    E\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"F\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"G\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"H\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    I\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"J\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"K\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"L\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    M\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"N\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"O\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"P\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    Q\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"R\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"S\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"T\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    U\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"V\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"W\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"X\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    Y\")\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = prime_numbers(hex_key(num))\n    \n    primes_count = length(primes)\n\
    \    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    prime", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = prime_digits_count(digits)\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[2:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[3:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[4:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[5:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[6:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[7:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[8:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[9:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[10:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[11:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[12:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[13:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[14:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[15:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[16:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[17:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[18:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[19:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[20:])\n\
    \    \n    prime_digits_count = prime_digit", "    \n    digits = num.chars\n\
    \    \n    primes = prime_digits(digits)\n    \n    prime_digits_count = length(primes)\n\
    \    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count ", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = length(primes)\n    \n    hex_key = 0\n    \n\
    \    for digit in digits\n        if digit in primes\n            hex_key += 1\n\
    \        end\n    end\n    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes_list(10)\n\
    \    \n    digits = num.chars\n    \n    hex_count = 0\n    \n    for i in digits\n\
    \        \n        if primes.contains(i)\n            \n            hex_count\
    \ += 1\n            \n        end\n    end\n    \n    return hex_count\nend\n\
    </cell>\n<code language=julia-1.1>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.1>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.1>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.1>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.1>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"hello\")\n3\n>>> not_letters(\"hello123\"\
    )\n4\n>>> not_letters(\"hello123hello\")\n5\n>>> not_letters(\"hello123hello123\"\
    )\n6\n>>> not_letters(\"hello123hello123hello\")\n7\n>>> not_letters(\"hello123hello123hello123\"\
    )\n8\n>>> not_letters(\"hello123hello123hello123hello\")\n9\n>>> not_letters(\"\
    hello123hello123hello123hello123\")\n10\n>>> not_letters(\"hello123hello123hello123hello123hello\"\
    )\n11\n>>> not_letters(\"hello123hello123hello123hello123hello123\")\n12\n>>>\
    \ not_letters(\"hello123hello123hello123hello123hello123hello\")\n13\n>>> not_letters(\"\
    hello123hello123hello123hello123hello123hello123\")\n14\n>>> not_letters(\"hello123hello123hello123hello123hello123hello123hello\"\
    )\n15\n>>> not_letters(\"hello123hello123hello123hello123hello123hello123hello123\"\
    )\n16\n>>> not_letters(\"hello123hello123hello123hello123hello123hello123hello123hello\"\
    )\n17\n>>> not_letters(\"hello123hello123hello123hello123hello123hello123hello123hello123\"\
    )\n18\n>>> not_letters(\"hello123hello123hello123hello123hello123hello123hello123hello123hello\"\
    )\n19\n>>> not_letters(\"hello123hello123hello123hello123hello123hello123hello123hello123hello123\"\
    )\n20\n>>> not_letters(\"hello123hello123hello123hello123hello123hello123hello123hello123hello123hello",
  "    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n \
    \   prime_digits_count = primes.count\n    \n    hex_count = prime_digits_count\
    \ * 2\n    \n    return hex_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume that the input is always correct or empty string.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2", "    \n    primes = prime_numbers(num)\n    \n  \
    \  primes_count = length(primes)\n    \n    primes_count = primes_count - 1\n\
    \    \n    primes_count = primes_count + 1\n    \n    return primes_count\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and returns the number\
    \ of digits that are primes (prime number, or a prime, is a natural number greater\
    \ than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the input may be empty\
    \ or contain symbols A,B,C,D,E,F only.\nExamples:\n>>> hex_key(\"AB\")\n1\n>>>\
    \ hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\"\
    )\n6\n>>> hex_key(\"2020\")\n2\n</text>\n<code language=julia-1.5>", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    digit_counts = Dict()\n\
    \    \n    for digit in num\n        digit_counts[digit] = digit_counts.get(digit,\
    \ 0) + 1\n    \n    digit_counts_set = Set(digit_counts.values())\n    \n    prime_digits_set\
    \ = Set(prime_digits)\n    \n    prime_digits_set = prime_digits_set - digit_counts_set\n\
    \    \n    prime_digits_set = prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime", "    \n \
    \   primes = primes_list(10)\n    \n    hex_key = 0\n    \n    for digit in num\n\
    \        \n        if digit in primes\n            \n            hex_key += 1\n\
    \            \n        end\n    end\n    \n    return hex_key\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may be empty or contain symbols A,B,C,D,E,F are always uppercase.\nExamples:\n\
    hex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"\
    123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2", "    \n    digits = num.chars\n\
    \    \n    primes = prime_digits(digits)\n    \n    prime_digits_count = primes.len\n\
    \    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count ", "    if num == \"\"\n        return 0\n    \n    digits\
    \ = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    ", "    \n\
    \    local digits = num\n    local prime_digits = \"\"\n    local prime_digits_count\
    \ = 0\n    local prime_digits_sum = 0\n    local prime_digits_sum2 = 0\n    local\
    \ prime_digits_sum3 = 0\n    local prime_digits_sum4 = 0\n    local prime_digits_sum5\
    \ = 0\n    local prime_digits_sum6 = 0\n    local prime_digits_sum7 = 0\n    local\
    \ prime_digits_sum8 = 0\n    local prime_digits_sum9 = 0\n    local prime_digits_sum10\
    \ = 0\n    local prime_digits_sum11 = 0\n    local prime_digits_sum12 = 0\n  \
    \  local prime_digits_sum13 = 0\n    local prime_digits_sum14 = 0\n    local prime_digits_sum15\
    \ = 0\n    local prime_digits_sum16 = 0\n    local prime_digits_sum17 = 0\n  \
    \  local prime_digits_sum18 = 0\n    local prime_digits_sum19 = 0\n    local prime_digits_sum20\
    \ = 0\n    local prime_digits_sum21 = 0\n    local prime_digits_sum22 = 0\n  \
    \  local prime_digits_sum23 = 0\n    local prime_digits_sum24 = 0\n    local prime_digits_sum25\
    \ = 0\n    local prime_digits_sum26 = 0\n    local prime_digits_sum27 = 0\n  \
    \  local prime_digits_sum28 = 0\n    local prime_digits_sum29 = 0\n    local prime_digits_sum30\
    \ = 0\n    local prime_digits_sum31 = 0\n    local prime_digits_sum32 = 0\n  \
    \  local prime_digits_sum33 = 0\n    local prime_digits_sum34 = 0\n    local prime_digits_sum35\
    \ = 0\n    local prime_digits_sum36 = 0\n    local prime_digits_sum37 = 0\n  \
    \  local prime_digits_sum38 = 0\n    local prime_digits_sum39 = 0\n    local prime_digits_sum40\
    \ = 0\n    local prime_digits_sum41 = 0\n    local prime_digits_sum42 = 0\n  \
    \  local prime_digits_sum43 = 0\n    local prime_digits_sum44 = 0\n    local prime_digits_sum45\
    \ = 0\n    local prime_digits_sum46 = 0\n    local prime_digits_sum47 = 0\n  \
    \  local prime_digits_sum48 = 0\n    local prime_digits_sum49 = 0", "    num =\
    \ num.upper()\n    digits = num.split(\"\")\n    primes = prime_digits(digits)\n\
    \    primes_count = primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n    primes_count = primes_count + primes.count\n\
    \    primes_count = primes_count + primes.count\n    primes_count = primes_count\
    \ + primes.count\n    primes_count = primes_count + primes.count\n    primes_count\
    \ = primes_count + primes.count\n", "    \n    hex_key = 0\n    \n    if num ==\
    \ \"\"\n        \n        return hex_key\n    \n    digits = num.chars\n    \n\
    \    for digit in digits\n        \n        if digit == \"A\"\n            \n\
    \            hex_key = hex_key + 1\n        \n        elif digit == \"B\"\n  \
    \          \n            hex_key = hex_key + 2\n        \n        elif digit ==\
    \ \"C\"\n            \n            hex_key = hex_key + 3\n        \n        elif\
    \ digit == \"D\"\n            \n            hex_key = hex_key + 4\n        \n\
    \        elif digit == \"E\"\n            \n            hex_key = hex_key + 5\n\
    \        \n        elif digit == \"F\"\n            \n            hex_key = hex_key\
    \ + 6\n        \n        elif digit == \"0\"\n            \n            hex_key\
    \ = hex_key + 7\n        \n        elif digit == \"1\"\n            \n       \
    \     hex_key = hex_key + 8\n        \n        elif digit == \"2\"\n         \
    \   \n            hex_key = hex_key + 9\n        \n        elif digit == \"3\"\
    \n            \n            hex_key = hex_key + 10\n        \n        elif digit\
    \ == \"4\"\n            \n            hex_key = hex_key + 11\n        \n     \
    \   elif digit == \"5\"\n            \n            hex_key = hex_key + 12\n  \
    \      \n        elif digit == \"6\"\n            \n            hex_key = hex_key\
    \ + 13\n        \n        elif digit == \"7\"\n            \n            hex_key\
    \ = hex_key + 14\n        \n        elif digit == \"8\"\n            \n      \
    \      hex_key = hex_key + 15\n        \n        elif digit == \"9\"\n       \
    \     \n            hex_key = hex_key + 16\n        \n        elif digit == \"\
    A\"\n            \n            hex_key = hex_key + 17\n        \n        elif\
    \ digit == \"B\"\n            \n            hex_key = hex_key + 18\n        \n\
    \        elif digit == \"C\"\n            \n            hex_key = hex_key + 19\n\
    \        \n        elif digit == \"D\"\n            \n            hex_key = hex_key\
    \ + 20\n        \n        elif digit == \"E\"\n            \n            hex_key\
    \ = hex_key + 21\n        \n        elif digit == \"F\"\n            \n      \
    \      hex_key = hex_key + 22\n        \n        elif digit == \"0\"\n       \
    \     \n            hex_key = hex_key + 23\n        \n        elif digit == \"\
    1\"\n            \n            hex_key = hex_key + 24\n        \n        elif\
    \ digit == \"2\"\n            \n            hex_key = hex_key + 25\n        \n\
    \        elif digit == \"3\"\n            \n            hex_key = hex_key + 26\n\
    \        \n        elif digit == \"4\"\n            \n            hex_key = hex_key\
    \ + 27", "    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n\
    \    \n    primes_count = primes.count\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_", "    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_string = num\n    \n    hex_digits = hex_string.split(\"\")\n \
    \   \n    hex_digits_len = len(hex_digits)\n    \n    prime_digits_len = len(prime_digits)\n\
    \    \n    prime_digits_count = 0\n    \n    prime_digits_index = 0\n    \n  \
    \  prime_digits_index2 = 0\n    \n    prime_digits_index3 = 0\n    \n    prime_digits_index4\
    \ = 0\n    \n    prime_digits_index5 = 0\n    \n    prime_digits_index6 = 0\n\
    \    \n    prime_digits_index7 = 0\n    \n    prime_digits_index8 = 0\n    \n\
    \    prime_digits_index9 = 0\n    \n    prime_digits_index10 = 0\n    \n    prime_digits_index11\
    \ = 0\n    \n    prime_digits_index12 = 0\n    \n    prime_digits_index13 = 0\n\
    \    \n    prime_digits_index14 = 0\n    \n    prime_digits_index15 = 0\n    \n\
    \    prime_digits_index16 = 0\n    \n    prime_digits_index17 = 0\n    \n    prime_digits_index18\
    \ = 0\n    \n    prime_digits_index19 = 0\n    \n    prime_digits_index20 = 0\n\
    \    \n    prime_digits_index21 = 0\n    \n    prime_digits_index22 = 0\n    \n\
    \    prime_digits_index23 = 0\n    \n    prime_digits_index24 = 0\n    \n    prime_digits_index25\
    \ = 0\n    \n    prime_digits_index26 = 0\n    \n    prime_digits_index27 = 0\n\
    \    \n    prime_digits_index28 = 0\n    \n    prime_digits_index29 = 0\n    \n\
    \    prime_digits_index30 = 0\n    \n    prime_digits_index31 = 0\n    \n    prime_digits_index32\
    \ = 0\n    \n    prime_digits_index33 = 0\n    \n    prime_digits_index34 = 0\n\
    \    \n    prime_digits_index35 = 0\n    \n    prime_digits_index36 = 0\n    \n\
    \    prime_digits_index37 = 0\n    \n    prime_digits_", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    hex_digits_set = hex_digits_set\
    \ - prime_digits_set\n    \n    hex_digits_set = hex_digits_set - Set([\"A\",\"\
    B\",\"C\",\"D\",\"E\",\"F\"])\n    \n    hex_digits_set = hex_digits_set - Set([\"\
    0\"])\n    \n    hex_digits_set = hex_digits_set - Set([\"1\"])\n    \n    hex_digits_set\
    \ = hex_digits_set - Set([\"2\"])\n    \n    hex_digits_set = hex_digits_set -\
    \ Set([\"3\"])\n    \n    hex_digits_set = hex_digits_set - Set([\"4\"])\n   \
    \ \n    hex_digits_set = hex_digits_set - Set([\"5\"])\n    \n    hex_digits_set\
    \ = hex_digits_set - Set([\"6\"])\n    \n    hex_digits_set = hex_digits_set -\
    \ Set([\"7\"])\n    \n    hex_digits_set = hex_digits_set - Set([\"8\"])\n   \
    \ \n    hex_digits_set = hex_digits_set - Set([\"9\"])\n    \n    hex_digits_set\
    \ = hex_digits_set - Set([\"A\"])\n    \n    hex_digits_set = hex_digits_set -\
    \ Set([\"B\"])\n    \n    hex_digits_set = hex_digits_set - Set([\"C\"])\n   \
    \ \n    hex_digits_set = hex_digits_set - Set([\"D\"])\n    \n    hex_digits_set\
    \ = hex_digits_set - Set([\"E\"])\n    \n    hex_digits_set = hex_digits_set -\
    \ Set([\"F\"])\n    \n    hex_digits_set = hex_digits_set - Set([\"0\"])\n   \
    \ \n    hex_digits_set = hex_digits_set - Set([\"1\"])\n    \n    hex_digits_set\
    \ = hex_digits_set - Set([\"2\"])\n    \n    hex_digits_set = hex_digits_set -\
    \ Set([\"3\"])\n    \n    hex_digits_set = hex_digits_set - Set([\"4\"])\n   \
    \ \n    hex_digits_set = hex_digits_set - Set([\"5\"])\n    \n    hex_digits_set\
    \ = hex_digits_set - Set([\"6\"])\n    \n    hex_digits_set = hex_digits_set ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    local digits\
    \ = num\n    local count = 0\n    local prime_digits = 2\n    local prime_digits_count\
    \ = 0\n    local prime_digits_count_2 = 0\n    local prime_digits_count_3 = 0\n\
    \    local prime_digits_count_4 = 0\n    local prime_digits_count_5 = 0\n    local\
    \ prime_digits_count_6 = 0\n    local prime_digits_count_7 = 0\n    local prime_digits_count_8\
    \ = 0\n    local prime_digits_count_9 = 0\n    local prime_digits_count_10 = 0\n\
    \    local prime_digits_count_11 = 0\n    local prime_digits_count_12 = 0\n  \
    \  local prime_digits_count_13 = 0\n    local prime_digits_count_14 = 0\n    local\
    \ prime_digits_count_15 = 0\n    local prime_digits_count_16 = 0\n    local prime_digits_count_17\
    \ = 0\n    local prime_digits_count_18 = 0\n    local prime_digits_count_19 =\
    \ 0\n    local prime_digits_count_20 = 0\n    local prime_digits_count_21 = 0\n\
    \    local prime_digits_count_22 = 0\n    local prime_digits_count_23 = 0\n  \
    \  local prime_digits_count_24 = 0\n    local prime_digits_count_25 = 0\n    local\
    \ prime_digits_count_26 = 0\n    local prime_digits_count_27 = 0\n    local prime_digits_count_28\
    \ = 0\n    local prime_digits_count_29 = 0\n    local prime_digits_count_30 =\
    \ 0\n    local prime_digits_count_31 = 0\n    local prime_digits_count_32 = 0\n\
    \    local prime_digits_count_33 = 0\n    local prime_digits_count_34 = 0\n  \
    \  local prime_digits_count_35 = 0\n    local prime_digits_count_36 = 0\n    local\
    \ prime_digits_count_37 = 0\n    local prime_digits_count_38 = 0\n    local prime_digits_count_39\
    \ = 0\n    local prime_digits_count_40 = 0\n    local prime_digits_count_41 =\
    \ 0\n    local prime_digits_count_42 = 0\n    local prime_digits_count_43 = 0\n\
    \    local prime_digits_count_44 = 0\n    local prime_digits_count_45 = 0\n  \
    \  local prime_digits_count_46 = 0\n    local prime_digits_count_47 = 0\n    local\
    \ prime_digits_count_48 = 0\n    local prime_digits_count_49 = 0\n    local prime_",
  "    \n    local digits = num\n    local primes = prime_digits(digits)\n    local\
    \ prime_digits_count = length(primes)\n    local prime_digits_sum = 0\n    local\
    \ prime_digits_product = 1\n    local prime_digits_index = 0\n    local prime_digits_product\
    \ = 1\n    local prime_digits_index = 0\n    local prime_digits_product = 1\n\
    \    local prime_digits_index = 0\n    local prime_digits_product = 1\n    local\
    \ prime_digits_index = 0\n    local prime_digits_product = 1\n    local prime_digits_index\
    \ = 0\n    local prime_digits_product = 1\n    local prime_digits_index = 0\n\
    \    local prime_digits_product = 1\n    local prime_digits_index = 0\n    local\
    \ prime_digits_product = 1\n    local prime_digits_index = 0\n    local prime_digits_product\
    \ = 1\n    local prime_digits_index = 0\n    local prime_digits_product = 1\n\
    \    local prime_digits_index = 0\n    local prime_digits_product = 1\n    local\
    \ prime_digits_index = 0\n    local prime_digits_product = 1\n    local prime_digits_index\
    \ = 0\n    local prime_digits_product = 1\n    local prime_digits_index = 0\n\
    \    local prime_digits_product = 1\n    local prime_digits_index = 0\n    local\
    \ prime_digits_product = 1\n    local prime_digits_index = 0\n    local prime_digits_product\
    \ = 1\n    local prime_digits_index = 0\n    local prime_digits_product = 1\n\
    \    local prime_digits_index = 0\n    local prime_digits_product = 1\n    local\
    \ prime_digits_index = 0\n    local prime_digits_product = 1\n    local prime_digits_index\
    \ = 0\n    local prime_digits_product = 1\n    local prime_digits_index = 0\n\
    \    local prime_digits_product = 1\n    local prime_digits_index = 0\n    local\
    \ prime_digits_product = 1\n    local prime_digits_index = 0\n    local prime_digits_product\
    \ = 1\n    local prime_digits_index = 0\n    local prime_digits_product = 1\n\
    \    local prime_digits_index = 0\n    local prime_digits_product = 1\n    local\
    \ prime_digits_index = 0\n    local prime_digits_product = 1\n    local prime_digits_index\
    \ = 0\n    local prime_digit", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    hex_key = 0\n    \n    if num == \"\"\n        return hex_key\n    \n\
    \    digits = num.digits\n    \n    for i in digits\n        if i == \"A\"\n \
    \           hex_key += 10\n        elif i == \"B\"\n            hex_key += 11\n\
    \        elif i == \"C\"\n            hex_key += 12\n        elif i == \"D\"\n\
    \            hex_key += 13\n        elif i == \"E\"\n            hex_key += 14\n\
    \        elif i == \"F\"\n            hex_key += 15\n        else\n          \
    \  hex_key += i\n    end\n    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n    \n  \
    \  primes_count = 0\n    \n    for i in primes\n        \n        if digits[i]\
    \ == digits[digits[i]]\n            \n            primes_count += 1\n        \
    \    \n            if digits[i] == 'B'\n                \n                if digits[digits[i+1]]\
    \ == 'C'\n                    \n                    primes_count += 1\n      \
    \              \n                    if digits[digits[i+2]] == 'D'\n         \
    \               \n                        primes_count += 1\n                \
    \        \n                        if digits[digits[i+3]] == 'E'\n           \
    \                 \n                            primes_count += 1\n          \
    \                  \n                            if digits[digits[i+4]] == 'F'\n\
    \                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+5]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+6]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+7]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+8]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+9]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+10]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+11]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+12]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+13]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digits[i+14]]\
    \ == 'F'\n                                \n                                primes_count\
    \ += 1\n                                \n                                return\
    \ primes_count\n                            \n                            primes_count\
    \ += 1\n                            \n                            if digits[digit",
  "    if num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = primes.len\n    \n  \
    \  prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count =\
    \ prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count -\
    \ 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digit",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_digits\
    \ = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_set = Set(prime_digits)\n  \
    \  \n    digits_set = Set(num.chars)\n    \n    digits_set = digits_set - prime_digits_set\n\
    \    \n    prime_digits_set = prime_digits_set - digits_set\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"0\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"1\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"2\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"3\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"4\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"5\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"6\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"7\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"8\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"9\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"A\",\"\
    B\",\"C\",\"D\",\"E\",\"F\"])\n    \n    prime_digits_set = prime_digits_set -\
    \ Set([\"0\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"1\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"2\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"3\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"4\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"5\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"6\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"7\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"8\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"", " \
    \   \n    primes = primes_list(10)\n    \n    digits = num.chars\n    \n    prime_digits\
    \ = primes.filter( digit -> digits.contains(digit))\n    \n    prime_digits_count\
    \ = prime_digits.count\n    \n    prime_digits_count = prime_digits_count + 1\n\
    \    \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume that the input is always correct or empty string.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2", "    if num == \"\"\n        return 0\n    \n   \
    \ digits = num.digits\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    prime_digits_count_2 = length(primes)\n    \n  \
    \  prime_digits_count_3 = length(primes)\n    \n    prime_digits_count_4 = length(primes)\n\
    \    \n    prime_digits_count_5 = length(primes)\n    \n    prime_digits_count_6\
    \ = length(primes)\n    \n    prime_digits_count_7 = length(primes)\n    \n  \
    \  prime_digits_count_8 = length(primes)\n    \n    prime_digits_count_9 = length(primes)\n\
    \    \n    prime_digits_count_10 = length(primes)\n    \n    prime_digits_count_11\
    \ = length(primes)\n    \n    prime_digits_count_12 = length(primes)\n    \n \
    \   prime_digits_count_13 = length(primes)\n    \n    prime_digits_count_14 =\
    \ length(primes)\n    \n    prime_digits_count_15 = length(primes)\n    \n   \
    \ prime_digits_count_16 = length(primes)\n    \n    prime_digits_count_17 = length(primes)\n\
    \    \n    prime_digits_count_18 = length(primes)\n    \n    prime_digits_count_19\
    \ = length(primes)\n    \n    prime_digits_count_20 = length(primes)\n    \n \
    \   prime_digits_count_21 = length(primes)\n    \n    prime_digits_count_22 =\
    \ length(primes)\n    \n    prime_digits_count_23 = length(primes)\n    \n   \
    \ prime_digits_count_24 = length(primes)\n    \n    prime_digits_count_25 = length(primes)\n\
    \    \n    prime_digits_count_26 = length(primes)\n    \n    prime_digits_count_27\
    \ = length(primes)\n    \n    prime_digits_count_28 = length(primes)\n    \n \
    \   prime_digits_count_29 = length(primes)\n    \n    prime_digits_count_30 =\
    \ length(primes)\n    \n    prime_digits_count_31 = length(primes)\n    \n   \
    \ prime_digits_count_32 = length(primes)\n    \n    prime_digits_count_33 = length(primes)\n\
    \    \n    prime_digits_count_34 = length(primes)\n    \n    prime_digits_count_35\
    \ = length(primes)\n    \n    prime_digits_", "    \n    primes = primes_list(10)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        if num ==\
    \ prime\n            primes_count += 1\n        end\n    end\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a string and returns the number of characters\
    \ that are not letters.\nExamples:\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"\
    A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"\
    a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"\
    A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"\
    a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"\
    A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"\
    a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"\
    A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"\
    a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"\
    A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"\
    a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"\
    A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"\
    a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"\
    A\")\n1\n>>> not_letters(\"a\")\n1\n>>> not_letters(\"A\")\n1\n>>> not_letters(\"\
    a\")\n1\n>>> not_letter", "    \n    prime_digits = prime_digits(num)\n    \n\
    \    if prime_digits == []\n        error(\"Invalid input\")\n    end\n    \n\
    \    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    \n    prime_digits = prime_digits[end]\n\
    \    \n    prime_digits = prime_digits[end]\n    ", "    \n    primes = primes_list(10)\n\
    \    \n    digits = num.chars\n    \n    prime_digits = primes.filter( x -> digits.contains(x))\n\
    \    \n    prime_digits_count = prime_digits.count\n    \n    if prime_digits_count\
    \ == 0 \n        prime_digits_count = 1\n    \n    return prime_digits_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"AB\")\n1\n>>> not_letters(\"1077E\"\
    )\n2\n>>> not_letters(\"ABED1A33\")\n4\n>>> not_letters(\"123456789ABCDEF0\")\n\
    6\n>>> not_letters(\"2020\")\n2\n\"\"\"", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if num == \"\"\n        return 0\n    \n    digits\
    \ = num.chars\n    \n    primes = primes_from(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    ", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_digits =\
    \ [2,3,5,7,11,13,17,19]\n    \n    prime_digits_set = Set(prime_digits)\n    \n\
    \    hexdigits = Set(num.chars())\n    \n    hexdigits_set = Set(hexdigits)\n\
    \    \n    hexdigits_set = hexdigits_set - prime_digits_set\n    \n    hexdigits_set\
    \ = hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set - hexdigits_set\
    \ - hexdigits_set - hexdigit", "    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    local digits = num\n    local primes = 2\n    local\
    \ prime_digits = 2\n    local prime_digits_count = 0\n    local prime_digits_count_2\
    \ = 0\n    local prime_digits_count_3 = 0\n    local prime_digits_count_4 = 0\n\
    \    local prime_digits_count_5 = 0\n    local prime_digits_count_6 = 0\n    local\
    \ prime_digits_count_7 = 0\n    local prime_digits_count_8 = 0\n    local prime_digits_count_9\
    \ = 0\n    local prime_digits_count_10 = 0\n    local prime_digits_count_11 =\
    \ 0\n    local prime_digits_count_12 = 0\n    local prime_digits_count_13 = 0\n\
    \    local prime_digits_count_14 = 0\n    local prime_digits_count_15 = 0\n  \
    \  local prime_digits_count_16 = 0\n    local prime_digits_count_17 = 0\n    local\
    \ prime_digits_count_18 = 0\n    local prime_digits_count_19 = 0\n    local prime_digits_count_20\
    \ = 0\n    local prime_digits_count_21 = 0\n    local prime_digits_count_22 =\
    \ 0\n    local prime_digits_count_23 = 0\n    local prime_digits_count_24 = 0\n\
    \    local prime_digits_count_25 = 0\n    local prime_digits_count_26 = 0\n  \
    \  local prime_digits_count_27 = 0\n    local prime_digits_count_28 = 0\n    local\
    \ prime_digits_count_29 = 0\n    local prime_digits_count_30 = 0\n    local prime_digits_count_31\
    \ = 0\n    local prime_digits_count_32 = 0\n    local prime_digits_count_33 =\
    \ 0\n    local prime_digits_count_34 = 0\n    local prime_digits_count_35 = 0\n\
    \    local prime_digits_count_36 = 0\n    local prime_digits_count_37 = 0\n  \
    \  local prime_digits_count_38 = 0\n    local prime_digits_count_39 = 0\n    local\
    \ prime_digits_count_40 = 0\n    local prime_digits_count_41 = 0\n    local prime_digits_count_42\
    \ = 0\n    local prime_digits_count_43 = 0\n    local prime_digits_count_44 =\
    \ 0\n    local prime_digits_count_45 = 0\n    local prime_digits_count_46 = 0\n\
    \    local prime_digits_count_47 = 0\n    local prime_digits_count_48 = 0\n  \
    \  local prime_digits_count_49 = 0\n    local ", "    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]",
  "    if num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    primes_count = 0\n    \n    for prime in primes\n\
    \        primes_count += prime_digits(prime)\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a binary number as a string and counts the number of\
    \ 1's in the binary number.\nExamples:\n>>> bin2dec(\"101010\")\n4\n>>> bin2dec(\"\
    1010101\")\n5\n>>> bin2dec(\"10101010\")\n8\n>>> bin2dec(\"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    local digits\
    \ = num\n    local primes = prime_digits(digits)\n    local prime_count = 0\n\
    \    \n    for prime in primes\n        prime_count = prime_count + 1\n    end\n\
    \    \n    return prime_count\nend\n</cell>\n<code language=julia-1.4>", "   \
    \ \n    local digits = num:gsub(\"^0x\",\"\"):gsub(\"^0$\",\"\")\n    local primes\
    \ = prime_digits(digits)\n    local prime_digits_count = prime_digits_count(digits)\n\
    \    local prime_digits_count_2 = prime_digits_count(digits)\n    local prime_digits_count_3\
    \ = prime_digits_count(digits)\n    local prime_digits_count_4 = prime_digits_count(digits)\n\
    \    local prime_digits_count_5 = prime_digits_count(digits)\n    local prime_digits_count_6\
    \ = prime_digits_count(digits)\n    local prime_digits_count_7 = prime_digits_count(digits)\n\
    \    local prime_digits_count_8 = prime_digits_count(digits)\n    local prime_digits_count_9\
    \ = prime_digits_count(digits)\n    local prime_digits_count_10 = prime_digits_count(digits)\n\
    \    local prime_digits_count_11 = prime_digits_count(digits)\n    local prime_digits_count_12\
    \ = prime_digits_count(digits)\n    local prime_digits_count_13 = prime_digits_count(digits)\n\
    \    local prime_digits_count_14 = prime_digits_count(digits)\n    local prime_digits_count_15\
    \ = prime_digits_count(digits)\n    local prime_digits_count_16 = prime_digits_count(digits)\n\
    \    local prime_digits_count_17 = prime_digits_count(digits)\n    local prime_digits_count_18\
    \ = prime_digits_count(digits)\n    local prime_digits_count_19 = prime_digits_count(digits)\n\
    \    local prime_digits_count_20 = prime_digits_count(digits)\n    local prime_digits_count_21\
    \ = prime_digits_count(digits)\n    local prime_digits_count_22 = prime_digits_count(digits)\n\
    \    local prime_digits_count_23 = prime_digits_count(digits)\n    local prime_digits_count_24\
    \ = prime_digits_count(digits)\n    local prime_digits_count_25 = prime_digits_count(digits)\n\
    \    local prime_digits_count_26 = prime_digits_count(digits)\n    local prime_digits_count_27\
    \ = prime_digits_count(digits)\n    local prime_digits_count_28 = prime_digits_count(digits)\n\
    \    local prime_digits_count_29 = prime_digits_", "    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hexadecimal_digits\
    \ = [0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F]\n    \n    hexadecimal_digits_set = Set(hexadecimal_digits)\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - prime_digits_set\n\
    \    \n    hexadecimal_digits_set = hexadecimal_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - hexadecimal_digits_set - prime_digits_set\n    \n\
    \    hexadecimal_digits_set = hexadecimal_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - hexadecimal_digits_set - prime_digits_set\n    \n\
    \    hexadecimal_digits_set = hexadecimal_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - hexadecimal_digits_set - prime_digits_set\n    \n\
    \    hexadecimal_digits_set = hexadecimal_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digits_set\
    \ - hexadecimal_digits_set - prime_digits_set\n    \n    hexadecimal_digits_set\
    \ = hexadecimal_digits_set - hexadecimal_digits_set - prime_digits_set\n    \n\
    \    hexadecimal_digits_set = hexadecimal_digits_set - hexadecimal_digits_set\
    \ - prime_digits_set\n    \n    hexadecimal_digits_set = hexadecimal_digit", " \
    \   \n    local hexadecimal = num\n    local count = 0\n    local prime_numbers\
    \ = prime_numbers()\n    \n    for digit in hexadecimal do\n        if digit in\
    \ prime_numbers then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend\n</cell>\n<text>\nExercise 3\nWrite a function that receives\
    \ a string and returns the number of characters that are not letters (uppercase\
    \ or lowercase).\nExamples:\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"\
    Hello World!\")\n3\n>>> not_letters(\"Hello World?\")\n4\n>>> not_letters(\"Hello\
    \ World!\")\n4\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\"\
    )\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n\
    5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n\
    >>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>>\
    \ not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"\
    Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello\
    \ World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\"\
    )\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n\
    5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n\
    >>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>>\
    \ not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"\
    Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello\
    \ World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\"\
    )\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n\
    5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n\
    >>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>>\
    \ not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"\
    Hello World\")\n5\n>>> not_letters(\"Hello World\")\n5\n>>> not_letter", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if num == \"\"\n        return 0\n\
    \    \n    hexDigits = num.chars().filter(x => x >= '0' and x <= '9').collect()\n\
    \    \n    hexDigits.sortBy(x => x)\n    \n    hexDigits.filter(x => x % 2 ==\
    \ 0)\n    \n    hexDigits.filter(x => x % 3 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 5 == 0)\n    \n    hexDigits.filter(x => x % 7 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 11 == 0)\n    \n    hexDigits.filter(x => x % 13 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 17 == 0)\n    \n    hexDigits.filter(x => x % 19 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 23 == 0)\n    \n    hexDigits.filter(x => x % 29 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 31 == 0)\n    \n    hexDigits.filter(x => x % 37 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 41 == 0)\n    \n    hexDigits.filter(x => x % 43 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 47 == 0)\n    \n    hexDigits.filter(x => x % 53 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 59 == 0)\n    \n    hexDigits.filter(x => x % 61 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 67 == 0)\n    \n    hexDigits.filter(x => x % 71 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 73 == 0)\n    \n    hexDigits.filter(x => x % 79 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 83 == 0)\n    \n    hexDigits.filter(x => x % 89 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 97 == 0)\n    \n    hexDigits.filter(x => x % 101 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 103 == 0)\n    \n    hexDigits.filter(x => x % 107 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 109 == 0)\n    \n    hexDigits.filter(x => x % 113 == 0)\n    \n    hexDigits.filter(x\
    \ => x % 117 == 0)\n    \n    hexDigits.filter(", "    \n    primes = prime_numbers()\n\
    \    \n    prime_digits = prime_digits(num)\n    \n    prime_digits_count = prime_digits.size\n\
    \    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digit", "    \n    primes = prime_digits(num)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    hex_key = 0\n    \n    for digit in num\n      \
    \  \n        if digit in primes\n            \n            hex_key += 1\n    \
    \        \n        end\n    end\n    \n    return hex_key\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    local digits = num\n    local count = 0\n    \n    for digit in digits\n\
    \        local hex = digit:hex()\n        if hex == 0 then\n            error(\"\
    invalid hexadecimal digit\")\n        end\n        if hex == 1 or hex == 2 or\
    \ hex == 3 or hex == 4 or hex == 5 then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    hex = num.chars().map(|c| if c >= '0' and c <= '9' then c - '0' else\
    \ c - 'A' + 10 end)\n    hex = hex.filter(|x| x % 2 == 0)\n    hex = hex.filter(|x|\
    \ x % 3 == 0)\n    hex = hex.filter(|x| x % 5 == 0)\n    hex = hex.filter(|x|\
    \ x % 7 == 0)\n    hex = hex.filter(|x| x % 11 == 0)\n    hex = hex.filter(|x|\
    \ x % 13 == 0)\n    hex = hex.filter(|x| x % 17 == 0)\n    hex = hex.filter(|x|\
    \ x % 19 == 0)\n    hex = hex.filter(|x| x % 23 == 0)\n    hex = hex.filter(|x|\
    \ x % 29 == 0)\n    hex = hex.filter(|x| x % 31 == 0)\n    hex = hex.filter(|x|\
    \ x % 37 == 0)\n    hex = hex.filter(|x| x % 41 == 0)\n    hex = hex.filter(|x|\
    \ x % 43 == 0)\n    hex = hex.filter(|x| x % 47 == 0)\n    hex = hex.filter(|x|\
    \ x % 53 == 0)\n    hex = hex.filter(|x| x % 59 == 0)\n    hex = hex.filter(|x|\
    \ x % 61 == 0)\n    hex = hex.filter(|x| x % 67 == 0)\n    hex = hex.filter(|x|\
    \ x % 71 == 0)\n    hex = hex.filter(|x| x % 73 == 0)\n    hex = hex.filter(|x|\
    \ x % 79 == 0)\n    hex = hex.filter(|x| x % 83 == 0)\n    hex = hex.filter(|x|\
    \ x % 89 == 0)\n    hex = hex.filter(|x| x % 97 == 0)\n    hex = hex.filter(|x|\
    \ x % 101 == 0)\n    hex = hex.filter(|x| x % 103 == 0)\n    hex = hex.filter(|x|\
    \ x % 107 == 0)\n    hex = hex.filter(|x| x % 109 == 0)\n    hex = hex.filter(|x|\
    \ x % 113 == 0)\n    hex = hex.filter(|x| x % 117 == 0)\n    hex = hex.filter(|x|\
    \ x % 121 == ", "    \n    primes = primes_list(10)\n    \n    hex_string = num.upper().replace(\"\
    A\",\"0\").replace(\"B\",\"1\").replace(\"C\",\"2\").replace(\"D\",\"3\").replace(\"\
    E\",\"4\").replace(\"F\",\"5\")\n    \n    hex_digits = hex_string.split(\"\"\
    )\n    \n    prime_digits = []\n    \n    for digit in hex_digits\n        if\
    \ digit in primes\n            prime_digits.append(digit)\n            \n    prime_digits\
    \ = prime_digits.sort()\n    \n    prime_digits = prime_digits[2:]\n    \n   \
    \ prime_digits = prime_digits[prime_digits.index(\"2\")+1:]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(\"3\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"\
    5\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"7\")+1:]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(\"11\")+1:]\n    \n\
    \    prime_digits = prime_digits[prime_digits.index(\"13\")+1:]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(\"17\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"\
    19\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"23\")+1:]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(\"29\")+1:]\n    \n\
    \    prime_digits = prime_digits[prime_digits.index(\"31\")+1:]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(\"37\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"\
    41\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"43\")+1:]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(\"47\")+1:]\n    \n\
    \    prime_digits = prime_digits[prime_digits.index(\"53\")+1:]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(\"59\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"\
    61\")+1:]\n    \n    prime_digits = prime_digits[prime_digits.index(\"67\")+1:]\n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = primes_list(10)\n    \n    digits = num.chars\n    \n    count\
    \ = 0\n    \n    for digit in digits\n        \n        if digit in primes\n \
    \           \n            count += 1\n            \n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.0>\nhex_key(\"AB\"\
    )\n</cell>\n<code language=julia-1.0>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a positive integer and returns the sum of\
    \ the squares of the digits of that number.\nExamples:\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n\
    25\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n>>> square_digits(123)",
  "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits_set = Set(hex_digits)\n\
    \    \n    prime_digits_set = prime_digits_set & hex_digits_set\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"0\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"1\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"2\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"3\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"4\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"5\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"6\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"7\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"8\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"9\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"A\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"B\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"C\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"D\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"E\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"F\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set([\"0\"])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set([\"1\"])\n    \n    prime_digits_set = prime_digits_set - Set([\"2\"])\n\
    \    \n    prime_digits_set = prime_digits_set - Set([\"3\"])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(", "    \n    local prime_digits = prime_digits(num)\n\
    \    local prime_digits_count = length(prime_digits)\n    local prime_digits_count_prime\
    \ = prime_digits_count - 2\n    \n    if prime_digits_count_prime == 0 then\n\
    \        return prime_digits_count\n    end\n    \n    local prime_digits_count_prime_2\
    \ = prime_digits_count_prime - 2\n    \n    if prime_digits_count_prime_2 == 0\
    \ then\n        return prime_digits_count + 2\n    end\n    \n    local prime_digits_count_prime_3\
    \ = prime_digits_count_prime_2 - 2\n    \n    if prime_digits_count_prime_3 ==\
    \ 0 then\n        return prime_digits_count + 3\n    end\n    \n    local prime_digits_count_prime_4\
    \ = prime_digits_count_prime_3 - 2\n    \n    if prime_digits_count_prime_4 ==\
    \ 0 then\n        return prime_digits_count + 4\n    end\n    \n    local prime_digits_count_prime_5\
    \ = prime_digits_count_prime_4 - 2\n    \n    if prime_digits_count_prime_5 ==\
    \ 0 then\n        return prime_digits_count + 5\n    end\n    \n    local prime_digits_count_prime_6\
    \ = prime_digits_count_prime_5 - 2\n    \n    if prime_digits_count_prime_6 ==\
    \ 0 then\n        return prime_digits_count + 6\n    end\n    \n    local prime_digits_count_prime_7\
    \ = prime_digits_count_prime_6 - 2\n    \n    if prime_digits_count_prime_7 ==\
    \ 0 then\n        return prime_digits_count + 7\n    end\n    \n    local prime_digits_count_prime_8\
    \ = prime_digits_count_prime_7 - 2\n    \n    if prime_digits_count_prime_8 ==\
    \ 0 then\n        return prime_digits_count + 8\n    end\n    \n    local prime_digits_count_prime_9\
    \ = prime_digits_count_prime_8 - 2\n    \n    if prime_digits_count_prime_9 ==\
    \ 0 then\n        return prime_digits_count + 9\n    end\n    \n    local prime_digits_count_prime_10\
    \ = prime_digits_count_prime_9 - 2\n    \n    if prime_digits_count_prime_10 ==\
    \ 0 then\n        return prime_digits_count + 10\n    end\n    \n    local prime_digits_count_prime_11\
    \ = prime_digits_", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    primes = primes_list(num) \n    \n    count = 0 \n    for p in primes\
    \ \n        if p*p > num \n            count += 1 \n        else \n          \
    \  count += 0 \n    return count \nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise: Write a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11,\
    \ 13, 17,...\n    So you have to determine a number of the following digits: 2,\
    \ 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the\
    \ input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always\
    \ uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
    1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"", "    if num == \"\"\n\
    \        return 0\n    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = primes.count\n    \n    hex_count = prime_digits_count\
    \ * 2\n    \n    hex_key = 0\n    \n    for digit in digits\n        if digit\
    \ in primes\n            hex_key += digit\n            hex_count += 1\n      \
    \      \n    return hex_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and returns the number of hexadecimal digits in the number.",
  "    \n    primes = primes_list(10)\n    \n    primes_count = 0\n    \n    for prime\
    \ in primes\n        if num == prime\n            primes_count += 1\n        end\n\
    \    end\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume \nthe input is always correct or empty string, and symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes\
    \ = primes_list(num) \n    \n    prime_digits = primes.map(|x| x.digits)\n   \
    \ \n    prime_digits = prime_digits.filter(|x| x.len() == 4)\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.contains(&\"0123456789ABCDEF\"))\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.contains(&\"A\"))\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.contains(&\"B\"))\n    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"\
    C\"))\n    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"D\"))\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"E\"))\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.contains(&\"F\"))\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.contains(&\"0\"))\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.contains(&\"1\"))\n    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"\
    2\"))\n    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"3\"))\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"4\"))\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.contains(&\"5\"))\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.contains(&\"6\"))\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.contains(&\"7\"))\n    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"\
    8\"))\n    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"9\"))\n\
    \    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"A\"))\n    \n\
    \    prime_digits = prime_digits.filter(|x| x.contains(&\"B\"))\n    \n    prime_digits\
    \ = prime_digits.filter(|x| x.contains(&\"C\"))\n    \n    prime_digits = prime_digits.filter(|x|\
    \ x.contains(&\"D\"))\n    \n    prime_digits = prime_digits.filter(|x| x.contains(&\"\
    E\"))\n    ", "    \n    local digits = num\n    local prime_count = 0\n    local\
    \ prime_digits = \"\"\n    local prime_digits_count = 0\n    local prime_digits_sum\
    \ = 0\n    local prime_digits_sum2 = 0\n    local prime_digits_sum3 = 0\n    local\
    \ prime_digits_sum4 = 0\n    local prime_digits_sum5 = 0\n    local prime_digits_sum6\
    \ = 0\n    local prime_digits_sum7 = 0\n    local prime_digits_sum8 = 0\n    local\
    \ prime_digits_sum9 = 0\n    local prime_digits_sum10 = 0\n    local prime_digits_sum11\
    \ = 0\n    local prime_digits_sum12 = 0\n    local prime_digits_sum13 = 0\n  \
    \  local prime_digits_sum14 = 0\n    local prime_digits_sum15 = 0\n    local prime_digits_sum16\
    \ = 0\n    local prime_digits_sum17 = 0\n    local prime_digits_sum18 = 0\n  \
    \  local prime_digits_sum19 = 0\n    local prime_digits_sum20 = 0\n    local prime_digits_sum21\
    \ = 0\n    local prime_digits_sum22 = 0\n    local prime_digits_sum23 = 0\n  \
    \  local prime_digits_sum24 = 0\n    local prime_digits_sum25 = 0\n    local prime_digits_sum26\
    \ = 0\n    local prime_digits_sum27 = 0\n    local prime_digits_sum28 = 0\n  \
    \  local prime_digits_sum29 = 0\n    local prime_digits_sum30 = 0\n    local prime_digits_sum31\
    \ = 0\n    local prime_digits_sum32 = 0\n    local prime_digits_sum33 = 0\n  \
    \  local prime_digits_sum34 = 0\n    local prime_digits_sum35 = 0\n    local prime_digits_sum36\
    \ = 0\n    local prime_digits_sum37 = 0\n    local prime_digits_sum38 = 0\n  \
    \  local prime_digits_sum39 = 0\n    local prime_digits_sum40 = 0\n    local prime_digits_sum41\
    \ = 0\n    local prime_digits_sum42 = 0\n    local prime_digits_sum43 = 0\n  \
    \  local prime_digits_sum44 = 0\n    local prime_digits_sum45 = 0\n    local prime_digits_sum46\
    \ = 0\n    local prime_digits_sum47 = 0\n    local prime_digits_sum48 = 0\n  \
    \  local prime", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    local hex_key = 0\n    local num_str = num\n\
    \    local num_len = length(num)\n    \n    if num_len > 0 then\n        \n  \
    \      local prime_flag = false\n        local prime_number = 2\n        local\
    \ prime_number_len = length(prime_number)\n        \n        for i = 1, num_len\
    \ do\n            \n            if num_str[i] == \"A\" or num_str[i] == \"B\"\
    \ or num_str[i] == \"C\" or num_str[i] == \"D\" or num_str[i] == \"E\" or num_str[i]\
    \ == \"F\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"0\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"1\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"2\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"3\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"4\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"5\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"6\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"7\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"8\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"9\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"A\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"B\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"C\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"D\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"E\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"F\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"G\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"H\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"I\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"J\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"K\" then\n                hex_key = hex_key + 1\n            elseif num_str[i]\
    \ == \"L\" then\n                hex_key = hex_key + 1\n            elseif num_str",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if num == \"\"\n\
    \        return 0\n    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = primes.len\n    \n    hex_count = prime_digits_count\
    \ * 2\n    \n    hex_digits = digits[0..prime_digits_count-1]\n    \n    hex_count\
    \ = hex_count + hex_digits.len\n    \n    return hex_count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives\
    \ a hexadecimal number as a string and counts the number of hexadecimal \n   \
    \ digits that are primes (prime number, or a prime, is a natural number \n   \
    \ greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note:\
    \ you may assume the input is always correct or empty string, \n    and symbols\
    \ A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n\
    \    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n   \
    \ 4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n\
    \    2\n    \"\"\"", "    \n    primes = primes_list(10)\n    primes_set = Set(primes)\n\
    \    \n    digits = num.chars\n    \n    hex_count = 0\n    \n    for digit in\
    \ digits\n        if digit in primes_set\n            hex_count += 1\n       \
    \     \n    return hex_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNotes: you may assume the input is always correct or\
    \ empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    local digits = num\n    local primes = 2\n    local prime_digits\
    \ = 2\n    local prime_digit_count = 0\n    local prime_digit_count_2 = 0\n  \
    \  local prime_digit_count_3 = 0\n    local prime_digit_count_4 = 0\n    local\
    \ prime_digit_count_5 = 0\n    local prime_digit_count_6 = 0\n    local prime_digit_count_7\
    \ = 0\n    local prime_digit_count_8 = 0\n    local prime_digit_count_9 = 0\n\
    \    local prime_digit_count_10 = 0\n    local prime_digit_count_11 = 0\n    local\
    \ prime_digit_count_12 = 0\n    local prime_digit_count_13 = 0\n    local prime_digit_count_14\
    \ = 0\n    local prime_digit_count_15 = 0\n    local prime_digit_count_16 = 0\n\
    \    local prime_digit_count_17 = 0\n    local prime_digit_count_18 = 0\n    local\
    \ prime_digit_count_19 = 0\n    local prime_digit_count_20 = 0\n    local prime_digit_count_21\
    \ = 0\n    local prime_digit_count_22 = 0\n    local prime_digit_count_23 = 0\n\
    \    local prime_digit_count_24 = 0\n    local prime_digit_count_25 = 0\n    local\
    \ prime_digit_count_26 = 0\n    local prime_digit_count_27 = 0\n    local prime_digit_count_28\
    \ = 0\n    local prime_digit_count_29 = 0\n    local prime_digit_count_30 = 0\n\
    \    local prime_digit_count_31 = 0\n    local prime_digit_count_32 = 0\n    local\
    \ prime_digit_count_33 = 0\n    local prime_digit_count_34 = 0\n    local prime_digit_count_35\
    \ = 0\n    local prime_digit_count_36 = 0\n    local prime_digit_count_37 = 0\n\
    \    local prime_digit_count_38 = 0\n    local prime_digit_count_39 = 0\n    local\
    \ prime_digit_count_40 = 0\n    local prime_digit_count_41 = 0\n    local prime_digit_count_42\
    \ = 0\n    local prime_digit_count_43 = 0\n    local prime_digit_count_44 = 0\n\
    \    local prime_digit_count_45 = 0\n    local prime_digit_count_46 = 0\n    local\
    \ prime_digit_count_47 = 0\n    local prime_digit_count_48 = 0\n    local prime_digit_count_49\
    \ = 0\n    local prime_digit_count_50 = 0\n    local prime_digit_count_51 = 0\n\
    \    local prime_digit_count_52 = 0\n    local prime_digit_count_53 = 0\n    local\
    \ prime_digit_count_54 = 0\n    local prime_digit_count_", "    \n    primes =\
    \ primes_list(10)\n    \n    hex_digits = num.chars\n    \n    prime_digits =\
    \ primes.filter( x -> hex_digits.contains(x.to_string()))\n    \n    prime_digits_count\
    \ = prime_digits.count\n    \n    prime_digits_count = prime_digits_count + 1\n\
    \    \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume the input is always correct or empty string, and symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_digits\
    \ = [2,3,5,7,11,13,17,19]\n    prime_digits_set = Set(prime_digits)\n    \n  \
    \  hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    hex_digits_set\
    \ = Set(hex_digits)\n    \n    hex_digits_set = hex_digits_set - prime_digits_set\n\
    \    \n    hex_digits_set = hex_digits_set - prime_digits_set - prime_digits_set\n\
    \    \n    hex_digits_set = hex_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set\n    \n    hex_digits_set = hex_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set\n    \n    hex_digits_set\
    \ = hex_digits_set - prime_digits_set - prime_digits_set - prime_digits_set -\
    \ prime_digits_set - prime_digits_set\n    \n    hex_digits_set = hex_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set\n    \n    hex_digits_set = hex_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set\n    \n    hex_digits_set\
    \ = hex_digits_set - prime_digits_set - prime_digits_set - prime_digits_set -\
    \ prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set -\
    \ prime_digits_set\n    \n    hex_digits_set = hex_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\n\
    \    \n    hex_digits_set = hex_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digit", " \
    \   \n    local primes = primes_list(10)\n    local primes_count = 0\n    \n \
    \   for prime in primes\n        if num == hex_key(prime)\n            primes_count\
    \ = primes_count + 1\n        end\n    end\n    \n    return primes_count\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"\
    Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello\
    \ World\")\n0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello World\"\
    )\n0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello World\")\n\
    0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello World\")\n0\n\
    >>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello World\")\n0\n>>>\
    \ not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"\
    Hello World!\")\n5\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello\
    \ World!\")\n5\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\"\
    )\n5\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n\
    5\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n5\n\
    >>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n5\n>>>\
    \ not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"\
    Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello\
    \ World\")\n0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello World\"\
    )\n0\n>>> not_letters(\"Hello World!\")\n5\n>>> not_letters(\"Hello World\")\n\
    0\n>>> not_letter", "    \n    local num_str = num\n    local num_len = length(num)\n\
    \    \n    if num_len == 0 \n        then return 0\n    else \n        local num_digits\
    \ = floor(log10(num_len))\n        local num_digits_str = num_digits:tostring()\n\
    \        \n        if num_digits_str == \"0\"\n            then return 0\n   \
    \     else \n            local num_digits_int = tonumber(num_digits_str)\n   \
    \         \n            if num_digits_int == 0\n                then return 0\n\
    \            else \n                local num_digits_int_str = num_digits_int:tostring()\n\
    \                \n                if num_digits_int_str == \"0\"\n          \
    \          then return 0\n                else \n                    local num_digits_int_str_len\
    \ = length(num_digits_int_str)\n                    \n                    if num_digits_int_str_len\
    \ > 0\n                        then return 0\n                    else \n    \
    \                    local num_digits_int_str_len_str = num_digits_int_str_len:tostring()\n\
    \                        \n                        if num_digits_int_str_len_str\
    \ == \"0\"\n                            then return 0\n                      \
    \  else \n                            local num_digits_int_str_len_int = tonumber(num_digits_int_str_len_str)\n\
    \                            \n                            if num_digits_int_str_len_int\
    \ == 0\n                                then return 0\n                      \
    \      else \n                                local num_digits_int_str_len_str_str\
    \ = num_digits_int_str_len_str:tostring()\n                                \n\
    \                                if num_digits_int_str_len_str == \"0\"\n    \
    \                                then return 0\n                             \
    \   else \n                                    local num_digits_int_str_len_str_int\
    \ = tonumber(num_digits_int_str_len_str_str)\n                               \
    \     \n                                    if num_digits_int_str_len_int == 0\n\
    \                                        then return 0\n                     \
    \               else \n                                        local num_digits_int_str_len_str_str_str\
    \ = num_digits_int_str_len_str_str:tostring()\n                              \
    \          \n                                        if num_digits_int_str_len_str\
    \ == \"0\"\n                                            then return 0\n      \
    \                                  else \n                                   \
    \         local num_digits_int_str_len_str_str_int = tonumber(num_digits_int_str_len_str_str_str)\n\
    \                                            \n                              \
    \              if num_digits_int_str_len_int == 0\n                          \
    \                      then return 0\n                                       \
    \     else \n                                                local num_digits_int_str_len_str_str_str_str\
    \ = num_digits_int_str_len_str_str_str:tostring()\n                          \
    \                      \n                                                if num_digits_int_str_len_str\
    \ == \"0\"\n                                                    then return 0\n\
    \                                                else \n                     \
    \                               local num_digits_int_str_len_str_str_str_int =\
    \ tonumber(num_digits_int_str_len_str_str_str_str)\n                         \
    \                           \n                                               \
    \     if num_digits_int_str_len", "    \n    local digits = num\n    local primes\
    \ = prime_digits(digits)\n    local prime_digits_count = length(primes)\n    \n\
    \    if prime_digits_count > 1 then\n        local prime_digits_count_2 = prime_digits_count\
    \ - 2\n        local prime_digits_count_3 = prime_digits_count - 3\n        local\
    \ prime_digits_count_5 = prime_digits_count - 5\n        local prime_digits_count_7\
    \ = prime_digits_count - 7\n        local prime_digits_count_11 = prime_digits_count\
    \ - 11\n        local prime_digits_count_13 = prime_digits_count - 13\n      \
    \  local prime_digits_count_17 = prime_digits_count - 17\n        local prime_digits_count_19\
    \ = prime_digits_count - 19\n        local prime_digits_count_23 = prime_digits_count\
    \ - 23\n        local prime_digits_count_29 = prime_digits_count - 29\n      \
    \  local prime_digits_count_31 = prime_digits_count - 31\n        local prime_digits_count_37\
    \ = prime_digits_count - 37\n        local prime_digits_count_41 = prime_digits_count\
    \ - 41\n        local prime_digits_count_43 = prime_digits_count - 43\n      \
    \  local prime_digits_count_47 = prime_digits_count - 47\n        local prime_digits_count_53\
    \ = prime_digits_count - 53\n        local prime_digits_count_59 = prime_digits_count\
    \ - 59\n        local prime_digits_count_61 = prime_digits_count - 61\n      \
    \  local prime_digits_count_67 = prime_digits_count - 67\n        local prime_digits_count_71\
    \ = prime_digits_count - 71\n        local prime_digits_count_73 = prime_digits_count\
    \ - 73\n        local prime_digits_count_79 = prime_digits_count - 79\n      \
    \  local prime_digits_count_81 = prime_digits_count - 81\n        local prime_digits_count_89\
    \ = prime_digits_count - 89\n        local prime_digits_count_91 = prime_digits_count\
    \ - 91\n        local prime_digits_count_93 = prime_digits_count - 93\n      \
    \  local prime_digits_count_97 = prime_digits_count - 97\n        local prime_digits_count_101\
    \ = prime_digits_count - 101", "    \n    hex_key::Int64 = 0\n    \n    if num\
    \ == \"\"\n        return hex_key\n    \n    for digit in num\n        if digit\
    \ in \"ABCDEF\"\n            hex_key += 1\n    \n    return hex_key\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a positive integer and returns the number of \n    digits\
    \ that are divisible by 3 or 5.\n    Examples:\n    >>> count_digits(10)\n   \
    \ 1\n    >>> count_digits(100)\n    2\n    >>> count_digits(1000)\n    3\n   \
    \ >>> count_digits(10000)\n    4\n    >>> count_digits(100000)\n    5\n    >>>\
    \ count_digits(1000000)\n    6\n    >>> count_digits(10000000)\n    7\n    >>>\
    \ count_digits(100000000)\n    8\n    >>> count_digits(1000000000)\n    9\n  \
    \  >>> count_digits(10000000000)\n    10\n    >>> count_digits(100000000000)\n\
    \    11\n    >>> count_digits(1000000000000)\n    12\n    >>> count_digits(10000000000000)\n\
    \    13\n    >>> count_digits(1000000000000000)\n    14\n    >>> count_digits(10000000000000000)\n\
    \    15\n    >>> count_digits(100000000000000000)\n    16\n    >>> count_digits(1000000000000000000)\n\
    \    17\n    >>> count_digits(10000000000000000000)\n    18\n    >>> count_digits(100000000000000000000)\n\
    \    19\n    >>> count_digits(1000000000000000000000)\n    20\n    >>> count_digits(10000000000000000000000)\n\
    \    21\n    >>> count_digits(100000000000000000000000)\n    22\n    >>> count_digits(1000000000000000000000000)\n\
    \    23\n    >>> count_digits(10000000000000000000000000)\n    24\n    >>> count_digits(100000000000000000000000000)\n\
    \    25\n    >>> count_digits(1000000000000000000000000000)\n    26\n    >>> count_digits(10000000000000000000000000000)\n\
    \    27\n    >>> count_digits(100000000000000000000000000000)\n    28\n    >>>\
    \ count_digits(1000000000000000000000000000000)\n    29\n    >>> count_digits(10000000000000000000000000000000)\n\
    \    30\n    >>> count_digits(100000000000000000000000000000000)\n    ", "   \
    \ \n    \n    \"\"\"\n    Write a function that receives a hexadecimal number\
    \ as a string and \n    counts the number of hexadecimal digits that are primes\
    \ (prime number, \n    or a prime, is a natural number greater than 1 that is\
    \ not a product of two \n    smaller natural numbers).\n    Hexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2,\
    \ 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"", " \
    \   if num == \"\"\n        return 0\n    \n    digits = num.digits\n    \n  \
    \  primes = prime_digits(digits)\n    \n    prime_digits_count = length(primes)\n\
    \    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_",
  "    \n    local prime_digits = prime_digits(num)\n    local num_digits = length(num)\n\
    \    \n    if num_digits == 0 \n        then return 0\n    else if num_digits\
    \ == 1\n        then return prime_digits[toupper(num)]\n    else if num_digits\
    \ == 2\n        then return prime_digits[toupper(num)] + prime_digits[toupper(num)]\n\
    \    else if num_digits == 3\n        then return prime_digits[toupper(num)] +\
    \ prime_digits[toupper(num)] + prime_digits[toupper(num)]\n    else if num_digits\
    \ == 4\n        then return prime_digits[toupper(num)] + prime_digits[toupper(num)]\
    \ + prime_digits[toupper(num)] + prime_digits[toupper(num)]\n    else if num_digits\
    \ == 5\n        then return prime_digits[toupper(num)] + prime_digits[toupper(num)]\
    \ + prime_digits[toupper(num)] + prime_digits[toupper(num)] + prime_digits[toupper(num)]\n\
    \    else if num_digits == 6\n        then return prime_digits[toupper(num)] +\
    \ prime_digits[toupper(num)] + prime_digits[toupper(num)] + prime_digits[toupper(num)]\
    \ + prime_digits[toupper(num)] + prime_digits[toupper(num)]\n    else if num_digits\
    \ == 7\n        then return prime_digits[toupper(num)] + prime_digits[toupper(num)]\
    \ + prime_digits[toupper(num)] + prime_digits[toupper(num)] + prime_digits[toupper(num)]\
    \ + prime_digits[toupper(num)] + prime_digits[toupper(num)] + prime_digits[toupper(num)]\n\
    \    else if num_digits == 8\n        then return prime_digits[toupper(num)] +\
    \ prime_digits[toupper(num)] + prime_digits[toupper(num)] + prime_digits[toupper(num)]\
    \ + prime_digits[toupper(num)] + prime_digits[toupper(num)] + prime_digits[toupper(num)]\
    \ + prime_digits[toupper(num)] + prime_digits[toupper(num)] + prime_digits[toupper(num)]\n\
    \    else if num_digits == 9\n        then return prime_digits[toupper(num)] +\
    \ prime_digits[toupper(num)] + prime_digits[toupper(num)] + ", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_digits\
    \ = num.chars\n    \n    prime_digits_count = 0\n    \n    for digit in hex_digits\n\
    \        if digit in prime_digits\n            prime_digits_count += 1\n    \n\
    \    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters in the string.\nExamples:\n>>> count_chars(\"\
    Hello World\")\n10\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> ", "    \n    local prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    primes = primes_list(10)\n\
    \    \n    digits = num.chars\n    \n    primes_count = 0\n    \n    for digit\
    \ in digits\n        if digit in primes\n            primes_count += 1\n     \
    \       \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"", " \
    \   if num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n   \
    \ primes = primes_list(digits)\n    \n    primes_count = 0\n    \n    for prime\
    \ in primes\n        if primes_count < prime\n            primes_count += 1\n\
    \            \n    primes_count += primes_count(digits)\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNotes:\
    \ you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2", "    if num == \"\"\n        return 0\n    \n    digits = num.chars()\n  \
    \  \n    primes = prime_digits(digits)\n    \n    prime_digits_count = primes.count{|x|\
    \ x == digits}\n    \n    if prime_digits_count == 0\n        return 0\n    \n\
    \    prime_digits_count -= 1\n    \n    prime_digits_count += primes.count{|x|\
    \ x == digits[digits.length-1]}\n    \n    return prime_digits_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may be empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\n\
    hex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"\
    123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2", "    if num == \"\"\n        return\
    \ 0\n    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n  \
    \  \n    primes_count = 0\n    \n    for prime in primes\n        primes_count\
    \ += primes_count(digits, prime)\n    \n    return primes_count\nend", "    \n\
    \    local digits = num\n    local primes = prime_digits(digits)\n    local prime_count\
    \ = 0\n    local prime_digits = \"\"\n    \n    for prime in primes do\n     \
    \   prime_digits = prime_digits .. prime\n        if prime_digits == digits then\n\
    \            prime_count = prime_count + 1\n        end\n    end\n    return prime_count\n\
    end\n</cell>\n<code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a\
    \ natural number \n    greater than 1 that is not a product of two smaller natural\
    \ numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,\
    \ D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal\
    \ 11), D (=decimal 13).\n    Note: you may assume the input is always correct\
    \ or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n\
    \    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n    \"\"\"", "    \n    prime_digits = prime_digits(num)\n   \
    \ \n    prime_digits_count = length(prime_digits)\n    \n    if prime_digits_count\
    \ == 0 \n        error(\"The input string does not contain any hexadecimal digits\"\
    )\n    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ prime_digits(num)\n    \n    prime_digits_count = length(primes)\n    \n   \
    \ prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count =\
    \ prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count -\
    \ 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime", "    \n   \
    \ primes = primes_list(10)\n    \n    primes_count = 0\n    \n    for prime in\
    \ primes\n        if num == hex_key(prime)\n            primes_count += 1\n  \
    \      end\n    end\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters.\nExamples:\n>>> count_letters(\"\
    Hello World\")\n5\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")\n4\n>>> count_letters(\"Hello World!\")\n3\n>>> count_letters(\"\
    Hello World?\")", "    if num == \"\"\n        return 0\n    \n    digits = num.chars\n\
    \    \n    primes = prime_digits(digits)\n    \n    prime_digits_count = primes.len()\n\
    \    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_",
  "    \n    primes = primes_list(10)\n    \n    digits = num.chars\n    \n    prime_digits\
    \ = primes.filter(x -> digits.contains(x))\n    \n    prime_digits_count = prime_digits.count\n\
    \    \n    hex_count = prime_digits_count * 2\n    \n    return hex_count\nend",
  "    if num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes\
    \ = primes_list(digits)\n    \n    primes_count = 0\n    \n    for prime in primes\n\
    \        if prime == digits[prime]\n            primes_count += 1\n          \
    \  \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and returns the number of digits that are primes (prime number,\
    \ or a prime, is a natural number greater than 1 that is not a product of two\
    \ smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11),\
    \ D (=decimal 13).\nNote: the input may be empty or contain symbols A,B,C,D,E,F\
    \ only.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\"\
    )\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2", "    \n    local\
    \ digits = num\n    local count = 0\n    \n    for d in digits\n        \n   \
    \     if d == \"A\" or d == \"B\" or d == \"C\" or d == \"D\" or d == \"E\" or\
    \ d == \"F\"\n            \n            count = count + 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and returns\
    \ the number of digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may or may not be correct.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"\
    1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"\
    2020\")\n2", "    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = primes.len\n    \n    hex_count = prime_digits_count\
    \ * 2\n    \n    hex_key = 0\n    \n    for digit in digits\n        if digit\
    \ in primes\n            hex_key += digit\n            hex_count += 1\n      \
    \  end\n    end\n    \n    return hex_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of times each character appears in the string.\nExamples:\n\
    >>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r':\
    \ 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o':\
    \ 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e':\
    \ 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"Hello World\"\
    )\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"\
    Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>>\
    \ count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r':\
    \ 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o':\
    \ 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e':\
    \ 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"Hello World\"\
    )\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"\
    Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd", "    \n\
    \    local digits = num\n    local primes = prime_digits(digits)\n    local prime_digits_count\
    \ = length(primes)\n    \n    if prime_digits_count > 0 then\n        local prime_digits_count_2\
    \ = prime_digits_count - 1\n        local prime_digits_count_3 = prime_digits_count_2\
    \ - 1\n        local prime_digits_count_4 = prime_digits_count_3 - 1\n       \
    \ local prime_digits_count_5 = prime_digits_count_4 - 1\n        local prime_digits_count_6\
    \ = prime_digits_count_5 - 1\n        local prime_digits_count_7 = prime_digits_count_6\
    \ - 1\n        local prime_digits_count_8 = prime_digits_count_7 - 1\n       \
    \ local prime_digits_count_9 = prime_digits_count_8 - 1\n        local prime_digits_count_10\
    \ = prime_digits_count_9 - 1\n        local prime_digits_count_11 = prime_digits_count_10\
    \ - 1\n        local prime_digits_count_12 = prime_digits_count_11 - 1\n     \
    \   local prime_digits_count_13 = prime_digits_count_12 - 1\n        local prime_digits_count_14\
    \ = prime_digits_count_13 - 1\n        local prime_digits_count_15 = prime_digits_count_14\
    \ - 1\n        local prime_digits_count_16 = prime_digits_count_15 - 1\n     \
    \   local prime_digits_count_17 = prime_digits_count_16 - 1\n        local prime_digits_count_18\
    \ = prime_digits_count_17 - 1\n        local prime_digits_count_19 = prime_digits_count_18\
    \ - 1\n        local prime_digits_count_20 = prime_digits_count_19 - 1\n     \
    \   local prime_digits_count_21 = prime_digits_count_20 - 1\n        local prime_digits_count_22\
    \ = prime_digits_count_21 - 1\n        local prime_digits_count_23 = prime_digits_count_22\
    \ - 1\n        local prime_digits_count_24 = prime_digits_count_23 - 1\n     \
    \   local prime_digits_count_25 = prime_digits_count_24 - 1\n        local prime_digits_count_26\
    \ = prime_digits_count_25 - 1\n        local prime_digits_count_27 = prime_digits_count_26\
    \ - 1\n        local prime_digits_count_28 = prime_digits_count_27 - 1\n     \
    \   local prime_digits_count_29 = prime_digits_count_28 - 1\n        local prime_digit",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if num == \"\"\n\
    \        return 0\n    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n\
    \    \n    primes_count = primes.count\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    ", "    if num == \"\"\n        return 0\n    \n    digits = num.digits\n\
    \    \n    primes = primes_from(digits)\n    \n    primes_count = 0\n    for prime\
    \ in primes\n        if primes_count < digits.length\n            primes_count\
    \ += primes_from(digits[primes_count .. digits.length])\n        else\n      \
    \      primes_count += primes_from(digits[primes_count .. digits.length - 1])\n\
    \    end\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may be empty or contain symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2", "    \n    primes = primes_list(10)\n    \n    primes_count = primes.count{|x|\
    \ num.chars.all? {|c| primes.include?(c)}}\n    \n    primes_count += primes.count{|x|\
    \ num.chars.all? {|c| x % c == 0 }}\n    \n    return primes_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"ABCD\")\n3\n>>> not_letters(\"ABCD1\"\
    )\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"\
    ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>>\
    \ not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"\
    ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>>\
    \ not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"\
    ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>>\
    \ not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"\
    ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>>\
    \ not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"\
    ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>>\
    \ not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"\
    ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n>>> not_letters(\"ABCD1\")\n0\n",
  "    \n    primes = primes_list(10)\n    \n    primes_count = primes.count{|x| num.chars.all?\
    \ {|c| primes.include?(c)}}\n    \n    hex_count = num.chars.all? {|c| hexdigit(c)}\n\
    \    \n    if primes_count == hex_count \n        return primes_count\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNotes: you may assume the input is always correct or\
    \ empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if num == \"\"\n        return 0\n    \n    digits = num.chars\n\
    \    \n    primes = primes_list(digits)\n    \n    primes_count = primes.count\n\
    \    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    ", "    \n    primes = primes_list(10)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        \n       \
    \ if num == hex_key(prime)\n            primes_count += 1\n        end\n    end\n\
    \    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters (uppercase or lowercase).\n\
    Examples:\n>>> count_letters(\"Hello World\")\n5\n>>> count_letters(\"Hello World!\"\
    )\n7\n>>> count_letters(\"Hello World!!\")\n8\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> count_letters(\"Hello World!!!\"\
    )\n9\n>>> count_letters(\"Hello World!!!\")\n9\n>>> ", "    \n    primes = primes_list(10)\n\
    \    \n    digits = num.chars\n    \n    count = 0\n    \n    for digit in digits\n\
    \        \n        if digit in primes\n            \n            count += 1\n\
    \            \n        end\n    end\n    \n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    primes = primes_list(10)\n    \n    digits =\
    \ num.chars\n    \n    prime_digits = primes.filter( digit => digits.contains(digit)\
    \ )\n    \n    prime_digits_count = prime_digits.count\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1\n    \n    prime_digits_count\
    \ = prime_digits_count > 0 ? prime_digits_count : 1", "    if num == \"\"\n  \
    \      return 0\n    \n    digits = num.chars()\n    \n    hexDigits = digits[0..2].map(|x|\
    \ x.to_i16)\n    \n    primes = hexDigits.filter(|x| x % 2 == 0)\n    \n    hexDigits.filter(|x|\
    \ x % 3 == 0).count() \n    \n    hexDigits.filter(|x| x % 5 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 7 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 11 == 0).count() \n    \n    hexDigits.filter(|x| x % 13 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 17 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 19 == 0).count() \n    \n    hexDigits.filter(|x| x % 23 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 29 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 31 == 0).count() \n    \n    hexDigits.filter(|x| x % 37 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 41 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 43 == 0).count() \n    \n    hexDigits.filter(|x| x % 47 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 53 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 59 == 0).count() \n    \n    hexDigits.filter(|x| x % 61 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 67 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 71 == 0).count() \n    \n    hexDigits.filter(|x| x % 73 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 79 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 83 == 0).count() \n    \n    hexDigits.filter(|x| x % 89 == 0).count() \n\
    \    \n    hexDigits.filter(|x| x % 97 == 0).count() \n    \n    hexDigits.filter(|x|\
    \ x % 101 == 0).count() \n    \n    hexDigits.filter(|x", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n\
    \    \n    primes_count = primes.count\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_", "    \n    primes = primes_list(10)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        \n       \
    \ if num == prime\n            primes_count += 1\n        end\n    end\n    \n\
    \    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may be empty or contain symbols A,B,C,D,E,F\
    \ only.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\"\
    )\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2", "    \n    local\
    \ digits = num\n    local prime_digits = \"\"\n    local prime_digits_count =\
    \ 0\n    local prime_digits_sum = 0\n    local prime_digits_product = 1\n    local\
    \ prime_digits_sum2 = 0\n    local prime_digits_product2 = 0\n    local prime_digits_sum3\
    \ = 0\n    local prime_digits_product3 = 0\n    local prime_digits_sum4 = 0\n\
    \    local prime_digits_product4 = 0\n    local prime_digits_sum5 = 0\n    local\
    \ prime_digits_product5 = 0\n    local prime_digits_sum6 = 0\n    local prime_digits_product6\
    \ = 0\n    local prime_digits_sum7 = 0\n    local prime_digits_product7 = 0\n\
    \    local prime_digits_sum8 = 0\n    local prime_digits_product8 = 0\n    local\
    \ prime_digits_sum9 = 0\n    local prime_digits_product9 = 0\n    local prime_digits_sum10\
    \ = 0\n    local prime_digits_product10 = 0\n    local prime_digits_sum11 = 0\n\
    \    local prime_digits_product11 = 0\n    local prime_digits_sum12 = 0\n    local\
    \ prime_digits_product12 = 0\n    local prime_digits_sum13 = 0\n    local prime_digits_product13\
    \ = 0\n    local prime_digits_sum14 = 0\n    local prime_digits_product14 = 0\n\
    \    local prime_digits_sum15 = 0\n    local prime_digits_product15 = 0\n    local\
    \ prime_digits_sum16 = 0\n    local prime_digits_product16 = 0\n    local prime_digits_sum17\
    \ = 0\n    local prime_digits_product17 = 0\n    local prime_digits_sum18 = 0\n\
    \    local prime_digits_product18 = 0\n    local prime_digits_sum19 = 0\n    local\
    \ prime_digits_product19 = 0\n    local prime_digits_sum20 = 0\n    local prime_digits_product20\
    \ = 0\n    local prime_digits_sum21 = 0\n    local prime_digits_product21 = 0\n\
    \    local prime_digits_sum22 = 0\n    local prime_digits_product22 = 0\n    local\
    \ prime_digits_sum23 = 0\n    local prime_digits_product23 = 0\n    local prime_digits_sum24\
    \ = 0\n    local prime_digits_product24 = 0\n    local prime_digits_sum25 = 0\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes_list(10)\n    \n    hex_digits = num.chars().filter(x -> x>='0' and x<='9').collect()\n\
    \    \n    prime_digits = primes.filter(x -> hex_digits.contains(x)).collect()\n\
    \    \n    prime_digits_count = prime_digits.count()\n    \n    if prime_digits_count\
    \ > 0 \n        prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    return prime_digits_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters (uppercase or lowercase).\nExamples:\n>>> not_letters(\"AB\")\n\
    1\n>>> not_letters(\"1077E\")\n2\n>>> not_letters(\"ABED1A33\")\n4\n>>> not_letters(\"\
    123456789ABCDEF0\")\n6\n>>> not_letters(\"2020\")\n2\n\"\"\"", "    \n    hex_key\
    \ = 0\n    \n    if num == \"\"\n        return hex_key\n    \n    for digit in\
    \ num\n        if digit == \"A\" or digit == \"B\" or digit == \"C\" or digit\
    \ == \"D\" or digit == \"E\" or digit == \"F\"\n            hex_key += 1\n   \
    \     else\n            if digit == \"0\"\n                hex_key += 1\n    \
    \        else\n                if digit == \"1\"\n                    hex_key\
    \ += 1\n                else\n                    if digit == \"2\"\n        \
    \                hex_key += 1\n                    else\n                    \
    \    if digit == \"3\"\n                            hex_key += 1\n           \
    \             else\n                            if digit == \"4\"\n          \
    \                      hex_key += 1\n                            else\n      \
    \                          if digit == \"5\"\n                               \
    \     hex_key += 1\n                                else\n                   \
    \                 if digit == \"6\"\n                                        hex_key\
    \ += 1\n                                    else\n                           \
    \             if digit == \"7\"\n                                            hex_key\
    \ += 1\n                                        else\n                       \
    \                     if digit == \"8\"\n                                    \
    \            hex_key += 1\n                                            else\n\
    \                                                if digit == \"9\"\n         \
    \                                           hex_key += 1\n                   \
    \                             else\n                                         \
    \           if digit == \"A\"\n                                              \
    \          hex_key += 1\n                                                    else\n\
    \                                                        if digit == \"B\"\n \
    \                                                           hex_key += 1\n   \
    \                                                     else\n                 \
    \                                           if digit == \"C\"\n              \
    \                                                  hex_key += 1\n            \
    \                                                else\n                      \
    \                                          if digit == \"D\"\n               \
    \                                                     hex_key += 1\n         \
    \                                                       else\n               \
    \                                                     if digit == \"E\"\n    \
    \                                                                    hex_key +=\
    \ 1\n                                                                    else\n\
    \                                                        if digit == \"F\"\n \
    \                                                           hex_key += 1\n   \
    \                                                                 else\n     \
    \                                                   if digit == \"G\"\n      \
    \                                                      hex_key += 1\n        \
    \                                                            else\n          \
    \                                              if digit == \"H\"\n           \
    \                                                 hex_key += 1\n             \
    \                                                       else\n               \
    \                                         if digit == \"I\"\n                \
    \                                            hex_key += 1\n                  \
    \                                                  else\n                    \
    \                                    if digit == \"J\"\n                     \
    \                                       hex_key += 1\n                       \
    \                                             else\n                         \
    \                               if digit == \"K\"\n                          \
    \                                  hex_key += 1\n                            \
    \                                        else\n                              \
    \                          if digit == \"L\"\n                               \
    \                             hex_key += 1\n                                 \
    \                                   else\n                                   \
    \                     if digit == \"M\"\n                                    \
    \                        hex_key += 1\n                                      \
    \                              else\n                                        \
    \                if digit == \"N\"\n                                         \
    \                   hex_key += 1\n                                           \
    \                         else\n                                             \
    \           if digit == \"O\"\n                                              \
    \              hex_key += 1\n                                                \
    \                    else\n                                                  \
    \      if digit == \"P\"\n                                                   \
    \         hex_key += 1\n                                                     \
    \               else\n                                                       \
    \ if digit == \"Q\"\n                                                        \
    \    hex_key += 1\n                                                          \
    \          else\n                                                        if digit\
    \ == \"R\"\n                                                            hex_key\
    \ += 1\n                                                                    else\n\
    \                                                        if digit == \"S\"\n \
    \                                                           hex_key += 1\n   \
    \                                                                 else\n     \
    \                                                   if digit == \"T\"\n      \
    \                                                      hex_key += 1\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes = primes_list(10)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        \n       \
    \ if num == hex_key(prime)\n            primes_count += 1\n        end\n    end\n\
    \    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a binary\
    \ number as a string and counts the number of \n    binary digits that are primes\
    \ (prime number, or a prime, is a natural number \n    greater than 1 that is\
    \ not a product of two smaller natural numbers).\n    Binary digits are 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17, ...\n\
    \    So you have to determine a number of the following digits: 2, 3, 5, 7, \n\
    \    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is\
    \ always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> binary_key(\"AB\")\n    1\n    >>> binary_key(\"1077E\"\
    )\n    2\n    >>> binary_key(\"ABED1A33\")\n    4\n    >>> binary_key(\"123456789ABCDEF0\"\
    )\n    6\n    >>> binary_key(\"2020\")\n    2\n    \"\"\"", "    \n    hex_key::Int64\
    \ = 0\n    \n    for n in num\n        if n == \"A\" or n == \"B\" or n == \"\
    C\" or n == \"D\" or n == \"E\" or n == \"F\"\n            hex_key += 1\n    \
    \    end\n    end\n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<code language=julia-1.5>", "    \n    primes = primes_list(10)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        \n       \
    \ if num == prime\n            primes_count += 1\n        end\n    end\n    \n\
    \    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F uppercase\
    \ or lowercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"\
    ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2", "   \
    \ \n    primes = primes_list(10)\n    primes_set = Set(primes)\n    \n    digit_counts\
    \ = Dict()\n    \n    for digit in num\n        digit_counts[digit] = digit_counts.get(digit,\
    \ 0) + 1\n    \n    for prime in primes\n        if digit_counts[prime] > 1\n\
    \            digit_counts[prime] = digit_counts[prime] - 1\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime] + digit_counts[prime]\n            digit_counts[prime]\
    \ = digit_counts[prime", "    \n    primes = primes_list(100)\n    primes_set\
    \ = Set(primes)\n    \n    digit_count = num.length()\n    \n    if digit_count\
    \ < 2\n        return digit_count\n    \n    digits = num.chars()\n    \n    digits_set\
    \ = Set(digits)\n    \n    primes_set = Set(primes)\n    \n    primes_set = primes_set\
    \ - digits_set\n    \n    primes_set = primes_set - primes_set\n    \n    primes_set\
    \ = primes_set - primes_set\n    \n    primes_set = primes_set - primes_set\n\
    \    \n    primes_set = primes_set - primes_set\n    \n    primes_set = primes_set\
    \ - primes_set\n    \n    primes_set = primes_set - primes_set\n    \n    primes_set\
    \ = primes_set - primes_set\n    \n    primes_set = primes_set - primes_set\n\
    \    \n    primes_set = primes_set - primes_set\n    \n    primes_set = primes_set\
    \ - primes_set\n    \n    primes_set = primes_set - primes_set\n    \n    primes_set\
    \ = primes_set - primes_set\n    \n    primes_set = primes_set - primes_set\n\
    \    \n    primes_set = primes_set - primes_set\n    \n    primes_set = primes_set\
    \ - primes_set\n    \n    primes_set = primes_set - primes_set\n    \n    primes_set\
    \ = primes_set - primes_set\n    \n    primes_set = primes_set - primes_set\n\
    \    \n    primes_set = primes_set - primes_set\n    \n    primes_set = primes_set\
    \ - primes_set\n    \n    primes_set = primes_set - primes_set\n    \n    primes_set\
    \ = primes_set - primes_set\n    \n    primes_set = primes_set - primes_set\n\
    \    \n    primes_set = primes_set - primes_set\n    \n    primes_set = primes_set\
    \ - primes_set\n    \n    primes_set = primes_set - primes_set\n    \n    primes_set\
    \ = primes_set - primes_set\n    \n    primes_set = primes_set - primes_set\n\
    \    \n    primes_set = primes_set - primes_set\n    \n    primes_set = primes_set\
    \ - primes_set\n    \n    primes_set = primes_set ", "    \n    primes = prime_digits(num)\n\
    \    \n    count = 0\n    for p in primes\n        if p == hexdigit(num)\n   \
    \         count += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and returns the number\
    \ of digits that are primes (prime number, or a prime, is a natural number greater\
    \ than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the input may or may not\
    \ be correct or empty.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2", "    \n    hex = num.chars\n    \n    hex.filter!(&:isdigit)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:even?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:odd?)\n    \n    hex.map!(&:to_s)\n    \n    hex.map!(&:to_i)\n\
    \    \n    hex.filter!(&:", "    \n    local digits = num\n    local primes =\
    \ 2\n    local prime_digits = 2\n    local prime_digit_count = 0\n    local prime_digit_count_2\
    \ = 0\n    local prime_digit_count_3 = 0\n    local prime_digit_count_4 = 0\n\
    \    local prime_digit_count_5 = 0\n    local prime_digit_count_6 = 0\n    local\
    \ prime_digit_count_7 = 0\n    local prime_digit_count_8 = 0\n    local prime_digit_count_9\
    \ = 0\n    local prime_digit_count_10 = 0\n    local prime_digit_count_11 = 0\n\
    \    local prime_digit_count_12 = 0\n    local prime_digit_count_13 = 0\n    local\
    \ prime_digit_count_14 = 0\n    local prime_digit_count_15 = 0\n    local prime_digit_count_16\
    \ = 0\n    local prime_digit_count_17 = 0\n    local prime_digit_count_18 = 0\n\
    \    local prime_digit_count_19 = 0\n    local prime_digit_count_20 = 0\n    local\
    \ prime_digit_count_21 = 0\n    local prime_digit_count_22 = 0\n    local prime_digit_count_23\
    \ = 0\n    local prime_digit_count_24 = 0\n    local prime_digit_count_25 = 0\n\
    \    local prime_digit_count_26 = 0\n    local prime_digit_count_27 = 0\n    local\
    \ prime_digit_count_28 = 0\n    local prime_digit_count_29 = 0\n    local prime_digit_count_30\
    \ = 0\n    local prime_digit_count_31 = 0\n    local prime_digit_count_32 = 0\n\
    \    local prime_digit_count_33 = 0\n    local prime_digit_count_34 = 0\n    local\
    \ prime_digit_count_35 = 0\n    local prime_digit_count_36 = 0\n    local prime_digit_count_37\
    \ = 0\n    local prime_digit_count_38 = 0\n    local prime_digit_count_39 = 0\n\
    \    local prime_digit_count_40 = 0\n    local prime_digit_count_41 = 0\n    local\
    \ prime_digit_count_42 = 0\n    local prime_digit_count_43 = 0\n    local prime_digit_count_44\
    \ = 0\n    local prime_digit_count_45 = 0\n    local prime_digit_count_46 = 0\n\
    \    local prime_digit_count_47 = 0\n    local prime_digit_count_48 = 0\n    local\
    \ prime_digit_count_49 = 0\n    local prime_digit_count_50 = 0\n    local prime_digit_count_51\
    \ = 0\n    local prime_digit_count_52 = 0\n    local prime_digit_count_53 = 0\n\
    \    local prime_digit_count_54 = 0\n    local prime_digit_count_", "    if num\
    \ == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes =\
    \ primes_from(digits)\n    \n    prime_digits = primes.map(digits)\n    \n   \
    \ prime_digits = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits\
    \ = prime_digits.map(digits)\n    \n    prime_digits = prime_digits.filter(x ->\
    \ x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n    \n    prime_digits\
    \ = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n\
    \    \n    prime_digits = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits\
    \ = prime_digits.map(digits)\n    \n    prime_digits = prime_digits.filter(x ->\
    \ x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n    \n    prime_digits\
    \ = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n\
    \    \n    prime_digits = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits\
    \ = prime_digits.map(digits)\n    \n    prime_digits = prime_digits.filter(x ->\
    \ x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n    \n    prime_digits\
    \ = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n\
    \    \n    prime_digits = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits\
    \ = prime_digits.map(digits)\n    \n    prime_digits = prime_digits.filter(x ->\
    \ x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n    \n    prime_digits\
    \ = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n\
    \    \n    prime_digits = prime_digits.filter(x -> x.isdigit())\n    \n    prime_digits\
    \ = prime_digits.map(digits)\n    \n    prime_digits = prime_digits.filter(x ->\
    \ x.isdigit())\n    \n    prime_digits = prime_digits.map(digits)\n    \n    prime_digits\
    \ = prime_digits.filter(x -> x.isdigit())\n    \n    prime_", "    \n    local\
    \ digits = num\n    local count = 0\n    local prime_digits = \"2\",\"3\",\"5\"\
    ,\"7\",\"B\",\"D\"\n    local prime_digits_count = prime_digits.length\n    local\
    \ prime_digits_index = 0\n    local prime_digits_index_count = 0\n    local prime_digits_index_max\
    \ = 0\n    local prime_digits_index_min = 0\n    local prime_digits_index_max_count\
    \ = 0\n    local prime_digits_index_min_count = 0\n    local prime_digits_index_max_min\
    \ = 0\n    local prime_digits_index_min_max = 0\n    local prime_digits_index_max_min_count\
    \ = 0\n    local prime_digits_index_min_min_count = 0\n    local prime_digits_index_max_min_min\
    \ = 0\n    local prime_digits_index_min_min_max = 0\n    local prime_digits_index_max_min_min_count\
    \ = 0\n    local prime_digits_index_min_min_min_count = 0\n    local prime_digits_index_max_min_min_min\
    \ = 0\n    local prime_digits_index_min_min_min_max = 0\n    local prime_digits_index_max_min_min_min_count\
    \ = 0\n    local prime_digits_index_min_min_min_min_count = 0\n    local prime_digits_index_max_min_min_min_min\
    \ = 0\n    local prime_digits_index_min_min_min_min_max = 0\n    local prime_digits_index_max_min_min_min_min_count\
    \ = 0\n    local prime_digits_index_min_min_min_min_count = 0\n    local prime_digits_index_max_min_min_min_min_min\
    \ = 0\n    local prime_digits_index_min_min_min_min_max = 0\n    local prime_digits_index_max_min_min_min_min_min_count\
    \ = 0\n    local prime_digits_index_min_min_min_min_min_count = 0\n    local prime_digits_index_max_min_min_min_min_min\
    \ = 0\n    local prime_digits_index_min_min_min_min_max = 0\n    local prime_digits_index_max_min_min_min_min_min_count\
    \ = 0\n    local prime_digits_index_min_min_min_min_count = 0\n    local prime_digits_index_max_min_min_min_min\
    \ = 0\n    local prime_digits_index_min_min_min_max = 0\n    local prime_digits_index_max_min_min_min_count\
    \ = 0\n    local prime_digits_index_min_min_min_count = 0\n    local prime_digits_index_max_min_min_min\
    \ = 0\n    local prime_digits_index_min_min_max = 0\n    local prime_digits_index_max_min_min_count\
    \ = 0\n    local prime_digits_index_min_", "    \n    digits = num.chars\n   \
    \ \n    primes = prime_digits(digits)\n    \n    prime_digits_count = length(primes)\n\
    \    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count ", "    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = length(primes)\n    \n    prime_digits_count =\
    \ prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count +\
    \ 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count ",
  "    if num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes\
    \ = primes_list(digits)\n    \n    primes_count = 0\n    \n    for i in primes\n\
    \        primes_count += hex_key(digits[i..])\n    \n    return primes_count\n\
    end", "    \n    primes = primes_list(10)\n    \n    primes_count = count(primes)\n\
    \    \n    hex_count = count(num)\n    \n    primes_count = primes_count - hex_count\n\
    \    \n    if primes_count < 0\n        primes_count = 0\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    primes = primes_list(10)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        \n       \
    \ if num == prime\n            primes_count += 1\n        end\n    end\n    \n\
    \    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume that the input is always correct or empty string, and symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if num == \"\"\n        return\
    \ 0\n    \n    digits = num.chars()\n    \n    primes = primes_list(digits)\n\
    \    \n    primes_count = primes.count{|x| x == digits}\n    \n    primes_count\
    \ += primes.count{|x| x == digits[0..1]}\n    \n    return primes_count\nend\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns a string with all the letters \n\
    \    in lower case and spaces replaced by underscores.\n    Examples:\n    >>>\
    \ convert_string(\"Hello World\")\n    \"hello_world\"\n    >>> convert_string(\"\
    Hello World!\")\n    \"hello_world!\"\n    >>> convert_string(\"Hello World!!\"\
    )\n    \"hello_world!!\"\n    >>> convert_string(\"HelloWorld\")\n    \"hello_world\"\
    \n    >>> convert_string(\"HelloWorld!\")\n    \"hello_world!\"\n    >>> convert_string(\"\
    HelloWorld!!\")\n    \"hello_world!!\"\n    >>> convert_string(\"HelloWorld!!!\"\
    )\n    \"hello_world!!!\"\n    >>> convert_string(\"HelloWorld!!!\")\n    \"hello_world!!!\"\
    \n    \"\"\"", "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    digits\
    \ = num.chars\n    \n    digit_count = 1\n    \n    for i in digits\n        if\
    \ i in prime_digits\n            digit_count += 1\n            \n    return digit_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and returns the number\
    \ of digits that are primes (prime number, or a prime, is a natural number greater\
    \ than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNotes: you may assume the input\
    \ is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\n\
    Examples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n\
    4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2", "    if num == \"\"\
    \n        return 0\n    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = primes.len\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count = 0\n \
    \   \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    if prime_digits_count < 0\n        prime_digits_count\
    \ = 0\n    \n    prime_digit", "    \n    primes = primes_list(10)\n    \n   \
    \ digits = num.chars\n    \n    prime_digits = primes[digits]\n    \n    prime_digits_count\
    \ = length(prime_digits)\n    \n    prime_digits_count = prime_digits_count -\
    \ 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    local num_str::String = num\n    local num_len::Int64 = num_str.length\n\
    \    local num_digits::Int64 = num_str.length\n    local num_digits_prime::Int64\
    \ = num_digits-2\n    local num_digits_prime_upper::Int64 = num_digits_prime-1\n\
    \    local num_digits_prime_lower::Int64 = num_digits_prime+1\n    local num_digits_prime_upper::Int64\
    \ = num_digits_prime_upper-1\n    local num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n\
    \    local num_digits_prime_upper::Int64 = num_digits_prime_upper-1\n    local\
    \ num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n    local num_digits_prime_upper::Int64\
    \ = num_digits_prime_upper-1\n    local num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n\
    \    local num_digits_prime_upper::Int64 = num_digits_prime_upper-1\n    local\
    \ num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n    local num_digits_prime_upper::Int64\
    \ = num_digits_prime_upper-1\n    local num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n\
    \    local num_digits_prime_upper::Int64 = num_digits_prime_upper-1\n    local\
    \ num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n    local num_digits_prime_upper::Int64\
    \ = num_digits_prime_upper-1\n    local num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n\
    \    local num_digits_prime_upper::Int64 = num_digits_prime_upper-1\n    local\
    \ num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n    local num_digits_prime_upper::Int64\
    \ = num_digits_prime_upper-1\n    local num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n\
    \    local num_digits_prime_upper::Int64 = num_digits_prime_upper-1\n    local\
    \ num_digits_prime_lower::Int64 = num_digits_prime_lower+1\n    local num_digits_prime_upper::Int64\
    \ = num_digits_prime_upper-1\n    local num_digits_prime_", "    \n    primes\
    \ = primes_list(10)\n    primes_count = primes.count{|x| num.chars.all{|c| c ==\
    \ 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F'}}\n    \n  \
    \  hex_count = num.chars.all{|c| c == '0' || c == '1'}\n    \n    if primes_count\
    \ == 1 && hex_count == 1\n        return num.to_i\n    end\n    \n    primes.each_index{|i|\n\
    \        if hex_count\n            if primes[i] == num.to_i\n                return\
    \ num.to_i\n            end\n        end\n    }\n    \n    return 0\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of times each character\
    \ appears in the string.\nExamples:\n>>> count_chars(\"Hello World\")\n{'H': 2,\
    \ 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"Hello World\"\
    )\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"\
    Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>>\
    \ count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r':\
    \ 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o':\
    \ 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e':\
    \ 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"Hello World\"\
    )\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>> count_chars(\"\
    Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'd': 1}\n>>>\
    \ count_chars(\"Hello World\")\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    primes = primes_list(10)\n\
    \    \n    prime_digits = primes.filter(|x| num.chars.contains(x))\n    \n   \
    \ prime_digits_count = prime_digits.count\n    \n    if prime_digits_count ==\
    \ 0 \n        prime_digits_count = 1\n    \n    hex_num::Int64 = num.chars.map(|x|\
    \ x.to_digit(16).to_i).sum\n    \n    prime_digits_count += hex_num\n    \n  \
    \  return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F only.\n\
    Examples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n\
    4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2", "    \n    primes\
    \ = primes_list(10)\n    \n    digits = num.chars\n    \n    prime_digits = primes.filter(\
    \ digit => digits.contains(digit) )\n    \n    prime_digits_count = prime_digits.count\n\
    \    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    return prime_digits_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote:\
    \ the input may be empty or contain symbols A,B,C,D,E,F only.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2", "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    digit_counts = Dict{Int64, Int64}()\n    \n    for digit in num\n \
    \       if digit in prime_digits\n            digit_counts[digit] += 1\n     \
    \   end\n    end\n    \n    return digit_counts[1] + digit_counts[2] + digit_counts[3]\
    \ + digit_counts[4] + digit_counts[5] + digit_counts[6] + digit_counts[7] + digit_counts[8]\
    \ + digit_counts[9] + digit_counts[10] + digit_counts[11] + digit_counts[12] +\
    \ digit_counts[13] + digit_counts[14] + digit_counts[15] + digit_counts[16] +\
    \ digit_counts[17] + digit_counts[18] + digit_counts[19]\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    prime_digits = prime_digits(num)\n    \n  \
    \  if prime_digits == []\n        return 0\n    \n    prime_digits = prime_digits[2:end]\n\
    \    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits\
    \ = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digits = prime_digits[prime_digits\
    \ .!= 0]\n    \n    prime_digits = prime_digits[prime_digits .!= 0]\n    \n  \
    \  prime_digits = prime_digits[prime_digits .!= 0]\n    \n    prime_digit", " \
    \   \n    local digits = num:gsub(\"^0x\", \"\"):gsub(\"^0\", \"\"):gsub(\"^0x\"\
    , \"\"):gsub(\"^0\", \"\")\n    local primes = primes_list(digits)\n    local\
    \ primes_count = 0\n    local primes_count_2 = 0\n    local primes_count_3 = 0\n\
    \    local primes_count_4 = 0\n    local primes_count_5 = 0\n    local primes_count_6\
    \ = 0\n    local primes_count_7 = 0\n    local primes_count_8 = 0\n    local primes_count_9\
    \ = 0\n    local primes_count_10 = 0\n    local primes_count_11 = 0\n    local\
    \ primes_count_12 = 0\n    local primes_count_13 = 0\n    local primes_count_14\
    \ = 0\n    local primes_count_15 = 0\n    local primes_count_16 = 0\n    local\
    \ primes_count_17 = 0\n    local primes_count_18 = 0\n    local primes_count_19\
    \ = 0\n    local primes_count_20 = 0\n    local primes_count_21 = 0\n    local\
    \ primes_count_22 = 0\n    local primes_count_23 = 0\n    local primes_count_24\
    \ = 0\n    local primes_count_25 = 0\n    local primes_count_26 = 0\n    local\
    \ primes_count_27 = 0\n    local primes_count_28 = 0\n    local primes_count_29\
    \ = 0\n    local primes_count_30 = 0\n    local primes_count_31 = 0\n    local\
    \ primes_count_32 = 0\n    local primes_count_33 = 0\n    local primes_count_34\
    \ = 0\n    local primes_count_35 = 0\n    local primes_count_36 = 0\n    local\
    \ primes_count_37 = 0\n    local primes_count_38 = 0\n    local primes_count_39\
    \ = 0\n    local primes_count_40 = 0\n    local primes_count_41 = 0\n    local\
    \ primes_count_42 = 0\n    local primes_count_43 = 0\n    local primes_count_44\
    \ = 0\n    local primes_count_45 = 0\n    local primes_count_46 = 0\n    local\
    \ primes_count_47 = 0\n    local primes_count_48 = 0\n    local primes_count_49\
    \ = 0\n    local primes_count_50 = 0\n    local primes_count_51 = 0\n    local\
    \ primes_count_52 = 0\n    local primes_count_53 = 0\n    local primes_count_54\
    \ = 0\n    local primes_count_55 = 0\n    local primes_count_56 = 0\n    local\
    \ primes_count_57 = 0\n    local primes_count_58 = 0\n    local primes_", "  \
    \  \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    digits = num.chars\n\
    \    \n    prime_digits_count = 0\n    \n    for digit in digits\n        if digit\
    \ in prime_digits\n            prime_digits_count += 1\n    \n    return prime_digits_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and returns the number\
    \ of digits that are primes (prime number, or a prime, is a natural number greater\
    \ than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the input may be empty\
    \ or contain symbols A,B,C,D,E,F only.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"\
    1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"\
    2020\")\n2", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = primes_list(10)\n    \n    primes_count = 0\n    \n    for\
    \ prime in primes\n        if num == prime\n            primes_count += 1\n  \
    \      end\n    end\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"", " \
    \   if num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n   \
    \ primes = prime_digits(digits)\n    \n    prime_digits_count = primes.len\n \
    \   \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digit",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    local digits\
    \ = num\n    local primes = prime_digits(digits)\n    local prime_digits_count\
    \ = length(primes)\n    \n    if prime_digits_count > 0 then\n        local prime_digits_index\
    \ = prime_digits_count - 1\n        local prime_digits_value = primes[prime_digits_index]\n\
    \        local prime_digits_index = prime_digits_index - 1\n        \n       \
    \ if prime_digits_value == 2 then\n            return 1\n        elseif prime_digits_value\
    \ == 3 then\n            return 2\n        elseif prime_digits_value == 5 then\n\
    \            return 3\n        elseif prime_digits_value == 7 then\n         \
    \   return 4\n        elseif prime_digits_value == 11 then\n            return\
    \ 5\n        elseif prime_digits_value == 13 then\n            return 6\n    \
    \    elseif prime_digits_value == 17 then\n            return 7\n        elseif\
    \ prime_digits_value == 19 then\n            return 8\n        elseif prime_digits_value\
    \ == 23 then\n            return 9\n        elseif prime_digits_value == 29 then\n\
    \            return 10\n        elseif prime_digits_value == 31 then\n       \
    \     return 11\n        elseif prime_digits_value == 37 then\n            return\
    \ 12\n        elseif prime_digits_value == 41 then\n            return 13\n  \
    \      elseif prime_digits_value == 43 then\n            return 14\n        elseif\
    \ prime_digits_value == 47 then\n            return 15\n        elseif prime_digits_value\
    \ == 53 then\n            return 16\n        elseif prime_digits_value == 59 then\n\
    \            return 17\n        elseif prime_digits_value == 61 then\n       \
    \     return 18\n        elseif prime_digits_value == 67 then\n            return\
    \ 19\n        elseif prime_digits_value == 71 then\n            return 20\n  \
    \      elseif prime_digits_value == 73 then\n            return 21\n        elseif\
    \ prime_digits_value == 79 then\n            return 22\n        elseif prime_digits_value\
    \ == 83 then\n            return 23\n        elseif prime_digits_value == 89 then\n\
    \            return 24\n        elseif prime_digits_value == 97 then\n       \
    \     return 25\n        elseif prime_digits_value == 101 then\n            return\
    \ 26\n        elseif prime_digits_value == 103 then\n            return 27\n \
    \       elseif prime_digits_value == 107 then\n            return 28\n       \
    \ elseif prime_digits_value == 109 then\n            return 29\n        elseif\
    \ prime_digits_value == 113 then\n            return 30\n        elseif prime_digits_value\
    \ == 127 then\n            return 31\n        elseif prime_", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    digits = num.chars\n\
    \    \n    primes = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n\
    \    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count ", "    if num == \"\"\n        return 0\n    \n    hex_res\
    \ = \"\"\n    for c in num\n        if c >= '0' and c <= '9'\n            hex_res+=c\n\
    \        elseif c >= 'A' and c <= 'F'\n            hex_res+=c\n        else\n\
    \            return 0\n    \n    hex_digits = hex_res.to_i(16)\n    \n    if hex_digits\
    \ < 2\n        return 0\n    \n    hex_primes = primes(hex_digits)\n    \n   \
    \ prime_digits = []\n    for p in hex_primes\n        prime_digits.append(hex_res.to_i(16).to_s(16).chars.to_i(16))\n\
    \    \n    prime_digits = prime_digits[2:]\n    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n\
    \    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n\
    \    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n\
    \    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n\
    \    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits\
    \ = prime_digits[prime_digits.index(hex_digits):]\n    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n\
    \    \n    prime_digits = prime_digits[prime_digits.index(hex_digits):]\n    \n\
    \    prime_digit", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_num::Int64 = 0\n\
    \    \n    for digit in num\n        hex_num <<= 4\n        hex_num |= digit\n\
    \    end\n    \n    hex_num >>= 4\n    \n    prime_digits = prime_digits[hex_num]\n\
    \    \n    return prime_digits\nend\n</cell>\n<code language=julia-1.3>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.3>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.3>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a string\
    \ and returns the number of characters that are not uppercase letters.\nExamples:\n\
    >>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>>\
    \ not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"\
    a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\"\
    )\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n\
    1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n\
    >>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>>\
    \ not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"\
    a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\"\
    )\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n\
    1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n\
    >>> not_upper(\"a\")\n1\n>>> not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n>>>\
    \ not_upper(\"A\")\n0\n>>> not_upper(\"a\")\n1\n", "    \n    digits = num.chars\n\
    \    \n    primes = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n\
    \    \n    prime_digits_count_prime = prime_digits_count - primes.count\n    \n\
    \    prime_digits_count_prime_prime = prime_digits_count_prime - primes.count\n\
    \    \n    prime_digits_count_prime_prime_prime = prime_digits_count_prime_prime\
    \ - primes.count\n    \n    prime_digits_count_prime_prime_prime_prime = prime_digits_count_prime_prime_prime_prime\
    \ - primes.count\n    \n    prime_digits_count_prime_prime_prime_prime_prime =\
    \ prime_digits_count_prime_prime_prime_prime_prime_prime - primes.count\n    \n\
    \    prime_digits_count_prime_prime_prime_prime_prime_prime = prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    prime_digits_count_prime_prime_prime_prime_prime_prime_prime\
    \ = prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime_prime -\
    \ primes.count\n    \n    prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = prime_digits_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    prime_digits_count_prime_prime_prime_prime_prime_prime_",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    digits =\
    \ num.chars\n    \n    primes = primes_list(digits)\n    \n    prime_digits =\
    \ primes.filter(|x| digits.contains(x))\n    \n    prime_digits_count = prime_digits.count\n\
    \    \n    prime_digits_count = prime_digits_count + 1\n    \n    return prime_digits_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a\
    \ natural number \n    greater than 1 that is not a product of two smaller natural\
    \ numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,\
    \ D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal\
    \ 11), D (=decimal 13).\n    Note: you may assume the input is always correct\
    \ or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n\
    \    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = primes.len\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count ", "    if num == \"\"\
    \n        return 0\n    \n    digits = num.digits\n    \n    primes = primes_list(digits)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        if prime_digits(prime)\
    \ == digits\n            primes_count += 1\n        end\n    end\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
