name: HumanEval_78_hex_key
language: jl
prompt: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    digits that are\
  \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
  \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume\
  \ the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are\
  \ always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
  1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
  )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction hex_key(num::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
  AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
  ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
  ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
completions: ["    \n    primes = prime_digits(num)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    prime_digits_count = prime_digits_count - 1\n  \
    \  \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime", "    \n    primes = primes_list(num) \n    primes_count = length(primes)\
    \ \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 \n    \n    primes_count = primes_count\
    \ * 2 \n    \n    primes_count = primes_count - 1 ", "    \n    primes = primes_list(10)\n\
    \    \n    hex_list = num.chars().filter(x -> x>='0' and x<='9').collect()\n \
    \   \n    hex_list.filter(x -> x in primes).count()\n    \nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a string and returns the number of characters that are not letters.\nExamples:\n\
    >>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World!!\")\n3\n>>> not_letters(\"Hello World!!!\")\n2\n\
    >>> not_letters(\"Hello World!!!!\")\n1\n>>> not_letters(\"Hello World!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!!\"\
    )\n0\n>>> not_letters(\"Hello World!!!!!!!\")\n0\n>>> not_letters(\"Hello World!!!!!!",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    local digits\
    \ = num\n    local primes = Set{Int64}()\n    local prime_digits = Set{Int64}()\n\
    \    local prime_digits_set = Set{Int64}()\n    local prime_digits_set_size =\
    \ Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    local prime_digits_set_size = Set{Int64}()\n    local prime_digits_set_size\
    \ = Set{Int64}()\n    ", "    \n    local digits = num\n    local primes = prime_digits(digits)\n\
    \    local prime_digits_count = length(primes)\n    local prime_digits_count_2\
    \ = prime_digits_count / 2\n    local prime_digits_count_3 = prime_digits_count\
    \ / 3\n    local prime_digits_count_4 = prime_digits_count / 4\n    local prime_digits_count_5\
    \ = prime_digits_count / 5\n    local prime_digits_count_6 = prime_digits_count\
    \ / 6\n    local prime_digits_count_7 = prime_digits_count / 7\n    local prime_digits_count_8\
    \ = prime_digits_count / 8\n    local prime_digits_count_9 = prime_digits_count\
    \ / 9\n    local prime_digits_count_10 = prime_digits_count / 10\n    local prime_digits_count_11\
    \ = prime_digits_count / 11\n    local prime_digits_count_12 = prime_digits_count\
    \ / 12\n    local prime_digits_count_13 = prime_digits_count / 13\n    local prime_digits_count_14\
    \ = prime_digits_count / 14\n    local prime_digits_count_15 = prime_digits_count\
    \ / 15\n    local prime_digits_count_16 = prime_digits_count / 16\n    local prime_digits_count_17\
    \ = prime_digits_count / 17\n    local prime_digits_count_18 = prime_digits_count\
    \ / 18\n    local prime_digits_count_19 = prime_digits_count / 19\n    local prime_digits_count_20\
    \ = prime_digits_count / 20\n    local prime_digits_count_21 = prime_digits_count\
    \ / 21\n    local prime_digits_count_22 = prime_digits_count / 22\n    local prime_digits_count_23\
    \ = prime_digits_count / 23\n    local prime_digits_count_24 = prime_digits_count\
    \ / 24\n    local prime_digits_count_25 = prime_digits_count / 25\n    local prime_digits_count_26\
    \ = prime_digits_count / 26\n    local prime_digits_count_27 = prime_digits_count\
    \ / 27\n    local prime_digits_count_28 = prime_digits_count / 28\n    local prime_digits_count_29\
    \ = prime_digits_count / 29\n    local prime_digits_count_30 = prime_digits_count\
    \ / 30\n", "    \n    digits = num.chars\n    \n    primes = primes_list(digits)\n\
    \    \n    primes_count = 0\n    \n    for prime in primes\n        \n       \
    \ if primes_count < prime\n            \n            primes_count += 1\n     \
    \       \n        end\n    end\n    \n    return primes_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a positive integer and returns the number of \n    digits\
    \ that are not prime numbers.\n    Examples:\n    >>> count_digits(10)\n    1\n\
    \    >>> count_digits(100)\n    2\n    >>> count_digits(1000)\n    3\n    >>>\
    \ count_digits(10000)\n    4\n    >>> count_digits(100000)\n    5\n    >>> count_digits(1000000)\n\
    \    6\n    >>> count_digits(10000000)\n    7\n    >>> count_digits(100000000)\n\
    \    8\n    >>> count_digits(1000000000)\n    9\n    >>> count_digits(10000000000)\n\
    \    10\n    >>> count_digits(100000000000)\n    11\n    >>> count_digits(1000000000000)\n\
    \    12\n    >>> count_digits(10000000000000)\n    13\n    >>> count_digits(1000000000000000)\n\
    \    14\n    >>> count_digits(10000000000000000)\n    15\n    >>> count_digits(100000000000000000)\n\
    \    16\n    >>> count_digits(1000000000000000000)\n    17\n    >>> count_digits(10000000000000000000)\n\
    \    18\n    >>> count_digits(100000000000000000000)\n    19\n    >>> count_digits(1000000000000000000000)\n\
    \    20\n    >>> count_digits(10000000000000000000000)\n    21\n    >>> count_digits(100000000000000000000000)\n\
    \    22\n    >>> count_digits(1000000000000000000000000)\n    23\n    >>> count_digits(10000000000000000000000000)\n\
    \    24\n    >>> count_digits(100000000000000000000000000)\n    25\n    >>> count_digits(1000000000000000000000000000)\n\
    \    26\n    >>> count_digits(10000000000000000000000000000)\n    27\n    >>>\
    \ count_digits(100000000000000000000000000000)\n    28\n    >>> count_digits(1000000000000000000000000000000)\n\
    \    29\n    >>> count_digits(10000000000000000000000000000000)\n", "    \n  \
    \  prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hexdigits = num.chars\n   \
    \ \n    hexdigits_prime = hexdigits.filter(x -> x in prime_digits)\n    \n   \
    \ hexdigits_prime_length = hexdigits_prime.len()\n    \n    if hexdigits_prime_length\
    \ == 0 \n        \n        return 0\n    \n    hexdigits_prime_length = hexdigits_prime_length\
    \ + 1\n    \n    hexdigits_prime_prime = hexdigits_prime.filter(x -> x % 2 ==\
    \ 0)\n    \n    hexdigits_prime_prime_length = hexdigits_prime_prime.len()\n \
    \   \n    if hexdigits_prime_prime_length == 0 \n        \n        return 0\n\
    \    \n    hexdigits_prime_prime_length = hexdigits_prime_prime_length + 1\n \
    \   \n    hexdigits_prime_prime_prime = hexdigits_prime_prime.filter(x -> x %\
    \ 3 == 0)\n    \n    hexdigits_prime_prime_prime_length = hexdigits_prime_prime_prime.len()\n\
    \    \n    if hexdigits_prime_prime_prime_length == 0 \n        \n        return\
    \ 0\n    \n    hexdigits_prime_prime_prime_length = hexdigits_prime_prime_prime_length\
    \ + 1\n    \n    hexdigits_prime_prime_prime_prime = hexdigits_prime_prime_prime.filter(x\
    \ -> x % 5 == 0)\n    \n    hexdigits_prime_prime_prime_prime_length = hexdigits_prime_prime_prime_prime.len()\n\
    \    \n    if hexdigits_prime_prime_prime_prime_length == 0 \n        \n     \
    \   return 0\n    \n    hexdigits_prime_prime_prime_prime_length = hexdigits_prime_prime_prime_prime_length\
    \ + 1\n    \n    hexdigits_prime_prime_prime_prime_prime = hexdigits_prime_prime_prime_prime_prime.filter(x\
    \ -> x % 7 == 0)\n    \n    hexdigits_prime_prime_prime_prime_prime_length = hexdigits_prime_prime_prime_prime_prime_prime.len()\n\
    \    \n    if hexdigits_prime_prime_prime_prime_prime_length == 0 \n        \n\
    \        return 0\n    \n    hexdigits_prime_prime_prime_prime_prime_length =\
    \ hexdigits_prime_prime_prime_", "    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,24",
  "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_digits = num.chars\n\
    \    \n    prime_digits_count = 0\n    \n    for digit in hex_digits\n       \
    \ if digit in prime_digits\n            prime_digits_count += 1\n            \n\
    \    return prime_digits_count\nend\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters.\nExamples:\n>>> not_letters(\"\
    AB\")\n2\n>>> not_letters(\"1077E\")\n4\n>>> not_letters(\"ABED1A33\")\n6\n>>>\
    \ not_letters(\"123456789ABCDEF0\")\n10\n>>> not_letters(\"2020\")\n2\n\"\"\"",
  "    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    hex_digits = num.chars\n\
    \    \n    hex_digits_len = len(hex_digits)\n    \n    prime_digits_len = len(prime_digits)\n\
    \    \n    prime_digits_sum = 0\n    \n    for i in prime_digits:\n        prime_digits_sum\
    \ += i\n    \n    prime_digits_sum *= prime_digits_len\n    \n    prime_digits_sum\
    \ = int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n  \
    \  \n    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum\
    \ -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n  \
    \  \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n\
    \    \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum =\
    \ int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n    \n\
    \    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n\
    \    \n    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum\
    \ -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n  \
    \  \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n\
    \    \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum =\
    \ int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n    \n\
    \    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum -= prime_digits_len\n\
    \    \n    prime_digits_sum = int(prime_digits_sum)\n    \n    prime_digits_sum\
    \ -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n  \
    \  \n    prime_digits_sum -= prime_digits_len\n    \n    prime_digits_sum = int(prime_digits_sum)\n",
  "    \n    primes = primes_list(10)\n    \n    hex = num\n    \n    hex = hex.upper()\n\
    \    \n    hex = hex.split(\"0\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    A\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"B\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"C\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"D\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    E\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"F\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"G\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"H\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    I\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"J\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"K\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"L\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    M\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"N\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"O\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"P\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    Q\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"R\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"S\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"T\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    U\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"V\")\n    \n    hex\
    \ = hex[0]\n    \n    hex = hex.split(\"W\")\n    \n    hex = hex[0]\n    \n \
    \   hex = hex.split(\"X\")\n    \n    hex = hex[0]\n    \n    hex = hex.split(\"\
    Y\")\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    primes = prime_numbers(hex_key(num))\n    \n    primes_count = length(primes)\n\
    \    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count = primes_count\
    \ - 1\n    \n    prime", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ num == \"\"\n        return 0\n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = prime_digits_count(digits)\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[2:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[3:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[4:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[5:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[6:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[7:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[8:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[9:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[10:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[11:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[12:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[13:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[14:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[15:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[16:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[17:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[18:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[19:])\n\
    \    \n    prime_digits_count = prime_digits_count + prime_digits_count(digits[20:])\n\
    \    \n    prime_digits_count = prime_digit", "    \n    digits = num.chars\n\
    \    \n    primes = prime_digits(digits)\n    \n    prime_digits_count = length(primes)\n\
    \    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count ", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    digits = num.chars\n    \n    primes = prime_digits(digits)\n\
    \    \n    prime_digits_count = length(primes)\n    \n    hex_key = 0\n    \n\
    \    for digit in digits\n        if digit in primes\n            hex_key += 1\n\
    \        end\n    end\n    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
