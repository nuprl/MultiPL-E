language: jl
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 7: Write a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsarm43v.jl:19\nin expression starting at\
    \ /tmp/tmpwsarm43v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The factorial of a number is the product of all\
    \ positive integers less than or equal to it.\n    For example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(0)\n    1\n    >>> factorial(4)\n    24\n    >>> factorial(10)\n\
    \    3628800\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptk3u0hq_.jl:19\nin expression starting at\
    \ /tmp/tmptk3u0hq_.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpichav4qt.jl:18\nin expression starting at\
    \ /tmp/tmpichav4qt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_jx8k9d.jl:18\nin expression starting at\
    \ /tmp/tmp5_jx8k9d.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"factorial function only accepts positive integers\")\n    else\n   \
    \     factorial(n) * (n - 1)!\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpm8twhue5.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm8twhue5.jl:16\n\
    in expression starting at /tmp/tmpm8twhue5.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3l1xgg_p.jl:18\nin expression starting at\
    \ /tmp/tmp3l1xgg_p.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhb5y_p0.jl:19\nin expression starting at\
    \ /tmp/tmpyhb5y_p0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that calculates the binomial coefficient $n!/r!$, where $n$ and $r$ are positive\
    \ integers. For example:\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplco53hzx.jl:18\nin expression starting at\
    \ /tmp/tmplco53hzx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1daj2rc.jl:18\nin expression starting at\
    \ /tmp/tmpy1daj2rc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.3>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.3>\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmwtbazws.jl:18\nin expression starting at\
    \ /tmp/tmpmwtbazws.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0ml6xdw.jl:19\nin expression starting at\
    \ /tmp/tmpm0ml6xdw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"The factorial of a negative number is not defined\")\n    elseif n ==\
    \ 0\n        1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"The factorial of a number is the product of all\
    \ positive integers less than or equal to it.\n    For example:\n    >>> factorial(5)\n\
    \    120\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjvbwwq7.jl:21\nin expression starting at\
    \ /tmp/tmpkjvbwwq7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the binomial coefficient $n!/r!$, where $n$ and $r$ are positive\
    \ integers. Your function should receive two integers as inputs and should return\
    \ the binomial coefficient.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95kwmyzp.jl:18\nin expression starting at\
    \ /tmp/tmp95kwmyzp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\nThe factorial of a number n is defined as:\n\
    factorial(n) = n!\nwhere n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83sbhnw2.jl:19\nin expression starting at\
    \ /tmp/tmp83sbhnw2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise\nWrite a function that\
    \ calculates the factorial of a given number using recursion.\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgzvcllr.jl:19\nin expression starting at\
    \ /tmp/tmpqgzvcllr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun2355o4.jl:18\nin expression starting at\
    \ /tmp/tmpun2355o4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <text>\nExercise 7: Write a function that calculates the factorial of a number.\
    \ \nThe function should receive an integer as input and should return the factorial\
    \ of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpulo_u1xd.jl:19\nin expression starting at\
    \ /tmp/tmpulo_u1xd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3uh18n1t.jl:18\nin expression starting at\
    \ /tmp/tmp3uh18n1t.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.4>\n@time factorial(100000);\n</cell>\n<code language=julia-1.4>\n\
    @time special_factorial(100000);\n</cell>\n<text>\nExercise: Write a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ec71mp2.jl:18\nin expression starting at\
    \ /tmp/tmp9ec71mp2.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhb5y_p0.jl:19\nin expression starting at\
    \ /tmp/tmpyhb5y_p0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_c_8kaw.jl:18\nin expression starting at\
    \ /tmp/tmp9_c_8kaw.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mc6ho9h.jl:19\nin expression starting at\
    \ /tmp/tmp0mc6ho9h.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprh2p24ep.jl:18\nin expression starting at\
    \ /tmp/tmprh2p24ep.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"The factorial of a number is the product of its factorials.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uld50i9.jl:18\nin expression starting at\
    \ /tmp/tmp5uld50i9.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mmx8uv0.jl:19\nin expression starting at\
    \ /tmp/tmp7mmx8uv0.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nspecial_factorial(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01ladw8r.jl:19\nin expression starting at\
    \ /tmp/tmp01ladw8r.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that receives a positive integer as input and returns the\
    \ factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fatdm1i.jl:18\nin expression starting at\
    \ /tmp/tmp_fatdm1i.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test\nspecial_factorial(4)\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that calculates the factorial of a given number. Your function\
    \ should receive an integer as input and should return the factorial of this integer.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxuydh4h.jl:19\nin expression starting at\
    \ /tmp/tmpdxuydh4h.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy30822do.jl:18\nin expression starting at\
    \ /tmp/tmpy30822do.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe factorial of a number is the product of all the numbers from 1 to\
    \ that number.\nFor example:\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    factorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) *\
    \ 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * factorial(3)\nfactorial(5)\
    \ = factorial(4) * 5 * factorial(3)\nfactorial(5) = factorial(4) * 5 * \nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7fri5bw.jl:18\nin expression starting at\
    \ /tmp/tmpx7fri5bw.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\n# Let's test the function \nspecial_factorial(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjnffcgo.jl:18\nin expression starting at\
    \ /tmp/tmpkjnffcgo.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n# Test the function \nspecial_factorial(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number. \nThe function should receive an integer as input and should return\
    \ the factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_87bm7m.jl:19\nin expression starting at\
    \ /tmp/tmpz_87bm7m.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp296amne2.jl:19\nin expression starting at\
    \ /tmp/tmp296amne2.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1af6o7og.jl:18\nin expression starting at\
    \ /tmp/tmp1af6o7og.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkue2i9dw.jl:18\nin expression starting at\
    \ /tmp/tmpkue2i9dw.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfri1gkvx.jl:18\nin expression starting at\
    \ /tmp/tmpfri1gkvx.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsw2uai3.jl:19\nin expression starting at\
    \ /tmp/tmppsw2uai3.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The factorial of a number is the product of its factorials.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgcnhbad.jl:18\nin expression starting at\
    \ /tmp/tmpqgcnhbad.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n    then\
    \ 1\n    else n * special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe factorial of a number n is defined as:\n    factorial(n) = n!\n  \
    \  where n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdzphj289.jl:14\nin expression starting at /tmp/tmpdzphj289.jl:14\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number given as an input parameter. \nThe function should receive a number\
    \ as input parameter and should return the factorial of this number.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1qhr8gm.jl:18\nin expression starting at\
    \ /tmp/tmpc1qhr8gm.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3iihjtl.jl:19\nin expression starting at\
    \ /tmp/tmpi3iihjtl.jl:19\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5apjrc8.jl:18\nin expression starting at\
    \ /tmp/tmpt5apjrc8.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpr_43auem.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_43auem.jl:16\n\
    in expression starting at /tmp/tmpr_43auem.jl:16\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"Negative factorial not allowed\")\n    else if n == 0\n        1\n \
    \   else\n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljtkewvs.jl:15\nin expression starting at\
    \ /tmp/tmpljtkewvs.jl:15\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<text>\nThe\
    \ factorial function will receive an integer as input and should return the factorial\
    \ of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40l_6thf.jl:18\nin expression starting at\
    \ /tmp/tmp40l_6thf.jl:18\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\nThe Brazilian factorial is defined as:\n  \
    \  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkmhsca2.jl:19\nin expression starting at\
    \ /tmp/tmplkmhsca2.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"factorial function only accepts positive integers\")\n    else\n   \
    \     return factorial(n) * factorial(n-1) * factorial(n-2) * factorial(n-3) *\
    \ factorial(n-4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpce74ekkx.jl:19\nin expression starting at\
    \ /tmp/tmpce74ekkx.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk6yrji6.jl:19\nin expression starting at\
    \ /tmp/tmpbk6yrji6.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjmczjdq.jl:18\nin expression starting at\
    \ /tmp/tmpkjmczjdq.jl:18\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5v4fzmsm.jl:19\nin expression starting at\
    \ /tmp/tmp5v4fzmsm.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1af6o7og.jl:18\nin expression starting at\
    \ /tmp/tmp1af6o7og.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmphgv54izn.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphgv54izn.jl:16\n\
    in expression starting at /tmp/tmphgv54izn.jl:16\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 6\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g1kby3n.jl:18\nin expression starting at\
    \ /tmp/tmp1g1kby3n.jl:18\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    factorial_series(n::Int64)::Float64\n    \n    Calculates the factorial\
    \ series up to n.\n    \n    For example:\n    >>> factorial_series(4)\n    2432902008176640000\n\
    \    \n    The function will receive an integer as input and should return the\
    \ factorial\n    series of this integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp05h55ep.jl:18\nin expression starting at\
    \ /tmp/tmpp05h55ep.jl:18\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"Negative factorial is not defined\")\n    elseif n == 0\n        1\n\
    \    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nThe factorial of a number is the product of all\
    \ positive integers less than or equal to it.\nFor example:\n    factorial(5)\
    \ = factorial(4) * 5 * factorial(3)\n    factorial(4) = factorial(3) * 4\n   \
    \ factorial(3) = factorial(2) * 3\n    factorial(2) = factorial(1)\n    factorial(1)\
    \ = 1\n    factorial(0) = 1\n    factorial(-1) = error\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_65ukxq.jl:21\nin expression starting at\
    \ /tmp/tmpk_65ukxq.jl:21\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function with some examples\n@test special_factorial(4)\
    \ == 288\n@test special_factorial(5) == 1040\n@test special_factorial(6) == 720\n\
    @test special_factorial(7) == 5040\n@test special_factorial(8) == 40320\n@test\
    \ special_factorial(9) == 362880\n@test special_factorial(10) == 3628800\n@test\
    \ special_factorial(11) == 39916800\n@test special_factorial(12) == 479001600\n\
    @test special_factorial(13) == 6227020800\n@test special_factorial(14) == 87178291200\n\
    @test special_factorial(15) == 1307674368000\n@test special_factorial(16) == 20922789888000\n\
    @test special_factorial(17) == 355687428096000\n@test special_factorial(18) ==\
    \ 6402373705728000\n@test special_factorial(19) == 121645100408832000\n@test special_factorial(20)\
    \ == 2432902008176640000\n@test special_factorial(21) == 51090942171709440000\n\
    @test special_factorial(22) == 1124000727777607680000\n@test special_factorial(23)\
    \ == 25852016738884976640000\n@test special_factorial(24) == 620448401733239439360000\n\
    @test special_factorial(25) == 15511210043330985984000000\n@test special_factorial(26)\
    \ == 403291461126605635584000000\n@test special_factorial(27) == 10888869450418352160768000000\n\
    @test special_factorial(28) == 304888344611713860501504000000\n@test special_factorial(29)\
    \ == 8841761993739701954543616000000\n@test special_factorial(30) == 265252859812191058636308480000000\n\
    @test special_factorial(31) == 8222838654177922817725562880000000\n@test special_factorial(32)\
    \ == 263130836933693530167218012160000000\n@test special_factorial(33) == 8683317618811886495518194401280000000\n\
    @test special_factorial(34) == 33624155039443916860763693808400000000\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4qbarq6.jl:19\nin expression starting at\
    \ /tmp/tmpd4qbarq6.jl:19\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprckwscqs.jl:19\nin expression starting at\
    \ /tmp/tmprckwscqs.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1af6o7og.jl:18\nin expression starting at\
    \ /tmp/tmp1af6o7og.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    # TEST special_factorial (5b)\n@test special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that computes the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzb97g2d.jl:18\nin expression starting at\
    \ /tmp/tmpzzb97g2d.jl:18\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2552cegf.jl:19\nin expression starting at\
    \ /tmp/tmp2552cegf.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3l1xgg_p.jl:18\nin expression starting at\
    \ /tmp/tmp3l1xgg_p.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7qakwc2f.jl:19\nin expression starting at\
    \ /tmp/tmp7qakwc2f.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n-1)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number. Your function should receive an integer as input and should\
    \ return the factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr29ri1z.jl:19\nin expression starting at\
    \ /tmp/tmpkr29ri1z.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_q41sz5.jl:19\nin expression starting at\
    \ /tmp/tmpf_q41sz5.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"factorial function only accepts positive integers\")\n    end\n    if\
    \ n == 0\n        return 1\n    end\n    return factorial(n) * factorial(n-1)\n\
    end\n</cell>\n<text>\nExercise 2: Write a function that calculates the factorial\
    \ of a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1h4x_mt.jl:21\nin expression starting at\
    \ /tmp/tmpc1h4x_mt.jl:21\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1af6o7og.jl:18\nin expression starting at\
    \ /tmp/tmp1af6o7og.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb70nrul.jl:18\nin expression starting at\
    \ /tmp/tmpdb70nrul.jl:18\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqusq4nb.jl:18\nin expression starting at\
    \ /tmp/tmpyqusq4nb.jl:18\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_8xb6ej.jl:18\nin expression starting at\
    \ /tmp/tmpz_8xb6ej.jl:18\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpiahu4a.jl:18\nin expression starting at\
    \ /tmp/tmptpiahu4a.jl:18\n"
  stdout: ''
  timestamp: 1659822638
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise\
    \ 7: Write a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc82otu0.jl:18\nin expression starting at\
    \ /tmp/tmpuc82otu0.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbdkd9vp.jl:19\nin expression starting at\
    \ /tmp/tmpxbdkd9vp.jl:19\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpii28wgg8.jl:18\nin expression starting at\
    \ /tmp/tmpii28wgg8.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp528syp7s.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp528syp7s.jl:16\n\
    in expression starting at /tmp/tmp528syp7s.jl:16\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoz5jikpo.jl:18\nin expression starting at\
    \ /tmp/tmpoz5jikpo.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpb5ml3e1q.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb5ml3e1q.jl:16\n\
    in expression starting at /tmp/tmpb5ml3e1q.jl:16\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\nThe Brazilian factorial is defined as:\n  \
    \  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps__xg9v9.jl:19\nin expression starting at\
    \ /tmp/tmps__xg9v9.jl:19\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1icsgn4.jl:19\nin expression starting at\
    \ /tmp/tmpz1icsgn4.jl:19\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Exercise: Write a function that calculates the factorial of a given number\n\
    # using the factorial function defined above. \nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpujg3pquc.jl:18\nin expression starting at\
    \ /tmp/tmpujg3pquc.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The factorial of a number n is defined as:\n\
    \    factorial(n) = n!\n    where n > 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sx6x2ox.jl:18\nin expression starting at\
    \ /tmp/tmp_sx6x2ox.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9k21qjzo.jl:18\nin expression starting at\
    \ /tmp/tmp9k21qjzo.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwjnhy_h.jl:19\nin expression starting at\
    \ /tmp/tmphwjnhy_h.jl:19\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nThe factorial of a number is the product of all the numbers from 1 to\
    \ that number.\nFor example:\nfactorial(5) = factorial(4) * 5 * factorial(3)\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5f97q3z3.jl:18\nin expression starting at\
    \ /tmp/tmp5f97q3z3.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95feieft.jl:18\nin expression starting at\
    \ /tmp/tmp95feieft.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n    Computes\
    \ the factorial series up to n.\n    \n    For example:\n    >>> factorial_series(4)\n\
    \    2432902008176640000\n    \n    The function will receive an integer as input\
    \ and should return the factorial\n    series of this integer.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6iunfz51.jl:18\nin expression starting at\
    \ /tmp/tmp6iunfz51.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)::Int64\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4xqss5m.jl:19\nin expression starting at\
    \ /tmp/tmpi4xqss5m.jl:19\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the factorial of a number given as an input.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2bmziek.jl:18\nin expression starting at\
    \ /tmp/tmpi2bmziek.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number.\
    \ Your function should receive an integer as input and should return the factorial\
    \ of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4i992ku.jl:18\nin expression starting at\
    \ /tmp/tmpt4i992ku.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else if n == 1 \n        1\n    else if n == 2 \n        2\n    else\
    \ if n == 3 \n        6\n    else if n == 4 \n        24\n    else if n == 5 \n\
    \        120\n    else if n == 6 \n        720\n    else if n == 7 \n        5040\n\
    \    else if n == 8 \n        40320\n    else if n == 9 \n        362880\n   \
    \ else if n == 10 \n        3628800\n    else if n == 11 \n        39916800\n\
    \    else if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n\
    \    else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        263130836933693530167218012160000000\n    else if n == 33 \n        8683317618811886495518194401280000000\n\
    \    else if n == 34 \n        295232799039604140847618609643520000000\n    else\
    \ if \nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblrjxyno.jl:15\nin expression starting at\
    \ /tmp/tmpblrjxyno.jl:15\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\n    \n    Calculates the factorial\
    \ series up to n.\n    \n    For example:\n    >>> factorial_series(4)\n    2432902008176640000\n\
    \    \n    The function will receive an integer as input and should return the\
    \ factorial\n    series of this integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_00vj221.jl:18\nin expression starting at\
    \ /tmp/tmp_00vj221.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nThe factorial of a number is the product of all positive integers less\
    \ than or equal to that number. \nThe factorial of a number n is defined as:\n\
    \    factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mo0dj9u.jl:18\nin expression starting at\
    \ /tmp/tmp9mo0dj9u.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that receives a positive integer as input\
    \ and returns the factorial of this integer.\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vns_cdl.jl:19\nin expression starting at\
    \ /tmp/tmp2vns_cdl.jl:19\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Exercise 1\n\"\"\"\nWrite a function that returns the factorial of a given integer.\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppuldumo4.jl:18\nin expression starting at\
    \ /tmp/tmppuldumo4.jl:18\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will compute the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpltbe2lkx.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpltbe2lkx.jl:16\n\
    in expression starting at /tmp/tmpltbe2lkx.jl:16\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    The function special_factorial is defined in the cell above. Let's test it with\
    \ the function factorial:\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpop0xqerb.jl:18\nin expression starting at\
    \ /tmp/tmpop0xqerb.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    # Exercise 2\n\"\"\"\nWrite a function that calculates the factorial of a given\
    \ number\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2gle_xb.jl:18\nin expression starting at\
    \ /tmp/tmpv2gle_xb.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6lueqy8.jl:19\nin expression starting at\
    \ /tmp/tmpr6lueqy8.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)::Int64\n   \
    \ \n    Calculates the factorial series up to n.\n    \n    For example:\n   \
    \ >>> factorial_series(4)\n    2432902008176640000\n    \n    The function will\
    \ receive an integer as input and should return the factorial\n    series of this\
    \ integer.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3m8q805x.jl:19\nin expression starting at\
    \ /tmp/tmp3m8q805x.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"The factorial of a negative number is not defined\")\n    elseif n ==\
    \ 0\n        1\n    else\n        factorial(n) * special_factorial(n - 1)\n  \
    \  end\nend\n</cell>\n<text>\nExercise 10\nWrite a function that calculates the\
    \ factorial of a given number. \nThe function should receive an integer as input\
    \ and should return the factorial of this integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnb7w8l5l.jl:21\nin expression starting at\
    \ /tmp/tmpnb7w8l5l.jl:21\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdu28cub.jl:19\nin expression starting at\
    \ /tmp/tmpsdu28cub.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kfvz7rh.jl:19\nin expression starting at\
    \ /tmp/tmp_kfvz7rh.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n - 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw38whg1.jl:19\nin expression starting at\
    \ /tmp/tmpcw38whg1.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxcc6admv.jl:19\nin expression starting at\
    \ /tmp/tmpxcc6admv.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0j_td1eh.jl:19\nin expression starting at\
    \ /tmp/tmp0j_td1eh.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * (n - 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number.\
    \ \nThe function should receive an integer as input and should return the factorial\
    \ of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbtl6qpk.jl:19\nin expression starting at\
    \ /tmp/tmpnbtl6qpk.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie5mw82g.jl:18\nin expression starting at\
    \ /tmp/tmpie5mw82g.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcafobmvh.jl:18\nin expression starting at\
    \ /tmp/tmpcafobmvh.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * special_factorial(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(100000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number given as a parameter. \nThe function should receive a number as parameter\
    \ and should return the factorial of this number.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhd7l57a.jl:18\nin expression starting at\
    \ /tmp/tmplhd7l57a.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else if n == 1 \n        1\n    else if n == 2 \n        2\n    else\
    \ if n == 3 \n        6\n    else if n == 4 \n        24\n    else if n == 5 \n\
    \        120\n    else if n == 6 \n        720\n    else if n == 7 \n        5040\n\
    \    else if n == 8 \n        40320\n    else if n == 9 \n        362880\n   \
    \ else if n == 10 \n        3628800\n    else if n == 11 \n        39916800\n\
    \    else if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n\
    \    else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        263130836933693530167218012160000000\n    else if n == 33 \n        8683317618811886495518194401280000000\n\
    \    else if n == 34 \n        295232799039604140847618609643520000000\n    else\
    \ if \nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblrjxyno.jl:15\nin expression starting at\
    \ /tmp/tmpblrjxyno.jl:15\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"Negative factorial not allowed\")\n    else\n        factorial = 1\n\
    \        for i in 1..n\n            factorial *= i\n        end\n        return\
    \ factorial\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"The factorial\
    \ of a number is the product of its factorials.\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90r6dhru.jl:23\nin expression starting at\
    \ /tmp/tmp90r6dhru.jl:23\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3m62x6b.jl:18\nin expression starting at\
    \ /tmp/tmpf3m62x6b.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvms6vvm.jl:18\nin expression starting at\
    \ /tmp/tmpxvms6vvm.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzsgde_1.jl:19\nin expression starting at\
    \ /tmp/tmptzsgde_1.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that will compute the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1304sdqz.jl:19\nin expression starting at\
    \ /tmp/tmp1304sdqz.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0ml6xdw.jl:19\nin expression starting at\
    \ /tmp/tmpm0ml6xdw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * (n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that calculates the binomial coefficient $n!/r!$, where $n$ and $r$ are positive\
    \ integers. Recall that $n! = n \\times n$ and $r! = n \\times r$.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn19rd2ee.jl:19\nin expression starting at\
    \ /tmp/tmpn19rd2ee.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1stomzsi.jl:19\nin expression starting at\
    \ /tmp/tmp1stomzsi.jl:19\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that calculates the factorial of a number. \nThe function\
    \ should receive an integer as input and should return the factorial of this integer.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyeevzwu.jl:18\nin expression starting at\
    \ /tmp/tmpuyeevzwu.jl:18\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Let's test the function\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a number given as\
    \ an input argument.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mg3wlaz.jl:18\nin expression starting at\
    \ /tmp/tmp0mg3wlaz.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjhsmdny.jl:18\nin expression starting at\
    \ /tmp/tmpzjhsmdny.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\n@assert special_factorial(4) ==\
    \ 288\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the binomial\
    \ coefficient $n!/r!$, where $n$ and $r$ are positive integers. For example:\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp7quzocnc.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7quzocnc.jl:16\n\
    in expression starting at /tmp/tmp7quzocnc.jl:16\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(100000);\n@time special_factorial(100000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a given number using recursion.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\
    \t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps070gaix.jl:19\nin expression starting at\
    \ /tmp/tmps070gaix.jl:19\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function with different inputs\n@test special_factorial(4) == 288\n\
    @test special_factorial(5) == 720\n@test special_factorial(6) == 5040\n@test special_factorial(7)\
    \ == 40320\n@test special_factorial(8) == 362880\n@test special_factorial(9) ==\
    \ 3628800\n@test special_factorial(10) == 39916800\n@test special_factorial(11)\
    \ == 479001600\n@test special_factorial(12) == 6227020800\n@test special_factorial(13)\
    \ == 87178291200\n@test special_factorial(14) == 1307674368000\n@test special_factorial(15)\
    \ == 20922789888000\n@test special_factorial(16) == 355687428096000\n@test special_factorial(17)\
    \ == 6402373705728000\n@test special_factorial(18) == 121645100408832000\n@test\
    \ special_factorial(19) == 2432902008176640000\n@test special_factorial(20) ==\
    \ 51090942171709440000\n@test special_factorial(21) == 1124000727777607680000\n\
    @test special_factorial(22) == 25852016738884976640000\n@test special_factorial(23)\
    \ == 620448401733239439360000\n@test special_factorial(24) == 15511210043330985984000000\n\
    @test special_factorial(25) == 403291461126605635584000000\n@test special_factorial(26)\
    \ == 10888869450418352160768000000\n@test special_factorial(27) == 304888344611713860501504000000\n\
    @test special_factorial(28) == 8841761993739701954543616000000\n@test special_factorial(29)\
    \ == 265252859812191058636308480000000\n@test special_factorial(30) == 8222838654177922817725562880000000\n\
    @test special_factorial(31) == 263130836933693530167218012160000000\n@test special_factorial(32)\
    \ == 82228386541779228177255628800000000\n@test special_factorial(33) == 2631308369336935301672180121600000000\n\
    @test special_factorial(34) == 82228386541779228177\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclnh4jfh.jl:18\nin expression starting at\
    \ /tmp/tmpclnh4jfh.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun2355o4.jl:18\nin expression starting at\
    \ /tmp/tmpun2355o4.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1af6o7og.jl:18\nin expression starting at\
    \ /tmp/tmp1af6o7og.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given integer $n$. Make sure to include a\
    \ base case for $n=0$.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkrnvlcv.jl:18\nin expression starting at\
    \ /tmp/tmpjkrnvlcv.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number.\
    \ Your function should receive an integer as input and should return the factorial\
    \ of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0tl0tvt.jl:19\nin expression starting at\
    \ /tmp/tmpq0tl0tvt.jl:19\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvx452b1q.jl:18\nin expression starting at\
    \ /tmp/tmpvx452b1q.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n\
    <text>\nThe function factorial is defined in the file factorial.jl\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu0d4uzf3.jl:18\nin expression starting at\
    \ /tmp/tmpu0d4uzf3.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.1>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jgmv9f6.jl:19\nin expression starting at\
    \ /tmp/tmp_jgmv9f6.jl:19\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n</cell>\n<code language=julia-1.5>\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number given as an input argument.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ooyom2k.jl:18\nin expression starting at\
    \ /tmp/tmp4ooyom2k.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given number. \nThe function\
    \ should receive an integer as input and should return the factorial of this integer.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0sdsz6o.jl:18\nin expression starting at\
    \ /tmp/tmpq0sdsz6o.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The factorial of a number n is defined as:\n    factorial(n) = n!\n    where\
    \ n > 0\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9k1lf2kz.jl:18\nin expression starting at\
    \ /tmp/tmp9k1lf2kz.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that calculates the factorial of a given number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6h8dd2l8.jl:18\nin expression starting at\
    \ /tmp/tmp6h8dd2l8.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagenw12k.jl:19\nin expression starting at\
    \ /tmp/tmpagenw12k.jl:19\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@assert special_factorial(4) == 288\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5z3apf7.jl:18\nin expression starting at\
    \ /tmp/tmpk5z3apf7.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0 \n      \
    \  error(\"The factorial of a negative number is not defined\")\n    else if n\
    \ == 0 \n        1\n    else \n        special_factorial(n-1) * n\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The factorial of a number n is defined as:\n\
    \    factorial(n) = n!\n    where n > 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbi3z6p6.jl:15\nin expression starting at\
    \ /tmp/tmpqbi3z6p6.jl:15\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)::Int64\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccrwew7j.jl:19\nin expression starting at\
    \ /tmp/tmpccrwew7j.jl:19\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else if n == 1 \n        1\n    else if n == 2 \n        2\n    else\
    \ if n == 3 \n        6\n    else if n == 4 \n        24\n    else if n == 5 \n\
    \        120\n    else if n == 6 \n        720\n    else if n == 7 \n        5040\n\
    \    else if n == 8 \n        40320\n    else if n == 9 \n        362880\n   \
    \ else if n == 10 \n        3628800\n    else if n == 11 \n        39916800\n\
    \    else if n == 12 \n        479001600\n    else if n == 13 \n        6227020800\n\
    \    else if n == 14 \n        87178291200\n    else if n == 15 \n        1307674368000\n\
    \    else if n == 16 \n        20922789888000\n    else if n == 17 \n        355687428096000\n\
    \    else if n == 18 \n        6402373705728000\n    else if n == 19 \n      \
    \  121645100408832000\n    else if n == 20 \n        2432902008176640000\n   \
    \ else if n == 21 \n        51090942171709440000\n    else if n == 22 \n     \
    \   1124000727777607680000\n    else if n == 23 \n        25852016738884976640000\n\
    \    else if n == 24 \n        620448401733239439360000\n    else if n == 25 \n\
    \        15511210043330985984000000\n    else if n == 26 \n        403291461126605635584000000\n\
    \    else if n == 27 \n        10888869450418352160768000000\n    else if n ==\
    \ 28 \n        304888344611713860501504000000\n    else if n == 29 \n        8841761993739701954543616000000\n\
    \    else if n == 30 \n        265252859812191058636308480000000\n    else if\
    \ n == 31 \n        8222838654177922817725562880000000\n    else if n == 32 \n\
    \        1764607523034234453948881504640000000\n    else if n == 33 \n       \
    \ 35184372088827622046094844400000000\n    else if n == 34 \n        70368744177664802867746397291200000000\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsz7glt6j.jl:15\nin expression starting at\
    \ /tmp/tmpsz7glt6j.jl:15\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpafotic.jl:19\nin expression starting at\
    \ /tmp/tmphpafotic.jl:19\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\nThe factorial of a number is the product of\
    \ all the numbers from 1 to that number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvgt8wy_i.jl:19\nin expression starting at\
    \ /tmp/tmpvgt8wy_i.jl:19\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    factorial_series(n::Int64)::Int64\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeggdirjw.jl:18\nin expression starting at\
    \ /tmp/tmpeggdirjw.jl:18\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <text>\nThe function factorial is defined as:\n    factorial(n) = n!\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp682oern0.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp682oern0.jl:16\n\
    in expression starting at /tmp/tmp682oern0.jl:16\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rd0345r.jl:18\nin expression starting at\
    \ /tmp/tmp5rd0345r.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpee9a3cf_.jl:19\nin expression starting at\
    \ /tmp/tmpee9a3cf_.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_h3ebrx.jl:18\nin expression starting at\
    \ /tmp/tmp0_h3ebrx.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing Test\n\n\
    @testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqysqolll.jl:19\nin expression starting at\
    \ /tmp/tmpqysqolll.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the factorial of a number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_q41sz5.jl:19\nin expression starting at\
    \ /tmp/tmpf_q41sz5.jl:19\n"
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @time factorial(10000);\n@time special_factorial(10000);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpt835ti.jl:18\nin expression starting at\
    \ /tmp/tmpmpt835ti.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpooroa9p4.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpooroa9p4.jl:16\n\
    in expression starting at /tmp/tmpooroa9p4.jl:16\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n# Test the function with some examples\n@test special_factorial(4)\
    \ == 288\n@test special_factorial(5) == 1040\n@test special_factorial(10) == 3628800\n\
    @test special_factorial(15) == 1507334400\n@test special_factorial(20) == 3628800\n\
    @test special_factorial(25) == 1040\n@test special_factorial(30) == 720\n@test\
    \ special_factorial(35) == 5040\n@test special_factorial(40) == 40320\n@test special_factorial(45)\
    \ == 120\n@test special_factorial(50) == 720\n@test special_factorial(55) == 5040\n\
    @test special_factorial(60) == 40320\n@test special_factorial(65) == 120\n@test\
    \ special_factorial(70) == 720\n@test special_factorial(75) == 5040\n@test special_factorial(80)\
    \ == 40320\n@test special_factorial(85) == 120\n@test special_factorial(90) ==\
    \ 720\n@test special_factorial(95) == 5040\n@test special_factorial(100) == 40320\n\
    @test special_factorial(105) == 120\n@test special_factorial(110) == 720\n@test\
    \ special_factorial(115) == 5040\n@test special_factorial(120) == 40320\n@test\
    \ special_factorial(125) == 120\n@test special_factorial(130) == 720\n@test special_factorial(135)\
    \ == 5040\n@test special_factorial(140) == 40320\n@test special_factorial(145)\
    \ == 120\n@test special_factorial(150) == 720\n@test special_factorial(155) ==\
    \ 5040\n@test special_factorial(160) == 40320\n@test special_factorial(165) ==\
    \ 120\n@test special_factorial(170) == 720\n@test special_factorial(175) == 5040\n\
    @test special_factorial(180) == 40320\n@test special_factorial(185) == 120\n@test\
    \ special_factorial(190) == 720\n@test special_factorial(195) == 5040\n@test special_factorial(200)\
    \ == 40320\n@test special_factorial(205) == 120\n@test special_factorial(210)\
    \ == 720\n@test special_factorial(215) == 5040\n@test special_factorial(220) ==\
    \ 40320\n@test special_factorial(225) == 120\n@test special_factorial(230) ==\
    \ 720\n@test special_factorial(235) == 5040\n@test special_factorial(240) == 40320\n\
    \nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplht4n_y9.jl:19\nin expression starting at\
    \ /tmp/tmplht4n_y9.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        factorial(n) * special_factorial(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxlpitk9.jl:18\nin expression starting at\
    \ /tmp/tmptxlpitk9.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhb5y_p0.jl:19\nin expression starting at\
    \ /tmp/tmpyhb5y_p0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n@time special_factorial(10000);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial of\
    \ a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsf6gaeol.jl:19\nin expression starting at\
    \ /tmp/tmpsf6gaeol.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    factorial_series(n::Int64)::Array{Int64}\n    \n    Calculates the\
    \ factorial series up to n.\n    \n    For example: \n    factorial_series(4)\
    \ = [1,1,2,6,24,120]\n    factorial_series(5) = [1,2,3,4,6,24,120]\n    factorial_series(6)\
    \ = [1,2,3,4,5,24,120]\n    factorial_series(7) = [1,2,3,4,5,6,24,120]\n    factorial_series(8)\
    \ = [1,2,3,4,5,6,7,24,120]\n    factorial_series(9) = [1,2,3,4,5,6,7,8,24,120]\n\
    \    factorial_series(10) = [1,2,3,4,5,6,7,8,9,24,120]\n    factorial_series(11)\
    \ = [1,2,3,4,5,6,7,8,9,10,24,120]\n    factorial_series(12) = [1,2,3,4,5,6,7,8,9,10,11,24,120]\n\
    \    factorial_series(13) = [1,2,3,4,5,6,7,8,9,10,11,12,24,120]\n    factorial_series(14)\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,24,120]\n    factorial_series(15) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,24,120]\n\
    \    factorial_series(16) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,24,120]\n   \
    \ factorial_series(17) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,24,120]\n   \
    \ factorial_series(18) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,24,120]\n\
    \    factorial_series(19) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,24,120]\n\
    \    factorial_series(20) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,24,120]\n\
    \    factorial_series(21) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,120]\n\
    \    factorial_series(22) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,120]\n\
    \    factorial_series(23) = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,120]\n\
    \    factorial_series(24) = [1,2,3,4,5,6,7,\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlhehx_2.jl:18\nin expression starting at\
    \ /tmp/tmpxlhehx_2.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0uru6_i.jl:19\nin expression starting at\
    \ /tmp/tmpl0uru6_i.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"factorial function only accepts positive integers\")\n    else if n\
    \ == 0\n        1\n    else\n        factorial(n) * special_factorial(n - 1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 7: Write a function that calculates the\
    \ factorial of a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvug9jduv.jl:15\nin expression starting at\
    \ /tmp/tmpvug9jduv.jl:15\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpkwnx7aax.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkwnx7aax.jl:16\n\
    in expression starting at /tmp/tmpkwnx7aax.jl:16\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpb5ml3e1q.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb5ml3e1q.jl:16\n\
    in expression starting at /tmp/tmpb5ml3e1q.jl:16\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpfbyc0qn4.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfbyc0qn4.jl:16\n\
    in expression starting at /tmp/tmpfbyc0qn4.jl:16\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhb5y_p0.jl:19\nin expression starting at\
    \ /tmp/tmpyhb5y_p0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0uru6_i.jl:19\nin expression starting at\
    \ /tmp/tmpl0uru6_i.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that calculates the factorial of a given number using\
    \ a recursive function.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt80fnmx.jl:19\nin expression starting at\
    \ /tmp/tmpnt80fnmx.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n <= 1\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpbu6qy1xi.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbu6qy1xi.jl:16\n\
    in expression starting at /tmp/tmpbu6qy1xi.jl:16\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdw8h_eef.jl:18\nin expression starting at\
    \ /tmp/tmpdw8h_eef.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<code language=julia-1.5>\n@time factorial(100000);\n\
    </cell>\n<code language=julia-1.5>\n@time special_factorial(100000);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number using recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdlg2a9w9.jl:19\nin expression starting at\
    \ /tmp/tmpdlg2a9w9.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\
    \t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1)\
    \ == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2oi7k0pi.jl:18\nin expression starting at\
    \ /tmp/tmp2oi7k0pi.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n-1) * n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\nThe factorial of a number is the product of all\
    \ positive integers less than or equal to it.\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym3xjezw.jl:19\nin expression starting at\
    \ /tmp/tmpym3xjezw.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that will receive an integer as input and will return the\
    \ factorial of this integer.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4hjm4pg.jl:18\nin expression starting at\
    \ /tmp/tmpn4hjm4pg.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n - 1))\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nThe factorial of a number is the product of its digits, starting from\
    \ \nthe least significant digit. For example, factorial(3) = 6, because 3 * 6\
    \ = 12. \nThe factorial of 0 is 1.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy80lz0nv.jl:18\nin expression starting at\
    \ /tmp/tmpy80lz0nv.jl:18\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpvrb_v2.jl:19\nin expression starting at\
    \ /tmp/tmpxpvrb_v2.jl:19\n"
  stdout: ''
  timestamp: 1659822645
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0\n       \
    \ error(\"The factorial of a negative number is not defined\")\n    elseif n ==\
    \ 0\n        return 1\n    else\n        return n * special_factorial(n - 1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ factorial of a number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzb2g6ihm.jl:21\nin expression starting at\
    \ /tmp/tmpzb2g6ihm.jl:21\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n - 1)\nend\n</cell>\n<text>\nThe\
    \ function factorial is defined as:\n    factorial(n) = n!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlmloyhm.jl:18\nin expression starting at\
    \ /tmp/tmptlmloyhm.jl:18\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert special_factorial(4) == 288\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the binomial coefficient $n!/r!$, where $n$ and $r$ are positive\
    \ integers. \nThe function should receive two integer arguments and return the\
    \ binomial coefficient.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2mxcpso.jl:18\nin expression starting at\
    \ /tmp/tmpm2mxcpso.jl:18\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzl17wty8.jl:18\nin expression starting at\
    \ /tmp/tmpzl17wty8.jl:18\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"The factorial of a number n is defined as:\n    factorial(n) = n! * n-1!\
    \ * n-2! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82g1grpd.jl:18\nin expression starting at\
    \ /tmp/tmp82g1grpd.jl:18\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78vtiida.jl:18\nin expression starting at\
    \ /tmp/tmp78vtiida.jl:18\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgja9xveu.jl:19\nin expression starting at\
    \ /tmp/tmpgja9xveu.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that calculates the factorial of a given\
    \ number. Test your function with different inputs. What happens when you enter\
    \ a negative number?\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwr7b08ln.jl:19\nin expression starting at\
    \ /tmp/tmpwr7b08ln.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjph_t7e.jl:19\nin expression starting at\
    \ /tmp/tmprjph_t7e.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that calculates the factorial of a number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpki9x7vur.jl:18\nin expression starting at\
    \ /tmp/tmpki9x7vur.jl:18\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1 \n    else \n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgs9nuc13.jl:19\nin expression starting at\
    \ /tmp/tmpgs9nuc13.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        special_factorial(n - 1) * n\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g9mkng7.jl:19\nin expression starting at\
    \ /tmp/tmp1g9mkng7.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nThe factorial of a number is the product of all\
    \ the numbers from 1 to that number\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgti2188t.jl:19\nin expression starting at\
    \ /tmp/tmpgti2188t.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * special_factorial(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjt8pd27_.jl:19\nin expression starting at\
    \ /tmp/tmpjt8pd27_.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\nThe factorial of a number is the product of\
    \ all the numbers from 1 to that number\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o_6uwyi.jl:19\nin expression starting at\
    \ /tmp/tmp_o_6uwyi.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nThe\
    \ factorial function above is recursive, meaning that it calls itself to compute\
    \ the factorial of n-1. As you can see, this can lead to stack overflows. To avoid\
    \ this problem, we can use the following trick:\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnacw0xn.jl:18\nin expression starting at\
    \ /tmp/tmpjnacw0xn.jl:18\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * ... * 1!\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpr_43auem.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_43auem.jl:16\n\
    in expression starting at /tmp/tmpr_43auem.jl:16\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Exercise 1\n\"\"\"\nWrite a function that calculates\
    \ the factorial of a given number\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cyjdq03.jl:19\nin expression starting at\
    \ /tmp/tmp6cyjdq03.jl:19\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert special_factorial(4) == 288\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the factorial of a given number using\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8hmaywe.jl:19\nin expression starting at\
    \ /tmp/tmpm8hmaywe.jl:19\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that will receive a number as input and will\
    \ return the factorial of this number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5) ==\
    \ 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1v8__3ej.jl:19\nin expression starting at\
    \ /tmp/tmp1v8__3ej.jl:19\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n < 0 \n      \
    \  error(\"Negative factorial not allowed\")\n    else if n == 0 \n        1\n\
    \    else \n        special_factorial(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nusing Test\n\n@testset begin\n\
    \ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61cz0f7p.jl:15\nin expression starting at\
    \ /tmp/tmp61cz0f7p.jl:15\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4quyeugp.jl:18\nin expression starting at\
    \ /tmp/tmp4quyeugp.jl:18\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nThe factorial of a number n is defined as:\n    factorial(n) = n!\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuh0se7zl.jl:18\nin expression starting at\
    \ /tmp/tmpuh0se7zl.jl:18\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1af6o7og.jl:18\nin expression starting at\
    \ /tmp/tmp1af6o7og.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1af6o7og.jl:18\nin expression starting at\
    \ /tmp/tmp1af6o7og.jl:18\n"
  stdout: ''
  timestamp: 1659822636
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time factorial(10000);\n</cell>\n<code language=julia-1.5>\n\
    @time special_factorial(10000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the factorial of a number using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfisd7w4j.jl:19\nin expression starting at\
    \ /tmp/tmpfisd7w4j.jl:19\n"
  stdout: ''
  timestamp: 1659822647
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = special_factorial;\n\
    \t@test(candidate(4) == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7)\
    \ == 125411328000)\n\t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwjnhy_h.jl:19\nin expression starting at\
    \ /tmp/tmphwjnhy_h.jl:19\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0 \n     \
    \   1\n    else\n        n * (special_factorial(n-1))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    factorial(n::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = special_factorial;\n\t@test(candidate(4) == 288)\n\t@test(candidate(5)\
    \ == 34560)\n\t@test(candidate(7) == 125411328000)\n\t@test(candidate(1) == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnw2s1rb.jl:19\nin expression starting at\
    \ /tmp/tmpsnw2s1rb.jl:19\n"
  stdout: ''
  timestamp: 1659822648
- exit_code: 1
  program: "\"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n   \
    \ >>> special_factorial(4)\n    288\n\n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \"\"\"\nfunction special_factorial(n::Int64)::Int64 \n    if n == 0\n      \
    \  1\n    else\n        n! * (n-1)! * (n-2)! * (n-3)! * (n-4)!\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    factorial_series(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = special_factorial;\n\t@test(candidate(4)\
    \ == 288)\n\t@test(candidate(5) == 34560)\n\t@test(candidate(7) == 125411328000)\n\
    \t@test(candidate(1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp7xgx6o81.jl:13 expected \"\
    end\", got \"!\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7xgx6o81.jl:16\n\
    in expression starting at /tmp/tmp7xgx6o81.jl:16\n"
  stdout: ''
  timestamp: 1659822648
