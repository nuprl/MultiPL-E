name: HumanEval_2_truncate_number
language: jl
prompt: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
  \    and integer part (largest integer smaller than given number) and decimals\n\
  \    (leftover part always smaller than 1).\n\n    Return the decimal part of the\
  \ number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
  \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
  end\n"
completions: ["    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend", " \
    \   truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write\
    \ a function that will compute the mean of a list of numbers.", "    \n    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.4)", "    truncate_number = truncate_number(number)\n    return\
    \ truncate_number\nend", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nThe function truncate_number has now been implemented.", "  \
    \  \"\"\"\n    Truncate a floating point number to the nearest integer.", "  \
    \  truncate_number = trunc(number)\n    return truncate_number\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the truncate function\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    # Test the truncate function\ntruncate_number(3.5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits of a given number. \n\
    The function should work for both positive and negative numbers.", "    \n   \
    \ truncate_number = number % 1\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(", "    truncate_number =\
    \ trunc(number)\n    return truncate_number\nend", "    \n    truncate_number\
    \ = number\n    \n    if number < truncate_number:\n        truncate_number =\
    \ truncate_number\n    \n    return truncate_number\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>", "    truncate_number = number % 1\n    return truncate_number\n\
    end", "    truncate_number = truncate_number(number)\nend", "    truncate_number\
    \ = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive floating point\
    \ number as an argument and returns the integer part of the number.", "    \n\
    \    truncate_number = number % 1\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a given number. \nThe function\
    \ should accept a number as an argument and return the factorial of that number.\n\
    The function should raise an error if the given number is not a positive integer.\n\
    The function should raise an error if the given number is a negative integer.",
  "    \n    truncate_number = number % 1\n    return truncate_number\n</code>\n<|/\
    \ a tags=julia,floating-point |>\n<| c |>\nThis doesn't work if `number` is negative.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number`\
    \ is negative.\n<|/ c |>\n<| a dscore=5 |>\nThe most straightforward way is to\
    \ use round:\n<code>\njulia> round(3.5)\n2\n</code>\n<|/ a tags=julia,floating-point\
    \ |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\n\
    This doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is\
    \ negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe most straightforward way is to use round:\n<code>\n\
    julia> round(3.5)\n2\n</code>\n<|/ a tags=julia,floating-point |>\n<| c |>\nThis\
    \ doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is\
    \ negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe most straightforward way is to use round:\n<code>\njulia> round(3.5)\n\
    2\n</code>\n<|/ a tags=julia,floating-point |>\n<| c |>\nThis doesn't work if\
    \ `number` is negative.\n<|/ c |>\n<| c |>\nThis doesn't work if `number` is negative.\n\
    <|/ c |>\n<| a tags=julia,floating-point |>\nThe most straightforward way is to\
    \ use round:\n<code>\njuli", "    \n    truncate_number = number % 1\n    return\
    \ truncate_number\nend", "    truncate_number = round(number::Float64)\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the truncation function\ntruncate_number(3.5)\n</cell>\n<text>\nThe round()\
    \ function\nThe round() function rounds a floating point number to the nearest\
    \ integer or decimal number.", "    truncate_number = floor(number)\n    truncate_number\
    \ = truncate_number - truncate_number % 1\n    return truncate_number\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>", "    truncate_number = trunc(number)\n  \
    \  return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# export",
  "    truncate_number = round(number)\nend", "    \n    if number == 0.\n       \
    \ return 0.\n    \n    digits = floor(log10(number))\n    decimals = digits -\
    \ floor(digits)\n    \n    if number < 0.\n        return 0.\n    \n    number\
    \ = round(number, digits)\n    \n    return number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = trunc(number)\n    return truncate_number\nend", "    \n\
    \    truncate_number = truncate_number(number)\n    \n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    \n    return truncate_number\n</code>\n<|/ a tags=julia,floating-point,truncate\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `truncate_number(-0.5)`\
    \ returns `-0.5`.\n<|/ c |>\n<| c |>\nI fixed the negative number issue. Thanks!\n\
    <|/ c |>\n<| a tags=julia,floating-point,truncate |>\nI wrote a package for this:\n\
    https://github.com/kamiy/Trunc\n<code>\nusing Trunc", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    truncate_number = round(number::Float64)\nend\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's try it out on a few examples:",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</", "    truncate_number\
    \ = truncate_number(number)\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive floating point\
    \ number and returns the integer part and the decimal part as a tuple.", "   \
    \ \n    truncate_number = number % 1\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    truncate_number = trunc(number)\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI came up with this solution:\n\
    <code>", "    truncate_number = trunc(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</", "    truncate_number\
    \ = truncate_number(number)\n    return truncate_number\nend", "    \n    digits\
    \ = math.floor(math.log(number, 10))\n    decimals = 10 ** digits - digits\n \
    \   \n    return number / decimals\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive floating point number and returns the integer part and the decimal\
    \ part separately. For example, truncate_number(3.5) should return (3,0.5).",
  "    \n    truncate_number = number % 1\n    return truncate_number\nend", "   \
    \ truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the truncate function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that will compute the mean of a given\
    \ vector of numbers.", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive floating point number as input\
    \ and returns the integer part and the decimal part as a tuple.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nThe function truncate_number above returns the decimal part of the number.\
    \ Let's see how we can use it to round a number to the nearest integer:", "  \
    \  truncate_number = number % 1\n    return truncate_number\nend", "    truncate_number\
    \ = truncate_number(number)\n    return truncate_number\nend", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = number % 1\n    return truncate_number\n\
    end", "    truncate_number = trunc(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n    number\
    \ = round(number)\n    \n    if number == 0.0:\n        return number\n    \n\
    \    decimal_part = number % 1\n    \n    if decimal_part == 0.0:\n        return\
    \ number\n    \n    integer_part = floor(number)\n    \n    return integer_part\
    \ + decimal_part\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is very\
    \ simple. It just returns the number modulo 1, i.e. the fractional part of a number.\
    \ Let's see how it works:", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = trunc(number)\n    return truncate_number\nend",
  "    \n    truncate_number = number\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# TEST truncate_number (5b)\n@test truncate_number(3.5)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.6) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.7) \u2248 truncate_number(3.5)\n@test truncate_number(3.8)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.9) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.10) \u2248 truncate_number(3.5)\n@test truncate_number(3.11)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.12) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.13) \u2248 truncate_number(3.5)\n@test truncate_number(3.14)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.15) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.16) \u2248 truncate_number(3.5)\n@test truncate_number(3.17)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.18) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.19) \u2248 truncate_number(3.5)\n@test truncate_number(3.20)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.21) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.22) \u2248 truncate_number(3.5)\n@test truncate_number(3.23)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.24) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.25) \u2248 truncate_number(3.5)\n@test truncate_number(3.26)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.27) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.28) \u2248 truncate_number(3.5)\n@test truncate_number(3.29)\
    \ \u2248 truncate_number(3.5)\n@test truncate_number(3.30) \u2248 truncate_number(3.5)\n\
    @test truncate_number(3.31) \u2248 truncate_", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is called\
    \ with the argument 3.5 and returns the decimal part of this number. Let's see\
    \ how it works.", "    truncate_number = truncate_number(number)\nend", "    truncate_number\
    \ = truncate_number(number)\n    return truncate_number\nend", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that will compute\
    \ the mean of a given vector of numbers.", "    \n    truncate_number = trunc(number)\n\
    \    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n#\
    \ Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a\
    \ function that converts a number from one base to another. We'll use the function\
    \ convert() from the Base package to convert a number from one base to another.",
  "    truncate_number = truncate_number(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that will convert a number from one\
    \ base to another.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    \n    truncate_number = number\n    \n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend", " \
    \   truncate_number = trunc(number)\n    return truncate_number\nend", "    \"\
    \"\"\n    Truncate a floating point number to its decimal part.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    \n    number = round(number)\n    \n \
    \   integer_part = floor(number)\n    \n    decimal_part = number - integer_part\n\
    \    \n    return decimal_part\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that can convert a number from one\
    \ base to another.", "    \"\"\"\n    Given a positive floating point number,\
    \ it can be decomposed into\n    and integer part (largest integer smaller than\
    \ given number) and decimals\n    (leftover part always smaller than 1).", " \
    \   \n    number = round(number)\n    \n    if number < 1:\n        return number\n\
    \    \n    decimal_part = number % 1\n    \n    if number < 10 and decimal_part\
    \ == 0:\n        return number\n    \n    if number < 10 and decimal_part > 0:\n\
    \        return number - decimal_part\n    \n    if number < 100 and decimal_part\
    \ > 0:\n        return number - decimal_part + 10\n    \n    if number < 1000\
    \ and decimal_part > 0:\n        return number - decimal_part + 100\n    \n  \
    \  if number < 10000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 1000\n    \n    if number < 100000 and decimal_part > 0:\n        return number\
    \ - decimal_part + 10000\n    \n    if number < 1000000 and decimal_part > 0:\n\
    \        return number - decimal_part + 100000\n    \n    if number < 10000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 1000000\n    \n\
    \    if number < 100000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 10000000\n    \n    if number < 1000000000 and decimal_part > 0:\n       \
    \ return number - decimal_part + 100000000\n    \n    if number < 10000000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 1000000000\n \
    \   \n    if number < 100000000000 and decimal_part > 0:\n        return number\
    \ - decimal_part + 10000000000\n    \n    if number < 1000000000000 and decimal_part\
    \ > 0:\n        return number - decimal_part + 100000000000\n    \n    if number\
    \ < 10000000000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 1000000000000\n    \n    if number < 100000000000000 and decimal_part > 0:\n\
    \        return number - decimal_part + 10000000000000\n    \n    if number <\
    \ 1000000000000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 100000000000000\n    \n    if number < 10000000000000000 and decimal_part\
    \ > 0:\n        return number - decimal_part + 1000000000000000\n    \n    if\
    \ number < 100000000000000000 and decimal_part > 0:\n        return number - decimal_part\
    \ + 10000000000000000\n    \n    if number < 1000000000000000000 and decimal_part\
    \ > 0:\n        return number - decimal_part + 100000000000000000\n    \n    if\
    \ number < 10000000000000000000 and decimal_part > 0:\n        return number -\
    \ decimal_part + 1000000000000000000\n    \n    if number < 100000000000000000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 10000000000000000000\n\
    \    \n    if number < 1000000000000000000000 and decimal_part > 0:\n        return\
    \ number - decimal_part + 100000000000000000000\n    \n    if number < 10000000000000000000000\
    \ and decimal_part > 0:\n        return number - decimal_part + 1000000000000000000000\n\
    \    \n    if number < 1000000000000000000", "    truncate_number = truncate_number(number)\n\
    end", "    \n    truncate_number = round(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that converts a number from one base\
    \ to another.", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nThe function below will return the decimal\
    \ part of a floating point number in any base (base 10, base 2, base 8, base 16\
    \ and base 32).\n<code>", "    \n    truncate_number = number % 1\n    \n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's try it out on some examples:", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = truncate_number(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow\
    \ let's use our truncate function and see what happens when we truncate a number\
    \ that doesn't have decimal part:", "    truncate_number = number % 1\n    return\
    \ truncate_number\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27839437)\n\
    <|/ c |>\n<| c |>\nIt does provide an answer. He asked how to truncate a floating\
    \ point number to a decimal part and I provided a solution. He didn't ask for\
    \ clarification or critique.\n<|/ c |>\n<| c |>\nI didn't downvote your answer,\
    \ but your answer does not provide an answer to the question. Your answer merely\
    \ explains how to truncate a floating point number to a decimal part. Your answer\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not explain how to truncate a floating point number to a decimal part and\
    \ does not ex", "    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = round(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = trunc(number)\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that converts a number from one base\
    \ to another.", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   \"\"\"\n    Truncate a floating point number to its decimal part.", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's see how we can use our truncate function to truncate\
    \ a number to a given number of decimal places.", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    The function truncate_number returns the truncated version of the given number.\
    \ \nIt does not change the original number.", "    truncate_number = number %\
    \ 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a function\
    \ that can convert a number from one base to another.", "    \n    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's see how we can use these functions\
    \ to solve the problem:", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend", "    truncate_number = number % 1\n    return truncate_number\n\
    end", "    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a string into a vector of characters.\nThe function should take a string as\
    \ input and return a vector of characters.\nThe function should ignore all non-alphabetic\
    \ characters and return an empty vector if the input string contains any non-alphabetic\
    \ characters.", "    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's use our truncate function to truncate our data frame to only include\
    \ data points with positive values.", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    truncate_number = floor(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's use\
    \ our truncate function to truncate our dataset to only include data points with\
    \ sales above $50000.", "    truncate_number = truncate_number(number)\n    return\
    \ truncate_number\nend", "    truncate_number = round(number::Float64)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if number < 0\n        error(\"\
    Cannot truncate negative numbers\")\n    end\n    \n    digits = floor(log10(number))\n\
    \    \n    if digits < 0\n        error(\"Cannot truncate numbers with negative\
    \ exponents\")\n    end\n    \n    digits = digits - 1\n    \n    if number <\
    \ 10^digits\n        return number\n    end\n    \n    digits = digits + 1\n \
    \   \n    truncate_digits = 10^digits\n    \n    if number < truncate_digits\n\
    \        return number\n    end\n    \n    truncate_digits = truncate_digits -\
    \ 1\n    \n    truncate_digits = truncate_digits + 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n   \
    \ \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits = truncate_digits\
    \ - 1\n    \n    truncate_digits = truncate_digits - 1\n    \n    truncate_digits\
    \ = truncate_digits - 1\n    \n    truncate_digits = truncate_digits - 1\n", " \
    \   \"\"\"\n    Truncate a floating point number to the nearest integer.", " \
    \   truncate_number = trunc(number)\n    return truncate_number\nend", "    truncate_number\
    \ = truncate_number(number)\n    return truncate_number\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n#\
    \ Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's create a\
    \ function that can convert a number from one base to another. We'll use our truncate_number\
    \ function to get the decimal part of a number and multiply it by the base to\
    \ convert it.", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's try it out on our first number:", "    truncate_number = trunc(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = round(number,\
    \ digits)\nend\n</code>\n<|/ a tags=julia,floating-point |>\n<| a dscore=2 |>\n\
    I came up with a solution using Julia's built-in rounding functions:\n<code>",
  "    \n    truncate_number = number % 1\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a string to a floating point number. \nThe\
    \ function should raise an error if the string cannot be converted to a floating\
    \ point number.", "    truncate_number = truncate_number(number)\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive floating point number as input\
    \ and returns the integer part of the number.", "    truncate_number = round(number,\
    \ digits)\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that will compute the mean of a vector of numbers:",
  "    truncate_number = truncate_number(number)\n    return truncate_number\nend",
  "    truncate_number = truncate_number(number)\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = trunc(number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    truncate_number = number % 1\n    \n  \
    \  return truncate_number\nend", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits of an integer.",
  "    \n    truncate_number = number % 1\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a positive floating point number and returns the\
    \ integer part and the decimal part as a tuple.", "    truncate_number = round(number)\n\
    end\n</cell>\n<text>\nNow let's see how we can use these functions to solve our\
    \ problem:", "    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\n</code>\n<|/ a |>\n<| a tags=julia\
    \ |>\nThe function truncate is deprecated. Use truncate instead.\n<code>\njulia>\
    \ truncate(3.5)\n0.5", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = number\
    \ % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(", "    truncate_number = floor(number)\n    truncate_number =\
    \ truncate_number - truncate_number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write\
    \ some functions to calculate the mean and standard deviation of a given vector:",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of digits in an integer. For example, truncate_number(1000)\
    \ should return 3.", "    truncate_number = round(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's implement the function truncate_number_with_precision!.", " \
    \   truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = truncate_number(number)\n    return truncate_number\nend",
  "    \n    truncate_number = number % 1\n    \n    return truncate_number\n</code>\n\
    <|/ a tags=julia,floating-point |>\n<| a dscore=2 |>\nThe answer by is correct,\
    \ but I thought I'd add some more information to help people who are new to Julia.\n\
    The function truncate_number() returns a Float64. Julia has two types of numbers:\
    \ Float64 and BigFloat. Float64 is used for numbers that have a decimal point\
    \ and are small enough to fit in a single machine word. BigFloat is used for numbers\
    \ that have a decimal point and are large enough to fit in a single machine word.\
    \ \nWhen you write truncate_number(3.5), you are creating a BigFloat. BigFloat\
    \ is similar to Float64, but has more precision. BigFloat is also faster than\
    \ Float64. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64.\
    \ Float64 is similar to BigFloat, but has less precision. Float64 is also slower\
    \ than BigFloat. \nWhen you write truncate_number(3.5), you are creating a Float64. ",
  "    \n    truncate_number = number % 1\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(", "    truncate_number =\
    \ trunc(number)\n    return truncate_number\nend", "    \n    truncate_number\
    \ = number % 1\n    \n    if truncate_number < 0.5\n        truncate_number =\
    \ truncate_number + 1.0\n    end\n    \n    return truncate_number\nend\n</cell>\n\
    <text>\nNow let's test our truncate function by applying it to a few numbers:",
  "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\n</code>\n<|/ a tags=julia,floating-point,truncate |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `truncate_number(-3.5)` returns\
    \ `-3.5` instead of `-3.0`\n<|/ c |>\n<| c |>\nI fixed the issue by adding `if\
    \ number < 0` before `truncate_number = number % 1`\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    number = round(number)\n\
    \    \n    if number < 1:\n        return number\n    \n    digits = floor(log10(number))\n\
    \    \n    if digits < 1:\n        return number\n    \n    digits = digits -\
    \ 1\n    \n    decimals = round(number / pow(10, digits))\n    \n    return round(number\
    \ / pow(10, digits), digits) + decimals\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n", "    \"\"\
    \"\n    Truncate a floating point number to the nearest integer.", "    truncate_number\
    \ = trunc(number)\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \"\"\"\n    Truncate\
    \ a floating point number to a decimal number.", "    truncate_number = trunc(number)\n\
    end\n</cell>\n<code language=julia-1.4>", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = number\
    \ % 1\n    \n    return truncate_number\n</code>\n<|/ a tags=julia |>\n<| a dscore=0\
    \ |>\n<code>", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that can convert a number from one\
    \ base to another. We'll use our truncate_number function to get the decimal part\
    \ of the number.", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe simplest way is to use floor\
    \ and ceil functions:\n<code>\nceil(3.5)\n</code>\n<|/ a tags=julia,truncate |>\n\
    <| a |>\nThe easiest way is to use round:\n<code>\nround(3.5)\n</code>\n<|/ a\
    \ tags=julia,truncate dscore=0 |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26258124)\n<|/ c\
    \ |>\n<| c |>\nIt does provide an answer to the question. `round` rounds a number\
    \ to the nearest integer. `ceil` rounds a number to the nearest integer above\
    \ the number. `floor` rounds a number to the nearest integer below the number.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/26258124)\n<|/ c |>\n<| c |>\nIt does\
    \ provide an answer to the question. `round` rounds a number to the nearest integer.\
    \ `ceil` rounds a number to the nearest integer above the number. `floor` rounds\
    \ a number to the nearest integer below the number.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26258124)\n\
    <|/ c |>\n<| a tags=julia,truncate |>\nThe easiest way is to use round:\n<code>\n\
    round(3.5)\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,truncate |>\n<code>\n\
    trunc(3.5)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26258124)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer ", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", " \
    \   truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number returns the\
    \ truncated number as a floating point number.", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    \n    truncate_number = number % 1\n \
    \   \n    if truncate_number < 0.5\n        truncate_number = truncate_number\
    \ + 1.0\n    end\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of digits of a given number. \nThe function should work for both\
    \ positive and negative numbers.", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's implement a function that will compute the mean of\
    \ a given vector of numbers.", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = trunc(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nThe\
    \ function truncate truncates a number to the nearest integer or float.", "  \
    \  truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = truncate_number(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    \"\"\"\n    Truncate a floating point\
    \ number to the nearest integer.", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise: Write a function that takes a\
    \ positive floating point number as an argument and returns the integer part and\
    \ the decimal part as a tuple.", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n    if number\
    \ < 0\n        error(\"number must be positive\")\n    end\n    \n    digits =\
    \ floor(log10(number))\n    \n    if digits < 0\n        error(\"number must be\
    \ positive\")\n    end\n    \n    digits = digits + 1\n    \n    number = round(number\
    \ * 10^digits)\n    \n    return number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(-3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>",
  "    \n    truncate_number = truncate_number(number)\n    \n    if truncate_number\
    \ == number\n        \n        return number\n    \n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    \n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.", "    \n    number = round(number)\n    \n    integer_part\
    \ = floor(number)\n    \n    decimal_part = number - integer_part\n    \n    return\
    \ decimal_part\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,floating-point |>\n\
    I wrote a package for Julia called FloatMath.\n<code>\nusing FloatMath\ntrunc(3.5)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    truncate_number =\
    \ trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nTruncating floats\nWe have seen that truncating\
    \ floats results in rounding errors.\nWe also saw that we can truncate floats\
    \ using the trunc function.\nThe trunc function truncates the decimal part of\
    \ a number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates the integer\
    \ part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates\
    \ the decimal part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also\
    \ truncates the integer part of a number.\nFor example, trunc(3.5) returns 3.\n\
    trunc also truncates the decimal part of a number.\nFor example, trunc(3.5) returns\
    \ 3.\ntrunc also truncates the integer part of a number.\nFor example, trunc(3.5)\
    \ returns 3.\ntrunc also truncates the decimal part of a number.\nFor example,\
    \ trunc(3.5) returns 3.\ntrunc also truncates the integer part of a number.\n\
    For example, trunc(3.5) returns 3.\ntrunc also truncates the decimal part of a\
    \ number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates the integer\
    \ part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates\
    \ the decimal part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also\
    \ truncates the integer part of a number.\nFor example, trunc(3.5) returns 3.\n\
    trunc also truncates the decimal part of a number.\nFor example, trunc(3.5) returns\
    \ 3.\ntrunc also truncates the integer part of a number.\nFor example, trunc(3.5)\
    \ returns 3.\ntrunc also truncates the decimal part of a number.\nFor example,\
    \ trunc(3.5) returns 3.\ntrunc also truncates the integer part of a number.\n\
    For example, trunc(3.5) returns 3.\ntrunc also truncates the decimal part of a\
    \ number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates the integer\
    \ part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also truncates\
    \ the decimal part of a number.\nFor example, trunc(3.5) returns 3.\ntrunc also\
    \ truncates the integer part of a number.\nFor example, trunc(3.5) returns 3.\n\
    trunc also truncates the decimal part of a number.\nFor example, trunc(3.5) returns\
    \ 3.\ntrunc also truncates the integer part of a number.\nFor example, trunc(3.5)\
    \ returns 3.\ntrunc also truncates the decimal part of a number.\nFor example,\
    \ trunc(3.5) returns 3.\ntrunc also truncates the integer part of a number.\n\
    For example, trunc(3.5) returns 3.\ntrunc also truncates the decimal part ", " \
    \   \n    truncate_number = truncate_number(number)\n    \n    if truncate_number\
    \ == number\n        truncate_number = number\n    else\n        truncate_number\
    \ = truncate_number - truncate_number * truncate_number / number\n    end\n  \
    \  \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that will return the number of digits\
    \ of an integer.", "    \n    truncate_number = truncate_number(number)\n    \n\
    \    return truncate_number\nend", "    \n    truncate_number = number % 1\n \
    \   \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   truncate_number = number % 1\n    return truncate_number\nend", "    \n  \
    \  truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end", "    truncate_number = trunc(number)\n    return truncate_number\nend",
  "    \n    truncate_number = round(number, digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that will compute\
    \ the mean of a vector of numbers. We'll use Julia's built-in mean function and\
    \ pass in our vector of numbers. We will also pass in an optional argument to\
    \ tell us how many numbers to include in the mean.", "    truncate_number = trunc(number)\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
