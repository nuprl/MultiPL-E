name: HumanEval_126_is_sorted
language: jl
prompt: "\"\"\"\n    Given a list of numbers, return whether or not they are sorted\n\
  \    in ascending order. If list has more than 1 duplicate of the same\n    number,\
  \ return False. Assume no negative numbers and only integers.\n\n    Examples\n\
  \    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5])\n    true\n\
  \    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1, 2, 3, 4, 5,\
  \ 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n    >>> is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    true\n\
  \    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n    \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
  \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
  \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
  \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
  \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4]) ==\
  \ false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
  \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
completions: ["    sorted = true\n    for x in lst\n        if sorted == false\n \
    \           break\n        if x != lst[findfirst(x .< lst)]\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ is a higher-order function that takes a function and a list of numbers and returns\
    \ true if the list of numbers is sorted according to that function.", "    sorted\
    \ = sort(lst)\n    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    sorted = sort(lst)\n    return sorted == lst\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4,\
    \ 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, ", "    sorted = false\n    for x in lst\n        if x < sorted\n       \
    \     sorted = true\n        else\n            sorted = false\n        end\n \
    \   end\n    return sorted\nend", "    \n    sorted = true\n    for x in lst\n\
    \        if x < lst[end(x)]\n            sorted = false\n        end\n    end\n\
    \    return sorted\nend", "    sorted = true\n    for x in lst\n        if sorted\
    \ == false\n            sorted = x < lst[end(x)]\n        end\n    end\n    return\
    \ sorted\nend", "    \n    sorted = sort(lst)\n    \n    if length(sorted) ==\
    \ length(lst)\n        for (i, x) in enumerate(lst)\n            if x != sorted[i]\n\
    \                return false\n            end\n        return true\n    else\n\
    \        return false\n    end\nend", "    sorted = true\n    for x in lst\n \
    \       if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>", "    sorted = sort(lst)\n\
    \    return all(sorted == lst)\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1, 6]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 7]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 1, 6, 2, 3]) == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 1, 6, 2, 3]", "    if is_sorted(lst)\
    \ == true\n        return true\n    \n    last = lst[1]\n    for i in lst[2:end]\n\
    \        if i == last\n            return false\n        last = i\n    return\
    \ true\nend", "    sorted = sort(lst)\n    return sorted == lst\nend", "    sorted\
    \ = false\n    for x in lst\n        if x < lst[end-1]\n            sorted = true\n\
    \            break\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 2]) == false\n@assert is_sorted([5, 3, 2, 4, 3]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 4]) == false\n@assert is_sorted([5, 3, 2, 4, 5]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) == false\n@assert is_sorted([5, 3, 2, 4, 7]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 8]) == false\n@assert is_sorted([5, 3, 2, 4, 9]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 10]) == false\n@assert is_sorted([5, 3, 2, 4, 11]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 12]) == false\n@assert is_sorted([5, 3, 2, 4, 13]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 14]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 15]) == true\n@assert is_sorted([5, 3, 2, 4, 16]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 17]) == true\n@assert is_sorted([5, 3, 2, 4, 18]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 19]) == true\n@assert is_sorted([5, 3, 2, 4, 20]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 21]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 22]) == false\n@assert is_sorted([5, 3, 2, 4, 23]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 24]) == false\n@assert is_sorted([5, 3, 2, 4, 25]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 26]) == false\n@assert is_sorted([5, 3, 2, 4, 27]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 28]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 29]) == true\n@assert is_sorted([5, 3, 2, 4, 30]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 31]) == true\n@assert is_sorted([5, 3, 2, 4, 32]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 33]) == true\n@assert is_sorted([5, 3, 2, 4, 34]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 35]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 36]) == false\n@assert is_sorted([5, 3, 2, 4, 37]) == true", "    sorted\
    \ = true\n    seen = Set()\n    for x in lst\n        if x in seen\n         \
    \   sorted = false\n            break\n        seen.add(x)\n    end\n    return\
    \ sorted\nend", "    sorted = true\n    for x in lst\n        if sorted == false\n\
    \            sorted = x < lst[end]\n        end\n    end\n    return sorted\n\
    end", "    sorted = false\n    for x in lst\n        if x == sort(lst)[1]\n  \
    \          sorted = true\n            break\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<text>\nis_sorted_by() is a function that takes a function\
    \ and a list of numbers and returns whether or not the list of numbers is sorted\
    \ according to the function given.", "    sorted = true\n    for x in lst\n  \
    \      if sorted == false\n            sorted = x < lst[end]\n        else\n \
    \           sorted = sorted && x < lst[end]\n        end\n    end\n    return\
    \ sorted\nend", "    if is_sorted(lst) == true\n        return true\n    \n  \
    \  sorted = sort(lst)\n    if sorted == lst\n        return true\n    \n    return\
    \ false\nend", "    sorted = sort(lst)\n    sorted.length == 1\nend", "    if\
    \ is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(lst) == length(sorted)\n        return true\n    \n    return\
    \ false\nend", "    \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n\
    \        for (i,j) in zip(sorted, lst)\n            if i == j\n              \
    \  return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend", "    if is_sorted(lst) == true\n       \
    \ return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])",
  "    sorted = false\n    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend", "    if is_sorted(lst) == true\n\
    \        return true\n    \n    sorted = sort(lst)\n    \n    if length(lst) ==\
    \ length(sorted)\n        return true\n    \n    return false\nend", "    \n \
    \   sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 2]) == false\n\
    @assert is_sorted([5, 2, 3, 4, 5]) == false\n@assert is_sorted([5, 2, 3, 4, 6,\
    \ 7]) == true\n@assert is_sorted([5, 2, 3, 4, 6, 8, 7]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 6, 8, 7, 9]) == true\n@assert is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10])\
    \ == false\n@assert is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10, 11]) == true\n@assert\
    \ is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13]) == true\n@assert is_sorted([5, 2, 3, 4,\
    \ 6, 8, 7, 9, 10, 11, 12, 13, 14]) == false\n@assert is_sorted([5, 2, 3, 4, 6,\
    \ 8, 7, 9, 10, 11, 12, 13, 14, 15]) == true\n@assert is_sorted([5, 2, 3, 4, 6,\
    \ 8, 7, 9, 10, 11, 12, 13, 14, 15, 16]) == false\n@assert is_sorted([5, 2, 3,\
    \ 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\
    \ == true\n@assert is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20]) == false\n@assert is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ==\
    \ false\n@assert is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23]) == true\n@assert is_sorted([5, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25]) == true\n@assert ", "    \n    sorted = true\n    \n  \
    \  for x in lst\n        if sorted == false\n            if x == lst[1]\n    \
    \            sorted = true\n            else\n                sorted = false\n\
    \        end\n    end\n    \n    return sorted\nend", "    sorted = true\n   \
    \ for i in lst\n        if sorted == false\n            sorted = false\n     \
    \       break\n        if i == sorted\n            sorted = false\n          \
    \  break\n    end\n    return sorted\nend", "    if is_sorted(lst) == true\n \
    \       return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend", "    sorted\
    \ = true\n    for x in lst\n        if sorted == false\n            break\n  \
    \      if x != lst[findfirst(x == lst)]\n            sorted = false\n        end\n\
    \    end\n    return sorted\nend", "    sorted = false\n    for x in lst\n   \
    \     if x < sorted\n            sorted = true\n        else\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 1, 2, 3, 4, 5]) == true\n@assert is_sorted([5, 1, 2, 3,\
    \ 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@", "    sorted = true\n    for i\
    \ in lst\n        if sorted == false\n            sorted = true\n        else\n\
    \            if i == lst[end]\n                sorted = false\n            else\n\
    \                if i < lst[end]\n                    sorted = false\n       \
    \         end\n            end\n        end\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>", "    sorted = true\n    for x in lst\n  \
    \      if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    sorted = true\n    for x in lst\n\
    \        if x != x\n            sorted = false\n            break\n    return\
    \ sorted\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>", "    sorted = true\n    seen = Set()\n  \
    \  for x in lst\n        if x in seen\n            sorted = false\n        else\n\
    \            seen += [x]\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    last = sorted[end]\n    for x in sorted\n        if x != last\n         \
    \   return false\n    return true\nend\n</cell>\n<code language=julia-1.3>", " \
    \   sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for x in lst\n        if x != sort(x)\n            sorted = false\n        \
    \    break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = sort(lst)\n    sorted.length == 1\nend", "    sorted = sort(lst)\n\
    \    return all(sorted == lst)\nend", "    sorted = true\n    for x in lst\n \
    \       if sorted == false\n            sorted = x < lst[end]\n        end\n \
    \   end\n    return sorted\nend\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=", "    sort(lst) == lst\nend", "    sorted = true\n    for i in lst\n\
    \        if sorted == false\n            sorted = false\n        else\n      \
    \      if i == lst[i - 1]\n                sorted = false\n            else\n\
    \                sorted = true\n        end\n    end\n    return sorted\nend",
  "    sort(lst) == lst\nend", "    lst = sort(lst)\n    last = lst[1]\n    for x\
    \ in lst[2:end]\n        if x != last\n            return false\n        last\
    \ = x\n    return true\nend", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>", "    \n    sorted = false\n\
    \    \n    for x in lst\n        if x != sort(x)\n            sorted = true\n\
    \            break\n        end\n    end\n    \n    return sorted\nend\n</cell>\n\
    <text>\nis_sorted_by() function\nGiven a list of numbers, return whether or not\
    \ they are sorted\nin ascending order. If list has more than 1 duplicate of the\
    \ same\nnumber, return False. Assume no negative numbers and only integers.",
  "    sorted = false\n    for x in lst\n        if x < sorted\n            sorted\
    \ = true\n        else\n            sorted = false\n        end\n    end\n   \
    \ return sorted\nend", "    if is_sorted(lst) == true\n        return true\n \
    \   \n    counts = Dict{Int64, Int64}()\n    for i in lst\n        counts[i] =\
    \ counts[i] + 1 if i in counts else 1\n    end\n    \n    for i in counts\n  \
    \      if counts[i] > 1\n            return false\n    end\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=", "    sorted = true\n    for x in lst\n        if sorted == false\n\
    \            sorted = x < lst[end]\n        else\n            sorted = sorted\
    \ && x < lst[end]\n        end\n    end\n    return sorted\nend", "    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        for i\
    \ in 1:length(lst)\n            if sorted_list[i] != lst[i]\n                return\
    \ false\n            end\n        end\n        return true\n    else\n       \
    \ return false\n    end\nend\n</cell>\n<text>\nis_sorted_by() is a function that\
    \ takes a function and a list of numbers and returns true if the list of numbers\
    \ is sorted according to that function.", "    sorted = sort(lst)\n    return\
    \ sorted == lst\nend\n</cell>\n<code language=julia-1.3>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert ", " \
    \   sorted = true\n    for x in lst\n        if sorted == false\n            break\n\
    \        if x != lst[end]\n            sorted = false\n        end\n    end\n\
    \    sorted\nend", "    sorted = true\n    for x in lst\n        if x < sorted\n\
    \            sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25",
  "    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n          \
    \  sorted = false\n            break\n    end\n    return sorted\nend", "    sorted\
    \ = true\n    for x in lst\n        if sorted == false\n            break\n  \
    \      if x != lst[sorted]\n            sorted = false\n        end\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.3>\nis_sorted([1, 2,\
    \ 3, 4, 5])\n</cell>\n<code language=julia-1.3>\nis_sorted([1, 3, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.3>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 4])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 4, 5])\n</", "    if\
    \ is_sorted(lst) == true\n        return true\n    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n    \
    \    true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n \
    \   in descending order. If list has more than 1 duplicate of the same\n    number,\
    \ return False. Assume no negative numbers and only integers.", "    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for x in lst\n        if sorted == false\n            break\n        if x <\
    \ lst[end]\n            sorted = false\n        else\n            sorted = true\n\
    \        end\n    end\n    return sorted\nend", "    sorted = true\n    for x\
    \ in lst\n        if x != x\n            sorted = false\n            break\n \
    \   end\n    return sorted\nend", "    sorted = true\n    for x in lst\n     \
    \   if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        for (i,j) in zip(sorted_list, lst)\n            if i\
    \ == j\n                return false\n            end\n        return true\n \
    \   else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,3,4,5,6,7])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1,2,2,2,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,2,3,4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,2,3,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1,2,2,3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell", "    sorted = true\n    for x in lst\n        if x != sort(x)\n     \
    \       sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns true if a list is sorted in\n\
    descending order. Assume no negative numbers and only integers.", "    sorted\
    \ = true\n    for x in lst\n        if sorted == false\n            sorted = x\
    \ < lst[end]\n        end\n    end\n    sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ is a function that takes a function and a list of numbers and returns true if\
    \ the list of numbers is sorted using the given function.", "    \n    sorted\
    \ = true\n    for x in lst\n        if x != x\n            sorted = false\n  \
    \          break\n        end\n    end\n    return sorted\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of unique elements in a list.",
  "    sorted = true\n    for x in lst\n        if x != x\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for x in lst\n        if x != x\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by(func, lst)", " \
    \   \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n        for\
    \ (i, val) in enumerate(sorted)\n            if val != lst[i]\n              \
    \  return false\n            end\n        end\n        return true\n    else\n\
    \        return false\n    end\nend", "    \n    sorted = sort(lst)\n    \n  \
    \  if length(sorted) == length(lst)\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<text>\nis_sorted_by(func, lst)", "    sorted = true\n\
    \    for x in lst\n        if sorted == false\n            break\n        if x\
    \ < lst[end]\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.4>", "    if is_sorted(lst) == true\n   \
    \     return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted) ==\
    \ length(lst)\n        return true\n    \n    return false\nend", "    sorted\
    \ = true\n    for i in lst\n        if sorted == false\n            sorted = false\n\
    \            break\n        if i == sorted\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1, 3,\
    \ 2, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2, 2,\
    \ 3, 3, 4])\n@test is_sorted([1, 2, 2, 2, 3, 4])\n@test is_sorted([1, 1, 2, 2,\
    \ 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2,\
    \ 3, 4, 5, 6])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5,\
    \ 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5,\
    \ 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5,\
    \ 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5,\
    \ 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5,\
    \ 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 1, 2, 2, 3, 4, 5, 6, 7])\n@test ",
  "    sorted = true\n    for i in lst\n        if sorted == false\n            sorted\
    \ = true\n        else\n            if i == lst[end]\n                sorted =\
    \ false\n            else\n                if i > lst[end]\n                 \
    \   sorted = false\n                else\n                    if i == lst[end\
    \ - 1]\n                        sorted = false\n                    else\n   \
    \                     if i > lst[end - 1]\n                            sorted\
    \ = false\n                        else\n                            if i == lst[end\
    \ - 2]\n                                sorted = false\n                     \
    \       else\n                                if i > lst[end - 2]\n          \
    \                          sorted = false\n                                else\n\
    \                                    if i == lst[end - 3]\n                  \
    \                      sorted = false\n                                    else\n\
    \                                        if i > lst[end - 3]\n               \
    \                             sorted = false\n                               \
    \         else\n                                            if i == lst[end -\
    \ 4]\n                                                sorted = false\n       \
    \                                     else\n                                 \
    \               if i > lst[end - 4]\n                                        \
    \            sorted = false\n                                                else\n\
    \                                                    sorted = true\n         \
    \                       end\n                        end\n                end\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.4>",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted =\
    \ true\n    for x in lst\n        if x != x\n            sorted = false\n    \
    \        break\n    return sorted\nend", "    sort(lst) == lst\nend", "    \n\
    \    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted =\
    \ sort(lst)\n    return sorted == lst\nend", "    sorted = true\n    for i in\
    \ lst\n        if sorted == false\n            sorted = true\n        else\n \
    \           sorted = false\n        end\n    end\n    return sorted\nend", " \
    \   sorted = true\n    for x in lst\n        if sorted == false\n            sorted\
    \ = x < lst[end]\n        else\n            sorted = sorted && x < lst[end]\n\
    \        end\n    end\n    return sorted\nend", "    \n    sorted = true\n   \
    \ for x in lst\n        if x < lst[end]\n            sorted = false\n        \
    \    break\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = true\n    for x in lst\n        if sorted == false\n            sorted\
    \ = x < lst[end]\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times a given value appears in a given\
    \ list.", "    sorted = false\n    for x in lst\n        if x < lst[end-1]\n \
    \           sorted = true\n            break\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.3>", "    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    \n    sorted = sort(lst)\n    \n    if\
    \ length(sorted) == length(lst)\n        return true\n    else\n        return\
    \ false\n    end\nend", "    sorted = true\n    for x in lst\n        if sorted\
    \ == false\n            break\n        if x != lst[findfirst(x == lst)]\n    \
    \        sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n\
    <text>\nis_sorted() is a function that returns true if the given list is in ascending\
    \ order. is_sorted() uses two functions: findfirst() and findlast(). findfirst()\
    \ returns the index of the first element that matches the given predicate, and\
    \ findlast() returns the index of the last element that matches the given predicate.\
    \ is_sorted() returns true if the given list is in ascending order.", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of unique elements in a list. Assume\
    \ no duplicate elements. Assume no negative numbers. Assume only integers.", " \
    \   sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted =\
    \ sort(lst)\n    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert ", "    lst = sort(lst)\n    return lst == lst\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4,\
    \ 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([", "    sorted = false\n    for x in\
    \ lst\n        if sorted == true\n            break\n        if x != sort(x)\n\
    \            sorted = true\n        else\n            sorted = false\n       \
    \ end\n    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n\
    \        if sorted == false\n            sorted = x < lst[end]\n        else\n\
    \            sorted = sorted && x < lst[end]\n        end\n    end\n    return\
    \ sorted\nend\n</cell>\n<text>\nis_sorted([1, 2, 3, 4, 5])", "    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend", "    sorted\
    \ = false\n    for x in lst\n        if x < lst[end-1]\n            sorted = true\n\
    \            break\n        end\n    end\n    return sorted\nend", "    sorted\
    \ = sort(lst)\n    return sorted == lst\nend", "    \n    sorted = true\n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<text>\nExercise\nWrite a function that returns the number\
    \ of unique elements in a list.", "    if is_sorted(lst) == true\n        return\
    \ true\n    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    sorted =\
    \ sort(lst)\n    return sorted == lst\nend", "    if is_sorted(lst) == true\n\
    \        return true\n    else\n        return false\n    end\nend", "    sorted\
    \ = true\n    for x in lst\n        if sorted == false\n            sorted = x\
    \ < lst[end]\n        else\n            sorted = sorted && x < lst[end]\n    \
    \    end\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by() is\
    \ a higher-order function that takes a function and a list of numbers and returns\
    \ true if the list of numbers is sorted according to the function.", "    sorted\
    \ = true\n    for i in lst\n        if sorted == false\n            sorted = true\n\
    \        else\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if sorted == false\n     \
    \       break\n        if x != lst[findfirst(x == lst)]\n            sorted =\
    \ false\n        end\n    end\n    return sorted\nend", "    \n    local i = 1\n\
    \    while i <= length(lst)\n        if lst[i-1] == lst[i]\n            i = i\
    \ + 1\n        else\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    sorted = true\n    for\
    \ x in lst\n        if x != x\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n    \
    \    if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    if is_sorted(lst) == true\n        return true\n\
    \    else\n        return false\n    end\nend", "    \n    sorted = true\n   \
    \ \n    for x in lst\n        if x != sort(x)\n            sorted = false\n  \
    \          break\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    lst = sort(lst)\n    return lst == lst\nend", "    \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        return true\n    \n    return\
    \ false\nend", "    sorted = true\n    sorted = sorted && all(lst.==sort(lst))\n\
    \    sorted = sorted && all(lst.==sort(sort(lst)))\n    sorted = sorted && all(lst.==sort(sort(sort(lst))))\n\
    \    sorted = sorted && all(lst.==sort(sort(sort(sort(lst)))))\n    sorted = sorted\
    \ && all(lst.==sort(sort(sort(sort(sort(sort(lst))))))\n    sorted = sorted &&\
    \ all(lst.==sort(sort(sort(sort(sort(sort(sort(lst)))))))\n    sorted = sorted\
    \ && all(lst.==sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(",
  "    sorted = true\n    for x in lst\n        if sorted == false\n            break\n\
    \        if x == sorted\n            sorted = false\n        else\n          \
    \  sorted = true\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    count_duplicates(lst)", "    sorted = sort(lst)\n\
    \    return sorted == lst\nend", "    sorted = true\n    for x in lst\n      \
    \  if x != sort(x)\n            sorted = false\n            break\n    end\n \
    \   return sorted\nend", "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<text>\nis_sorted_by() is a higher-order function that takes a function\
    \ and a list of numbers and returns true if the function returns true for all\
    \ the numbers in the list. For example, is_sorted_by(is_odd, [1, 2, 3, 4, 5])\
    \ returns true because is_odd(1) is true, and is_odd(2) is true, and is_odd(3)\
    \ is true, and is_odd(4) is true, and is_odd(5) is true.", "    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) ==\
    \ true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3,\
    \ 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true", "    sorted = true\n    for x in lst\n        if x !=\
    \ sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sorted = true\n    for x in lst\n        if sorted == false\n\
    \            break\n        if x != lst[findfirst(x == lst)]\n            sorted\
    \ = false\n        end\n    end\n    return sorted\nend", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    sorted = true\n    for x in lst\n        if x != x\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for i in lst\n        if sorted == false\n            sorted = true\n      \
    \  else\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n    end\n    return sorted\nend", "  \
    \  sort(lst) == lst\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sorted = false\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = true\n            break\n    end\n    return sorted\nend",
  "    sorted = true\n    for x in lst\n        if x != x\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, ", "    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n\
    \        for (i,x) in enumerate(sorted)\n            if x != lst[i]\n        \
    \        return false\n            end\n        return true\n    else\n      \
    \  return false\n    end\nend\n</cell>\n<text>\nis_sorted_by() function\nGiven\
    \ a list of numbers, return whether or not they are sorted\nin ascending order.\
    \ If list has more than 1 duplicate of the same\nnumber, return False. Assume\
    \ no negative numbers and only integers.", "    if is_sorted(lst) == true\n  \
    \      return true\n    \n    last = lst[1]\n    \n    for i in lst[2:end]\n \
    \       if i > last\n            return false\n        last\n    end\n    return\
    \ true\nend", "    if is_sorted(lst) == true\n        return true\n    \n    sorted\
    \ = sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    \n    return false\nend", "    sorted = true\n    for x in lst\n        if\
    \ x != sort(x)\n            sorted = false\n            break\n    end\n    return\
    \ sorted\nend", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    \n    sorted = sort(lst)\n    \n    if length(sorted) == length(lst)\n    \
    \    true\n    else\n        false\n    end\nend\n</cell>\n<text>\nis_sorted()\
    \ is a function which takes a vector and returns a boolean. True is returned if\
    \ the vector is sorted and False otherwise. is_sorted() is a built-in function\
    \ of Julia.", "    \n    sorted = true\n    for x in lst\n        if sorted ==\
    \ false\n            sorted = x < lst[end]\n        else\n            sorted =\
    \ sorted && x < lst[end]\n        end\n    end\n    \n    return sorted\nend",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    \n    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = sort(lst)\n\
    \    return sorted == lst\nend", "    \n    sorted_list = sort(lst)\n    \n  \
    \  if length(sorted_list) == length(lst)\n        for (i,j) in zip(lst, sorted_list)\n\
    \            if i != j\n                return false\n            end\n      \
    \  return true\n    end\n    return false\nend\n</cell>\n<text>\nis_sorted_by()\
    \ function", "    sort(lst) == lst\nend", "    sort(lst) == lst\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    if is_sorted(lst) ==\
    \ true\n        return true\n    else\n        return false\n    end\nend", " \
    \   sort(lst) == lst\nend", "    sorted = true\n    for x in lst\n        if x\
    \ != x\n            sorted = false\n            break\n    end\n    return sorted\n\
    end", "    sorted = sort(lst)\n    return sorted == lst\nend", "    sorted = true\n\
    \    for x in lst\n        if x < sorted\n            sorted = false\n       \
    \ end\n    end\n    return sorted\nend", "    \n    sorted = sort(lst)\n    \n\
    \    if length(sorted) == length(lst)\n        for (i,x) in enumerate(lst)\n \
    \           if x != sorted[i]\n                return false\n            end\n\
    \        return true\n    else\n        return false\n    end\nend", "    \n \
    \   if length(lst) == 1 \n        return true\n    \n    last = lst[1]\n    for\
    \ i in lst[2:end]\n        if i == last\n            return false\n        last\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend", "    sorted = true\n   \
    \ for x in lst\n        if sorted == false\n            sorted = x < lst[end]\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2,\
    \ 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ", "    \n    sorted = true\n    for\
    \ x in lst\n        if sorted == false\n            break\n        if x != lst[findfirst(x\
    \ == lst)]\n            sorted = false\n        end\n    end\n    return sorted\n\
    end", "    if is_sorted(lst) == true\n        return true\n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    \n    return false\nend", "    sorted = true\n    for x in lst\n        if\
    \ x < sorted\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 2])\n@assert !is_sorted([5, 4, 3, 2, 3])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 4])\n@assert !is_sorted([5, 4, 3, 2, 5])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 6])\n@assert !is_sorted([5, 4, 3, 2, 7])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 8])\n@assert !is_sorted([5, 4, 3, 2, 9])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 10])\n@assert !is_sorted([5, 4, 3, 2, 11])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 12])\n@assert !is_sorted([5, 4, 3, 2, 13])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 14])\n@assert !is_sorted([5, 4, 3, 2, 15])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 16])\n@assert !is_sorted([5, 4, 3, 2, 17])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 18])\n@assert !is_sorted([5, 4, 3, 2, 19])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 20])\n@assert !is_sorted([5, 4, 3, 2, 21])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 22])\n@assert !is_sorted([5, 4, 3, 2, 23])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 24])\n@assert !is_sorted([5, 4, 3, 2, 25])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 26])\n@assert !is_sorted([5, 4, 3, 2, 27])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 28])\n@assert !is_sorted([5, 4, 3, 2, 29])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 30])\n@assert !is_sorted([5, 4, 3, 2, 31])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 32])\n@assert !is_sorted([5, 4, 3, 2, 33])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 34])\n@assert !is_sorted([5, 4, 3, 2, 35])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 36])\n@assert !is_sorted([5, 4, 3, 2, 37])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 38])\n@assert !is_sorted([5, 4, 3, 2, 39])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 40])\n@assert !is_sorted([5, 4, 3, 2, 41])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 42])\n@assert !is_sorted([5, 4, 3, 2, 43])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 44])\n", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    \n    sorted = true\n    for x in lst\n        if x != sort(x)\n          \
    \  sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_", "    sorted = true\n\
    \    for x in lst\n        if x < sorted\n            sorted = false\n       \
    \ end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ", "    \n    sorted = true\n    \n    for\
    \ x in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    \n    return sorted\nend", "    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n", "    sorted = sort(lst)\n    length(sorted) == length(lst)\
    \ && all(sorted == lst)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 2])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 3])\n@assert !is_sorted([5, 4, 3, 2, 4])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 5])\n@assert !is_sorted([5, 4, 3, 2, 6])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 7])\n@assert !is_sorted([5, 4, 3, 2, 8])\n@assert !is_sorted([5, 4, 3, 2, 9])\n\
    @assert !is_sorted([5, 4, 3, 2, 10])\n@assert !is_sorted([5, 4, 3, 2, 11])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 12])\n@assert !is_sorted([5, 4, 3, 2, 13])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 14])\n@assert !is_sorted([5, 4, 3, 2, 15])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 16])\n@assert !is_sorted([5, 4, 3, 2, 17])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 18])\n@assert !is_sorted([5, 4, 3, 2, 19])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 20])\n@assert !is_sorted([5, 4, 3, 2, 21])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 22])\n@assert !is_sorted([5, 4, 3, 2, 23])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 24])\n@assert !is_sorted([5, 4, 3, 2, 25])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 26])\n@assert !is_sorted([5, 4, 3, 2, 27])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 28])\n@assert !is_sorted([5, 4, 3, 2, 29])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 30])\n@assert !is_sorted([5, 4, 3, 2, 31])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 32])\n@assert !is_sorted([5, 4, 3, 2, 33])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 34])\n@assert !is_sorted([5, 4, 3, 2, 35])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 36])\n@assert !is_sorted([5, 4, 3, 2, 37])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 38])\n@assert !is_sorted([5, 4, 3, 2, 39])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 40])\n@assert !is_sorted([5, 4, 3, 2, 41])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 42])\n@assert !is_sorted([5, 4, 3, 2, 43])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 44])\n@assert !is_sorted(", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    sorted = true\n    for x in lst\n     \
    \   if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend\n</cell>\n<text>\nExercise: Write a function that returns\
    \ true if the given list is sorted\nin descending order. Assume no negative numbers\
    \ and only integers.", "    sorted = true\n    seen = Set()\n    for x in lst\n\
    \        if x in seen\n            sorted = false\n            break\n       \
    \ seen.add(x)\n    end\n    return sorted\nend", "    sorted = false\n    for\
    \ x in lst\n        if x == sort(x)\n            sorted = true\n            break\n\
    \        end\n    end\n    return sorted\nend", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    sorted = sort(lst)\n    uniques = unique(sorted)\n\
    \    return length(uniques) == length(sorted)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@", "    sorted = sort(lst)\n  \
    \  sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>", "    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend", "    sorted\
    \ = true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, ", "    sorted = true\n    for x in lst\n        if x != sort(x)\n      \
    \      sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert\
    \ is_sorted([5, 2, 3, 4, 2]) == false\n@assert is_sorted([5, 2, 3, 4, 3]) == true\n\
    @assert is_sorted([5, 2, 3, 4, 4]) == false\n@assert is_sorted([5, 2, 3, 4, 5])\
    \ == true\n@assert is_sorted([5, 2, 3, 4, 6]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 7]) == true\n@assert is_sorted([5, 2, 3, 4, 8]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 9]) == true\n@assert is_sorted([5, 2, 3, 4, 10]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 11]) == true\n@assert is_sorted([5, 2, 3, 4, 12]) ==\
    \ false\n@assert is_sorted([5, 2, 3, 4, 13]) == true\n@assert is_sorted([5, 2,\
    \ 3, 4, 14]) == false\n@assert is_sorted([5, 2, 3, 4, 15]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 16]) == false\n@assert is_sorted([5, 2, 3, 4, 17]) == true\n@assert\
    \ is_sorted([5, 2, 3, 4, 18]) == false\n@assert is_sorted([5, 2, 3, 4, 19]) ==\
    \ true\n@assert is_sorted([5, 2, 3, 4, 20]) == false\n@assert is_sorted([5, 2,\
    \ 3, 4, 21]) == true\n@assert is_sorted([5, 2, 3, 4, 22]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 23]) == true\n@assert is_sorted([5, 2, 3, 4, 24]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 25]) == true\n@assert is_sorted([5, 2, 3, 4, 26]) ==\
    \ false\n@assert is_sorted([5, 2, 3, 4, 27]) == true\n@assert is_sorted([5, 2,\
    \ 3, 4, 28]) == false\n@assert is_sorted([5, 2, 3, 4, 29]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 30]) == false\n@assert is_sorted([5, 2, 3, 4, 31]) == true\n@assert\
    \ is_sorted([5, 2, 3, 4, 32]) == false\n@assert is_sorted([5, 2, 3, 4, 33]) ==\
    \ true\n@assert is_sorted([5, 2, 3, 4, 34]) == false\n@assert is_sorted([5, 2,\
    \ 3, 4, 35]) == true\n@assert is_sorted([5, 2, 3, 4, 36]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 37]) == true\n@assert ", "    sorted = true\n    for x in lst\n   \
    \     if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    sorted = false\n    for x in lst\n        if x\
    \ < lst[end(x)]\n            sorted = true\n        else\n            sorted =\
    \ false\n        end\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sorted = true\n    for x in lst\n        if x < lst[end-1]\n        \
    \    sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n        end\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-", "    sorted = true\n    for x\
    \ in lst\n        if x != sort(x)\n            sorted = false\n            break\n\
    \    end\n    return sorted\nend", "    \n    sorted = true\n    for x in lst\n\
    \        if x != sort(x)\n            sorted = false\n            break\n    end\n\
    \    return sorted\nend", "    \n    sorted_list = sort(lst)\n    \n    if length(sorted_list)\
    \ == length(lst)\n        return true\n    else\n        return false\n    end\n\
    end", "    sorted = true\n    for x in lst\n        if x != x\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend", "    \n    sorted\
    \ = true\n    for x in lst\n        if x < sorted\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend", "    if is_sorted(lst) == true\n\
    \        return true\n    \n    sorted = sort(lst)\n    if length(sorted) == length(lst)\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4,\
    \ 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, ", "    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@", "    sorted = true\n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    return sorted\nend",
  "    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    count_sort(lst)", "    sorted = true\n    for\
    \ x in lst\n        if sorted == false\n            sorted = x < lst[end]\n  \
    \      else\n            sorted = sorted && x < lst[end]\n        end\n    end\n\
    \    return sorted\nend", "    sorted = true\n    for x in lst\n        if x !=\
    \ x\n            sorted = false\n            break\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 1, 2, 2, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 1, 2, 2, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend", "    \n    sorted = true\n  \
    \  for x in lst\n        if x != sort(x)\n            sorted = false\n       \
    \     break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([",
  "    sorted = true\n    for i in lst\n        if sorted == false\n            sorted\
    \ = true\n        else\n            sorted = false\n        end\n    end\n   \
    \ return sorted\nend\n</cell>\n<code language=julia-1.5>", "    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend", "    sorted = true\n    for x in lst\n\
    \        if sorted == false\n            sorted = x < lst[end]\n        end\n\
    \    end\n    return sorted\nend", "    lst = sort(lst)\n    return lst == lst\n\
    end", "    \n    sorted = true\n    \n    for x in lst\n        if x != sort(x)\n\
    \            sorted = false\n            break\n    end\n    \n    return sorted\n\
    end", "    sorted = true\n    for x in lst\n        if x != sort(x)\n        \
    \    sorted = false\n            break\n    end\n    return sorted\nend\n</cell>\n\
    <text>\nis_sorted_by() function\nGiven a list of numbers, return whether or not\
    \ they are sorted\nin ascending order. If list has more than 1 duplicate of the\
    \ same\nnumber, return False. Assume no negative numbers and only integers.",
  "    sorted = true\n    for x in lst\n        if sorted == false\n            break\n\
    \        if x == sorted\n            sorted = false\n        else\n          \
    \  sorted = true\n        end\n    end\n    return sorted\nend\n</cell>\n<text>\n\
    is_sorted_by() function\nThis function will take a list of numbers and a function\
    \ that will determine if each number is less than the previous one. It will return\
    \ true if the list is sorted and false if not."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
