name: HumanEval_29_filter_by_prefix
language: jl
prompt: "\"\"\" Filter an input list of strings only for ones that start with a given\
  \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\
  \nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\nend\n"
completions: ["    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter\
    \ a DataFrame for rows that match a condition\nWrite a function that filters a\
    \ DataFrame for rows that match a condition. For example, suppose you have a DataFrame\
    \ with columns id and name, and you want to filter out all rows that have a name\
    \ that starts with \"A\". You could write a function like this:", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if startswith(string, prefix)\n          \
    \  strings = filter!(x -> startswith(x, prefix), strings)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[],\
    \ String)", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a vector of strings based on whether\
    \ they start with a given prefix.\nHint: use the filter_by_prefix function you\
    \ wrote in exercise 2.", "    \n    prefix_length = length(prefix)\n    \n   \
    \ if prefix_length == 0 \n        return strings\n    end\n    \n    strings =\
    \ strings[:]\n    \n    for string in strings\n        if startswith(string, prefix)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend", "    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"q\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"c", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for those\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bcd\", \"cde\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"\
    bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"e\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"h\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"k\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"n\")\n[\"abc\", \"bcd\", \"cde", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"", "    strings = strings[:]\n    strings = filter( x ->\
    \ startswith(prefix, x), strings)\n    return strings\nend", "    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ by a regular expression.\nThe function should take two arguments: a string and\
    \ a regular expression. The function should return a list of strings that match\
    \ the regular expression. \nThe function should ignore case. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore empty strings.\
    \ \nThe function should ignore non-alphanumeric characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ", "    \n    strings\
    \ = strings[:]\n    \n    for s in strings\n        if startswith(prefix, s)\n\
    \            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n  \
    \  prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"b\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"d\")\n[\"abc\", \"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"g\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"j\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"m\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter( x -> startswith(prefix, x), strings )\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression.\nThe function should take two arguments:", "    \n\
    \    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if startswith(string, prefix)\n            strings\
    \ = filter!(x -> startswith(x, prefix), strings)\n        end\n    end\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix) == true\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_",
  "    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"aby\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abxy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abxyz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde", "    \n  \
    \  strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters a list of strings only for those that end with a given suffix.",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters a list of strings only for those that end with a given suffix.",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters out the elements of a list that do not start with a given prefix.",
  "    filter!(x -> startswith(prefix, x), strings)\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            strings = filter!(x -> startswith(prefix,\
    \ x), strings)\n        end\n    end\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and returns a vector of strings that start with a given prefix.", " \
    \   \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n\"\"\"", "    strings\
    \ = filter( x -> startswith(prefix, x), strings)\n    return strings\nend", " \
    \   strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n  \
    \  strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a prefix and that removes the prefix from the string. For\
    \ example, if the prefix is \"a\" and the input string is \"abca\", the output\
    \ should be \"bc\".", "    \n    prefix_length = length(prefix)\n    \n    strings\
    \ = strings[:]\n    \n    strings = filter((x) -> startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n \
    \   \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n  \
    \  \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n   \
    \ \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n \
    \   strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n  \
    \  strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n   \
    \ strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings =\
    \ filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x)\
    \ -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x) ->\
    \ startswith(String(x), prefix), strings)\n    \n    strings = filter((x) -> startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter((x) -> startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n \
    \   \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n  \
    \  \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n   \
    \ \n    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n \
    \   strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n  \
    \  strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n   \
    \ strings = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings =\
    \ filter((x) -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x)\
    \ -> startswith(String(x), prefix), strings)\n    \n    strings = filter((x) ->\
    \ startswith(String(x), prefix), strings)\n    \n", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 3: Filtering by prefix\n\
    Write a function that filters an input list of strings only for ones that start\
    \ with a given prefix.\nFor example, given a list of strings:", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    \n    return strings\nend", "    \n    prefix_length = length(prefix)\n \
    \   \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters strings by\
    \ a prefix, but only if the prefix is at the start of the string. For example,\
    \ filter_by_prefix_if_start([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\") should\
    \ return [\"abc\", \"array\"].", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nThe function should return a\
    \ copy of the input list with the filtered strings.", "    strings = strings[beginswith(strings,\
    \ prefix)]\n    return strings\nend", "    \n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters input strings based on whether they\
    \ start with a given prefix.", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ by a regular expression.\nThe function should take two arguments: the list of\
    \ strings and the regular expression. The function should return a new list of\
    \ strings where the strings that match the regular expression are removed.", " \
    \   filter_by_prefix(filter(x -> startswith(prefix, x), strings), prefix)\nend",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "    filter_by_prefix(strings,\
    \ prefix, \"\")\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters strings by a prefix and suffix.", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"c\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"abdce\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd", "    \n\
    \    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for those that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcde\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdea\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeab\")\n[\"abc\", \"array\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabd\")\n[\"\
    abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabdc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcdcdeabdca\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdcab\")\n[\"abc\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bcdcdeabdcabd\"\
    )\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bcdcdeabd", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings based on whether they end with\
    \ a given suffix.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters strings by a regular expression. For example, given a\
    \ list of strings [\"abc\", \"bcd\", \"cde\", \"array\"], filter_by_regex([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"^a.*\") should return [\"abc\", \"array\"\
    ].", "    \n    strings = strings[:]\n    \n    for string in strings\n      \
    \  if string.starts_with(prefix)\n            delete!(strings, string)\n     \
    \   end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"f\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"q\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"b", "    \n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.startswith(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: filter_by_prefix\nWrite a function that filters\
    \ an input list of strings only for ones that start with a given prefix.\nThis\
    \ function should return a vector of strings that start with the given prefix.",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for s in strings\n\
    \        if startswith(prefix, s)\n            delete!(s, prefix)\n        end\n\
    \    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\", \"array\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n \
    \   for string in strings\n        if string.starts_with(prefix)\n           \
    \ strings.remove(string)\n        end\n    end\n    \n    return strings\nend",
  "    strings = strings[start:end]\nend\n</cell>\n<text>\nExercise 9\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdez\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefgh\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghi\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghij\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghijk\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghijkl\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"cdefghijklm\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cdefghijklmn\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"cdefghijkl", "    \n    strings = strings[:]\n \
    \   \n    for string in strings\n        if string.starts_with(prefix)\n     \
    \       strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"b", "    \n    strings = filter(x->startswith(x, prefix), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L,\
    \ prefix)", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings where all strings that start with a given prefix are removed.", " \
    \   \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\nWrite\
    \ a function that filters an input list of strings only for ones that start with\
    \ a given prefix.\nThis function should return a vector of strings only.\nThe\
    \ function should take as input a list of strings and a prefix.\nThe function\
    \ should return a list of strings only.\nThe function should return an empty vector\
    \ if there are no strings that start with the given prefix.", "    \n    strings\
    \ = strings[:]\n    \n    for s in strings\n        if startswith(s, prefix)\n\
    \            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters a list of strings\
    \ based on whether they start with a given prefix.", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that filters strings by a prefix, but only if the\
    \ prefix is at the beginning of the string.", "    strings = strings[start:end]\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"c", "    \n    strings = strings[:]\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(string, prefix) returns a new list containing only the strings\
    \ that start with the prefix string. For example:", "    \n    prefix_length =\
    \ length(prefix)\n    \n    if prefix_length == 0\n        return strings\n  \
    \  end\n    \n    strings = strings[:]\n    \n    for string in strings\n    \
    \    if startswith(string, prefix)\n            remove!(strings, string)\n   \
    \     end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a list of strings only for those that\
    \ end with a given suffix.", "    \n    prefix_length = length(prefix)\n    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter", "    \n\
    \    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    strings = filter((x) -> startswith(x,\
    \ prefix), strings)\n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(s, prefix)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters strings by a regular expression.\n\
    The function should take two arguments: the list of strings and the regular expression.\
    \ The function should return a list of strings that match the regular expression.",
  "    \n    strings = strings[:]\n    \n    prefix_length = length(prefix)\n    \n\
    \    for string in strings\n        if startswith(string, prefix)\n          \
    \  delete!(strings, string)\n        end\n    end\n    \n    strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for ones that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"\
    , \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"cd\"\
    )\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"arrays\")\n[]\n\"\"\"", "    strings = strings[:]\n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters strings by a prefix and suffix.", " \
    \   \n    prefix_length = length(prefix)\n    \n    if prefix_length == 0\n  \
    \      return strings\n    end\n    \n    strings = filter_by_prefix(strings,\
    \ prefix[1:prefix_length])\n    \n    if prefix_length < length(strings)\n   \
    \     strings = filter_by_prefix(strings, prefix[prefix_length+1:end])\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a list of strings based on whether they start with a\
    \ given prefix.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input list of strings only for ones that end with a\
    \ given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde", "    \n    strings = strings[:]\n    \n    strings = filter(\
    \ x -> startswith(prefix, x), strings)\n    \n    return strings\nend", "    \n\
    \    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if startswith(string, prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters strings by\
    \ a prefix, but only if the prefix is at the start of the string.", "    \n  \
    \  strings = strings[:]\n    \n    prefix_length = len(prefix)\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            strings\
    \ = filter!(x -> x != string, strings)\n        end\n    end\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix", "    \n \
    \   strings = filter(x->startswith(x, prefix), strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.\nHint: Use filter_by_prefix",
  "    strings = strings[2:end]\n    strings = strings[strings[2:end] .== \"_\"]\n\
    \    strings = strings[strings[2:end] .== \"-\"]\n    strings = strings[strings[2:end]\
    \ .== \".\"]\n    strings = strings[strings[2:end] .== \"-\"]\n    strings = strings[strings[2:end]\
    \ .== \"_\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \".\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end] .== \"_\"]\n    strings = strings[strings[2:end]\
    \ .== \"-\"]\n    strings = strings[strings[2:end", "    \n    prefix_length =\
    \ length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ based on whether they start with a given prefix.", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a regular expression.\nThe function should take two arguments:\
    \ a string and a regular expression. The function should return a list of strings\
    \ that match the regular expression. \nThe function should return an empty list\
    \ if the input list is empty.\nThe function should return an empty list if the\
    \ input list contains no strings that match the regular expression. \nThe function\
    \ should return an empty list if the input list contains strings that do not match\
    \ the regular expression. \nThe function should return a list of strings that\
    \ match the regular expression. \nThe function should return a list of strings\
    \ that do not match the regular expression. \nThe function should return a list\
    \ of strings that match the regular expression and a list of strings that do not\
    \ match the regular expression. \nThe function should return a list of strings\
    \ that match the regular expression and a list of strings that do not match the\
    \ regular expression. \nThe function should return a list of strings that match\
    \ the regular expression and a list of strings that do not match the regular expression.\
    \ \nThe function should return a list of strings that match the regular expression\
    \ and a list of strings that do not match the regular expression. \nThe function\
    \ should return a list of strings that match the regular expression and a list\
    \ of strings that do not match the regular expression. \nThe function should return\
    \ a list of strings that match the regular expression and a list of strings that\
    \ do not match the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression and a list of strings that do not\
    \ match the regular expression. \nThe function should return a list of strings\
    \ that match the regular expression and a list of strings that do not match the\
    \ regular expression. \nThe function should return a list of strings that match\
    \ the regular expression and a list of strings that do not match the regular expression.\
    \ \nThe function should return a list of strings that match the regular expression\
    \ and a list of strings that do not match the regular expression. \nThe function\
    \ should return a list of strings that match the regular expression and a list\
    \ of strings that do not match the regular expression. \nThe function should return\
    \ a list of strings that match the regular expression and a list of strings that\
    \ do not match the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression and a list of strings that do not\
    \ match the regular expression. \nThe function should return a list of strings\
    \ that match the regular expression and a list of strings that do not match the\
    \ regular expression. \nThe function should return a list of strings that match\
    \ the regular expression and a list of strings that do not match the regular expression.\
    \ \nThe function should return a list of strings that match the regular expression\
    \ and a list of strings that do not match the regular expression. \nThe function\
    \ should return a list of strings that match the regular expression and a list\
    \ of strings that do not match the regular expression. \nThe function should return\
    \ a list of strings that match the regular expression and a list of strings that\
    \ do not match the regular expression. \nThe function should return a list of\
    \ strings that match the regular expression and a list of strings that ", "  \
    \  strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a predicate that returns true if the string starts with a given prefix.",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix([], \"a\")", "  \
    \  \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if string.startswith(prefix)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array", "    \n    strings =\
    \ strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters a list of strings based on whether they end with a given suffix.", " \
    \   \n    prefix_length = length(prefix)\n    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ strings = filter((x) -> startswith(x, prefix), strings)\n    return strings\n\
    end", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings =\
    \ Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression. \nThe function should take two arguments: a list of\
    \ strings, and a regular expression.\nThe function should return a list of strings\
    \ that match the regular expression. \nThe function should ignore case when matching.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing punctuation.\nThe function should ignore leading\
    \ and trailing digits.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} is just a wrapper for filter_by_prefix(L, \"\
    prefix\")", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            remove!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that removes all the strings that end with a given\
    \ suffix.", "    strings = strings[:]\n    strings = filter(x->startswith(x, prefix),\
    \ strings)\n    return strings\nend", "    \n    strings = strings[:]\n    \n\
    \    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = filter(x -> startswith(String(x), prefix),\
    \ strings)\n    \n    if prefix_length == 0\n        strings\n    else\n     \
    \   filter(x -> startswith(String(x), prefix), strings)\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters strings based on whether they\
    \ end with a given suffix.", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter( x -> startswith(prefix, x), strings)\n    \n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a regular\
    \ expression. For example, given the following input:", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters strings by a regular expression.\n\
    The function should take two arguments: the list of strings and the regular expression.\
    \ The function should return a filtered list of strings.\nThe function should\
    \ return an empty list if the regular expression is empty or if the list of strings\
    \ is not iterable.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix", "    \n    strings = strings[:]\n    \n    for\
    \ s in strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector, prefix)",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3: Filtering by suffix\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"xyz\")\n[]\n\"\"\"", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[],\
    \ String)", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    prefix_length\
    \ = length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix) == true\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters\
    \ an input list of strings only for ones that end with a given suffix.\n    >>>\
    \ filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n    prefix_length\
    \ = length(prefix)\n    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            strings = filter!(x -> startswith(x,\
    \ prefix), strings)\n        end\n    end\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}",
  "    \n    prefix_length = length(prefix)\n    \n    strings = filter( string ->\
    \ startswith(string, prefix), strings)\n    \n    if prefix_length > 0\n     \
    \   strings = filter( string -> startswith(string, prefix), strings)\n    end\n\
    \    \n    return strings\nend", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            remove!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and a prefix and returns\
    \ a vector of strings that start with the prefix. For example, given [\"abc\"\
    , \"bcd\", \"cde\", \"array\", \"abd\"], prefix \"a\", the function should return\
    \ [\"abc\", \"array\"].", "    strings = strings[:]\n    strings = filter(x->startswith(x,\
    \ prefix), strings)\n    return strings\nend", "    filter_by_prefix(\n      \
    \  map(x => x == prefix, strings),\n        prefix\n    )\nend", "    strings\
    \ = strings[start:end]\nend", "    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} is just a\
    \ wrapper around filter_by_prefix(L, \"prefix\")", "    \n    prefix_length =\
    \ length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression.", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter((x) -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end", "    strings = strings[start:end]\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayed\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrayeds\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"", "    \n    prefix_length = length(prefix)\n    \n    strings = filter(\
    \ x -> startswith(x, prefix), strings)\n    \n    if prefix_length == 0\n    \
    \    return strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_length == 1\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length ==\
    \ 2\n        return strings\n    \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    \n    if prefix_length == 3\n        return strings\n    \n  \
    \  strings = filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length\
    \ == 4\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_length == 5\n        return strings\n\
    \    \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_length == 6\n        return strings\n    \n    strings = filter( x ->\
    \ startswith(x, prefix), strings)\n    \n    if prefix_length == 7\n        return\
    \ strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_length == 8\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length ==\
    \ 9\n        return strings\n    \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    \n    if prefix_length == 10\n        return strings\n    \n \
    \   strings = filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length\
    \ == 11\n        return strings\n    \n    strings = filter( x -> startswith(x,\
    \ prefix), strings)\n    \n    if prefix_length == 12\n        return strings\n\
    \    \n    strings = filter( x -> startswith(x, prefix), strings)\n    \n    if\
    \ prefix_length == 13\n        return strings\n    \n    strings = filter( x ->\
    \ startswith(x, prefix), strings)\n    \n    if prefix_length == 14\n        return\
    \ strings\n    \n    strings = filter( x -> startswith(x, prefix), strings)\n\
    \    \n    if prefix_length == 15\n        return strings\n    \n    strings =\
    \ filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length ==\
    \ 16\n        return strings\n    \n    strings = filter( x -> startswith(x, prefix),\
    \ strings)\n    \n    if prefix_length == 17\n        return strings\n    \n \
    \   strings = filter( x -> startswith(x, prefix), strings)\n    \n    if prefix_length\
    \ == 18\n        return strings\n    \n    string", "    \n    prefix_len = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise: Write a function that filters strings by\
    \ a prefix and suffix.\nHint: Use filter_by_prefix and filter_by_suffix to solve\
    \ this exercise.", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            remove!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    strings = filter( x -> startswith(prefix, x), strings )\n    \n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"", "    strings = filter(x->startswith(x,prefix), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n<text>\n\
    filter_by_prefix([], \"a\")", "    \n    prefix_length = length(prefix)\n    \n\
    \    filtered_strings = Vector{String}()\n    \n    for string in strings\n  \
    \      if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a list of strings based on whether they\
    \ contain a given substring.", "    \n    prefix_length = length(prefix)\n   \
    \ \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.", "    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a prefix and suffix.", " \
    \   \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            delete!(s, prefix)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that filters a given list of strings only for those that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"b\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"c\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"e\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"f\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"q\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"r\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"s\")\n", "    filter!(x -> startswith(prefix,\
    \ x), strings)\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::AbstractVector,\
    \ prefix::AbstractString)", "    \n    strings = strings[:]\n    \n    for s in\
    \ strings\n        if startswith(prefix, s)\n            delete!(s, prefix)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_",
  "    \n    prefix_length = length(prefix)\n    \n    strings_filtered = Vector{String}()\n\
    \    \n    for string in strings\n        if startswith(string, prefix)\n    \
    \        strings_filtered << string\n        end\n    end\n    \n    return strings_filtered\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>>\
    \ filter_by_suffix([\"abc", "    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression. For\
    \ example, given a list of strings:", "    strings = strings[:]\n    strings =\
    \ filter((x) -> startswith(prefix, x), strings)\n    return strings\nend", " \
    \   \n    prefix_length = length(prefix)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->startswith(String(x), prefix),\
    \ strings)\n    \n    strings = filter(x->startswith(String(x), prefix), strings)\n\
    \    \n    strings = filter(x->startswith(String(x), prefix), strings)\n    \n\
    \    strings = filter(x->startswith(String(x), prefix), strings)\n    \n    strings\
    \ = filter(x->startswith(String(x), prefix), strings)\n    \n    strings = filter(x->startswith(String(x),\
    \ prefix), strings)\n    \n    strings = filter(x->", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a given list of strings only for those that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"", "    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}",
  "    strings = strings[:]\n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"h\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"i\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"j\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"k\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    l\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"r\")", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cde\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"arrays\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\"\
    )\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for string in strings\n     \
    \   if string.starts_with(prefix)\n            strings.remove(string)\n      \
    \  end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2: Filtering by substrings\nWrite a function that filters an input list\
    \ of strings only for ones that contain a given substring.\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_substring([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[]\n>>> filter_by_substring([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abde\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdef\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdefg\")\n[]\n>>> filter_by_substring([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdefgh\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghi\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghij\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijk\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijkl\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklm\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklmn\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklmno\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdefghijklmno", "    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> startswith(prefix, x), strings)\n    \n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} \n    \n    strings = strings[:]\n    \n   \
    \ strings = filter((x) -> startswith(prefix, x), strings)\n    \n    return strings\n\
    end", "    strings = filter( x -> startswith(prefix, x), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L, prefix)\
    \ -> Vector{String}\nFilter an input list of strings only for ones that start\
    \ with a given prefix.\nThis function returns a new vector instead of modifying\
    \ the input list.\nThe input list L can be any iterable object.", "    strings\
    \ = filter( x -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters input strings\
    \ based on whether they end with a given suffix.", "    \n    strings = strings[:]\n\
    \    \n    prefix_len = len(prefix)\n    \n    for s in strings\n        if startswith(s,\
    \ prefix)\n            strings = filter!(s => startswith(s, prefix), strings)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String} is similar\
    \ to filter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}, except\
    \ that it returns a new vector instead of modifying the original vector.", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings.remove(string)\n \
    \       end\n    end\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> startswith(x, prefix), strings)\n    \n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    strings = strings[:]\n    \n  \
    \  i = 0\n    while i < length(prefix) && i < length(strings)\n        if prefix[i]\
    \ != strings[i]\n            i += 1\n        else\n            i += 1\n      \
    \  end\n    end\n    \n    if i == length(strings)\n        push!(strings, \"\"\
    )\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"", "    \n    prefix_length = length(prefix)\n    \n  \
    \  filtered_strings = Vector{String}()\n    \n    for string in strings\n    \
    \    if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdce\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"", "    strings = strings[:]\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_prefix", " \
    \   strings = strings[start:end]\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters a given list of strings only for those that end with\
    \ a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array", "    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ \n    strings = L\n    strings = filter((x) -> startswith(prefix, x), strings)\n\
    \    return strings\nend", "    \n    prefix_length = length(prefix)\n    \n \
    \   filtered_strings = Vector{String}()\n    \n    for string in strings\n   \
    \     if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter", "   \
    \ strings = filter(x->startswith(x,prefix), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String}, prefix::String)::Vector{String}\
    \ \n    filter(x -> startswith(x,prefix), L)\nend", "    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> startswith(prefix, x), strings)\n    \n   \
    \ return strings\nend", "    \n    prefix_length = length(prefix)\n    \n    strings\
    \ = filter(x -> startswith(String(x), prefix), strings)\n    \n    if prefix_length\
    \ == 0\n        return strings\n    else\n        \n        prefix_strings = filter_by_prefix(strings,\
    \ prefix[1:prefix_length])\n        \n        return prefix_strings + [prefix[prefix_length+1:]]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bc\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"abc\"]\n", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"cde\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"\
    , \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"cde\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"\
    , \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"cde\", \"array\"]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"\
    , \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"abc\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde", "    \n    prefix_length = length(prefix)\n    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            strings = filter!(x -> startswith(x, prefix), strings)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_prefix([],\
    \ \"a\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abd\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"abdc\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdce\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcef\"\
    )\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefg\")\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\"\
    )\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abdcefgj\")\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abdcefgj\"\
    )\nfilter_by_", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix) == true\n            push!(filtered_strings, string)\n        end\n\
    \    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters strings by a regular expression. \n\
    The function should take two arguments: the list of strings and the regular expression.\
    \ \nThe function should return a list of strings that match the regular expression.\
    \ \nThe function should ignore case. \nThe function should ignore the case of\
    \ the regular expression. \nThe function should ignore the case of the strings.\
    \ \nThe function should ignore the case of the regular expression and ignore the\
    \ case of the strings. \nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n\
    The function should ignore the case of the regular expression and ignore the case\
    \ of the strings.\nThe function should ignore the case of the regular expression\
    \ and ignore the case of the strings.\nThe function should ignore the case of\
    \ the regular expression and ignore the case of the strings.\nThe function should\
    \ ignore the case of the regular expression and ignore the case of the strings.\n",
  "    filter!(x -> startswith(prefix, x), strings)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that filters an input list of strings only for ones that\
    \ end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"\
    ]\n    \"\"\"", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a list of strings based on whether they\
    \ start with a given prefix.", "    \n    prefix_len = length(prefix)\n    \n\
    \    strings = filter(x -> startswith(String(x), prefix), strings)\n    \n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(vector,\
    \ prefix)", "    strings = filter((x) -> startswith(prefix, x), strings)\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"", "    strings = strings[:]\n    strings = filter(x->startswith(prefix, x),\
    \ strings)\n    return strings\nend", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n    >>> filter_by_suffix([],\
    \ \"a\")\n    []\n    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"", "    \n    strings = strings[:]\n\
    \    \n    for s in strings\n        if startswith(prefix, s)\n            delete!(s,\
    \ prefix)\n        end\n    end\n    \n    return strings\nend", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"xyz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcd\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"bcdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdcd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdcdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdcdcd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdcdcdcdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"bcdcdcdcdcd\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bcdcdcdcdcdc\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bcdcdcdcdcdcd\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bcdcdcdcdcdcdc\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd", "    strings = filter( x -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_prefix(l, p) returns a new list with all\
    \ the elements of l that start with the prefix p.", "    \n    prefix_length =\
    \ length(prefix)\n    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters strings by a regular expression.\
    \ For example, given a list of strings \"abc\", \"bcd\", \"cde\", \"array\", and\
    \ a regular expression \"^a.*\", the function should return [\"abc\", \"array\"\
    ].", "    \n    prefix_length = length(prefix)\n    \n    strings = filter( string\
    \ -> startswith(string, prefix), strings)\n    \n    if prefix_length == 0\n \
    \       return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 1\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 2\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 3\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 4\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 5\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 6\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 7\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 8\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 9\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 10\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 11\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 12\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 13\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 14\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 15\n        return strings\n    \n    strings = filter( string -> startswith(string,\
    \ prefix), strings)\n    \n    if prefix_length == 16\n        return strings\n\
    \    \n    strings = filter( string -> startswith(string, prefix), strings)\n\
    \    \n    if prefix_length == 17\n        return strings\n    \n    strings =\
    \ filter( string -> startswith(string, prefix), strings)\n    \n    if prefix_length\
    \ == 18\n        return strings\n    \n    string", "    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2: filter_by_prefix\nWrite a function\
    \ that filters an input list of strings only for ones that start with a given\
    \ prefix.\nFor example, given a list of strings:", "    strings = strings[:]\n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for those that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde", "    filter!(x -> startswith(prefix, x), strings)\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<text>\nfilter!()\nfilter!() modifies the input\
    \ list in-place and returns the modified list. filter!() modifies the input list\
    \ in-place and returns the modified list. filter!() modifies the input list in-place\
    \ and returns the modified list.", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix", "    strings = strings[:]\n    strings = filter((x)\
    \ -> startswith(prefix, x), strings)\n    return strings\nend", "    strings =\
    \ filter(x->startswith(prefix, x), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a predicate that returns true if the string starts with a given prefix.",
  "    \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if startswith(string, prefix)\n          \
    \  strings = filter!(x -> startswith(prefix, x), strings)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String} is similar to filter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}, except that it does not modify the original\
    \ input list L. Instead, it returns a new list L2 that contains the elements of\
    \ L that start with the prefix prefix. For example, filter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\") returns [\"abc\", \"array\"].", "    \n\
    \    strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters an\
    \ input list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"c\")\n[\"abc\", \"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"abc\", \"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"de\")\n[\"abc\", \"bcd\", \"cde\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"arrays\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abs\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    abs\")\n[]\n>>> filter_by_", "    \n    prefix_len = length(prefix)\n    \n  \
    \  strings = filter(x->startswith(prefix, x), strings)\n    \n    if prefix_len\
    \ == 0\n        return strings\n    else\n        \n        prefix_strings = filter(x->startswith(prefix,\
    \ x), strings)\n        \n        prefix_strings = filter(x->endswith(prefix,\
    \ x), prefix_strings)\n        \n        return prefix_strings\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"o\")\n</cell>\n<code language=julia-1.5", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"b\")\n[\"bcd\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"d\")\n[\"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"j\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"k\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"l\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"m\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    n\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n\
    []\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters a list of\
    \ strings based on whether they start with a given prefix.", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"abd\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcdc\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd", "    strings = strings[start:end]\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"xyz\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abcz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"abbcz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbcz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"abbbczzzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abbbczzzzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"abbbczzzzzzz\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.startswith(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters an input list of strings only for ones that end with a given suffix.\n\
    >>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\",\
    \ \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"bc\")\n[\"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"cd\")\n[\"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"bcdz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdez\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdef\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\",\
    \ \"array\"], \"cdefg\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefgh\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghi\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghij\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghijk\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"cdefghijkl\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"cdefghijklm\")\n[]\n>>> filter_by_suffix", "    \n    strings\
    \ = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a prefix and suffix.", "    \n    prefix_length = length(prefix)\n\
    \    \n    strings_filtered = Vector{String}()\n    \n    for string in strings\n\
    \        if string.starts_with(prefix)\n            strings_filtered << string\n\
    \        end\n    end\n    \n    return strings_filtered\nend", "    strings =\
    \ strings[:]\n    strings = filter( x -> startswith(prefix, x), strings )\n  \
    \  return strings\nend", "    \n    strings = strings[:]\n    \n    for string\
    \ in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_prefix\nWrite a function that filters an input list of strings\
    \ only for ones that start with a given prefix.", "    strings = strings[:]\n\
    \    strings = filter( x -> startswith(prefix, x), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters strings by a regular expression. \nThe function should take two arguments:\
    \ a list of strings, and a regular expression. \nThe function should return a\
    \ list of strings that match the regular expression. \nThe function should ignore\
    \ case. \nThe function should ignore non-matching strings. \nThe function should\
    \ ignore empty strings. \nThe function should ignore strings that do not match\
    \ the regular expression. \nThe function should ignore strings that do not start\
    \ with the prefix. \nThe function should ignore strings that do not end with the\
    \ suffix. \nThe function should ignore strings that do not contain any of the\
    \ characters in the regular expression. \nThe function should ignore strings that\
    \ do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that do not contain any of the characters in the regular expression. \nThe function\
    \ should ignore strings that do not contain any of the characters in the regular\
    \ expression. \nThe function should ignore strings that do not contain any of\
    \ the characters in the regular expression. \nThe function should ignore strings\
    \ that ", "    strings = strings[:]\n    for string in strings\n        if string.starts_with(prefix)\n\
    \            strings.remove(string)\n        end\n    end\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters through a list of strings and only keeps those that end with a given\
    \ suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"cd\")", "    \n    prefix_length = length(prefix)\n\
    \    \n    strings = strings[:]\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)\n    \n    strings = filter((string) -> startswith(string,\
    \ prefix), strings)", "    \n    strings = strings[:]\n    \n    for string in\
    \ strings\n        if string.starts_with(prefix)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters out the strings that end with a given\
    \ suffix.", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise: Write a function that filters strings by a prefix and suffix.\nFor example,\
    \ filter_by_prefix_and_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\", \"\
    array\") should return [\"abc\", \"array\"].", "    filter_by_prefix(strings,\
    \ prefix, \"\")\nend", "    strings = filter(x->startswith(prefix, x), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\
    \"", "    strings = strings[:]\n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"", "    strings = strings[:]\n    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend", "    \n    prefix_len = length(prefix)\n\
    \    \n    strings_filtered = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix)\n            push!(strings_filtered, string)\n\
    \        end\n    end\n    \n    return strings_filtered\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nWrite a function that filters a list of\
    \ strings only for those that end with a given suffix."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
