name: HumanEval_29_filter_by_prefix
language: jl
prompt: "\"\"\" Filter an input list of strings only for ones that start with a given\
  \ prefix.\n    >>> filter_by_prefix([], \"a\")\n    []\n    >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"array\"]\n    \"\"\"\
  \nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_prefix;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\nend\n"
completions: ["    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter\
    \ a DataFrame for rows that match a condition\nWrite a function that filters a\
    \ DataFrame for rows that match a condition. For example, suppose you have a DataFrame\
    \ with columns id and name, and you want to filter out all rows that have a name\
    \ that starts with \"A\". You could write a function like this:", "    \n    strings\
    \ = strings[:]\n    \n    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n\
    \    for string in strings\n        if startswith(string, prefix)\n          \
    \  strings = filter!(x -> startswith(x, prefix), strings)\n        end\n    end\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(String[],\
    \ String)", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters a vector of strings based on whether\
    \ they start with a given prefix.\nHint: use the filter_by_prefix function you\
    \ wrote in exercise 2.", "    \n    prefix_length = length(prefix)\n    \n   \
    \ if prefix_length == 0 \n        return strings\n    end\n    \n    strings =\
    \ strings[:]\n    \n    for string in strings\n        if startswith(string, prefix)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend", "    strings = filter( x -> startswith(prefix, x), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that end with\
    \ a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "   \
    \ \n    strings = strings[:]\n    \n    for s in strings\n        if startswith(prefix,\
    \ s)\n            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"q\")\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"c", "    \n    prefix_length = length(prefix)\n    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if startswith(string,\
    \ prefix)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for those\
    \ that end with a given suffix.\n>>> filter_by_suffix([], \"a\")\n[]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bcd\", \"cde\"]\n>>>\
    \ filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"\
    bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"e\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"g\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"h\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"j\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"k\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"m\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"n\")\n[\"abc\", \"bcd\", \"cde", "    strings = filter(x->startswith(prefix,\
    \ x), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that filters an input list of strings only for ones\
    \ that end with a given suffix.\n    >>> filter_by_suffix([], \"a\")\n    []\n\
    \    >>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n   \
    \ [\"abc\"]\n    \"\"\"", "    strings = strings[:]\n    strings = filter( x ->\
    \ startswith(prefix, x), strings)\n    return strings\nend", "    strings = filter((x)\
    \ -> startswith(x, prefix), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings\
    \ by a regular expression.\nThe function should take two arguments: a string and\
    \ a regular expression. The function should return a list of strings that match\
    \ the regular expression. \nThe function should ignore case. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore empty strings.\
    \ \nThe function should ignore non-alphanumeric characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ignore non-matching characters.\
    \ \nThe function should ignore non-matching characters. \nThe function should\
    \ ignore non-matching characters. \nThe function should ", "    \n    strings\
    \ = strings[:]\n    \n    for s in strings\n        if startswith(prefix, s)\n\
    \            delete!(s, prefix)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input list of strings only for ones that end with a given suffix.\n\
    \    >>> filter_by_suffix([], \"a\")\n    []\n    >>> filter_by_suffix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n    [\"abc\"]\n    \"\"\"", "    \n  \
    \  prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if startswith(string, prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"c\")\n[\"abc\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"b\")\n[\"abc\", \"bcd\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"d\")\n[\"abc\", \"bcd\", \"cde\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"f\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"g\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"i\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"j\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"l\")\n[\"abc\"\
    , \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"m\")\n[\"abc\", \"bcd\", \"cde\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"n\")\n[\"abc\", \"bcd\", \"cde\", \"array\"\
    ]\n>>> filter_by_suffix([\"abc", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter( x -> startswith(prefix, x), strings )\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if string.starts_with(prefix)\n            delete!(strings,\
    \ string)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters strings\
    \ by a regular expression.\nThe function should take two arguments:", "    \n\
    \    prefix_length = length(prefix)\n    \n    strings = strings[:]\n    \n  \
    \  for string in strings\n        if startswith(string, prefix)\n            strings\
    \ = filter!(x -> startswith(x, prefix), strings)\n        end\n    end\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_prefix(L::Vector{String},\
    \ prefix::String)::Vector{String}", "    \n    prefix_length = length(prefix)\n\
    \    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if startswith(string, prefix) == true\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ list of strings only for those that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"e\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"c\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"abc\", \"\
    bcd\", \"cde\", \"array\"], \"bc\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_suffix([\"\
    abc\", \"bcd\", \"cde\", \"array\"], \"bcd\")\n[\"abc\", \"array\"]\n>>> filter_by_",
  "    \n    strings = strings[:]\n    \n    strings = filter((x) -> startswith(prefix,\
    \ x), strings)\n    \n    return strings\nend", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.starts_with(prefix)\n    \
    \        delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that end with a given suffix.\n>>> filter_by_suffix([],\
    \ \"a\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"], \"\
    a\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"ab\")\n[\"abc\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"cd\")\n[\"bcd\", \"cde\"]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"array\")\n[\"array\"]\n>>> filter_by_suffix([\"abc\", \"bcd\"\
    , \"cde\", \"array\"], \"x\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"\
    cde\", \"array\"], \"y\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\"\
    , \"array\"], \"z\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"\
    array\"], \"abz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"aby\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abxy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abxyz\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"],\
    \ \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"abxyzy\")\n[]\n>>> filter_by_suffix([\"abc\", \"bcd\", \"cde", "    \n  \
    \  strings = strings[:]\n    \n    for string in strings\n        if string.starts_with(prefix)\n\
    \            delete!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_prefix([\"abc\"\
    , \"bcd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters a list of strings only for those that end with a given suffix."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
