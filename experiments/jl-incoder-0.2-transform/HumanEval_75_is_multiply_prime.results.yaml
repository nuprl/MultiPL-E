language: jl
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if p * p > a\n            return false\n        \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqrmd4ak.jl:21\nin expression starting at\
    \ /tmp/tmpjqrmd4ak.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjykcmbfl.jl:16\nin expression starting at\
    \ /tmp/tmpjykcmbfl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_less_than(a) \n    \n    for\
    \ p in primes\n        if p * p > a\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\n    \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 2 *\
    \ 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzla0ua8n.jl:21\nin expression starting at\
    \ /tmp/tmpzla0ua8n.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a perfect square, false otherwise.\nExample:\n\
    >>> is_perfect_square(25)\ntrue\n25 = 2 * 3 * 5 * 7\n25 = 2 * 3 * 5 * 7 * 11\n\
    25 = 2 * 3 * 5 * 7 * 11 * 13\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n25 = 2 * 3 *\
    \ 5 * 7 * 11 * 13 * 17 * 19\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n25 =\
    \ 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n25 = 2 * 3 * 5 * 7 * 11 * 13 *\
    \ 17 * 19 * 23 * 29 * 31\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\
    \ * 37\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n25 =\
    \ 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43\n25 = 2 * 3\
    \ * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47\n25 = 2 * 3 *\
    \ 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\n25 = 2 *\
    \ 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59\n\
    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\
    \ * 59 * 61\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 *\
    \ 43 * 47 * 53 * 59 * 61 * 67\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\
    \ * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71\n25 = 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71 * 73\n\
    25 = 2 * 3 * 5 * 7 * \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpame0jras.jl:16\nin expression starting at\
    \ /tmp/tmpame0jras.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_upto(a-1)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0h61572.jl:21\nin expression starting at\
    \ /tmp/tmpp0h61572.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfok3hbgb.jl:16\nin expression starting at\
    \ /tmp/tmpfok3hbgb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0236jid.jl:17\nin expression starting at\
    \ /tmp/tmp_0236jid.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 3 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n</text>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzo79cbum.jl:21\nin expression starting at\
    \ /tmp/tmpzo79cbum.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100.\n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30) ==\
    \ true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125)\
    \ == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\
    \t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhf4i71_.jl:16\nin expression starting at\
    \ /tmp/tmpvhf4i71_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3slem8hj.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3slem8hj.jl:1\n\
    in expression starting at /tmp/tmp3slem8hj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = prime_numbers(a)\n    \n    for p in primes\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a perfect square,\
    \ false otherwise.\nExample: \n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv027zx59.jl:20\nin expression starting at\
    \ /tmp/tmpv027zx59.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3slem8hj.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3slem8hj.jl:1\n\
    in expression starting at /tmp/tmp3slem8hj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns true if the given number is the\
    \ multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that\
    \ (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplgy9lvx7.jl:21\nin expression starting at\
    \ /tmp/tmplgy9lvx7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes(a)\n    \n    for p in primes\n        if p*p > a\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\n  \
    \  \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 3 * 7 * 11\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphu613dkg.jl:20\nin expression starting at\
    \ /tmp/tmphu613dkg.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy306sxt3.jl:16\nin expression starting at\
    \ /tmp/tmpy306sxt3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for p in primes\n        if p > a\n          \
    \  if a % p == 0\n                false\n            else\n                true\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpso3asng4.jl:22\nin expression starting at\
    \ /tmp/tmpso3asng4.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns true if the given number is a perfect square, false otherwise.\n\
    Example:\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n\
    >>> is_perfect_square(26)\nfalse\n>>> is_perfect_square(27)\nfalse\n>>> is_perfect_square(100)\n\
    true\n>>> is_perfect_square(101)\nfalse\n>>> is_perfect_square(102)\nfalse\n>>>\
    \ is_perfect_square(103)\nfalse\n>>> is_perfect_square(104)\nfalse\n>>> is_perfect_square(105)\n\
    false\n>>> is_perfect_square(106)\nfalse\n>>> is_perfect_square(107)\nfalse\n\
    >>> is_perfect_square(108)\nfalse\n>>> is_perfect_square(109)\nfalse\n>>> is_perfect_square(110)\n\
    false\n>>> is_perfect_square(111)\nfalse\n>>> is_perfect_square(112)\nfalse\n\
    >>> is_perfect_square(113)\nfalse\n>>> is_perfect_square(114)\nfalse\n>>> is_perfect_square(115)\n\
    false\n>>> is_perfect_square(116)\nfalse\n>>> is_perfect_square(117)\nfalse\n\
    >>> is_perfect_square(118)\nfalse\n>>> is_perfect_square(119)\nfalse\n>>> is_perfect_square(120)\n\
    false\n>>> is_perfect_square(121)\nfalse\n>>> is_perfect_square(122)\nfalse\n\
    >>> is_perfect_square(123)\nfalse\n>>> is_perfect_square(124)\nfalse\n>>> is_perfect_square(125)\n\
    false\n>>> is_perfect_square(126)\nfalse\n>>> is_perfect_square(127)\nfalse\n\
    >>> is_perfect_square(128)\nfalse\n>>> is_perfect_square(129)\nfalse\n>>> is_perfect_square(130)\n\
    false\n>>> is_perfect_square(131)\nfalse\n>>> is_perfect_square(132)\nfalse\n\
    >>> is_perfect_square(133)\nfalse\n>>> is_perfect_square(134)\nfalse\n>>> is_perfect_square(135)\n\
    false\n>>> is_perfect_square(136)\nfalse\n>>> is_perfect_square(137)\nfalse\n\
    >>> is_perfect_square(138)\nfalse\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30) ==\
    \ true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125)\
    \ == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\
    \t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001)\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnl487m1r.jl:16\nin expression starting at\
    \ /tmp/tmpnl487m1r.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for p in\
    \ primes\n        if p*p > a\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100.\nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\n\
    true\n>>> is_prime(11)\nfalse\n>>> is_prime(15)\ntrue\n>>> is_prime(17)\nfalse\n\
    >>> is_prime(19)\ntrue\n>>> is_prime(21)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(29)\n\
    true\n>>> is_prime(33)\ntrue\n>>> is_prime(37)\ntrue\n>>> is_prime(39)\ntrue\n\
    >>> is_prime(41)\ntrue\n>>> is_prime(47)\ntrue\n>>> is_prime(49)\ntrue\n>>> is_prime(51)\n\
    true\n>>> is_prime(59)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(67)\ntrue\n\
    >>> is_prime(71)\ntrue\n>>> is_prime(73)\ntrue\n>>> is_prime(79)\ntrue\n>>> is_prime(83)\n\
    true\n>>> is_prime(89)\ntrue\n>>> is_prime(97)\ntrue\n>>> is_prime(101)\ntrue\n\
    >>> is_prime(103)\ntrue\n>>> is_prime(107)\ntrue\n>>> is_prime(109)\ntrue\n>>>\
    \ is_prime(113)\ntrue\n>>> is_prime(127)\ntrue\n>>> is_prime(131)\ntrue\n>>> is_prime(137)\n\
    true\n>>> is_prime(139)\ntrue\n>>> is_prime(143)\ntrue\n>>> is_prime(147)\ntrue\n\
    >>> is_prime(151)\ntrue\n>>> is_prime(153)\ntrue\n>>> is_prime(157)\ntrue\n>>>\
    \ is_prime(159)\ntrue\n>>> is_prime(163)\ntrue\n>>> is_prime(167)\ntrue\n>>> is_prime(173)\n\
    true\n>>> is_prime(179)\ntrue\n>>> is_prime(181)\ntrue\n>>> is_prime\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r6q529w.jl:22\nin expression starting at\
    \ /tmp/tmp4r6q529w.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is a perfect square, false otherwise.\nExample:\n>>>\
    \ is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfe\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37f2jdey.jl:18\nin expression starting at\
    \ /tmp/tmp37f2jdey.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = prime_numbers(a)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a perfect square, false otherwise.\n   \
    \ \n    Example:\n    >>> is_perfect_square(25)\n    true\n    25 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2rizjeu1.jl:18\nin expression starting at\
    \ /tmp/tmp2rizjeu1.jl:18\n"
  stdout: ''
