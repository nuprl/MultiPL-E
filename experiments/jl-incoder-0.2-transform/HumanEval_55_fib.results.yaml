language: jl
name: HumanEval_55_fib
results:
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ c |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c\
    \ |>\n<| c |>\nThe correct solution is `fib(n)=fib(n-1)+fib(n-2)`\n<|/ c |>\n\
    <| c |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c\
    \ |>\n<| a dscore=5 |>\nThe accepted answer does not return the correct result\
    \ for n==0.\n<code>\njulia> fib(0)\n0\n</code>\nThe correct solution is fib(n)=fib(n-1)+fib(n-2).\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the correct solution. `fib(n)`\
    \ should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c\
    \ |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c\
    \ |>\n<| c |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c\
    \ \nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) ==\
    \ 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_ucqzzk.jl:12\nin expression starting at\
    \ /tmp/tmpc_ucqzzk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <text>\nThe Fibonacci numbers are defined by the recurrence relation:\nusing Test\n\
    \n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum_4fwc5.jl:15\nin expression starting at\
    \ /tmp/tmpum_4fwc5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `fib`\
    \ function can be written more concisely as `fib(n) = n < 2 ? n : fib(n-1) + fib(n-2)`.\n\
    <|/ c |>\n<| c |>\nI agree, thank you. I just wanted to show the recursive approach\
    \ for beginners.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show a\
    \ recursive approach for beginners.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a8f6m7s.jl:12\nin expression starting at\
    \ /tmp/tmp0a8f6m7s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the n-th Fibonacci number using memoization.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj1vfxql4.jl:11\nin expression starting at /tmp/tmpj1vfxql4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the n-th Fibonacci number using\
    \ memoization.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaxu3x42g.jl:11\nin expression starting at /tmp/tmpaxu3x42g.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64) that\
    \ returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpri2oifkx.jl:11\nin expression starting at /tmp/tmpri2oifkx.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nFibonacci numbers are a recursive\
    \ data structure. Recursive functions can call themselves to solve problems such\
    \ as finding fibonacci numbers. A recursive function calls itself until it reaches\
    \ a base case (a case where a recursive function does not call itself). A base\
    \ case is a case where a recursive function does not call itself. A base case\
    \ is typically a case where a recursive function does not need to call itself\
    \ to solve a problem.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf5yoce_0.jl:11\nin expression starting at /tmp/tmpf5yoce_0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nExercise 10\nWrite a function that\
    \ returns the n-th Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\
    \ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2pfylgfp.jl:11\nin expression starting at /tmp/tmp2pfylgfp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjdgab_2z.jl:11\nin expression starting at /tmp/tmpjdgab_2z.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n    then return 1\n    else return fib(n-1) + fib(n-2)\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer. I'm new to Julia\
    \ and I didn't know that Julia has this kind of functions. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return types. I thought that Julia has only functions with return types.\
    \ I thought that Julia has only functions with return types. I thought that Julia\
    \ has only functions with return types. I thought that Julia has only functions\
    \ with return \nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptpa11tgr.jl:11\nin expression starting at /tmp/tmptpa11tgr.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
    \    1\n    >>> fib(8)\n    21\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_5pa8d3h.jl:11\nin expression starting at /tmp/tmp_5pa8d3h.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fibonacci\
    \ that returns the nth Fibonacci number. Test it by timing it.\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_gw40wht.jl:11\nin expression starting at /tmp/tmp_gw40wht.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,fibonacci |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdizcf7yb.jl:15\nin expression starting at\
    \ /tmp/tmpdizcf7yb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n   \
    \     fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis\
    \ does not answer the question. `fib` does not return a Fibonacci number. `fib`\
    \ returns a Fibonacci number that is the sum of the two previous numbers. `fib`\
    \ does not return the nth Fibonacci number.\n<|/ c |>\n<| c |>\nThis is not an\
    \ answer, but a comment. `fib` does not return a Fibonacci number. `fib` returns\
    \ a Fibonacci number that is the sum of the two previous numbers. `fib` does not\
    \ return the nth Fibonacci number.\n<|/ c |>\n<| c |>\nThis does not answer the\
    \ question. `fib` does not return a Fibonacci number. `fib` returns a Fibonacci\
    \ number that is the sum of the two previous numbers. `fib` does not return the\
    \ nth Fibonacci number.\n<|/ c |>\n<| c |>\nThis does not answer the question.\
    \ `fib` does not return a Fibonacci number. `fib` returns a Fibonacci number that\
    \ is the sum of the two previous numbers. `fib` does not return the nth Fibonacci\
    \ number.\n<|/ c |>\n<| c |>\nThis does not answer the question. `fib` does not\
    \ return a Fibonacci number. `fib` returns a Fibonacci number that is the sum\
    \ of the two previous numbers. `fib` does not return the nth Fibonacci number.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuscly0io.jl:12\nin expression starting at\
    \ /tmp/tmpuscly0io.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 0 \n        error(\"Fibonacci number must be positive\")\n    else\
    \ if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci,function |>\n<|\
    \ a tags=julia,fibonacci,function |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdzt52l9.jl:12\nin expression starting at\
    \ /tmp/tmphdzt52l9.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a |>\n<| c |>\nI believe this should be `fib(n-1)\
    \ + fib(n-2)`\n<|/ c |>\n<| c |>\nThanks for your comment. I've fixed it.\n<|/\
    \ c |>\n<| a tags=fibonacci,julia,recursion |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe2dyah22.jl:11\nin expression starting at /tmp/tmpe2dyah22.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n       \
    \ fib(n - 1) + fib(n - 2)\n    end\nend\n</cell>\n<text>\nThe Fibonacci sequence\
    \ is defined by the recurrence relation:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdvl8k_c.jl:18\nin expression starting at\
    \ /tmp/tmpvdvl8k_c.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec that computes the nth Fibonacci number\
    \ recursively.\nusing Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10)\
    \ == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
    \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp93ju1ass.jl:11\nin expression starting at /tmp/tmp93ju1ass.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 || n == 1 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12)\
    \ == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmbek25m6.jl:11\nin expression starting at /tmp/tmpmbek25m6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>>\
    \ fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that calculates the\
    \ n-th Fibonacci number using memoization.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib;\n\t@test(candidate(10) == 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8)\
    \ == 21)\n\t@test(candidate(11) == 89)\n\t@test(candidate(12) == 144)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbjbrhxw6.jl:11\nin expression starting at /tmp/tmpbjbrhxw6.jl:11\n"
  stdout: ''
