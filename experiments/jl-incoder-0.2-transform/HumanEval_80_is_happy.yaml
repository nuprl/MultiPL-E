name: HumanEval_80_is_happy
language: jl
prompt: "\"\"\"You are given a string s.\n    Your task is to check if the string\
  \ is happy or not.\n    A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n  \
  \  false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n  \
  \  >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
  \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
  a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
  ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
  \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") ==\
  \ true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
completions: ["    if is_happy(s.length()) == true and is_distinct_letters(s) == true\
    \ then \n        return true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else if length(s) == 3\n       \
    \ return is_distinct(s[1..3])\n    else if length(s) == 2\n        return is_distinct(s[1..2])\n\
    \    else if length(s) == 1\n        return is_distinct(s)\n    else if length(s)\
    \ == 0\n        return false\n    end\nend\n</code>\n<|/ a tags=string,julia,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "    if is_empty(s) == true\n        return true\n\
    \    \n    if length(s) < 3\n        return false\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_happy(s.length())\
    \ then true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    count_unique_letters(s)\n    Count the number of unique letters in s\n  \
    \  \n    Input : String s\n    Output : Int count\n    \n    Constraints : s contains\
    \ only lowercase letters\n    \n    Example:\n    >>> count_unique_letters(\"\
    abcabc\")\n    3\n    >>> count_unique_letters(\"asdfghjkl\")\n    26\n    >>>\
    \ count_unique_letters(\"qwertyuiop\")\n    52\n    >>> count_unique_letters(\"\
    zxcvbnm\")\n    52\n    \"\"\"", "    if is_happy(s,0,0)==true then return true\n\
    \    else return false\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if is_happy(s.length)\n    then true\n\
    \    else false\nend", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else\n        \n        \n     \
    \   for i in 1:length(s)\n            if s[i] == s[i+1]\n                \n  \
    \              \n            else\n                return false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n", "    if is_happy(s.length()) then return true\n\
    \    else if s.length() < 3 then return false\n    else if is_happy(s.substring(0,3))\n\
    \    then is_happy(s.substring(3))\n    else false\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if is_happy(s) == true then return\
    \ true\n    else if length(s) < 3 then return false\n    else if is_distinct(s[1..3])\
    \ == true and is_distinct(s[2..4]) == true and is_distinct(s[3..5]) == true then\
    \ return true\n    else return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    count_distinct(s::String)\n    Count the number of distinct letters\
    \ in s\n\"\"\"", "    if is_empty(s) == true\n        return true\n    else if\
    \ length(s) < 3\n        return false\n    else\n        true\n    end\nend\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work. `is_happy(\"\
    ab\")` returns `true`, but `is_happy(\"aba\")` returns `false`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug, thanks for pointing it out\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    if is_happy(s,0,0)\n    then true\n    else false\nend\n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    ", "    if is_empty(s) == true\n  \
    \      return true\n    else if length(s) < 3\n        return false\n    else\n\
    \        forall i::Int | i in 1..length(s) -> (s[i] == s[i-1] && s[i] != s[i+1])\
    \ || s[i] == s[i-1] && s[i] != s[i+1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_happy(\"abc\") == false\n@assert is_happy(\"aaa\") == false\n@assert\
    \ is_happy(\"abcd\") == true\n@assert is_happy(\"aabb\") == false\n@assert is_happy(\"\
    adb\") == true\n@assert is_happy(\"xyy\") == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a number is prime or not. You may want to\
    \ use the Sieve of Eratosthenes algorithm. \nThe Sieve of Eratosthenes algorithm\
    \ works by generating all prime numbers up to a given limit. \nThe first prime\
    \ number is 2. \nThe second prime number is 3. \nThe third prime number is 5 and\
    \ so on. \nThe sieve of Eratosthenes is very efficient and generates all the prime\
    \ numbers up to a limit.\nThe sieve of Eratosthenes is implemented in the following\
    \ function.", "    if is_happy(s,0)\n    true\n    else\n    false\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThanks for your answer! I guess I should\
    \ have mentioned that I'm looking for a solution that doesn't use any loops.\n\
    <|/ c |>\n<| c |>\nI guess I should have mentioned that I'm looking for a solution\
    \ that doesn't use any loops.\n<|/ c |>\n<| c |>\nI guess I should have mentioned\
    \ that I'm looking for a solution that doesn't use any loops.\n<|/ c |>\n<| c\
    \ |>\nI guess I should have mentioned that I'm looking for a solution that doesn't\
    \ use any loops.\n<|/ c |>\n<| c |>\nI guess I should have mentioned that I'm\
    \ looking for a solution that doesn't use any loops.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    if is_empty(s):\n        return true\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else\n        local i::Int = 0\n\
    \        local j::Int = 0\n        local k::Int = 0\n        while i < length(s)\
    \ do\n            if s[i] != s[i+1] then\n                j = i\n            \
    \    while j < length(s) do\n                    if s[j] == s[i+j] then\n    \
    \                    k = j\n                        while k < length(s) do\n \
    \                           if s[k] == s[i+j+k] then\n                       \
    \         return false\n                            else\n                   \
    \             k += 1\n                            end\n                      \
    \  end\n                    else\n                        j += 1\n           \
    \         end\n                end\n            end\n            i += 1\n    \
    \    end\n        return true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nFor example:\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    helloo\")\n1\n>>> vowel_count(\"hellooo\")\n0\n>>> vowel_count(\"helloooo\")\n\
    3\n>>> vowel_count(\"helloooooo\")\n4\n>>> vowel_count(\"hellooooooo\")\n5\n>>>\
    \ vowel_count(\"helloooooooo\")\n6\n>>> vowel_count(\"helloooooooooo\")\n7\n>>>\
    \ vowel_count(\"hellooooooooooo\")\n8\n>>> vowel_count(\"helloooooooooooo\")\n\
    9\n>>> vowel_count(\"helloooooooooooooo\")\n10\n>>> vowel_count(\"hellooooooooooooooo\"\
    )\n11\n>>> vowel_count(\"helloooooooooooooooo\")\n12\n>>> vowel_count(\"helloooooooooooooooooo\"\
    )\n13\n>>> vowel_count(\"hellooooooooooooooooooo\")\n14\n>>> vowel_count(\"helloooooooooooooooooooo\"\
    )\n15\n>>> vowel_count(\"helloooooooooooooooooooooo\")\n16\n>>> vowel_count(\"\
    hellooooooooooooooooooooooo\")\n17\n>>> vowel_count(\"helloooooooooooooooooooooooo\"\
    )\n18\n>>> vowel_count(\"helloooooooooooooooooooooooooo\")\n19\n>>> vowel_count(\"\
    hellooooooooooooooooooooooooooo\")\n20\n>>> vowel_count(\"helloooooooooooooooooooooooooooooo\"\
    )\n21\n>>> vowel_count(\"hellooooooooooooooooooooooooooooooo\")\n22\n>>> vowel_count(\"\
    helloooooooooooooooooooooooooooooooooo\")\n23\n>>> vowel_count(\"helloooooooooooooooooooooooooooooooooooo\"\
    )\n24\n>>> vowel", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else\n        local i::Int = 0\n\
    \        local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n\
    \        local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n\
    \        local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n\
    \        local v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n\
    \        local y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n\
    \        local b::Int = 0\n        local c::Int = 0\n        local d::Int = 0\n\
    \        local e::Int = 0\n        local f::Int = 0\n        local g::Int = 0\n\
    \        local h::Int = 0\n        local i::Int = 0\n        local j::Int = 0\n\
    \        local k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n\
    \        local n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n\
    \        local q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n\
    \        local t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n\
    \        local w::Int = 0\n        local x::Int = 0\n        local y::Int = 0\n\
    \        local z::Int = 0\n        local a::Int = 0\n        local b::Int = 0\n\
    \        local c::Int = 0\n        local d::Int = 0\n        local e::Int = 0\n\
    \        local f::Int = 0\n        local g::Int = 0\n        local h::Int = 0\n\
    \        local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n\
    \        local l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n\
    \        local o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n\
    \        local r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n\
    \        local u::Int = 0\n        local v::Int = 0\n        local w::Int = 0\n\
    \        local x::Int = 0\n        local y::Int = 0\n        local z::Int = 0\n\
    \        local a::Int = 0\n", "    if is_happy(s.length()) == true \n    then\
    \ return true\n    else return false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abc\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbc\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcde\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdef\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"abbbbcdefg\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefgh\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghij\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijk\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbbcdefghijkl\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefghijklm\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>", "    if is_empty(s) == true\n        return true\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if is_empty(s) == true\n        return\
    \ true\n    else if length(s) < 3\n        return false\n    else\n        \n\
    \        for i in 1..length(s)\n            if s[i] != s[i-1]\n              \
    \  return false\n        end\n        return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels in it.", "    if is_empty(s) == true\n        return true\n    \n\
    \    \n    if is_happy(tail(s))\n        return true\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
