name: HumanEval_80_is_happy
language: jl
prompt: "\"\"\"You are given a string s.\n    Your task is to check if the string\
  \ is happy or not.\n    A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n  \
  \  false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n  \
  \  >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
  \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
  a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
  ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") ==\
  \ true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") ==\
  \ true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
completions: ["    if is_happy(s.length()) == true and is_distinct_letters(s) == true\
    \ then \n        return true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else if length(s) == 3\n       \
    \ return is_distinct(s[1..3])\n    else if length(s) == 2\n        return is_distinct(s[1..2])\n\
    \    else if length(s) == 1\n        return is_distinct(s)\n    else if length(s)\
    \ == 0\n        return false\n    end\nend\n</code>\n<|/ a tags=string,julia,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "    if is_empty(s) == true\n        return true\n\
    \    \n    if length(s) < 3\n        return false\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_happy(s.length())\
    \ then true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    count_unique_letters(s)\n    Count the number of unique letters in s\n  \
    \  \n    Input : String s\n    Output : Int count\n    \n    Constraints : s contains\
    \ only lowercase letters\n    \n    Example:\n    >>> count_unique_letters(\"\
    abcabc\")\n    3\n    >>> count_unique_letters(\"asdfghjkl\")\n    26\n    >>>\
    \ count_unique_letters(\"qwertyuiop\")\n    52\n    >>> count_unique_letters(\"\
    zxcvbnm\")\n    52\n    \"\"\"", "    if is_happy(s,0,0)==true then return true\n\
    \    else return false\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if is_happy(s.length)\n    then true\n\
    \    else false\nend", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else\n        \n        \n     \
    \   for i in 1:length(s)\n            if s[i] == s[i+1]\n                \n  \
    \              \n            else\n                return false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abba\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abba\")\n</cell>\n", "    if is_happy(s.length()) then return true\n\
    \    else if s.length() < 3 then return false\n    else if is_happy(s.substring(0,3))\n\
    \    then is_happy(s.substring(3))\n    else false\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if is_happy(s) == true then return\
    \ true\n    else if length(s) < 3 then return false\n    else if is_distinct(s[1..3])\
    \ == true and is_distinct(s[2..4]) == true and is_distinct(s[3..5]) == true then\
    \ return true\n    else return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    count_distinct(s::String)\n    Count the number of distinct letters\
    \ in s\n\"\"\"", "    if is_empty(s) == true\n        return true\n    else if\
    \ length(s) < 3\n        return false\n    else\n        true\n    end\nend\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work. `is_happy(\"\
    ab\")` returns `true`, but `is_happy(\"aba\")` returns `false`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug, thanks for pointing it out\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    if is_happy(s,0,0)\n    then true\n    else false\nend\n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    ", "    if is_empty(s) == true\n  \
    \      return true\n    else if length(s) < 3\n        return false\n    else\n\
    \        forall i::Int | i in 1..length(s) -> (s[i] == s[i-1] && s[i] != s[i+1])\
    \ || s[i] == s[i-1] && s[i] != s[i+1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_happy(\"abc\") == false\n@assert is_happy(\"aaa\") == false\n@assert\
    \ is_happy(\"abcd\") == true\n@assert is_happy(\"aabb\") == false\n@assert is_happy(\"\
    adb\") == true\n@assert is_happy(\"xyy\") == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a number is prime or not. You may want to\
    \ use the Sieve of Eratosthenes algorithm. \nThe Sieve of Eratosthenes algorithm\
    \ works by generating all prime numbers up to a given limit. \nThe first prime\
    \ number is 2. \nThe second prime number is 3. \nThe third prime number is 5 and\
    \ so on. \nThe sieve of Eratosthenes is very efficient and generates all the prime\
    \ numbers up to a limit.\nThe sieve of Eratosthenes is implemented in the following\
    \ function.", "    if is_happy(s,0)\n    true\n    else\n    false\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThanks for your answer! I guess I should\
    \ have mentioned that I'm looking for a solution that doesn't use any loops.\n\
    <|/ c |>\n<| c |>\nI guess I should have mentioned that I'm looking for a solution\
    \ that doesn't use any loops.\n<|/ c |>\n<| c |>\nI guess I should have mentioned\
    \ that I'm looking for a solution that doesn't use any loops.\n<|/ c |>\n<| c\
    \ |>\nI guess I should have mentioned that I'm looking for a solution that doesn't\
    \ use any loops.\n<|/ c |>\n<| c |>\nI guess I should have mentioned that I'm\
    \ looking for a solution that doesn't use any loops.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    if is_empty(s):\n        return true\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else\n        local i::Int = 0\n\
    \        local j::Int = 0\n        local k::Int = 0\n        while i < length(s)\
    \ do\n            if s[i] != s[i+1] then\n                j = i\n            \
    \    while j < length(s) do\n                    if s[j] == s[i+j] then\n    \
    \                    k = j\n                        while k < length(s) do\n \
    \                           if s[k] == s[i+j+k] then\n                       \
    \         return false\n                            else\n                   \
    \             k += 1\n                            end\n                      \
    \  end\n                    else\n                        j += 1\n           \
    \         end\n                end\n            end\n            i += 1\n    \
    \    end\n        return true\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nFor example:\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    helloo\")\n1\n>>> vowel_count(\"hellooo\")\n0\n>>> vowel_count(\"helloooo\")\n\
    3\n>>> vowel_count(\"helloooooo\")\n4\n>>> vowel_count(\"hellooooooo\")\n5\n>>>\
    \ vowel_count(\"helloooooooo\")\n6\n>>> vowel_count(\"helloooooooooo\")\n7\n>>>\
    \ vowel_count(\"hellooooooooooo\")\n8\n>>> vowel_count(\"helloooooooooooo\")\n\
    9\n>>> vowel_count(\"helloooooooooooooo\")\n10\n>>> vowel_count(\"hellooooooooooooooo\"\
    )\n11\n>>> vowel_count(\"helloooooooooooooooo\")\n12\n>>> vowel_count(\"helloooooooooooooooooo\"\
    )\n13\n>>> vowel_count(\"hellooooooooooooooooooo\")\n14\n>>> vowel_count(\"helloooooooooooooooooooo\"\
    )\n15\n>>> vowel_count(\"helloooooooooooooooooooooo\")\n16\n>>> vowel_count(\"\
    hellooooooooooooooooooooooo\")\n17\n>>> vowel_count(\"helloooooooooooooooooooooooo\"\
    )\n18\n>>> vowel_count(\"helloooooooooooooooooooooooooo\")\n19\n>>> vowel_count(\"\
    hellooooooooooooooooooooooooooo\")\n20\n>>> vowel_count(\"helloooooooooooooooooooooooooooooo\"\
    )\n21\n>>> vowel_count(\"hellooooooooooooooooooooooooooooooo\")\n22\n>>> vowel_count(\"\
    helloooooooooooooooooooooooooooooooooo\")\n23\n>>> vowel_count(\"helloooooooooooooooooooooooooooooooooooo\"\
    )\n24\n>>> vowel", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else\n        local i::Int = 0\n\
    \        local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n\
    \        local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n\
    \        local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n\
    \        local v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n\
    \        local y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n\
    \        local b::Int = 0\n        local c::Int = 0\n        local d::Int = 0\n\
    \        local e::Int = 0\n        local f::Int = 0\n        local g::Int = 0\n\
    \        local h::Int = 0\n        local i::Int = 0\n        local j::Int = 0\n\
    \        local k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n\
    \        local n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n\
    \        local q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n\
    \        local t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n\
    \        local w::Int = 0\n        local x::Int = 0\n        local y::Int = 0\n\
    \        local z::Int = 0\n        local a::Int = 0\n        local b::Int = 0\n\
    \        local c::Int = 0\n        local d::Int = 0\n        local e::Int = 0\n\
    \        local f::Int = 0\n        local g::Int = 0\n        local h::Int = 0\n\
    \        local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n\
    \        local l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n\
    \        local o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n\
    \        local r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n\
    \        local u::Int = 0\n        local v::Int = 0\n        local w::Int = 0\n\
    \        local x::Int = 0\n        local y::Int = 0\n        local z::Int = 0\n\
    \        local a::Int = 0\n", "    if is_happy(s.length()) == true \n    then\
    \ return true\n    else return false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abc\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbc\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcde\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdef\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"abbbbcdefg\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefgh\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghij\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijk\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbbcdefghijkl\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefghijklm\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbbbcdefghijklmn\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>", "    if is_empty(s) == true\n        return true\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if is_empty(s) == true\n        return\
    \ true\n    else if length(s) < 3\n        return false\n    else\n        \n\
    \        for i in 1..length(s)\n            if s[i] != s[i-1]\n              \
    \  return false\n        end\n        return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"\
    aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels in it.", "    if is_empty(s) == true\n        return true\n    \n\
    \    \n    if is_happy(tail(s))\n        return true\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    if is_empty(s) == true\n      \
    \  return true\n    \n    if length(s) < 3\n        return false\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_happy(s) == true then return true\n    else if length(s) < 3 then return\
    \ false\n    else if length(s) == 3 then \n        if isdistinct(s[1..2]) == true\
    \ and isdistinct(s[2..3]) == true and isdistinct(s[3..4]) == true then return\
    \ true\n        else return false\n    else if length(s) == 4 then \n        if\
    \ isdistinct(s[1..3]) == true and isdistinct(s[2..4]) == true and isdistinct(s[3..5])\
    \ == true then return true\n        else return false\n    else if length(s) ==\
    \ 5 then \n        if isdistinct(s[1..4]) == true and isdistinct(s[2..5]) == true\
    \ and isdistinct(s[3..6]) == true then return true\n        else return false\n\
    \    else if length(s) == 6 then \n        if isdistinct(s[1..5]) == true and\
    \ isdistinct(s[2..6]) == true and isdistinct(s[3..7]) == true then return true\n\
    \        else return false\n    else if length(s) == 7 then \n        if isdistinct(s[1..6])\
    \ == true and isdistinct(s[2..7]) == true and isdistinct(s[3..8]) == true then\
    \ return true\n        else return false\n    else if length(s) == 8 then \n \
    \       if isdistinct(s[1..7]) == true and isdistinct(s[2..8]) == true and isdistinct(s[3..9])\
    \ == true then return true\n        else return false\n    else if length(s) ==\
    \ 9 then \n        if isdistinct(s[1..8]) == true and isdistinct(s[2..9]) == true\
    \ and isdistinct(s[3..10]) == true then return true\n        else return false\n\
    \    else return false\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    if is_happy(s.length)\n        true\n    else\n        false\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_happy(s.length())\
    \ == false \n    then return false \n    else \n        for i from 0 to s.length()-2\
    \ \n        do if s[i] == s[i+1] && s[i+1] == s[i+2] \n        then return false\
    \ \n        else return true \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abc\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbac\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbaca\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaa\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaa\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"abbacaaaa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbacaaaaa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaaaaaa\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"abbacaaaaaaaa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbacaaaaaaaab\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbacaaaaaaaabb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaaaaaaabbbc\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbacaaaaaaaabbbcd\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abbacaaaaaaaabbbcde\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    abbacaaaaaaaabbbcdef\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaaaaaaabbbcdefg\"\
    )\n</cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaaaaaaabbbcdefgh\")\n\
    </cell>\n<code language=julia-1.0>\nis_happy(\"abbacaaaaaaaabbbcdefghi\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abbacaaaaaaaabbbcdefghij", "    if is_happy(s,0)\n\
    \    true\n    else false\nend", "    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    \n    if is_empty(s) == false\n        return false\n    \n\
    \    \n    if is_happy(s.tail) == true\n        return true\n    \n    \n    if\
    \ is_happy(s.tail) == false\n        return false\n    \n    \n    if is_happy(s.tail.tail)\
    \ == true\n        return true\n    \n    \n    if is_happy(s.tail.tail) == false\n\
    \        return false\n    \n    \n    if is_happy(s.tail.tail.tail) == true\n\
    \        return true\n    \n    \n    if is_happy(s.tail.tail.tail) == false\n\
    \        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail) == true\n\
    \        return true\n    \n    \n    if is_happy(s.tail.tail.tail.tail) == false\n\
    \        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == true\n        return true\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.tail.tail)\
    \ == false\n        return false\n    \n    \n    if is_happy(s.tail.tail.tail.tail.tail.tail.tail.",
  "    if is_empty(s) == true\n        return true\n    \n    if length(s) < 3\n \
    \       return false\n    \n    for i in 1..length(s)\n        if s[i-1] == s[i-2]\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is even.", "    if is_empty(s) == true\n\
    \        return true\n    else if length(s) == 3\n        true\n    else\n   \
    \     false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_unique_chars(s)\n\
    \    Count the number of unique characters in a string\n\"\"\"", '    if is_happy(s.length())
    == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) ==
    true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) == true
    && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) == true
    && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) == true
    && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) == true
    && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) == true
    && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) == true
    && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) == true
    && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) == true
    && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) == true
    && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) == true
    && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) == true
    && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) == true
    && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) == true
    && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) == true
    && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) == true
    && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102)) == true
    && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108)) ==
    true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_happy(s.length()) == false \n\
    \    then return false \n    else if s.length() < 3 \n    then return false \n\
    \    else if length(unique(substring(s, 1, 3))) == 3 \n    then return true \n\
    \    else return false \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"\n    unique\n    Remove all duplicates from a sequence\n\"\"\"", "    if is_happy(s.length())\
    \ == true \n    then \n        for i from 0 to s.length()-3 \n        do \n  \
    \          if s.charAt(i) == s.charAt(i+1) \n            and  s.charAt(i) == s.charAt(i+2)\
    \ \n            and  s.charAt(i) == s.charAt(i+3) \n            then \n      \
    \          return false \n            else \n                return true \n  \
    \  else \n        return false \nend\n</code>\n<|/ a tags=string,julia,recursion\
    \ |>\n<| a dscore=0 |>\n<code>", "    if is_empty(s) == true\n    then false\n\
    \    else if length(s) == 3\n    then is_distinct(s[1..2])\n    else is_distinct(s[1..3])\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_distinct(s::String)",
  "    if is_happy(s,0)\n    else \n        false\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if is_happy(s) == true\n    else\
    \ \n        if is_happy(s[1..2]) == true && is_happy(s[2..3]) == true && is_happy(s[3..4])\
    \ == true\n        else \n            if is_happy(s[1..2]) == true && is_happy(s[2..3])\
    \ == true && is_happy(s[3..4]) == true && is_happy(s[4..5]) == true\n        \
    \    else \n                if is_happy(s[1..2]) == true && is_happy(s[2..3])\
    \ == true && is_happy(s[3..4]) == true && is_happy(s[4..5]) == true && is_happy(s[5..6])\
    \ == true\n                else \n                    if is_happy(s[1..2]) ==\
    \ true && is_happy(s[2..3]) == true && is_happy(s[3..4]) == true && is_happy(s[4..5])\
    \ == true && is_happy(s[5..6]) == true && is_happy(s[6..7]) == true\n        \
    \            else \n                        if is_happy(s[1..2]) == true && is_happy(s[2..3])\
    \ == true && is_happy(s[3..4]) == true && is_happy(s[4..5]) == true && is_happy(s[5..6])\
    \ == true && is_happy(s[6..7]) == true && is_happy(s[7..8]) == true\n        \
    \                else \n                            if is_happy(s[1..2]) == true\
    \ && is_happy(s[2..3]) == true && is_happy(s[3..4]) == true && is_happy(s[4..5])\
    \ == true && is_happy(s[5..6]) == true && is_happy(s[6..7]) == true && is_happy(s[7..8])\
    \ == true && is_happy(s[8..9]) == true\n                            else \n  \
    \                              if is_happy(s[1..2]) == true && is_happy(s[2..3])\
    \ == true && is_happy(s[3..4]) == true && is_happy(s[4..5]) == true && is_happy(s[5..6])\
    \ == true && is_happy(s[6..7]) == true && is_happy(s[7..8]) == true && is_happy(s[8..9])\
    \ == true && is_happy(s[9..10]) == true\n                                else\
    \ \n                                    if is_happy(s[1..2]) == true && is_happy(s[2..3])\
    \ == true && is_happy(s[3..4]) == true && is_happy(s[4..5]) == true && is_happy(s[5..6])\
    \ == true && is_happy(s[6..7]) == true && is_happy(s[7..", "    if is_happy(s,0)\n\
    \    true\n    else false\nend", "    if is_happy(s,0)\n    else \n        true\n\
    \    end\nend", "    if is_empty(s) == true\n        return true\n    else if\
    \ length(s) < 3\n        return false\n    else\n        forall i::Int | 0 <=\
    \ i < length(s) ==> \n            s[i] == s[i+1] && s[i] == s[i+2] && s[i] !=\
    \ s[i+1] && s[i] != s[i+2] && s[i] != s[i+3]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_happy(s::String)\n    Count the number of happy strings in s\n\
    \"\"\"", "    if is_empty(s):\n        return true\n    \n    \n    if is_happy(tail(s)):\n\
    \        return true\n    \n    if is_happy(tail(tail(s))):\n        return true\n\
    \    \n    if is_happy(tail(tail(tail(s))))\n        return true\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    tail(s::String)",
  "    if is_empty(s) == true\n        return true\n    \n    length::Int = s.length\n\
    \    \n    if length < 3 || length == 0 || length >= 4\n        return false\n\
    \    \n    count::Int = 0\n    \n    for i in 0..length-1\n        if s[i] ==\
    \ s[i+1]\n            count += 1\n        else\n            count = 0\n    \n\
    \    if count != 3\n        return false\n    \n    for i in 0..length-1\n   \
    \     if s[i] == s[i+1]\n            count += 1\n        else\n            count\
    \ = 0\n    \n    if count != 3\n        return false\n    \n    for i in 0..length-1\n\
    \        if s[i] == s[i+1]\n            count += 1\n        else\n           \
    \ count = 0\n    \n    if count != 3\n        return false\n    \n    for i in\
    \ 0..length-1\n        if s[i] == s[i+1]\n            count += 1\n        else\n\
    \            count = 0\n    \n    if count != 3\n        return false\n    \n\
    \    for i in 0..length-1\n        if s[i] == s[i+1]\n            count += 1\n\
    \        else\n            count = 0\n    \n    if count != 3\n        return\
    \ false\n    \n    for i in 0..length-1\n        if s[i] == s[i+1]\n         \
    \   count += 1\n        else\n            count = 0\n    \n    if count != 3\n\
    \        return false\n    \n    for i in 0..length-1\n        if s[i] == s[i+1]\n\
    \            count += 1\n        else\n            count = 0\n    \n    if count\
    \ != 3\n        return false\n    \n    for i in 0..length-1\n        if s[i]\
    \ == s[i+1]\n            count += 1\n        else\n            count = 0\n   \
    \ \n    if count != 3\n        return false\n    \n    for i in 0..length-1\n\
    \        if s[i] == s[i+1]\n            count += 1\n        else\n           \
    \ count = 0\n    \n    if count != 3\n        return false\n    \n    for i in\
    \ 0..length-1\n        if s[i] == s[i+1]\n            count += 1\n        else\n\
    \            count = 0\n    \n    if count != 3\n        return false\n    \n\
    \    for i in 0..length-1\n        if s[i] == s[i+1]\n            count += 1\n\
    \        else\n            count = 0\n    \n    if count != 3\n        return\
    \ false\n    \n    for i in 0..length-1\n        if s[i] == s[i+1]\n         \
    \   count += 1\n        else\n            count = 0\n    \n    if count != 3\n\
    \        return false\n    \n    for i in 0..length-1\n        if s[i] == s[i+1]\n\
    \            count += 1\n        else\n            count = 0\n    \n    if count\
    \ != 3\n        return false\n    \n    for i in 0..length-1\n        if s[i]\
    \ == s[i+1]\n            count += 1\n        else\n            count = 0\n   \
    \ \n    if count != 3\n        return false\n    \n    for i in 0..length-1\n\
    \        if s[i] == s[i+1]\n            count += 1\n        else\n           \
    \ count = 0\n    \n    if count != 3\n        return false\n    \n    for i in\
    \ 0..length", "    if is_empty(s) == true\n        return true\n    \n    if is_empty(s)\
    \ == false\n        return false\n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if is_empty(s) == false\n        return false\n    \n    if\
    \ is_empty(s) == true\n        return true\n    \n    if is_empty(s) == false\n\
    \        return false\n    \n    if is_empty(s) == true\n        return true\n\
    \    \n    if is_empty(s) == false\n        return false\n    \n    if is_empty(s)\
    \ == true\n        return true\n    \n    if is_empty(s) == false\n        return\
    \ false\n    \n    if is_empty(s) == true\n        return true\n    \n    if is_empty(s)\
    \ == false\n        return false\n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if is_empty(s) == false\n        return false\n    \n    if\
    \ is_empty(s) == true\n        return true\n    \n    if is_empty(s) == false\n\
    \        return false\n    \n    if is_empty(s) == true\n        return true\n\
    \    \n    if is_empty(s) == false\n        return false\n    \n    if is_empty(s)\
    \ == true\n        return true\n    \n    if is_empty(s) == false\n        return\
    \ false\n    \n    if is_empty(s) == true\n        return true\n    \n    if is_empty(s)\
    \ == false\n        return false\n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if is_empty(s) == false\n        return false\n    \n    if\
    \ is_empty(s) == true\n        return true\n    \n    if is_empty(s) == false\n\
    \        return false\n    \n    if is_empty(s) == true\n        return true\n\
    \    \n    if is_empty(s) == false\n        return false\n    \n    if is_empty(s)\
    \ == true\n        return true\n    \n    if is_empty(s) == false\n        return\
    \ false\n    \n    if is_empty(s) == true\n        return true\n    \n    if is_empty(s)\
    \ == false\n        return false\n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if is_empty(s) == false\n        return false\n    \n    if\
    \ is_empty(s) == true\n        return true\n    \n    if is_empty(s) == false\n\
    \        return false\n    \n    if is_empty(s) == true\n        return true\n\
    \    \n    if is_empty(s) == false\n        return false\n    \n    if is_empty(s)\
    \ == true\n        return true\n    \n    if is_empty(s) == false\n        return\
    \ false\n    \n    if is_empty(s) == true\n        return true\n    \n    if is_empty(s)\
    \ == false\n        return false\n    \n    if is_empty(s) == true\n        return\
    \ true\n    \n    if is_empty(s) == false\n        return false\n    \n    if\
    \ is_empty(s) == true\n        return true\n    \n    if is_empty(s) == false\n\
    \        return false\n    \n    if is_empty(s) == true\n        return true\n\
    \    \n    if is_empty(s) == false\n        return false\n    \n    if is_empty(s)\
    \ == true\n        return true\n    \n    if is_empty(s) == false\n        return\
    \ false\n    \n    if is_empty(s) == true\n        return true\n    \n    if is_empty(",
  "    if is_empty(s) == true\n        return true\n    else if is_empty(s) == false\n\
    \        return false\n    else if length(s) == 0\n        return true\n    else\
    \ if length(s) == 1\n        return false\n    else if length(s) == 2\n      \
    \  return is_happy(s[1..2])\n    else if length(s) == 3\n        return is_happy(s[1..3])\
    \ && is_happy(s[2..3])\n    else if length(s) == 4\n        return is_happy(s[1..4])\
    \ && is_happy(s[2..4]) && is_happy(s[3..4])\n    else if length(s) == 5\n    \
    \    return is_happy(s[1..5]) && is_happy(s[2..5]) && is_happy(s[3..5]) && is_happy(s[4..5])\n\
    \    else if length(s) == 6\n        return is_happy(s[1..6]) && is_happy(s[2..6])\
    \ && is_happy(s[3..6]) && is_happy(s[4..6]) && is_happy(s[5..6])\n    else if\
    \ length(s) == 7\n        return is_happy(s[1..7]) && is_happy(s[2..7]) && is_happy(s[3..7])\
    \ && is_happy(s[4..7]) && is_happy(s[5..7]) && is_happy(s[6..7])\n    else if\
    \ length(s) == 8\n        return is_happy(s[1..8]) && is_happy(s[2..8]) && is_happy(s[3..8])\
    \ && is_happy(s[4..8]) && is_happy(s[5..8]) && is_happy(s[6..8]) && is_happy(s[7..8])\n\
    \    else if length(s) == 9\n        return is_happy(s[1..9]) && is_happy(s[2..9])\
    \ && is_happy(s[3..9]) && is_happy(s[4..9]) && is_happy(s[5..9]) && is_happy(s[6..9])\
    \ && is_happy(s[7..9]) && is_happy(s[8..9])\n    else if length(s) == 10\n   \
    \     return is_happy(s[1..10]) && is_happy(s[2..10]) && is_happy(s[3..10]) &&\
    \ is_happy(s[4..10]) && is_happy(s[5..10]) && is_happy(s[6..10]) && is_happy(s[7..10])\
    \ && is_happy(s[8..10]) && is_happy(s[9..10])\n    else if length(s) == 11\n \
    \       return is_happy(s[1..11]) && is_happy(s[2..11]) && is_happy(s[3..11])\
    \ && is_happy(s[4..11]) && is_happy(", "    if is_happy(s.length()) then return\
    \ true\n    else if s.length() < 3 then return false\n    else if length(filter(x\
    \ -> x != s[s.length()-1], s.substring(s.length()-2,s.length()))) == 3 then return\
    \ true\n    else return false\nend", "    if is_happy(s,0)\n    else false\nend",
  '    if is_happy(s.length()) == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6))
    == true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) ==
    true && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) ==
    true && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) ==
    true && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) ==
    true && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) ==
    true && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) ==
    true && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) ==
    true && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) ==
    true && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) ==
    true && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) ==
    true && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) ==
    true && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) ==
    true && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) ==
    true && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) ==
    true && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) ==
    true && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102))
    == true && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108))
    == true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_happy(s) == true then return\
    \ true else return false\n</code>\n<|/ a tags=haskell,functional-programming |>\n\
    <| c |>\nThis doesn't work. `is_happy` returns `False` for `\"aa\"`.\n<|/ c |>\n\
    <| c |>\nYes, I missed that case. Thanks for pointing it out. Updated the answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length\
    \ s >= 3 && all (\\c -> c /= head s) (tail s)\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| a dscore=0 |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length\
    \ s >= 3 && all (\\c -> c /= head s) (tail s)\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| a tags=haskell,functional-programming |>\n<code>\nis_happy :: String\
    \ -> Bool\nis_happy s = length s >= 3 && all (\\c -> c /= head s) (tail s)\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nis_happy :: String\
    \ -> Bool\nis_happy s = length s >= 3 && all (\\c -> c /= head s) (tail s)\n</code>\n\
    <|/ a tags=haskell,functional-programming |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length s >= 3 && all (\\\
    c -> c /= head s) (tail s)\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=haskell,functional-programming |>\n<code>\nis_happy\
    \ :: String -> Bool\nis_happy s = length s >= 3 && all (\\c -> ", '    if is_happy(s.length())
    == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) ==
    true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) == true
    && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) == true
    && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) == true
    && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) == true
    && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) == true
    && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) == true
    && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) == true
    && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) == true
    && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) == true
    && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) == true
    && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) == true
    && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) == true
    && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) == true
    && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) == true
    && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) == true
    && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102)) == true
    && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108)) ==
    true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_empty(s) == true\n        return\
    \ true\n    else if length(s) < 3\n        return false\n    else\n        \n\
    \        for i in 0 .. length(s)-3\n            if s[i] == s[i+1] && s[i+1] ==\
    \ s[i+2] && s[i+2] == s[i+3]\n                return false\n            else\n\
    \                return true\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_happy(s::String)", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_empty(s) == true \n    then return true\n   \
    \ else if length(s) < 3 \n    then return false\n    else if length(s) mod 3 !=\
    \ 0 \n    then return false\n    else if length(s) == 3 \n    then return true\n\
    \    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return true\n    else if length(s)\
    \ mod 3 != 0 \n    then return false\n    else if length(s) == 3 \n    then return\
    \ true\n    else if length(s) mod 3 = 0 \n    then return ", "    if is_empty(s)\
    \ == true\n        return true\n    else if length(s) >= 3\n        true\n   \
    \ else if length(s) >= 2\n        false\n    else if length(s) >= 1\n        true\n\
    \    else\n        false\n    end\nend\n</code>\n<|/ a tags=string,julia |>\n\
    <| a dscore=0 |>\n<code>", "    if is_empty(s) == true\n        return true\n\
    \    else if length(s) >= 3\n        true\n    else\n        false\nend", "  \
    \  if is_empty(s) == true \n    then false \n    else if length(s) >= 3 \n   \
    \ then if is_distinct(s[1..3]) == true \n    then true \n    else false \n   \
    \ else false \n    end \nend \n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ checks if a number is even.", "    if is_empty(s) == true\n        return true\n\
    \    else if is_empty(s) == false\n        return false\n    else if length(s)\
    \ == 3\n        return true\n    else if length(s) == 2\n        return false\n\
    \    else\n        return is_happy(substring(s, 2, 3))\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    length(s)\n    \n    Compute the length\
    \ of string s\n    \n    Parameters: \n        s - string\n    \n    Returns:\
    \ \n        length of string s\n\"\"\"", "    if is_happy(s,0)\n    then true\n\
    \    else false\nend", "    if is_happy(s,0)\n    true\n    else \n        false\n\
    \    end\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis doesn't work.\
    \ `is_happy(\"ab\")` returns `true` but `is_happy(\"aba\")` returns `false`.\n\
    <|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| a |>\n<code>", "    if is_empty(s) == true\n     \
    \   return true\n    else if length(s) < 3\n        return false\n    else\n \
    \       forall(is_distinct(s[0..2]), is_distinct(s[2..]))\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert is_happy(\"abcd\") == false\n@assert is_happy(\"\
    aaab\") == false\n@assert is_happy(\"aabb\") == true\n@assert is_happy(\"adb\"\
    ) == true\n@assert is_happy(\"xyy\") == false\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is prime. \nA number is prime if its only\
    \ prime factors are 2 and itself. \nFor example, 2 is prime, since it only has\
    \ two factors: 2 and 1. \n3 is not prime, since it has three factors: 1, 2, and\
    \ 3. \n4 is not prime, since it has four factors: 1, 2, 3, and 4.\n5 is not prime,\
    \ since it has five factors: 1, 2, 3, 4, and 5.\n6 is not prime, since it has\
    \ six factors: 1, 2, 3, 4, 5, and 6.\n7 is not prime, since it has seven factors:\
    \ 1, 2, 3, 4, 5, 6, and 7.\n8 is not prime, since it has eight factors: 1, 2,\
    \ 3, 4, 5, 6, 7, and 8.\n9 is not prime, since it has nine factors: 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9 and 10.\n10 is not prime, since it has ten factors: 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10 and 11.\n11 is not prime, since it has eleven factors: 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12.\n12 is not prime, since it has twelve\
    \ factors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 and 13.\n13 is not prime, since\
    \ it has thirteen factors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 and 14.\n\
    14 is not prime, since it has fourteen factors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14 and 15.\n15 is not prime, since it has fifteen factors: 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 and 16.\n16 is not prime, since\
    \ it has sixteen factors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\
    \ and 17.\n17 is not prime, since it has seventeen factors: 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 and 18.\n18 is not prime, since it has\
    \ eighteen factors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18 and 19.\n19 is not prime, since it has nineteen factors: 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 and 20.\n20 is not prime, since\
    \ it has twenty factors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ", "    \n    if is_happy(s,0)\n\
    \    \n    else \n        \n        if is_happy(s,1)\n        \n        else \n\
    \            \n            if is_happy(s,2)\n            \n            else \n\
    \                \n                if is_happy(s,3)\n                \n      \
    \          else \n                    \n                    if is_happy(s,4)\n\
    \                    \n                    else \n                        \n \
    \                       if is_happy(s,5)\n                        \n         \
    \               else \n                            \n                        \
    \    if is_happy(s,6)\n                            \n                        \
    \    else \n                                \n                               \
    \ if is_happy(s,7)\n                                \n                       \
    \         else \n                                    \n                      \
    \              if is_happy(s,8)\n                                    \n      \
    \                              else \n                                       \
    \ \n                                        if is_happy(s,9)\n               \
    \                         \n                                        else \n  \
    \                                          \n                                \
    \            if is_happy(s,10)\n                                            \n\
    \                                            else \n                         \
    \                       \n                                                if is_happy(s,11)\n\
    \                                                \n                          \
    \                      else \n                                               \
    \     \n                                                    if is_happy(s,12)\n\
    \                                                    \n                      \
    \                              else \n                                       \
    \                 \n                                                        if\
    \ is_happy(s,13)\n                                                        \n \
    \                                                       else \n              \
    \                                              \n                            \
    \                                if is_happy(s,14)\n                         \
    \                                   \n                                       \
    \                     else \n                                                \
    \                \n                                                          \
    \      if is_happy(s,15)\n                                                   \
    \             \n                                                             \
    \   else \n                                                                  \
    \  \n                                                                    if is_happy(s,16)\n\
    \                                                                    \n      \
    \                                                              else \n       \
    \                                                                 \n         \
    \                                                                   if is_happy(s,17)\n\
    \                                                                            \n\
    \                                                                            else\
    \ \n                                                                         \
    \       \n                                                                   \
    \             if is_happy(s,18)\n                                            \
    \                                    \n                                      \
    \                                          else \n                           \
    \                                                         \n                 \
    \                                                                   if is_happy(s,19)\n\
    \                                                                            \
    \        \n                                                                  \
    \                  else \n                                                   \
    \                                     \n                                     \
    \                                                   if is_happy(s,20)\n      \
    \                                                                            \
    \      \n                                                                    \
    \                    else \n                                                 \
    \                                           \n                               \
    \                                                             if is_happy(s,21)\n\
    \                                                                            \
    \                \n                                                          \
    \                                  else \n                                   \
    \                                                             \n             \
    \                                                                            \
    \       if is_happy(s,22)\n                                                  \
    \                                              \n                            \
    \                                                                    else \n \
    \                                                                            \
    \                       \n                                                   \
    \                                                     if is_happy(s,23)\n    \
    \                                                                            \
    \                        \n                                                  \
    \                                                      else \n               \
    \                                                                            \
    \                 \n                                                         \
    \                                                   if is_happy(s,24)\n      \
    \                                                                            \
    \                          \n                                                \
    \                                                            else \n         \
    \                                                                            \
    \                           \n                                               \
    \                                                                 if is_happy(s,25)\n\
    \                                                                            \
    \                                    \n                                      \
    \                                                                          else\
    \ \n                                                                         \
    \                                           \n                               \
    \                                                                            \
    \         if is_happy(s,26)\n                                                \
    \                                                                    \n      \
    \                                                                            \
    \                                  else \n                                   \
    \                                                                            \
    \         \n                                                                 \
    \                                                       if is_happy(s,27)\n  \
    \                                                                            \
    \                                          \n                                \
    \                                                                            \
    \            else \n                                                         \
    \                                                                   \n       \
    \                                                                            \
    \                                                         if is_happy(s,28)\n\
    \                                                                            \
    \                                                \n                          \
    \                                                                            \
    \                      else \n                                               \
    \                                                                            \
    \                     \n                                                     \
    \                                                                            \
    \               if is_happy(s,29)\n                                          \
    \                                                                            \
    \                          \n                                                \
    \                                                                            \
    \                    else \n                                                 \
    \                                                                            \
    \       \n                                                                   \
    \                                                                            \
    \     if is_happy(s,30)\n                                                    \
    \                                                                            \
    \                    \n                                                      \
    \                                                                            \
    \                  else \n                                                   \
    \                                                                            \
    \         \n                                                                ",
  "    if is_empty(s):\n        return true\n    else if length(s) < 3 || length(s)\
    \ > length(unique(s) - \"a\")\n        return false\n    else\n        return\
    \ is_happy(substring(s, 1, length(s) - 1)) && is_happy(substring(s, 2, length(s)\
    \ - 1)) && is_happy(substring(s, 3, length(s) - 1))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if its only divisors are 1 and itself.\nFor example:\n>>>\
    \ is_prime(9)\ntrue\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\ntrue\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\ntrue\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\ntrue\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\ntrue\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\ntrue\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\ntrue\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)\ntrue\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\n\
    false\n>>> is_prime(43)\ntrue\n>>> is_prime(44)\nfalse\n>>> is_prime(45)\ntrue\n\
    >>> is_prime(46)\nfalse", "    if is_happy(s,0)\n    then true\n    else false\n\
    end\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"", "    if is_empty(s) == true \n    then\
    \ return true \n    else if length(s) < 3 \n    then return false \n    else if\
    \ length(s) == 3 \n    then return is_distinct(s[1..2]) == true && is_distinct(s[2..3])\
    \ == true && is_distinct(s[3..4]) == true \n    else return false \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_distinct(s)\n    Count\
    \ the number of distinct characters in s\n\"\"\"", "    if is_empty(s) == true\n\
    \        return true\n    else if length(s) < 3\n        return false\n    else\n\
    \        \n        \n        for i in 1:length(s)\n            if s[i] == s[i+1]\n\
    \                \n            else\n                return false\n        end\n\
    \        return true\n    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that checks if a number is even or odd.", "    if is_happy(s.length()) == true\
    \ && is_happy(s.chars().distinct() == true)\n    then true\n    else false\nend\n\
    </cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime or not.\
    \ \nA number is prime if its only prime factors are 2 and itself. \nFor example,\
    \ 2 is prime and 3 is not. \nWrite a function that checks if a number is prime\
    \ or not. \nA number is prime if its only prime factors are 2 and itself. \nFor\
    \ example, 2 is prime and 3 is not. \nWrite a function that checks if a number\
    \ is prime or not. \nA number is prime if its only prime factors are 2 and itself.\
    \ \nFor example, 2 is prime and 3 is not. \nWrite a function that checks if a\
    \ number is prime or not. \nA number is prime if its only prime factors are 2\
    \ and itself. \nFor example, 2 is prime and 3 is not. \nWrite a function that\
    \ checks if a number is prime or not. \nA number is prime if its only prime factors\
    \ are 2 and itself. \nFor example, 2 is prime and 3 is not. \nWrite a function\
    \ that checks if a number is prime or not. \nA number is prime if its only prime\
    \ factors are 2 and itself. \nFor example, 2 is prime and 3 is not. \nWrite a\
    \ function that checks if a number is prime or not. \nA number is prime if its\
    \ only prime factors are 2 and itself. \nFor example, 2 is prime and 3 is not.\
    \ \nWrite a function that checks if a number is prime or not. \nA number is prime\
    \ if its only prime factors are 2 and itself. \nFor example, 2 is prime and 3\
    \ is not. \nWrite a function that checks if a number is prime or not. \nA number\
    \ is prime if its only prime factors are 2 and itself. \nFor example, 2 is prime\
    \ and 3 is not. \nWrite a function that checks if a number is prime or not. \n\
    A number is prime if its only prime factors are 2 and itself. \nFor example, 2\
    \ is prime and 3 is not. \nWrite a function that checks if a number is prime or\
    \ not. \nA number is prime if its only prime factors are 2 and itself. \nFor example,\
    \ 2 is prime and 3 is not. \nWrite a function that check", "    if is_happy(s)\
    \ == true then \n        return true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_unique_chars(s)\n    Count the number\
    \ of unique characters in s.\n    \n    Example 1:\n    >>> count_unique_chars(\"\
    abcabc\")\n    3\n    \n    Example 2:\n    >>> count_unique_chars(\"asdfghjkl\"\
    )\n    4\n    \n    Example 3:\n    >>> count_unique_chars(\"a\")\n    1\n   \
    \ \n    Example 4:\n    >>> count_unique_chars(\"\")\n    0\n    \n    Constraints:\n\
    \    0 <= len(s) <= 10^5\n    s contains only lowercase English letters.\n\"\"\
    \"", "    if is_happy(s.length()) == true && is_happy(s.substring(0,3)) && is_happy(s.substring(3,6))\
    \ && is_happy(s.substring(6,9)) && is_happy(s.substring(9,12)) && is_happy(s.substring(12,15))\
    \ && is_happy(s.substring(15,18)) && is_happy(s.substring(18,21)) \n    then true\n\
    \    else false\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ number of times a substring appears in a string.\nFor example, if the string\
    \ s = \"aabbccc\", the function should return 3.\nIf the string s = \"aabbcc\"\
    , the function should return 0.\nIf the string s = \"aabbc\", the function should\
    \ return 1.\nIf the string s = \"aabb\", the function should return 0.\nIf the\
    \ string s = \"abc\", the function should return 0.\nIf the string s = \"\", the\
    \ function should return 0.", "    if is_empty(s):\n        return true\n    else\
    \ if length(s)<3 || length(s)>length(s)-3\n        return false\n    else if has_distinct_letters(s)\n\
    \        return true\n    else\n        return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    has_distinct_letters(s::String)\n    Check if string has distinct\
    \ letters.\n    \n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\
    \"\"", "    if is_empty(s):\n        return true\n    \n    if length(s) < 3 ||\
    \ length(s) > length(s) || length(s) mod 3 != 0\n        return false\n    \n\
    \    \n    for i in 1:length(s):\n        if s[i] == s[i+1] && s[i] == s[i+2]\
    \ && s[i] == s[i+3]\n            return false\n    \n    return true\nend", " \
    \   if is_happy(s,0)\n    else false\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\n<code>", '    if is_happy(s.length()) == true && is_happy(s.substring(0,3))
    == true && is_happy(s.substring(3,6)) == true && is_happy(s.substring(6,9)) ==
    true && is_happy(s.substring(9,12)) == true && is_happy(s.substring(12,15)) ==
    true && is_happy(s.substring(15,18)) == true && is_happy(s.substring(18,21)) ==
    true && is_happy(s.substring(21,24)) == true && is_happy(s.substring(24,27)) ==
    true && is_happy(s.substring(27,30)) == true && is_happy(s.substring(30,33)) ==
    true && is_happy(s.substring(33,36)) == true && is_happy(s.substring(36,39)) ==
    true && is_happy(s.substring(39,42)) == true && is_happy(s.substring(42,45)) ==
    true && is_happy(s.substring(45,48)) == true && is_happy(s.substring(48,51)) ==
    true && is_happy(s.substring(51,54)) == true && is_happy(s.substring(54,57)) ==
    true && is_happy(s.substring(57,60)) == true && is_happy(s.substring(60,63)) ==
    true && is_happy(s.substring(63,66)) == true && is_happy(s.substring(66,69)) ==
    true && is_happy(s.substring(69,72)) == true && is_happy(s.substring(72,75)) ==
    true && is_happy(s.substring(75,78)) == true && is_happy(s.substring(78,81)) ==
    true && is_happy(s.substring(81,84)) == true && is_happy(s.substring(84,87)) ==
    true && is_happy(s.substring(87,90)) == true && is_happy(s.substring(90,93)) ==
    true && is_happy(s.substring(93,96)) == true && is_happy(s.substring(96,99)) ==
    true && is_happy(s.substring(99,102)) == true && is_happy(s.substring(102,105))
    == true && is_happy(s.substring(105,108)) == true && is_happy(s.substring(108,111))
    == true && is_happy(s.substring(111,114)) == true && is_happy(s.substring(114,117))
    == true && is_happy(s.substring(117,120)) == true && is_happy(s.substring(120,123))
    == true && is_happy(s.substring(123,126)) == true && is_happy(s.substring(126,129))
    == true && is_happy(s.substring(129,132)) == true && is_happy(s.substring(132,',
  "    if is_happy(s,0)\n    true\n    else false\nend\n</code>\n<|/ a tags=recursion,julia,string\
    \ |>\n<| c |>\nThis doesn't work. `is_happy(\"ab\")` returns `true` but `is_happy(\"\
    aba\")` returns `false`.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test\
    \ case\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution that uses no mutable variables:\n\
    <code>", "    if is_happy(s.length()) == true && is_distinct_3_consecutive(s)\
    \ == true\n    then true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is divisible by another number. \nFor example,\
    \ a number x is divisible by y if and only if x % y == 0.\nWrite a function that\
    \ checks if a number is divisible by another number. \nFor example, a number x\
    \ is divisible by y if and only if x % y == 0.\nFor example:\n>>> is_divisible_by_2(3)\n\
    false\n>>> is_divisible_by_2(3)\ntrue\n>>> is_divisible_by_2(4)\ntrue\n>>> is_divisible_by_2(5)\n\
    false\n>>> is_divisible_by_2(6)\ntrue\n>>> is_divisible_by_2(7)\ntrue\n>>> is_divisible_by_2(8)\n\
    true\n>>> is_divisible_by_2(9)\ntrue\n>>> is_divisible_by_2(10)\ntrue\n>>> is_divisible_by_2(11)\n\
    true\n>>> is_divisible_by_2(12)\ntrue\n>>> is_divisible_by_2(13)\ntrue\n>>> is_divisible_by_2(14)\n\
    true\n>>> is_divisible_by_2(15)\ntrue\n>>> is_divisible_by_2(16)\ntrue\n>>> is_divisible_by_2(17)\n\
    true\n>>> is_divisible_by_2(18)\ntrue\n>>> is_divisible_by_2(19)\ntrue\n>>> is_divisible_by_2(20)\n\
    true\n>>> is_divisible_by_2(21)\ntrue\n>>> is_divisible_by_2(22)\ntrue\n>>> is_divisible_by_2(23)\n\
    true\n>>> is_divisible_by_2(24)\ntrue\n>>> is_divisible_by_2(25)\ntrue\n>>> is_divisible_by_2(26)\n\
    true\n>>> is_divisible_by_2(27)\ntrue\n>>> is_divisible_by_2(28)\ntrue\n>>> is_divisible_by_2(29)\n\
    true\n>>> is_divisible_by_2(30)\ntrue\n>>> is_divisible_by_2(31)\ntrue\n>>> is_divisible_by_2(32)",
  "    if is_happy(s.length()) then true\n    else false\nend", '    if is_happy(s.length())
    == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) ==
    true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) == true
    && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) == true
    && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) == true
    && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) == true
    && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) == true
    && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) == true
    && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) == true
    && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) == true
    && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) == true
    && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) == true
    && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) == true
    && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) == true
    && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) == true
    && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) == true
    && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) == true
    && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102)) == true
    && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108)) ==
    true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', '    if is_happy(s.length()) == true &&
    is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) == true && is_happy(s.substring(6,9))
    == true && is_happy(s.substring(9,12)) == true && is_happy(s.substring(12,15))
    == true && is_happy(s.substring(15,18)) == true && is_happy(s.substring(18,21))
    == true && is_happy(s.substring(21,24)) == true && is_happy(s.substring(24,27))
    == true && is_happy(s.substring(27,30)) == true && is_happy(s.substring(30,33))
    == true && is_happy(s.substring(33,36)) == true && is_happy(s.substring(36,39))
    == true && is_happy(s.substring(39,42)) == true && is_happy(s.substring(42,45))
    == true && is_happy(s.substring(45,48)) == true && is_happy(s.substring(48,51))
    == true && is_happy(s.substring(51,54)) == true && is_happy(s.substring(54,57))
    == true && is_happy(s.substring(57,60)) == true && is_happy(s.substring(60,63))
    == true && is_happy(s.substring(63,66)) == true && is_happy(s.substring(66,69))
    == true && is_happy(s.substring(69,72)) == true && is_happy(s.substring(72,75))
    == true && is_happy(s.substring(75,78)) == true && is_happy(s.substring(78,81))
    == true && is_happy(s.substring(81,84)) == true && is_happy(s.substring(84,87))
    == true && is_happy(s.substring(87,90)) == true && is_happy(s.substring(90,93))
    == true && is_happy(s.substring(93,96)) == true && is_happy(s.substring(96,99))
    == true && is_happy(s.substring(99,102)) == true && is_happy(s.substring(102,105))
    == true && is_happy(s.substring(105,108)) == true && is_happy(s.substring(108,111))
    == true && is_happy(s.substring(111,114)) == true && is_happy(s.substring(114,117))
    == true && is_happy(s.substring(117,120)) == true && is_happy(s.substring(120,123))
    == true && is_happy(s.substring(123,126)) == true && is_happy(s.substring(126,129))
    == true && is_happy(s.substring(129,132)) == true && is_happy(s.substring(132,',
  '    if is_happy(s.length()) == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6))
    == true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) ==
    true && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) ==
    true && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) ==
    true && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) ==
    true && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) ==
    true && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) ==
    true && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) ==
    true && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) ==
    true && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) ==
    true && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) ==
    true && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) ==
    true && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) ==
    true && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) ==
    true && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) ==
    true && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) ==
    true && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102))
    == true && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108))
    == true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_happy(s,0)\n    true\n    else\n\
    \        false\n    end\nend", "    if is_empty(s) == true\n        return true\n\
    \    else if length(s) < 3\n        return false\n    else\n        forall i in\
    \ 1..length(s) do \n            if s[i] == s[i-1] && s[i] != s[i+1]\n        \
    \        return false\n        end\n        return true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_unique_chars(s)\n    Count the number\
    \ of unique characters in s.\n    \n    Arguments\n    \n    - `s`: a string\n\
    \    \n    Returns\n    \n    - `count`: an integer\n    \n    Details\n    \n\
    \    - `s` will be converted to a character array and all unique characters will\
    \ be counted.\n    - `count` will be initialized to 0.\n    - `s` will be converted\
    \ to a character array and all unique characters will be counted.\n    - `count`\
    \ will be initialized to 0.\n    - `s` will be converted to a character array\
    \ and all unique characters will be counted.\n    - `count` will be initialized\
    \ to 0.\n    - `s` will be converted to a character array and all unique characters\
    \ will be counted.\n    - `count` will be initialized to 0.\n    - `s` will be\
    \ converted to a character array and all unique characters will be counted.\n\
    \    - `count` will be initialized to 0.\n    - `s` will be converted to a character\
    \ array and all unique characters will be counted.\n    - `count` will be initialized\
    \ to 0.\n    - `s` will be converted to a character array and all unique characters\
    \ will be counted.\n    - `count` will be initialized to 0.\n    - `s` will be\
    \ converted to a character array and all unique characters will be counted.\n\
    \    - `count` will be initialized to 0.\n    - `s` will be converted to a character\
    \ array and all unique characters will be counted.\n    - `count` will be initialized\
    \ to 0.\n    - `s` will be converted to a character array and all unique characters\
    \ will be counted.\n    - `count` will be initialized to 0.\n    - `s` will be\
    \ converted to a character array and all unique characters will be counted.\n\
    \    - `count` will be initialized to 0.\n    - `s` will be converted to a character\
    \ array and all unique characters will be counted.\n    - `count` will be initialized\
    \ to 0.\n    - `s` will be converted to a character array and all unique characters\
    \ will be counted.\n    - `count` will be initialized to 0.\n    - `s` will be\
    \ converted to a character array and all unique characters will be counted.\n\
    \    - `count` will be initialized to 0.\n    - `s` will be converted to a character\
    \ array and all unique characters will be counted.\n    - `count` will be initialized\
    \ to 0.\n    - `s` will be converted to a character array and all unique characters\
    \ will be counted.\n    - `count` will be initialized to 0.", "    if is_happy(s)\
    \ == true\n    then true\n    else false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_unique_letters(s)\n    Count the number of unique letters in\
    \ s.\n    \n    Input : \n        s - string\n    \n    Output : \n        count\
    \ - number of unique letters in s\n\"\"\"", "    if is_empty(s) == true then return\
    \ true\n    if length(s)<3 then return false\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if is_empty(s) ==\
    \ true\n        return true\n    else if length(s) >= 3\n        true\n    else\n\
    \        false\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work. `is_happy(\"\
    ab\")` returns `true`, but `is_happy(\"aba\")` returns `false`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code. Thanks for pointing out\n<|/ c |>\n<| c |>\n`is_happy(\"\
    ab\")` returns `true`, but `is_happy(\"aba\")` returns `false`\n<|/ c |>\n<| c\
    \ |>\nI fixed the code. Thanks for pointing out\n<|/ c |>\n<| a |>\n<code>\ndef\
    \ is_happy(s):\n    if len(s) <= 3:\n        return True\n    else:\n        count\
    \ = 0\n        for i in range(len(s)):\n            if s[i] == s[i+1]:\n     \
    \           count += 1\n            else:\n                count = 0\n       \
    \     if count == 3:\n                return True\n        return False\n</code>\n\
    <|/ a tags=string,haskell,algorithm dscore=0 |>\n<| c |>\nThis code doesn't work.\
    \ `is_happy(\"ab\")` returns `true`, but `is_happy(\"aba\")` returns `false`.\n\
    <|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out\n<|/ c |>\n<| a tags=string,haskell,algorithm\
    \ |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length s >= 3 && all (==)\
    \ $ tails s\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't work. `is_happy(\"\
    ab\")` returns `true`, but `is_happy(\"aba\")` returns `false`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code. Thanks for pointing out\n<|/ c |>\n<| a tags=string,haskell,algorithm\
    \ |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length s >= 3 && all (==)\
    \ $ tails s\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code doesn't work. `is_happy(\"\
    ab\")` returns `true`, but `is_happy(\"aba\")` returns `false`.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nis_happy :: String -> Bool\nis_happy s = length s >=\
    \ 3 && all (==) $ tails s\n</code>\n<|/ a tags=string,haskell,algorithm |>\n<|\
    \ c |>\nThis code doesn't ", "    if is_empty(s) == true \n    then false \n \
    \   else if length(s) < 3 \n    then false \n    else if is_distinct(s[1..3])\
    \ == true \n    then true \n    else if is_distinct(s[2..4]) == true \n    then\
    \ true \n    else if is_distinct(s[3..5]) == true \n    then true \n    else if\
    \ is_distinct(s[4..6]) == true \n    then true \n    else if is_distinct(s[5..7])\
    \ == true \n    then true \n    else if is_distinct(s[6..8]) == true \n    then\
    \ true \n    else if is_distinct(s[7..9]) == true \n    then true \n    else if\
    \ is_distinct(s[8..10]) == true \n    then true \n    else if is_distinct(s[9..11])\
    \ == true \n    then true \n    else if is_distinct(s[10..12]) == true \n    then\
    \ true \n    else if is_distinct(s[11..13]) == true \n    then true \n    else\
    \ if is_distinct(s[12..14]) == true \n    then true \n    else if is_distinct(s[13..15])\
    \ == true \n    then true \n    else if is_distinct(s[14..16]) == true \n    then\
    \ true \n    else if is_distinct(s[15..17]) == true \n    then true \n    else\
    \ if is_distinct(s[16..18]) == true \n    then true \n    else if is_distinct(s[17..19])\
    \ == true \n    then true \n    else if is_distinct(s[18..20]) == true \n    then\
    \ true \n    else if is_distinct(s[19..21]) == true \n    then true \n    else\
    \ if is_distinct(s[20..22]) == true \n    then true \n    else if is_distinct(s[21]..s[22])\
    \ == true \n    then true \n    else if is_distinct(s[23..24]) == true \n    then\
    \ true \n    else if is_distinct(s[24..25]) == true \n    then true \n    else\
    \ if is_distinct(s[25..26]) == true \n    then true \n    else if is_distinct(s[26..27])\
    \ == true \n    then true \n    else if is_distinct(s[27..28]) == true \n    then\
    \ true \n    else if is_distinct(s[28..29]) == true \n    then true \n    else\
    \ if is_distinct(s[29..30]) == true ", "    if is_happy(s,3)==true\n    then true\n\
    \    else false\nend\n</code>\n<|/ a tags=recursion,string,julia |>\n<| a tags=recursion,string,julia\
    \ |>\n<code>", "    if is_happy(s,0)\n    else \n        false\n    end\nend",
  "    if is_happy(s,0)\n    then true\n    else false\nend\n</code>\n<|/ a tags=recursion,julia\
    \ |>\n<| c |>\nThis does not work. `is_happy(\"ab\")` returns `true` instead of\
    \ `false`\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/\
    \ c |>\n<| a tags=recursion,julia |>\n<code>", "    if is_happy(s.length()) ==\
    \ true && is_happy(s.chars().distinct() == true) \n    then true\n    else false\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of vowels contained in the string.\nThe vowels\
    \ are \"a\", \"e\", \"i\", \"o\", and \"u\".\nFor example:\n>>> count_vowels(\"\
    abracadabra\")\n2\n>>> count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\"\
    )\n1\n>>> count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n\
    0\n>>> count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n\
    >>> count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abracadabra\")\n0\n>>>\
    \ count_vowels(\"abracadabra\")\n0\n>>> count_vowels(\"abrac", "    if is_empty(s)\
    \ == true\n        return true\n    else if length(s) < 3\n        return false\n\
    \    else\n        \n        for i in 1..length(s)\n            if s[i] == s[i-1]\n\
    \                return false\n            else\n                return true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_unique_chars(s)\n\
    \    Count the number of unique characters in s.\n    \n    Input : String s\n\
    \    Output : Int count\n    \n    Constraints: s contains only lowercase English\
    \ letters.\n    \n    Example:\n    >>> count_unique_chars(\"abcabc\")\n    3\n\
    \    >>> count_unique_chars(\"asdfghjkl\")\n    26\n    >>> count_unique_chars(\"\
    z\")\n    0\n    >>> count_unique_chars(\"\")\n    0\n    \"\"\"", "    if is_happy(s,3)\n\
    \    else false\nend", "    if is_happy(s,0)\n    then true\n    else false\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_happy(\"ab\"\
    )` returns `true` but `is_happy(\"aba\")` returns `false`.\n<|/ c |>\n<| c |>\n\
    I see what you mean. Thanks for pointing that out. I've edited my answer.\n<|/\
    \ c |>\n<| a tags=recursion,string,julia |>\n<code>", "    if is_empty(s) == true\n\
    \        return true\n    else if length(s) < 3\n        return false\n    else\n\
    \        forall i::Int from 0 to length(s) do\n            if s[i] != s[i+1]\n\
    \                return false\n        end\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    count_happy_substrings(s)\n  \
    \  Count the number of happy substrings in s.\n    \n    Time complexity: O(n^2)\n\
    \    Space complexity: O(n)\n\"\"\"", "    if is_happy(s.length()) == true &&\
    \ is_happy(s.chars().distinct) == true\n    then true\n    else false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_happy(a)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(aa)\n</cell>\n<code language=julia-1.5>\nis_happy(abcd)\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(aabb)\n</cell>\n<code language=julia-1.5>\nis_happy(adb)\n\
    </cell>\n<code language=julia-1.5>\nis_happy(xyy)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string.\nFor example, if the input string is \"abc\", the function should return\
    \ 3.", "    if is_happy(s,0)\n    true\n    else false\nend", "    if is_happy(s,0)\n\
    \    else false\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ `is_happy(\"a\")` returns `true` but `is_happy(\"aa\")` returns `false`.\n<|/\
    \ c |>\n<| c |>\nI fixed the code. Thanks for pointing out. :)\n<|/ c |>\n<| a\
    \ tags=recursion,string,julia |>\n<code>", "    if is_empty(s) == true\n     \
    \   return true\n    else if length(s) < 3\n        return false\n    else\n \
    \       local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n\
    \        local l::Int = 0\n        local m::Int = 0\n        local n::Int = 0\n\
    \        local o::Int = 0\n        local p::Int = 0\n        local q::Int = 0\n\
    \        local r::Int = 0\n        local s::Int = 0\n        local t::Int = 0\n\
    \        local u::Int = 0\n        local v::Int = 0\n        local w::Int = 0\n\
    \        local x::Int = 0\n        local y::Int = 0\n        local z::Int = 0\n\
    \        local a::Int = 0\n        local b::Int = 0\n        local c::Int = 0\n\
    \        local d::Int = 0\n        local e::Int = 0\n        local f::Int = 0\n\
    \        local g::Int = 0\n        local h::Int = 0\n        local i::Int = 0\n\
    \        local j::Int = 0\n        local k::Int = 0\n        local l::Int = 0\n\
    \        local m::Int = 0\n        local n::Int = 0\n        local o::Int = 0\n\
    \        local p::Int = 0\n        local q::Int = 0\n        local r::Int = 0\n\
    \        local s::Int = 0\n        local t::Int = 0\n        local u::Int = 0\n\
    \        local v::Int = 0\n        local w::Int = 0\n        local x::Int = 0\n\
    \        local y::Int = 0\n        local z::Int = 0\n        local a::Int = 0\n\
    \        local b::Int = 0\n        local c::Int = 0\n        local d::Int = 0\n\
    \        local e::Int = 0\n        local f::Int = 0\n        local g::Int = 0\n\
    \        local h::Int = 0\n        local i::Int = 0\n        local j::Int = 0\n\
    \        local k::Int = 0\n        local l::Int = 0\n        local m::Int = 0\n\
    \        local n::Int = 0\n        local o::Int = 0\n        local p::Int = 0\n\
    \        local q::Int = 0\n        local r::Int = 0\n        local s::Int = 0\n\
    \        local t::Int = 0\n        local u::Int = 0\n        local v::Int = 0\n\
    \        local w::Int = 0\n        local x::Int = 0\n        local y::Int = 0\n\
    \        local z::Int = 0\n        local a::Int = 0\n", "    if is_empty(s) ==\
    \ true\n        return true\n    else if is_empty(s) == false\n        return\
    \ false\n    else if length(s) == 3\n        return true\n    else\n        return\
    \ false\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThe `is_happy` function can\
    \ be simplified to: `is_happy(s::String)::Bool = length(s) >= 3 && all(x -> !haskey(s,\
    \ x), collect(1:3, 3:end))`\n<|/ c |>\n<| a tags=julia |>\n<code>", "    if is_empty(s)\
    \ == true\n        return true\n    else if length(s) < 3\n        return false\n\
    \    else\n        \n        for i in 1:length(s)\n            if s[i] != s[i+1]\n\
    \                return false\n        end\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is even or odd.",
  "    if is_empty(s) == true\n        return true\n    else if is_empty(s) == false\n\
    \        return false\n    else if length(s) == 3\n        return true\n    else\
    \ if length(s) != 3\n        return false\n    else if distinct(s[1..2]) == true\
    \ && distinct(s[2..3]) == true && distinct(s[3..4]) == true\n        return true\n\
    \    else if distinct(s[1..2]) == true && distinct(s[2..3]) == true && distinct(s[3..4])\
    \ == true\n        return false\n    else if distinct(s[1..2]) == true && distinct(s[2..3])\
    \ == true && distinct(s[3..4]) == true\n        return true\n    else if distinct(s[1..2])\
    \ == true && distinct(s[2..3]) == true && distinct(s[3..4]) == true\n        return\
    \ false\n    else if distinct(s[1..2]) == true && distinct(s[2..3]) == true &&\
    \ distinct(s[3..4]) == true\n        return true\n    else if distinct(s[1..2])\
    \ == true && distinct(s[2..3]) == true && distinct(s[3..4]) == true\n        return\
    \ false\n    else if distinct(s[1..2]) == true && distinct(s[2..3]) == true &&\
    \ distinct(s[3..4]) == true\n        return true\n    else if distinct(s[1..2])\
    \ == true && distinct(s[2..3]) == true && distinct(s[3..4]) == true\n        return\
    \ false\n    else if distinct(s[1..2]) == true && distinct(s[2..3]) == true &&\
    \ distinct(s[3..4]) == true\n        return true\n    else if distinct(s[1..2])\
    \ == true && distinct(s[2..3]) == true && distinct(s[3..4]) == true\n        return\
    \ false\n    else if distinct(s[1..2]) == true && distinct(s[2..3]) == true &&\
    \ distinct(s[3..4]) == true\n        return true\n    else if distinct(s[1..2])\
    \ == true && distinct(s[2..3]) == true && distinct(s[3..4]) == true\n        return\
    \ false\n    else if distinct(s[1..2]) == true && distinct(s[2..3]) == true &&\
    \ distinct(s[3..4]) == true\n        return true\n    else if distinct(s[1..2])\
    \ == true && distinct(s[2..3]) == true && distinct(s[3..4]) == true\n        return\
    \ false\n    else if distinct(s[1..2]) == true && distinct(s[2..3]) == true &&\
    \ distinct(s[3..", '    if is_happy(s.length()) == true && is_happy(s.substring(0,3))
    == true && is_happy(s.substring(3,6)) == true && is_happy(s.substring(6,9)) ==
    true && is_happy(s.substring(9,12)) == true && is_happy(s.substring(12,15)) ==
    true && is_happy(s.substring(15,18)) == true && is_happy(s.substring(18,21)) ==
    true && is_happy(s.substring(21,24)) == true && is_happy(s.substring(24,27)) ==
    true && is_happy(s.substring(27,30)) == true && is_happy(s.substring(30,33)) ==
    true && is_happy(s.substring(33,36)) == true && is_happy(s.substring(36,39)) ==
    true && is_happy(s.substring(39,42)) == true && is_happy(s.substring(42,45)) ==
    true && is_happy(s.substring(45,48)) == true && is_happy(s.substring(48,51)) ==
    true && is_happy(s.substring(51,54)) == true && is_happy(s.substring(54,57)) ==
    true && is_happy(s.substring(57,60)) == true && is_happy(s.substring(60,63)) ==
    true && is_happy(s.substring(63,66)) == true && is_happy(s.substring(66,69)) ==
    true && is_happy(s.substring(69,72)) == true && is_happy(s.substring(72,75)) ==
    true && is_happy(s.substring(75,78)) == true && is_happy(s.substring(78,81)) ==
    true && is_happy(s.substring(81,84)) == true && is_happy(s.substring(84,87)) ==
    true && is_happy(s.substring(87,90)) == true && is_happy(s.substring(90,93)) ==
    true && is_happy(s.substring(93,96)) == true && is_happy(s.substring(96,99)) ==
    true && is_happy(s.substring(99,102)) == true && is_happy(s.substring(102,105))
    == true && is_happy(s.substring(105,108)) == true && is_happy(s.substring(108,111))
    == true && is_happy(s.substring(111,114)) == true && is_happy(s.substring(114,117))
    == true && is_happy(s.substring(117,120)) == true && is_happy(s.substring(120,123))
    == true && is_happy(s.substring(123,126)) == true && is_happy(s.substring(126,129))
    == true && is_happy(s.substring(129,132)) == true && is_happy(s.substring(132,',
  "    if is_happy(s.length()) then return true\n    else if s.length() < 3 then return\
    \ false\n    else if s.substring(0,3) != s.substring(3,6) then return false\n\
    \    else if s.substring(0,3) == s.substring(3,6) then return false\n    else\
    \ if s.substring(0,3) == s.substring(6,9) then return false\n    else if s.substring(0,3)\
    \ == s.substring(9,12) then return false\n    else if s.substring(0,3) == s.substring(12,15)\
    \ then return false\n    else if s.substring(0,3) == s.substring(15,18) then return\
    \ false\n    else if s.substring(0,3) == s.substring(18,21) then return false\n\
    \    else if s.substring(0,3) == s.substring(21,24) then return false\n    else\
    \ if s.substring(0,3) == s.substring(24,27) then return false\n    else if s.substring(0,3)\
    \ == s.substring(27,30) then return false\n    else if s.substring(0,3) == s.substring(30,33)\
    \ then return false\n    else if s.substring(0,3) == s.substring(33,36) then return\
    \ false\n    else if s.substring(0,3) == s.substring(36,39) then return false\n\
    \    else if s.substring(0,3) == s.substring(39,42) then return false\n    else\
    \ if s.substring(0,3) == s.substring(42,45) then return false\n    else if s.substring(0,3)\
    \ == s.substring(45,48) then return false\n    else if s.substring(0,3) == s.substring(48,51)\
    \ then return false\n    else if s.substring(0,3) == s.substring(51,54) then return\
    \ false\n    else if s.substring(0,3) == s.substring(54,57) then return false\n\
    \    else if s.substring(0,3) == s.substring(57,60) then return false\n    else\
    \ if s.substring(0,3) == s.substring(60,63) then return false\n    else if s.substring(0,3)\
    \ == s.substring(63,66) then return false\n    else if s.substring(0,3) == s.substring(66,69)\
    \ then return false\n    else if s.substring(0,3) == s.substring(69,72) then return\
    \ false\n    else if s.substring(0,3) == s.substring(72,75) then return false\n\
    \    else if s.substring(0,3) == s.substring(75,78) then return false\n    else\
    \ if s.substring(0,3) == s.substring(78,81) then return false\n    else if s.substring(0,3)\
    \ == s.substring(81,84) then return false\n    else if s.", "    if is_happy(s,0)\n\
    \    else \n        false\nend\n</cell>\n<code language=julia-1.4>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string. \nWrite a function\
    \ that takes a string and returns the number of vowels in the string. \nWrite\
    \ a function that takes a string and returns the number of consonants in the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are vowels. \nWrite a function that takes a\
    \ string and returns the number of characters in the string that are consonants.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are words. \nWrite a function that takes a string and returns\
    \ the number of characters in the string that are sentences. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all vowels. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all consonants. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ words. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are all sentences. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all vowels and consonants.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are all words and sentences. \nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all vowels,\
    \ consonants, and words. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are all vowels, consonants, words, and\
    \ sentences. \nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all vowels, consonants, words, and sentences.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are all vowels, consonants, words, and sentences. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all vowels, consonants, words, and sentences. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ vowels, consonants, words, and sentences. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all vowels, conson",
  "    if is_happy(s,0)\n    else false\nend", "    if is_empty(s) == true\n     \
    \   return true\n    else if length(s) < 3\n        return false\n    else if\
    \ length(s) == 3\n        return is_distinct(s[1..3])\n    else if length(s) ==\
    \ 2\n        return is_distinct(s[1..2])\n    else if length(s) == 1\n       \
    \ return is_distinct(s)\n    else\n        return false\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if is_empty(s) == true\n  \
    \      return true\n    else if length(s) == 3\n        return is_distinct(s[1..3])\n\
    \    else\n        return false\nend\n</cell>\n<code language=julia-1.4>\nis_happy(\"\
    a\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is prime. \nA prime number is a natural number greater than 1 that\
    \ has no positive divisors other than 1 and itself.\nFor example:\n>>> is_prime(6)\n\
    true\n>>> is_prime(7)\nfalse\n>>> is_prime(8)\ntrue\n>>> is_prime(9)\nfalse\n\
    >>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>>\
    \ is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\ntrue\n>>> is_prime(16)\n\
    false\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(21)\ntrue\n>>> is_prime(22)\nfalse\n>>>\
    \ is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\ntrue\n>>> is_prime(26)\n\
    false\n>>> is_prime(27)\ntrue\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n\
    >>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>>\
    \ is_prime(33)\ntrue\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\ntrue\n>>> is_prime(36)\n\
    false\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\ntrue\n\
    >>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\nfalse\n>>>\
    \ is_prime(43)\ntrue\n>>> is_prime(44)\nfalse\n>>> is_prime(45)\ntrue\n>>> is_prime(46)\n\
    false\n>>> is_", "    if is_empty(s) == true \n        then return true\n    \
    \    else return false\n    else if length(s) < 3 \n        then return false\n\
    \        else if length(s) == 3 \n            then return true\n            else\
    \ if length(s) == 4 \n                then return true\n                else return\
    \ false\n    else if length(s) == 4 \n        then return true\n        else if\
    \ length(s) == 5 \n            then return true\n            else return false\n\
    \    else if length(s) == 5 \n        then return true\n        else if length(s)\
    \ == 6 \n            then return true\n            else return false\n    else\
    \ if length(s) == 6 \n        then return true\n        else if length(s) == 7\
    \ \n            then return true\n            else return false\n    else if length(s)\
    \ == 7 \n        then return true\n        else if length(s) == 8 \n         \
    \   then return true\n            else return false\n    else if length(s) ==\
    \ 8 \n        then return true\n        else if length(s) == 9 \n            then\
    \ return true\n            else return false\n    else if length(s) == 9 \n  \
    \      then return true\n        else if length(s) == 10 \n            then return\
    \ true\n            else return false\n    else if length(s) == 10 \n        then\
    \ return true\n        else if length(s) == 11 \n            then return true\n\
    \            else return false\n    else if length(s) == 11 \n        then return\
    \ true\n        else if length(s) == 12 \n            then return true\n     \
    \       else return false\n    else if length(s) == 12 \n        then return true\n\
    \        else if length(s) == 13 \n            then return true\n            else\
    \ return false\n    else if length(s) == 13 \n        then return true\n     \
    \   else if length(s) == 14 \n            then return true\n            else return\
    \ false\n    else if length(s) == 14 \n        then return true\n        else\
    \ if length(s) == 15 \n            then return true\n            else return false\n\
    \    else if length(s) == 15 \n        then return true\n        else if length(s)\
    \ == 16 \n            then return true\n            else return false\n    else\
    \ if length(s) == 16 \n        then return true\n        else if length(s) ==\
    \ 17 \n            then return true\n            else return false\n    else if\
    \ length(s) == 17 \n        then return true\n        else if length(s) == 18\
    \ \n            then return true\n            else return false\n    else if length(s)\
    \ == 18 \n        then return true\n        else if length(s) == 19 \n       \
    \     then return true\n            else return false\n    else if length(s) ==\
    \ 19 \n        then return true\n        else if length(s) == 20 \n          \
    \  then return true\n            else return false\n    else if length(s) == 20\
    \ \n        then return true\n        else if length(s) == 21 \n            then\
    \ return true\n            else return false\n    ", "    if is_empty(s) == true\n\
    \        return true\n    else if length(s) < 3\n        return false\n    else\n\
    \        true\n    end\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis\
    \ doesn't work for `is_happy(\"ab\")`\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  '    if is_happy(s.length) == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6))
    == true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) ==
    true && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) ==
    true && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) ==
    true && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) ==
    true && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) ==
    true && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) ==
    true && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) ==
    true && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) ==
    true && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) ==
    true && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) ==
    true && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) ==
    true && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) ==
    true && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) ==
    true && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) ==
    true && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) ==
    true && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102))
    == true && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108))
    == true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,13', '    if is_happy(s.length()) == true
    && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) == true &&
    is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) == true && is_happy(s.substring(12,15))
    == true && is_happy(s.substring(15,18)) == true && is_happy(s.substring(18,21))
    == true && is_happy(s.substring(21,24)) == true && is_happy(s.substring(24,27))
    == true && is_happy(s.substring(27,30)) == true && is_happy(s.substring(30,33))
    == true && is_happy(s.substring(33,36)) == true && is_happy(s.substring(36,39))
    == true && is_happy(s.substring(39,42)) == true && is_happy(s.substring(42,45))
    == true && is_happy(s.substring(45,48)) == true && is_happy(s.substring(48,51))
    == true && is_happy(s.substring(51,54)) == true && is_happy(s.substring(54,57))
    == true && is_happy(s.substring(57,60)) == true && is_happy(s.substring(60,63))
    == true && is_happy(s.substring(63,66)) == true && is_happy(s.substring(66,69))
    == true && is_happy(s.substring(69,72)) == true && is_happy(s.substring(72,75))
    == true && is_happy(s.substring(75,78)) == true && is_happy(s.substring(78,81))
    == true && is_happy(s.substring(81,84)) == true && is_happy(s.substring(84,87))
    == true && is_happy(s.substring(87,90)) == true && is_happy(s.substring(90,93))
    == true && is_happy(s.substring(93,96)) == true && is_happy(s.substring(96,99))
    == true && is_happy(s.substring(99,102)) == true && is_happy(s.substring(102,105))
    == true && is_happy(s.substring(105,108)) == true && is_happy(s.substring(108,111))
    == true && is_happy(s.substring(111,114)) == true && is_happy(s.substring(114,117))
    == true && is_happy(s.substring(117,120)) == true && is_happy(s.substring(120,123))
    == true && is_happy(s.substring(123,126)) == true && is_happy(s.substring(126,129))
    == true && is_happy(s.substring(129,132)) == true && is_happy(s.substring(132,',
  '    if is_happy(s.length()) == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6))
    == true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) ==
    true && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) ==
    true && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) ==
    true && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) ==
    true && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) ==
    true && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) ==
    true && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) ==
    true && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) ==
    true && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) ==
    true && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) ==
    true && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) ==
    true && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) ==
    true && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) ==
    true && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) ==
    true && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) ==
    true && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102))
    == true && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108))
    == true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_happy(s,0,0)==true\n    then\
    \ true\n    else false\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if is_empty(s) == true\n        return\
    \ true\n    else if length(s) < 3\n        return false\n    else\n        forall\
    \ i::Int from 0 to length(s) - 1 do\n            if s[i] == s[i+1]\n         \
    \       && s[i] != s[i+2]\n                && s[i] != s[i+3]\n               \
    \ && s[i] != s[i+4]\n                && s[i] != s[i+5]\n                && s[i]\
    \ != s[i+6]\n                && s[i] != s[i+7]\n                && s[i] != s[i+8]\n\
    \                && s[i] != s[i+9]\n                && s[i] != s[i+10]\n     \
    \           && s[i] != s[i+11]\n                && s[i] != s[i+12]\n         \
    \       && s[i] != s[i+13]\n                && s[i] != s[i+14]\n             \
    \   && s[i] != s[i+15]\n                && s[i] != s[i+16]\n                &&\
    \ s[i] != s[i+17]\n                && s[i] != s[i+18]\n                && s[i]\
    \ != s[i+19]\n                && s[i] != s[i+20]\n                && s[i] != s[i+21]\n\
    \                && s[i] != s[i+22]\n                && s[i] != s[i+23]\n    \
    \            && s[i] != s[i+24]\n                && s[i] != s[i+25]\n        \
    \        && s[i] != s[i+26]\n                && s[i] != s[i+27]\n            \
    \    && s[i] != s[i+28]\n                && s[i] != s[i+29]\n                &&\
    \ s[i] != s[i+30]\n                && s[i] != s[i+31]\n                && s[i]\
    \ != s[i+32]\n                && s[i] != s[i+33]\n                && s[i] != s[i+34]\n\
    \                && s[i] != s[i+35]\n                && s[i] != s[i+36]\n    \
    \            && s[i] != s[i+37]\n                && s[i] != s[i+38]\n        \
    \        && s[i] != s[i+39]\n                && s[i] != s[i+40]\n            \
    \    && s[i] != s[i+41]\n                && s[i] != s[i+42]\n                &&\
    \ s[i] != s[i+43]\n                && s[i] != s[i+44]\n                && s[i]\
    \ != s[i+45]\n                && s[i] != s[i+46]\n                && s[i] != s[i+47]\n\
    \                && s[i] != s[i+48]\n                && s[i] != s[i+49]\n    \
    \            && s[i] != s[i+50]\n                && s[i] != s[i+51]\n        \
    \        && s[i] != s[i+52]\n                && s[i] != s[i+53]\n            \
    \    && s[i] != s[i+54]\n                && s[i] != s[i", '    if is_happy(s.length())
    == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) ==
    true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) == true
    && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) == true
    && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) == true
    && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) == true
    && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) == true
    && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) == true
    && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) == true
    && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) == true
    && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) == true
    && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) == true
    && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) == true
    && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) == true
    && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) == true
    && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) == true
    && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) == true
    && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102)) == true
    && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108)) ==
    true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_empty(s) == true\n        return\
    \ true\n    else if length(s) < 3\n        return false\n    else\n        \n\
    \        for i in 1..length(s)\n            if s[i] == s[i-1]\n              \
    \  return false\n        end\n        return true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    @time is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n@time is_happy(\"\
    abcd\")\n</cell>\n<code language=julia-1.5>\n@time is_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\n@time is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    @time is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is even.\nA number is even if it has two even digits and no other\
    \ digits.\nFor example:\n>>> is_even(2)\ntrue\n>>> is_even(3)\nfalse\n>>> is_even(10)\n\
    false\n>>> is_even(12)\ntrue\n>>> is_even(13)\nfalse\n>>> is_even(100)\ntrue\n\
    >>> is_even(101)\nfalse\n>>> is_even(1010)\ntrue\n>>> is_even(1011)\nfalse\n>>>\
    \ is_even(10100)\ntrue\n>>> is_even(10200)\nfalse\n>>> is_even(10300)\ntrue\n\
    >>> is_even(10301)\nfalse\n>>> is_even(103010)\ntrue\n>>> is_even(1030100)\nfalse\n\
    >>> is_even(1030101)\nfalse\n>>> is_even(10301010)\ntrue\n>>> is_even(103010100)\n\
    false\n>>> is_even(103010200)\ntrue\n>>> is_even(103010300)\nfalse\n>>> is_even(103010301)\n\
    false\n>>> is_even(1030103010)\ntrue\n>>> is_even(10301030100)\nfalse\n>>> is_even(10301030101)\n\
    false\n>>> is_even(103010301010)\ntrue\n>>> is_even(1030103010100)\nfalse\n>>>\
    \ is_even(1030103010200)\ntrue\n>>> is_even(1030103010300)\nfalse\n>>> is_even(1030103010301)\n\
    false\n>>> is_even(10301030103010)\ntrue\n>>> is_even(103010301030100)\nfalse\n\
    >>> is_even(103010301030101)\nfalse\n>>> is_even(103010301030", "    if is_empty(s):\n\
    \        return true\n    \n    length::Int = length(s)\n    if length < 3 ||\
    \ length == length(unique(s) - s)\n        return false\n    \n    true::Bool\
    \ = true\n    for i from 0 to length-2\n        if s[i] == s[i+1] && s[i+1] ==\
    \ s[i+2]\n            true = false\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_happy(\"abc\") == false\n@assert is_happy(\"\
    aa\") == false\n@assert is_happy(\"abcd\") == true\n@assert is_happy(\"aabb\"\
    ) == false\n@assert is_happy(\"adb\") == true\n@assert is_happy(\"xyy\") == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is palindrome\
    \ or not. Palindrome numbers are numbers that read the same backward as forward.",
  "    if is_happy(s,0)\n    else false\nend", "    if is_empty(s):\n        return\
    \ true\n    \n    length::Int = s.length\n    \n    if length < 3 || length ==\
    \ 0 || length >= 4\n        return false\n    \n    letters::Vector{Char} = s.chars\n\
    \    \n    distinct::Vector{Char} = letters[1..length-1]\n    \n    distinct::Set{Char}\
    \ = Set{Char}(distinct)\n    \n    distinct::Set{Char} & letters[2..length-1]\
    \ == letters[2..length-1]\n    \n    return true\nend", "    if is_empty(s) ==\
    \ true\n        return true\n    else if length(s) == 3\n        return is_distinct(s[1..3])\n\
    \    else if length(s) == 2\n        return is_distinct(s[1..1])\n    else if\
    \ length(s) == 1\n        return is_distinct(s)\n    else\n        return false\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_distinct(s::String)",
  "    if is_happy(s,0)\n    true\n    else \n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_happy(aa)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(adb)\n</cell>\n<code language=julia-1.5>\nis_happy(abc)\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n\
    </cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(abcb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcb)\n</cell>\n<code language=julia-1.5>\nis_happy(abcb)\n</cell>\n",
  "    if is_happy(s.length()) == true and is_distinct_3_consecutive_letters(s) ==\
    \ true\n    then true\n    else false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that checks if a number is even.\nA number is even if it is a positive\
    \ integer and it is divisible by 2.\nFor example:\n>>> is_even(10)\ntrue\n>>>\
    \ is_even(11)\nfalse\n>>> is_even(12)\nfalse\n>>> is_even(13)\ntrue\n>>> is_even(-10)\n\
    false\n>>> is_even(-11)\nfalse\n>>> is_even(-12)\nfalse\n>>> is_even(-13)\ntrue\n\
    >>> is_even(10)\ntrue\n>>> is_even(11)\nfalse\n>>> is_even(12)\nfalse\n>>> is_even(13)\n\
    true\n>>> is_even(-10)\nfalse\n>>> is_even(-11)\nfalse\n>>> is_even(-12)\nfalse\n\
    >>> is_even(-13)\ntrue\n\"\"\"", "    if is_happy(s,0)\n    else false\nend\n\
    </code>\n<|/ a tags=recursion,julia,string |>\n<| a dscore=0 |>\n<code>", "  \
    \  if is_happy(s.length()) == false then return false else return true\n    else\
    \ if s.length() >= 3 then \n        for i in 0..length(s - 1) do \n          \
    \  if s.charAt(i) == s.charAt(i+1) && s.charAt(i) == s.charAt(i+2) then return\
    \ false \n            else return true\n        else return true\n    else return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if its only prime factors are\
    \ 2 and 3. \nA number is not prime if its only prime factors are 2 and 5.\nA number\
    \ is prime if its only prime factors are 2 and 5.\nA number is prime if its only\
    \ prime factors are 2 and 5.\nA number is prime if its only prime factors are\
    \ 2 and 5.\nA number is prime if its only prime factors are 2 and 5.\nA number\
    \ is prime if its only prime factors are 2 and 5.\nA number is prime if its only\
    \ prime factors are 2 and 5.\nA number is prime if its only prime factors are\
    \ 2 and 5.\nA number is prime if its only prime factors are 2 and 5.\nA number\
    \ is prime if its only prime factors are 2 and 5.\nA number is prime if its only\
    \ prime factors are 2 and 5.\nA number is prime if its only prime factors are\
    \ 2 and 5.\nA number is prime if its only prime factors are 2 and 5.\nA number\
    \ is prime if its only prime factors are 2 and 5.\nA number is prime if its only\
    \ prime factors are 2 and 5.\nA number is prime if its only prime factors are\
    \ 2 and 5.\nA number is prime if its only prime factors are 2 and 5.\nA number\
    \ is prime if its only prime factors are 2 and 5.\nA number is prime if its only\
    \ prime factors are 2 and 5.\nA number is prime if its only prime factors are\
    \ 2 and 5.\nA number is prime if its only prime factors are 2 and 5.\nA number\
    \ is prime if its only prime factors are 2 and 5.\nA number is prime if its only\
    \ prime factors are 2 and 5.\nA number is prime if its only prime factors are\
    \ 2 and 5.\nA number is prime if its only prime factors are 2 and 5.\nA number\
    \ is prime if its only prime factors are 2 and 5.\nA number is prime ", "    if\
    \ is_happy(s,0)\n    true\n    else false\nend\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nFor example:\n>>> count_vowels(\"a\")\n1\n>>> count_vowels(\"aa\"\
    )\n2\n>>> count_vowels(\"ab\")\n2\n>>> count_vowels(\"aba\")\n3\n>>> count_vowels(\"\
    abba\")\n4\n>>> count_vowels(\"abbac\")\n5\n>>> count_vowels(\"abbaca\")\n5\n\
    >>> count_vowels(\"abbacac\")\n5\n>>> count_vowels(\"abbacaca\")\n5\n>>> count_vowels(\"\
    abbacacaa\")\n5\n>>> count_vowels(\"abbacacaaa\")\n5\n>>> count_vowels(\"abbacacaaab\"\
    )\n5\n>>> count_vowels(\"abbacacaaabb\")\n5\n>>> count_vowels(\"abbacacaaabbb\"\
    )\n5\n>>> count_vowels(\"abbacacaaabbbc\")\n5\n>>> count_vowels(\"abbacacaaabbbcc\"\
    )\n5\n>>> count_vowels(\"abbacacaaabbbccc\")\n5\n>>> count_vowels(\"abbacacaaabbbccca\"\
    )\n5\n>>> count_vowels(\"abbacacaaabbbcccaa\")\n5\n>>> count_vowels(\"abbacacaaabbbcccaaa\"\
    )\n5\n>>> count_vowels(\"abbacacaaabbbcccaaaa\")\n5\n>>> count_vowels(\"abbacacaaabbbcccaaaab\"\
    )\n5\n>>> count_vowels(\"abbacacaaabbbcccaaaabb\")\n5\n>>> count_vowels(\"abbacacaaabbbcccaaaabbb\"\
    )\n5\n>>> count_vowels(\"abbacacaaabbbcccaaaabbbc\")\n5\n>>> count_vowels(\"abbacacaaabbbcccaaaabbbcc\"\
    )\n5\n>>> count_vowels(\"abbacacaaabbbcccaaaabbbccc\")\n5", "    if is_empty(s):\n\
    \        return true\n    \n    \n    if is_happy(s[1..-1]) == true\n        return\
    \ true\n    \n    if is_happy(s[1..-1]) == false\n        return false\n    \n\
    \    if is_happy(s[2..-1]) == true\n        return true\n    \n    if is_happy(s[2..-1])\
    \ == false\n        return false\n    \n    if is_happy(s[3..-1]) == true\n  \
    \      return true\n    \n    if is_happy(s[3..-1]) == false\n        return false\n\
    \    \n    if is_happy(s[4..-1]) == true\n        return true\n    \n    if is_happy(s[4..-1])\
    \ == false\n        return false\n    \n    if is_happy(s[5..-1]) == true\n  \
    \      return true\n    \n    if is_happy(s[5..-1]) == false\n        return false\n\
    \    \n    if is_happy(s[6..-1]) == true\n        return true\n    \n    if is_happy(s[6..-1])\
    \ == false\n        return false\n    \n    if is_happy(s[7..-1]) == true\n  \
    \      return true\n    \n    if is_happy(s[7..-1]) == false\n        return false\n\
    \    \n    if is_happy(s[8..-1]) == true\n        return true\n    \n    if is_happy(s[8..-1])\
    \ == false\n        return false\n    \n    if is_happy(s[9..-1]) == true\n  \
    \      return true\n    \n    if is_happy(s[9..-1]) == false\n        return false\n\
    \    \n    if is_happy(s[10..-1]) == true\n        return true\n    \n    if is_happy(s[10..-1])\
    \ == false\n        return false\n    \n    if is_happy(s[11..-1]) == true\n \
    \       return true\n    \n    if is_happy(s[11..-1]) == false\n        return\
    \ false\n    \n    if is_happy(s[12..-1]) == true\n        return true\n    \n\
    \    if is_happy(s[12..-1]) == false\n        return false\n    \n    if is_happy(s[13..-1])\
    \ == true\n        return true\n    \n    if is_happy(s[13..-1]) == false\n  \
    \      return false\n    \n    if is_happy(s[14..-1]) == true\n        return\
    \ true\n    \n    if is_happy(s[14..-1]) == false\n        return false\n    \n\
    \    if is_happy(s[15..-1]) == true\n        return true\n    \n    if is_happy(s[15..-1])\
    \ == false\n        return false\n    \n    if is_happy(s[16..-1]) == true\n \
    \       return true\n    \n    if is_happy(s[16..-1]) == false\n        return\
    \ false\n    \n    if is_happy(s[17..-1]) == true\n        return true\n    \n\
    \    if is_happy(s[17..-1]) == ", "    if is_happy(s,0,3)\n    then true\n   \
    \ else false\nend", "    if is_happy(s.length()) == true and is_happy(s.chars())\
    \ == true \n    then true\n    else false\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| c |>\nThis doesn't work. `is_happy(\"ab\")` returns `true` but `is_happy(\"\
    aba\")` returns `false`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for\
    \ pointing it out. I've updated the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    if is_empty(s) == true then return true\n    else if length(s) < 3 then return\
    \ false\n    else if length(s) == 3 then return true\n    else if length(s) ==\
    \ 4 then return true\n    else if length(s) == 5 then return true\n    else if\
    \ length(s) == 6 then return true\n    else if length(s) == 7 then return true\n\
    \    else if length(s) == 8 then return true\n    else if length(s) == 9 then\
    \ return true\n    else if length(s) == 10 then return true\n    else if length(s)\
    \ == 11 then return true\n    else if length(s) == 12 then return true\n    else\
    \ if length(s) == 13 then return true\n    else if length(s) == 14 then return\
    \ true\n    else if length(s) == 15 then return true\n    else if length(s) ==\
    \ 16 then return true\n    else if length(s) == 17 then return true\n    else\
    \ if length(s) == 18 then return true\n    else if length(s) == 19 then return\
    \ true\n    else if length(s) == 20 then return true\n    else if length(s) ==\
    \ 21 then return true\n    else if length(s) == 22 then return true\n    else\
    \ if length(s) == 23 then return true\n    else if length(s) == 24 then return\
    \ true\n    else if length(s) == 25 then return true\n    else if length(s) ==\
    \ 26 then return true\n    else if length(s) == 27 then return true\n    else\
    \ if length(s) == 28 then return true\n    else if length(s) == 29 then return\
    \ true\n    else if length(s) == 30 then return true\n    else if length(s) ==\
    \ 31 then return true\n    else if length(s) == 32 then return true\n    else\
    \ if length(s) == 33 then return true\n    else if length(s) == 34 then return\
    \ true\n    else if length(s) == 35 then return true\n    else if length(s) ==\
    \ 36 then return true\n    else if length(s) == 37 then return true\n    else\
    \ if length(s) == 38 then return true\n    else if length(s) == 39 then return\
    \ true\n    else if length(s) == 40 then return true\n    else if length(s) ==\
    \ 41 then return true\n    else if length(s) == 42 then return true\n    else\
    \ if length(s) == 43 then return true\n    else if length(s) == 44 then return\
    \ true\n    else if length(s) == 45 then return true\n    else if length(s) ==\
    \ 46 then return true\n    else if length(s) == 47 then return true\n    else\
    \ if length(s) == 48 then return true\n    else if length(s) == 49 then return\
    \ true\n    else if length(s) == 50 then return true\n    else if length(", " \
    \   if is_empty(s):\n        return true\n    \n    length::Int = length(s)\n\
    \    if length < 3 || length == 0 || length >= length\n        return false\n\
    \    \n    char::Char = s[0]\n    \n    for c in s[1..length-1]\n        if char\
    \ == c\n            return false\n        char = char + c\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyyx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyyxx\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"xyyxx\")\n</cell>\n", "    if is_happy(s,0)\n\
    \    then true\n    else false\nend", "    if is_empty(s) == true\n        return\
    \ true\n    else if length(s) < 3\n        return false\n    else\n        \n\
    \        for i in 1:length(s)\n            if s[i] == s[i+1]\n               \
    \ \n            else\n                return false\n        end\n        return\
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_happy(\"\
    abc\") == false\n@assert is_happy(\"aba\") == false\n@assert is_happy(\"abca\"\
    ) == false\n@assert is_happy(\"abcadef\") == false\n@assert is_happy(\"abcadefg\"\
    ) == false\n@assert is_happy(\"abcadefgh\") == false\n@assert is_happy(\"abcadefghi\"\
    ) == false\n@assert is_happy(\"abcadefghij\") == false\n@assert is_happy(\"abcadefghijk\"\
    ) == false\n@assert is_happy(\"abcadefghijkl\") == false\n@assert is_happy(\"\
    abcadefghijklm\") == false\n@assert is_happy(\"abcadefghijklmn\") == false\n@assert\
    \ is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\"\
    ) == false\n@assert is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"\
    abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\") == false\n\
    @assert is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\"\
    ) == false\n@assert is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"\
    abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\") == false\n\
    @assert is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\"\
    ) == false\n@assert is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"\
    abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\") == false\n\
    @assert is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\"\
    ) == false\n@assert is_happy(\"abcadefghijklmn\") == false\n@assert is_happy(\"\
    abcadefghijklmn\") == false\n@assert is_happy(\"abcadefghijklmn\") == false\n\
    @assert is_", "    if is_empty(s) == true\n        return true\n    else if length(s)\
    \ >= 3\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  '    if is_happy(s.length()) == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6))
    == true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) ==
    true && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) ==
    true && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) ==
    true && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) ==
    true && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) ==
    true && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) ==
    true && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) ==
    true && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) ==
    true && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) ==
    true && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) ==
    true && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) ==
    true && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) ==
    true && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) ==
    true && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) ==
    true && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) ==
    true && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102))
    == true && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108))
    == true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_happy(s.length)\n    then true\n\
    \    else false\nend\n</cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times a substring appears in a string.", '    if is_happy(s.length())
    == true and is_happy(s.substring(0,3)) == true and is_happy(s.substring(3,6))
    == true and is_happy(s.substring(6,9)) == true and is_happy(s.substring(9,12))
    == true and is_happy(s.substring(12,15)) == true and is_happy(s.substring(15,18))
    == true and is_happy(s.substring(18,21)) == true and is_happy(s.substring(21,24))
    == true and is_happy(s.substring(24,27)) == true and is_happy(s.substring(27,30))
    == true and is_happy(s.substring(30,33)) == true and is_happy(s.substring(33,36))
    == true and is_happy(s.substring(36,39)) == true and is_happy(s.substring(39,42))
    == true and is_happy(s.substring(42,45)) == true and is_happy(s.substring(45,48))
    == true and is_happy(s.substring(48,51)) == true and is_happy(s.substring(51,54))
    == true and is_happy(s.substring(54,57)) == true and is_happy(s.substring(57,60))
    == true and is_happy(s.substring(60,63)) == true and is_happy(s.substring(63,66))
    == true and is_happy(s.substring(66,69)) == true and is_happy(s.substring(69,72))
    == true and is_happy(s.substring(72,75)) == true and is_happy(s.substring(75,78))
    == true and is_happy(s.substring(78,81)) == true and is_happy(s.substring(81,84))
    == true and is_happy(s.substring(84,87)) == true and is_happy(s.substring(87,90))
    == true and is_happy(s.substring(90,93)) == true and is_happy(s.substring(93,96))
    == true and is_happy(s.substring(96,99)) == true and is_happy(s.substring(99,102))
    == true and is_happy(s.substring(102,105)) == true and is_happy(s.substring(105,108))
    == true and is_happy(s.substring(108,111)) == true and is_happy(s.substring(111,114))
    == true and is_happy(s.substring(114,117)) == true and is_happy(s.substring(117,120))
    == true and is_happy(s.substring(120,123)) == true and is_happy(s.substring(123,126))
    == true and is_happy(s.substring(126,129)) == true and is_happy(s.substring(129,132))
    == true and is_happy(s.substring(132,', "    if is_happy(s.length()) == true &&\
    \ is_distinct(s.substring(0,3)) \n    then true\n    else false\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `is_distinct` doesn't take a `String`\
    \ as input. Also, `is_distinct` doesn't take a `String` as input. `is_distinct`\
    \ takes two `String`s as input. `is_distinct` doesn't take a `String` as input.\
    \ `is_distinct` takes two `String`s as input. `is_distinct` doesn't take a `String`\
    \ as input. `is_distinct` takes two `String`s as input. `is_distinct` doesn't\
    \ take a `String` as input. `is_distinct` takes two `String`s as input. `is_distinct`\
    \ doesn't take a `String` as input. `is_distinct` takes two `String`s as input.\
    \ `is_distinct` doesn't take a `String` as input. `is_distinct` takes two `String`s\
    \ as input. `is_distinct` doesn't take a `String` as input. `is_distinct` takes\
    \ two `String`s as input. `is_distinct` doesn't take a `String` as input. `is_distinct`\
    \ takes two `String`s as input. `is_distinct` doesn't take a `String` as input.\
    \ `is_distinct` takes two `String`s as input. `is_distinct` doesn't take a `String`\
    \ as input. `is_distinct` takes two `String`s as input. `is_distinct` doesn't\
    \ take a `String` as input. `is_distinct` takes two `String`s as input. `is_distinct`\
    \ doesn't take a `String` as input. `is_distinct` takes two `String`s as input.\
    \ `is_distinct` doesn't take a `String` as input. `is_distinct` takes two `String`s\
    \ as input. `is_distinct` doesn't take a `String` as input. `is_distinct` takes\
    \ two `String`s as input. `is_distinct` doesn't take a `String` as input. `is_distinct`\
    \ takes two `String`s as input. `is_distinct` doesn't take a `String` as input.\
    \ `is_distinct` takes two `String`s as input. `is_distinct` doesn't take a `String`\
    \ as input. `is_distinct` takes two `String`s as input. `is_distinct` doesn't\
    \ take a `String` as input. `is_distinct` takes two `String`s as input. `is_distinct`\
    \ doesn't take a `String` as input. `is_distinct` takes two `String`", "    if\
    \ is_empty(s) == true\n        return true\n    else if length(s) < 3\n      \
    \  return false\n    else\n        \n        for i in 1..length(s)\n         \
    \   if s[i] == s[i-1]\n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_happy(s,0)\n    true\n    else false\n\
    end", "    if is_empty(s) == true\n        return true\n    else if length(s)\
    \ == 3\n        return true\n    else if length(s) >= 3\n        for i in 0 ..\
    \ length(s)-3\n            if s[i] != s[i+1] && s[i] != s[i+2] && s[i] != s[i+3]\n\
    \                return false\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 3\nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if its only prime factors are\
    \ 2 and itself. \nFor example, 2 is prime and 3 is not. \nWrite a function that\
    \ checks if a number is prime or not. \nA number is prime if its only prime factors\
    \ are 2 and itself. \nFor example, 2 is prime and 3 is not. \nWrite a function\
    \ that checks if a number is prime or not. \nA number is prime if its only prime\
    \ factors are 2 and itself. \nFor example, 2 is prime and 3 is not. \nWrite a\
    \ function that checks if a number is prime or not. \nA number is prime if its\
    \ only prime factors are 2 and itself. \nFor example, 2 is prime and 3 is not.\
    \ \nWrite a function that checks if a number is prime or not. \nA number is prime\
    \ if its only prime factors are 2 and itself. \nFor example, 2 is prime and 3\
    \ is not. \nWrite a function that checks if a number is prime or not. \nA number\
    \ is prime if its only prime factors are 2 and itself. \nFor example, 2 is prime\
    \ and 3 is not. \nWrite a function that checks if a number is prime or not. \n\
    A number is prime if its only prime factors are 2 and itself. \nFor example, 2\
    \ is prime and 3 is not. \nWrite a function that checks if a number is prime or\
    \ not. \nA number is prime if its only prime factors are 2 and itself. \nFor example,\
    \ 2 is prime and 3 is not. \nWrite a function that checks if a number is prime\
    \ or not. \nA number is prime if its only prime factors are 2 and itself. \nFor\
    \ example, 2 is prime and 3 is not. \nWrite a function that checks if a number\
    \ is prime or not. \nA number is prime if its only prime factors are 2 and itself.\
    \ \nFor example, 2 is prime and 3 is not. \n", "    if is_empty(s) == true\n \
    \       return true\n    else if length(s) < 3\n        return false\n    else\n\
    \        forall(is_distinct(s[0..-2]), is_distinct(s[-2..-1]))\n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nFor example, \n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_", "    if is_happy(s.length()) == true\
    \ \n        then true\n        else false\n    end\nend", "    if is_empty(s)\
    \ == true\n        return true\n    else if length(s) >= 3\n        for i in 0\
    \ .. length(s)-3\n            if s[i] != s[i+1] && s[i] != s[i+2] && s[i] != s[i+3]\n\
    \                return false\n        return true\n    else\n        return false\n\
    end\n</cell>\n<code language=julia-1.3>\nis_happy(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"aba\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"abba\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"abbb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abbbb\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"abbbba\")\n\
    </cell>\n<code language=julia-1.3>\nis_happy(\"abbbbac\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abbbbcc\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"abbbbccc\"\
    )\n</cell>\n<code language=julia-1.3>\nis_happy(\"abbbbccca\")\n</cell>\n<code\
    \ language=julia-1.3>\nis_happy(\"abbbbcccba\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abbbbcccbac\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"abbbbcccbacc\"\
    )\n</cell>\n<code language=julia-1.3>\nis_happy(\"abbbbcccbaccc\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"abbbbcccbaccca\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abbbbcccbacccba\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"\
    abbbbcccbacccbac\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"abbbbcccbacccbacc\"\
    )\n</cell>\n<code language=julia-1.3>\nis_happy(\"abbbbcccbacccbaccc\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"abbbbcccbacccbaccca\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abbbbcccbacccbacccba\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"\
    abbbbcccbaccc", "    if is_empty(s):\n        return true\n    \n    len = length(s)\n\
    \    if len < 3 || len > length(s) || length(s) mod 3 != 0\n        return false\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if is_happy(s) == true\n    else \n   \
    \     false\nend\n</cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of vowels contained in the string.\nThe vowels\
    \ are \"a\", \"e\", \"i\", \"o\", and \"u\".\nFor example:\n>>> vowel_count(\"\
    a\")\n1\n>>> vowel_count(\"aeiou\")\n5\n>>> vowel_count(\"ab\")\n0\n>>> vowel_count(\"\
    aba\")\n1\n>>> vowel_count(\"abba\")\n2\n>>> vowel_count(\"abbac\")\n0\n>>> vowel_count(\"\
    abbaca\")\n1\n>>> vowel_count(\"abbacac\")\n0\n>>> vowel_count(\"abbacaca\")\n\
    1\n>>> vowel_count(\"abbacacaa\")\n2\n>>> vowel_count(\"abbacacaaa\")\n0\n>>>\
    \ vowel_count(\"abbacacaaab\")\n1\n>>> vowel_count(\"abbacacaaabb\")\n2\n>>> vowel_count(\"\
    abbacacaaabbb\")\n3\n>>> vowel_count(\"abbacacaaabbbb\")\n4\n>>> vowel_count(\"\
    abbacacaaabbbbc\")\n0\n>>> vowel_count(\"abbacacaaabbbbca\")\n1\n>>> vowel_count(\"\
    abbacacaaabbbbcaa\")\n2\n>>> vowel_count(\"abbacacaaabbbbcaaa\")\n3\n>>> vowel_count(\"\
    abbacacaaabbbbcaaaa\")\n4\n>>> vowel_count(\"abbacacaaabbbbcaaaab\")\n5\n>>> vowel_count(\"\
    abbacacaaabbbbcaaaabb\")\n6\n>>> vowel_count(\"abbacacaaabbbbcaaaabbb\")\n7\n\
    >>> vowel_count(\"abbacacaaabbbbcaaaabbbb\")\n8\n>>> vowel_count(\"abbacacaaabbbbcaaaabbbbc\"\
    )\n0\n>>> vowel_count(\"abbacacaaabbbbcaaaabbbbca\")\n", "    if is_empty(s) ==\
    \ true\n        return true\n    else if length(s) < 3\n        return false\n\
    \    else\n        \n        for i in 0 .. length(s)-2\n            if s[i] ==\
    \ s[i+1] && s[i+1] == s[i+2]\n                return false\n        return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_happy(a)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(aa)\n</cell>\n<code language=julia-1.5>\nis_happy(abcd)\n</cell>\n<code\
    \ language=julia-1.5>\nis_happy(aabb)\n</cell>\n<code language=julia-1.5>\nis_happy(adb)\n\
    </cell>\n<code language=julia-1.5>\nis_happy(xyy)\n</cell>\n<text>\nExercise 2",
  "    if is_empty(s) == true then return true\n    else if length(s) < 3 then return\
    \ false\n    else if is_distinct(s[1..3]) == true and is_distinct(s[2..3]) ==\
    \ true and is_distinct(s[3..3]) == true then return true\n    else return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_distinct(s)\n    Count\
    \ the number of distinct characters in s\n\"\"\"", "    if is_happy(s,0)\n   \
    \ true\n    else false\nend", "    if is_happy(s.length()) == true && is_happy(s.chars().distinct)\
    \ == true\n    then true\n    else false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.\nThe vowels are the characters 'a', 'e', 'i', 'o', and 'u'.\n\
    For example:\n>>> vowel_count(\"abracadabra\")\n3\n>>> vowel_count(\"abracadabra\"\
    )\n2\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n\
    0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n\
    >>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>>\
    \ vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"\
    abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\"\
    )\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n\
    0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n\
    >>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>>\
    \ vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"\
    abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\"\
    )\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n\
    0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n\
    >>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>>\
    \ vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n0\n>>> vowel_count(\"\
    abracadabra\")\n0\n>>> vowel_count(\"abracadabra\")\n", "    if is_happy(s.length())\
    \ == true && is_distinct(s.substring(0,3)) \n    then true\n    else false\nend\n\
    </code>\n<|/ a tags=string,julia,recursion |>\n<| c |>\nThanks for your answer.\
    \ Your code works but it's very slow. My code takes about 3 seconds to run on\
    \ my computer. Your code takes about 10 seconds to run on my computer.\n<|/ c\
    \ |>\n<| c |>\nI ran your code on my computer and the time it took to run was\
    \ about 3 seconds. I ran it again and now it takes about 10 seconds. I ran it\
    \ again and now it takes about 15 seconds. I ran it again and now it takes about\
    \ 20 seconds. I ran it again and now it takes about 30 seconds. I ran it again\
    \ and now it takes about 40 seconds. I ran it again and now it takes about 50\
    \ seconds. I ran it again and now it takes about 60 seconds. I ran it again and\
    \ now it takes about 70 seconds. I ran it again and now it takes about 80 seconds.\
    \ I ran it again and now it takes about 90 seconds. I ran it again and now it\
    \ takes about 100 seconds. I ran it again and now it takes about 110 seconds.\
    \ I ran it again and now it takes about 120 seconds. I ran it again and now it\
    \ takes about 130 seconds. I ran it again and now it takes about 140 seconds.\
    \ I ran it again and now it takes about 150 seconds. I ran it again and now it\
    \ takes about 160 seconds. I ran it again and now it takes about 170 seconds.\
    \ I ran it again and now it takes about 180 seconds. I ran it again and now it\
    \ takes about 190 seconds. I ran it again and now it takes about 200 seconds.\
    \ I ran it again and now it takes about 210 seconds. I ran it again and now it\
    \ takes about 220 seconds. I ran it again and now it takes about 230 seconds.\
    \ I ran it again and now it takes about 240 seconds. I ran it again and now it\
    \ takes about 250 seconds. I ran it again and now it takes about 260 seconds.\
    \ I ran it again and now it takes about 270 seconds. I ran it again and now it\
    \ takes about 280 seconds. I ran it again and now it takes about 290 seconds.\
    \ I ran it again and now it takes about 300 seconds. I ran it again and now it\
    \ takes about 3", "    if is_empty(s) == true \n    then false \n    else if length(s)\
    \ >= 3 \n    then is_distinct_3_consecutive(s) == true \n    else false \nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do this without using recursion.\n<|/ c |>\n<| c |>\nI\
    \ guess you could use [map](https://docs.julialang.org/en/v1/base/collections/#Base.map)\
    \ with a function that checks whether the string is happy or not. Something like\
    \ `map(is_happy, s)`.\n<|/ c |>\n<| c |>\nI guess you could also use [reduce](https://docs.julialang.org/en/v1/base/collections/#Base.reduce)\
    \ with a function that checks whether the string is happy or not. Something like\
    \ `reduce(is_happy, s)`.\n<|/ c |>\n<| c |>\nI guess you could also use [reduce](https://docs.julialang.org/en/v1/base/collections/#Base.reduce)\
    \ with a function that checks whether the string is happy or not. Something like\
    \ `reduce(is_happy, s)`.\n<|/ c |>\n<| c |>\nI guess you could also use [reduce](https://docs.julialang.org/en/v1/base/collections/#Base.reduce)\
    \ with a function that checks whether the string is happy or not. Something like\
    \ `reduce(is_happy, s)`.\n<|/ c |>\n<| a dscore=2 |>\nI like your solution, but\
    \ I wonder if there is a way to do this without using recursion.", "    if is_happy(s.length())\
    \ == true && is_happy(s.chars().distinct().take(3).collect::Int) == true \n  \
    \  then true\n    else false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef is_happy(s):\n    count = 0\n    for i in s:\n        if i ==\
    \ s[i-1]:\n            count += 1\n        else:\n            count = 0\n    \
    \    if count == 3:\n            return True\n    return False\n</code>\n<|/ a\
    \ tags=string,julia |>\n<| a tags=string,julia |>\n<code>", "    if is_empty(s)\
    \ == true \n    then return true \n    else \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        ", "    if is_happy(s.length()) == false \n    then return false\
    \ \n    else if length(s) == 3 \n    then return true \n    else if length(s)\
    \ == 2 \n    then return is_happy(s.substring(1,2)) \n    else if length(s) ==\
    \ 1 \n    then return is_happy(s.substring(0,1)) \n    else return is_happy(s.substring(0,2))\
    \ \nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is even or odd.", "    if is_empty(s):\n        return true\n    \n    \n  \
    \  if is_happy(tail(s))\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_happy(\"abc\") == false\n@assert is_happy(\"\
    aa\") == false\n@assert is_happy(\"abcd\") == true\n@assert is_happy(\"aabb\"\
    ) == false\n@assert is_happy(\"adb\") == true\n@assert is_happy(\"xyy\") == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime.\
    \ \nA number is prime if its only prime factors are 2 and itself. \nFor example,\
    \ 2 is a prime number, since it only has two factors: 2 and itself. \nThe number\
    \ 5 is also a prime number, since it only has one prime factor: 5.\nWrite a function\
    \ that checks if a number is prime.", "    if is_empty(s) == true\n        return\
    \ true\n    else if length(s) < 3\n        return false\n    else\n        forall\
    \ i in 1..length(s) \n            if  s[i] != s[i-1] && s[i] != s[i+1] && s[i]\
    \ != s[i]\n                return false\n        return true\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    count_unique_chars(s)\n    Count the number\
    \ of unique characters in a string\n    \n    Input : \n        s - a string\n\
    \    Output : \n        count - number of unique characters\n\"\"\"", '    if
    is_happy(s.length()) == true and is_happy(s.substring(0,3)) == true and is_happy(s.substring(3,6))
    == true and is_happy(s.substring(6,9)) == true and is_happy(s.substring(9,12))
    == true and is_happy(s.substring(12,15)) == true and is_happy(s.substring(15,18))
    == true and is_happy(s.substring(18,21)) == true and is_happy(s.substring(21,24))
    == true and is_happy(s.substring(24,27)) == true and is_happy(s.substring(27,30))
    == true and is_happy(s.substring(30,33)) == true and is_happy(s.substring(33,36))
    == true and is_happy(s.substring(36,39)) == true and is_happy(s.substring(39,42))
    == true and is_happy(s.substring(42,45)) == true and is_happy(s.substring(45,48))
    == true and is_happy(s.substring(48,51)) == true and is_happy(s.substring(51,54))
    == true and is_happy(s.substring(54,57)) == true and is_happy(s.substring(57,60))
    == true and is_happy(s.substring(60,63)) == true and is_happy(s.substring(63,66))
    == true and is_happy(s.substring(66,69)) == true and is_happy(s.substring(69,72))
    == true and is_happy(s.substring(72,75)) == true and is_happy(s.substring(75,78))
    == true and is_happy(s.substring(78,81)) == true and is_happy(s.substring(81,84))
    == true and is_happy(s.substring(84,87)) == true and is_happy(s.substring(87,90))
    == true and is_happy(s.substring(90,93)) == true and is_happy(s.substring(93,96))
    == true and is_happy(s.substring(96,99)) == true and is_happy(s.substring(99,102))
    == true and is_happy(s.substring(102,105)) == true and is_happy(s.substring(105,108))
    == true and is_happy(s.substring(108,111)) == true and is_happy(s.substring(111,114))
    == true and is_happy(s.substring(114,117)) == true and is_happy(s.substring(117,120))
    == true and is_happy(s.substring(120,123)) == true and is_happy(s.substring(123,126))
    == true and is_happy(s.substring(126,129)) == true and is_happy(s.substring(129,132))
    == true and is_happy(s.substring(132,', "    if is_happy(s,0)\n    else \n   \
    \     false\n    end\nend\n</code>\n<|/ a tags=recursion,julia |>\n<| c |>\nThanks\
    \ for your answer. Could you please explain how this works?\n<|/ c |>\n<| c |>\n\
    I added some explanation. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Could you please explain how this works?\n<|/ c |>\n<| c |>\nI added some explanation.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Could you please\
    \ explain how this works?\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if is_empty(s)\
    \ == true\n    then true\n    else false\nend", "    if is_empty(s) == true\n\
    \        return true\n    \n    \n    if is_happy(s[1..]) == true\n        return\
    \ true\n    \n    \n    if is_happy(s[1..]) == false\n        return false\n \
    \   \n    \n    if is_happy(s[1..]) == true\n        return false\n    \n    \n\
    \    if is_happy(s[1..]) == false\n        return true\n    \n    \n    if is_happy(s[1..])\
    \ == true\n        return false\n    \n    \n    if is_happy(s[1..]) == false\n\
    \        return true\n    \n    \n    if is_happy(s[1..]) == true\n        return\
    \ false\n    \n    \n    if is_happy(s[1..]) == false\n        return true\n \
    \   \n    \n    if is_happy(s[1..]) == true\n        return false\n    \n    \n\
    \    if is_happy(s[1..]) == false\n        return true\n    \n    \n    if is_happy(s[1..])\
    \ == true\n        return false\n    \n    \n    if is_happy(s[1..]) == false\n\
    \        return true\n    \n    \n    if is_happy(s[1..]) == true\n        return\
    \ false\n    \n    \n    if is_happy(s[1..]) == false\n        return true\n \
    \   \n    \n    if is_happy(s[1..]) == true\n        return false\n    \n    \n\
    \    if is_happy(s[1..]) == false\n        return true\n    \n    \n    if is_happy(s[1..])\
    \ == true\n        return false\n    \n    \n    if is_happy(s[1..]) == false\n\
    \        return true\n    \n    \n    if is_happy(s[1..]) == true\n        return\
    \ false\n    \n    \n    if is_happy(s[1..]) == false\n        return true\n \
    \   \n    \n    if is_happy(s[1..]) == true\n        return false\n    \n    \n\
    \    if is_happy(s[1..]) == false\n        return true\n    \n    \n    if is_happy(s[1..])\
    \ == true\n        return false\n    \n    \n    if is_happy(s[1..]) == false\n\
    \        return true\n    \n    \n    if is_happy(s[1..]) == true\n        return\
    \ false\n    \n    \n    if is_happy(s[1..]) == false\n        return true\n \
    \   \n    \n    if is_happy(s[1..]) == true\n        return false\n    \n    \n\
    \    if is_happy(s[1..]) == false\n        return true\n    \n    \n    if is_happy(s[1..])\
    \ == true\n        return false\n    \n    \n    if is_happy(s[1..]", "    if\
    \ is_happy(s.length()) == true \n    then \n        true\n    else \n        false\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26827825)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to check\
    \ if a string is happy or not. He has written the code to do that. He is asking\
    \ how to write it in a functional manner. He has written the code in a functional\
    \ manner. He is asking how to write it in a functional manner. He has written\
    \ the code in a functional manner. He has written the code in a functional manner.\
    \ He has written the code in a functional manner. He has written the code in a\
    \ functional manner. He has written the code in a functional manner. He has written\
    \ the code in a functional manner. He has written the code in a functional manner.\
    \ He has written the code in a functional manner. He has written the code in a\
    \ functional manner. He has written the code in a functional manner. He has written\
    \ the code in a functional manner. He has written the code in a functional manner.\
    \ He has written the code in a functional manner. He has written the code in a\
    \ functional manner. He has written the code in a functional manner. He has written\
    \ the code in a functional manner. He has written the code in a functional manner.\
    \ He has written the code in a functional manner. He has written the code in a\
    \ functional manner. He has written the code in a functional manner. He has written\
    \ the code in a functional manner. He has written the code in a functional manner.\
    \ He has written the code in a functional manner. He has written the code in a\
    \ functional manner. He has written the code in a functional manner. He has written\
    \ the code in a functional manner. He has written the code in a functional manner.\
    \ He has written the code in a functional manner. He has written the code in a\
    \ functional manner. ", "    if is_empty(s) == true\n        return true\n   \
    \ else if length(s) < 3\n        return false\n    else\n        \n        for\
    \ i in s\n            if i not in unique_chars(s)\n                return false\n\
    \            else\n                return true\nend", "    if is_empty(s) == true\n\
    \        return true\n    else if length(s) < 3\n        return false\n    else\n\
    \        local i::Int = 0\n        local j::Int = 0\n        local k::Int = 0\n\
    \        local l::Int = 0\n        while i < length(s) do\n            if s[i]\
    \ == s[i+1] then\n                i = i + 1\n            else\n              \
    \  j = j + 1\n                if j == 3 then\n                    k = k + 1\n\
    \                    if k == 3 then\n                        l = l + 1\n     \
    \                   if l == 3 then\n                            i = i + 1\n  \
    \                      else\n                            i = i + 1\n         \
    \               end\n                    else\n                        i = i +\
    \ 1\n                    end\n                else\n                    i = i\
    \ + 1\n                end\n            end\n        end\n        if i == length(s)\
    \ then\n            return true\n        else\n            return false\n    \
    \    end\n    end\nend\n\"\"\"\nis_happy(\"\")\nis_happy(\"a\")\nis_happy(\"aa\"\
    )\nis_happy(\"abcd\")\nis_happy(\"aabb\")\nis_happy(\"adb\")\nis_happy(\"xyy\"\
    )\nis_happy(\"xyyx\")\nis_happy(\"xyyxx\")\nis_happy(\"xyyxxa\")\nis_happy(\"\
    xyyxxab\")\nis_happy(\"xyyxxabc\")\nis_happy(\"xyyxxabcd\")\nis_happy(\"xyyxxabcde\"\
    )\nis_happy(\"xyyxxabcdea\")\nis_happy(\"xyyxxabcdeab\")\nis_happy(\"xyyxxabcdeabc\"\
    )\nis_happy(\"xyyxxabcdeabcd\")\nis_happy(\"xyyxxabcdeabcde\")\nis_happy(\"xyyxxabcdeabcdea\"\
    )\nis_happy(\"xyyxxabcdeabcdeab\")\nis_happy(\"xyyxxabcdeabcdeabc\")\nis_happy(\"\
    xyyxxabcdeabcdeabcd\")\nis_happy(\"xyyxxabcdeabcdeabcde\")\nis_happy(\"xyyxxabcdeabcdeabcdea\"\
    )\nis_happy(\"xyyxxabcdeabcdeabcdeab\")\nis_happy(\"xyyxxabcdeabcdeabcdeabc\"\
    )\nis_happy(\"xyyxxabcdeabcdeabcdeabcd\")\nis_happy(\"xyyxxabcdeabcdeabcdeabcde\"\
    )\nis_happy(\"xyyxxabcdeabcdeabcdeabcdea\")\nis_happy(\"xyyxxabcdeabcdeabcdeabcdeab\"\
    )\nis_happy(\"xyyxxabcdeabcdeabcdeabcdeabc\")\nis_happy(\"x", "    if is_empty(s):\n\
    \        return true\n    \n    len = length(s)\n    if len < 3 || len > length(s)\
    \ || is_empty(substring(s, 0, len - 2)) || is_empty(substring(s, len - 2, len))\n\
    \        return false\n    \n    i = 0\n    j = 0\n    while i < len && j < len\n\
    \        if s[i] == s[j]\n            i += 1\n            j += 1\n        else\n\
    \            i += 1\n            j += 1\n            \n    return true\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_empty(s):\n\
    \        return true\n    \n    length::Int = s.length\n    \n    if length <\
    \ 3 || length == 0 || length >= 10000:\n        return false\n    \n    letters::Array{Char,1}\
    \ = s.chars\n    \n    distinct::Array{Char,1} = unique(letters)\n    \n    length::Int\
    \ = length(distinct)\n    \n    if length < 3 || length == 0 || length >= 10000:\n\
    \        return false\n    \n    true::Bool = true\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is even.", "    if\
    \ is_happy(s.length()) == true \n    then return true \n    else return false\
    \ \nend \n</code>\n<|/ a tags=string,haskell,recursion |>\n<| c |>\n`is_happy(\"\
    \")` returns `False` but `is_happy(\" \")` returns `True`\n<|/ c |>\n<| c |>\n\
    `is_happy(\"\")` returns `False` but `is_happy(\" \")` returns `False`\n<|/ c\
    \ |>\n<| c |>\n`is_happy(\"\")` returns `False` but `is_happy(\" \")` returns\
    \ `False`\n<|/ c |>\n<| c |>\n`is_happy(\"\")` returns `False` but `is_happy(\"\
    \ \")` returns `False`\n<|/ c |>\n<| c |>\n`is_happy(\"\")` returns `False` but\
    \ `is_happy(\" \")` returns `False`\n<|/ c |>\n<| a tags=string,haskell,recursion\
    \ |>\n<code>\nis_happy :: String -> Bool\nis_happy [] = True\nis_happy (x:xs)\
    \ = all (\\y -> x /= y) $ take 3 xs ++ take 3 xs\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\n`is_happy(\"\")` returns `False` but `is_happy(\" \")` returns `False`\n\
    <|/ c |>\n<| c |>\n`is_happy(\"\")` returns `False` but `is_happy(\" \")` returns\
    \ `False`\n<|/ c |>\n<| c |>\n`is_happy(\"\")` returns `False` but `is_happy(\"\
    \ \")` returns `False`\n<|/ c |>\n<| c |>\n`is_happy(\"\")` returns `False` but\
    \ `is_happy(\" \")` returns `False`\n<|/ c |>\n<| c |>\n`is_happy(\"\")` returns\
    \ `False` but `is_happy(\" \")` returns `False`\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nis_happy :: String -> Bool\nis_happy [] = True\nis_happy (x:xs) = all\
    \ (\\y -> x /= y) $ take 3 xs ++ take 3 xs\n</code>\n<|/ a tags=string,haskell,recursion\
    \ |>\n<| c |>\n`is_happy(\"\")` returns `False` but `is_happy(\" \")` returns\
    \ `False`\n<|/", "    if is_empty(s) == true\n        return true\n    else if\
    \ length(s) < 3\n        return false\n    else if is_distinct(s[1..3])\n    \
    \    return is_happy(s[2..])\n    else\n        return is_happy(s[1..2])\nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| c |>\nI believe this solution is wrong.\
    \ Try `is_happy(\"ab\")`, which should return `true`, but returns `false`.\n<|/\
    \ c |>\n<| c |>\nI believe this solution is wrong. Try `is_happy(\"ab\")`, which\
    \ should return `true`, but returns `false`.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is wrong. Try `is_happy(\"ab\")`, which should return `true`, but returns\
    \ `false`.\n<|/ c |>\n<| c |>\nI believe this solution is wrong. Try `is_happy(\"\
    ab\")`, which should return `true`, but returns `false`.\n<|/ c |>\n<| c |>\n\
    I believe this solution is wrong. Try `is_happy(\"ab\")`, which should return\
    \ `true`, but returns `false`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if is_empty(s):\n\
    \        return true\n    \n    length::Int = s.length\n    \n    if length <\
    \ 3 || length == 0 || length >= 4\n        return false\n    \n    char::Char\
    \ = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n    \n\
    \    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char::Char = s.head\n    \n    if char == char\n        return is_happy(s.tail)\n\
    \    \n    char", "    if is_empty(s) == true\n        return true\n    else if\
    \ length(s) < 3\n        return false\n    else\n        count = 0\n        for\
    \ i in s\n            if i == s[i]\n                count += 1\n            else\n\
    \                count = 0\n            if count == 3\n                return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n\
    @time is_happy(abc)\n</cell>\n<code language=julia-1.1>\n@time is_happy(abc)\n\
    </cell>\n<code language=julia-1.1>\n@", '    if is_happy(s.length()) == true &&
    is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) == true && is_happy(s.substring(6,9))
    == true && is_happy(s.substring(9,12)) == true && is_happy(s.substring(12,15))
    == true && is_happy(s.substring(15,18)) == true && is_happy(s.substring(18,21))
    == true && is_happy(s.substring(21,24)) == true && is_happy(s.substring(24,27))
    == true && is_happy(s.substring(27,30)) == true && is_happy(s.substring(30,33))
    == true && is_happy(s.substring(33,36)) == true && is_happy(s.substring(36,39))
    == true && is_happy(s.substring(39,42)) == true && is_happy(s.substring(42,45))
    == true && is_happy(s.substring(45,48)) == true && is_happy(s.substring(48,51))
    == true && is_happy(s.substring(51,54)) == true && is_happy(s.substring(54,57))
    == true && is_happy(s.substring(57,60)) == true && is_happy(s.substring(60,63))
    == true && is_happy(s.substring(63,66)) == true && is_happy(s.substring(66,69))
    == true && is_happy(s.substring(69,72)) == true && is_happy(s.substring(72,75))
    == true && is_happy(s.substring(75,78)) == true && is_happy(s.substring(78,81))
    == true && is_happy(s.substring(81,84)) == true && is_happy(s.substring(84,87))
    == true && is_happy(s.substring(87,90)) == true && is_happy(s.substring(90,93))
    == true && is_happy(s.substring(93,96)) == true && is_happy(s.substring(96,99))
    == true && is_happy(s.substring(99,102)) == true && is_happy(s.substring(102,105))
    == true && is_happy(s.substring(105,108)) == true && is_happy(s.substring(108,111))
    == true && is_happy(s.substring(111,114)) == true && is_happy(s.substring(114,117))
    == true && is_happy(s.substring(117,120)) == true && is_happy(s.substring(120,123))
    == true && is_happy(s.substring(123,126)) == true && is_happy(s.substring(126,129))
    == true && is_happy(s.substring(129,132)) == true && is_happy(s.substring(132,',
  "    if is_empty(s):\n        return true\n    if length(s)<3 || length(s)>10\n\
    \        return false\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if is_empty(s):\n        return true\n    \n    if length(s)\
    \ < 3 || length(s) > length(s) || length(s) mod 3 != 0\n        return false\n\
    \    \n    \n    for i in 1:length(s)\n        if s[i] == s[i+1] && s[i] == s[i+2]\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is even or odd.", "    if is_happy(s,0)\n\
    \    true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of characters in a string that are 'a' or\
    \ 'e'.\nFor example:\n>>> count_a(\"a\")\n1\n>>> count_a(\"ab\")\n2\n>>> count_a(\"\
    ae\")\n2\n>>> count_a(\"abc\")\n3\n>>> count_a(\"abce\")\n3\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg\"\
    )\n4\n>>> count_a(\"abcefg\")\n4\n>>> count_a(\"abcefg", "    if is_empty(s) ==\
    \ true\n        return true\n    else if length(s) == 3\n        return is_distinct(s[1..3])\n\
    \    else\n        return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    count_distinct(s)\n    Count the number of distinct characters in s\n\
    \    \n    Arguments\n    ---------\n    s: String\n    \n    Returns\n    -------\n\
    \    Int\n    \n    Examples\n    --------\n    >>> count_distinct(\"abbc\")\n\
    \    3\n    >>> count_distinct(\"abbb\")\n    2\n    >>> count_distinct(\"ab\"\
    )\n    2\n    >>> count_distinct(\"a\")\n    1\n    >>> count_distinct(\"aa\"\
    )\n    0\n    \"\"\"", "    if is_happy(s,0)\n    else \n        false\nend\n\
    </code>\n<|/ a tags=recursion,julia |>\n<| a tags=recursion,julia |>\n<code>",
  "    if is_happy(s,0)\n    else return false\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2", "    if is_happy(s,0)\n    true\n\
    \    else false\nend", "    if is_empty(s) == true\n        return true\n    else\
    \ if length(s) < 3\n        return false\n    else\n        true\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    count_unique_chars(s)\n    Count\
    \ the number of unique characters in a string\n    \n    Input : \n        s -\
    \ a string\n    \n    Output :\n        count - the number of unique characters\
    \ in the string\n\"\"\"", "    if is_empty(s) == true\n        return true\n \
    \   else if length(s) < 3\n        return false\n    else\n        true\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_happy(\"abcd\") == false\n\
    @assert is_happy(\"aaabbb\") == false\n@assert is_happy(\"adb\") == true\n@assert\
    \ is_happy(\"xyy\") == false\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is even.", "    if is_empty(s):\n        return true\n  \
    \  \n    if s.length < 3 || s.length % 3 != 0\n        return false\n    \n  \
    \  let mut chars = String[]\n    for i in 0..length-1 {\n        chars.push(s[i])\n\
    \    }\n    \n    for i in 0..length-1 {\n        if chars[i] == chars[i+1] &&\
    \ chars[i+1] == chars[i+2] && chars[i+2] == chars[i+3] {\n            chars.pop()\n\
    \        }\n    }\n    \n    return chars.length >= 3\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels in it.", " \
    \   if is_happy(s,0)\n    else \n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is even.", '    if is_happy(s.length()) ==
    true && is_happy(s.substring(0,3))== true && is_happy(s.substring(3,6))== true
    && is_happy(s.substring(6,9))== true && is_happy(s.substring(9,12))== true &&
    is_happy(s.substring(12,15))== true && is_happy(s.substring(15,18))== true &&
    is_happy(s.substring(18,21))== true && is_happy(s.substring(21,24))== true &&
    is_happy(s.substring(24,27))== true && is_happy(s.substring(27,30))== true &&
    is_happy(s.substring(30,33))== true && is_happy(s.substring(33,36))== true &&
    is_happy(s.substring(36,39))== true && is_happy(s.substring(39,42))== true &&
    is_happy(s.substring(42,45))== true && is_happy(s.substring(45,48))== true &&
    is_happy(s.substring(48,51))== true && is_happy(s.substring(51,54))== true &&
    is_happy(s.substring(54,57))== true && is_happy(s.substring(57,60))== true &&
    is_happy(s.substring(60,63))== true && is_happy(s.substring(63,66))== true &&
    is_happy(s.substring(66,69))== true && is_happy(s.substring(69,72))== true &&
    is_happy(s.substring(72,75))== true && is_happy(s.substring(75,78))== true &&
    is_happy(s.substring(78,81))== true && is_happy(s.substring(81,84))== true &&
    is_happy(s.substring(84,87))== true && is_happy(s.substring(87,90))== true &&
    is_happy(s.substring(90,93))== true && is_happy(s.substring(93,96))== true &&
    is_happy(s.substring(96,99))== true && is_happy(s.substring(99,102))== true &&
    is_happy(s.substring(102,105))== true && is_happy(s.substring(105,108))== true
    && is_happy(s.substring(108,111))== true && is_happy(s.substring(111,114))== true
    && is_happy(s.substring(114,117))== true && is_happy(s.substring(117,120))== true
    && is_happy(s.substring(120,123))== true && is_happy(s.substring(123,126))== true
    && is_happy(s.substring(126,129))== true && is_happy(s.substring(129,', "    if\
    \ is_empty(s) == true\n        return true\n    else if length(s) == 3\n     \
    \   return is_distinct(s[1..3])\n    else\n        return false\nend", "    if\
    \ is_happy(s,0)\n    else false\nend", "    if is_empty(s):\n        return true\n\
    \    \n    len::Int = length(s)\n    if len < 3 || len > 1000:\n        return\
    \ false\n    \n    char::Char = s[0]\n    \n    for c in s[1..len-1]\n       \
    \ if char == c\n            return false\n        char = char + c\n    return\
    \ true\nend", "    if is_empty(s):\n        return true\n    \n    length::Int\
    \ = length(s)\n    \n    if length < 3 || length >= length(s) || length(s) ==\
    \ 0\n        return false\n    \n    letters::Vector{Char} = letters(s)\n    \n\
    \    distinct::Vector{Char} = distinct(letters)\n    \n    if length(distinct)\
    \ < 3 || length(distinct) >= length(letters)\n        return false\n    \n   \
    \ return true\nend\n</cell>\n<code language=julia-1.3>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.3>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.3>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.3>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise\nWrite a function that checks if\
    \ a number is prime or not. \nA number is prime if its only prime factors are\
    \ 2 and itself. \nFor example:\n>>> is_prime(6)\ntrue\n>>> is_prime(7)\nfalse\n\
    >>> is_prime(8)\ntrue\n>>> is_prime(9)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\ntrue\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\ntrue\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\ntrue\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\ntrue\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\ntrue\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\ntrue\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)\ntrue\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n", "  \
    \  if is_happy(s.length()) == true \n    then \n        true\n    else \n    \
    \    false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_happy(a)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(aa)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(abcd)\n</cell>\n<code language=julia-1.5>\nis_happy(aabb)\n</cell>\n\
    <code language=julia-1.5>\nis_happy(adb)\n</cell>\n<code language=julia-1.5>\n\
    is_happy(xyy)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a\
    \ number is even.\nA number is even if it is a multiple of 2.\nFor example:\n\
    >>> is_even(2)\ntrue\n>>> is_even(3)\nfalse\n>>> is_even(10)\ntrue\n>>> is_even(20)\n\
    false\n>>> is_even(30)\ntrue\n>>> is_even(100)\nfalse\n>>> is_even(200)\ntrue\n\
    >>> is_even(300)\nfalse\n>>> is_even(400)\ntrue\n>>> is_even(500)\nfalse\n>>>\
    \ is_even(600)\ntrue\n>>> is_even(700)\nfalse\n>>> is_even(800)\ntrue\n>>> is_even(900)\n\
    false\n>>> is_even(1000)\ntrue\n>>> is_even(1100)\nfalse\n>>> is_even(1200)\n\
    true\n>>> is_even(1300)\nfalse\n>>> is_even(1400)\ntrue\n>>> is_even(1500)\nfalse\n\
    >>> is_even(1600)\ntrue\n>>> is_even(1700)\nfalse\n>>> is_even(1800)\ntrue\n>>>\
    \ is_even(1900)\nfalse\n>>> is_even(2000)\ntrue\n>>> is_even(2100)\nfalse\n>>>\
    \ is_even(2200)\ntrue\n>>> is_even(2300)\nfalse\n>>> is_even(2400)\ntrue\n>>>\
    \ is_even(2500)\nfalse\n>>> is_even(2600)\ntrue\n>>> is_even(2700)\nfalse\n>>>\
    \ is_even(2800)\ntrue\n>>> is_even(2900)\nfalse\n>>> is_even(3000)\ntrue\n>>>\
    \ is_even(3100)\nfalse\n>>> is_even(3200) \ntrue\n>>> is_even(3300)\nfalse\n>>>\
    \ is_even(3400)\ntrue\n>>> is_even(3500)\nfalse\n>>> is_even(3600)\ntrue\n>>>\
    \ is_even(3700)\nfalse\n>>> is_even(3800)\ntrue\n>>> is_even(3900)\nfalse\n>>>\
    \ is_even(4000)\ntrue\n>>> is_even(4100)\nfalse\n>>> is_even(4200)\ntrue\n", " \
    \   if is_empty(s) == true\n        return true\n    else if length(s) < 3\n \
    \       return false\n    else if is_distinct(s[1..3])\n        return is_happy(s[2..])\n\
    \    else\n        return is_happy(s[1..3])\nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nThe vowels are \"a\", \"e\", \"i\", \"o\", and \"u\".\nFor example:\n\
    >>> count_vowels(\"a\")\n1\n>>> count_vowels(\"aeiou\")\n4\n>>> count_vowels(\"\
    abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\"\
    )\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n\
    5\n>>> count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n\
    >>> count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracadabra\")\n5\n>>> count_vowels(\"abracadabra\")\n5\n>>>\
    \ count_vowels(\"abracad", "    if is_empty(s) == true \n    then return true\
    \ \n    else \n        if is_happy(s[1..]) == true \n        then return true\
    \ \n        else return false \n    end\nend\n</code>\n<|/ a tags=string,julia,recursion\
    \ |>\n<| a tags=string,julia,recursion |>\n<code>", "    if is_happy(s,0)\n  \
    \  true\n    else\n        false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26817275)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He is asking how to\
    \ check if a string is happy or not. He has provided a solution and asked how\
    \ to implement it. He also provided a test case and asked how to implement it.\
    \ He also provided a test case and asked how to implement it. He also provided\
    \ a test case and asked how to implement it. He also provided a test case and\
    \ asked how to implement it. He also provided a test case and asked how to implement\
    \ it. He also provided a test case and asked how to implement it. He also provided\
    \ a test case and asked how to implement it. He also provided a test case and\
    \ asked how to implement it. He also provided a test case and asked how to implement\
    \ it. He also provided a test case and asked how to implement it. He also provided\
    \ a test case and asked how to implement it. He also provided a test case and\
    \ asked how to implement it. He also provided a test case and asked how to implement\
    \ it. He also provided a test case and asked how to implement it.\n<|/ c |>\n\
    <| c |>\nI believe this does answer the question. He is asking how to check if\
    \ a string is happy or not. He has provided a solution and asked how to implement\
    \ it. He also provided a test case and asked how to implement it. He also provided\
    \ a test case and asked how to implement it. He also provided a test case and\
    \ asked how to implement it. He also provided a test case and asked how to implement\
    \ it. He also provided a test case and asked how to implement it. He also provided\
    \ a test case and asked how to implement it. He also provided a test case and\
    \ asked how to implement it. He also provided a test case and asked how to implement\
    \ it. He also provided a test case and asked how to implement it. He also provided\
    \ a test case and asked how to implement it. He also provided a test case and\
    \ asked how to implement it. He also provided a test case and asked how to implement\
    \ it. He also provided a test case ", "    if is_happy(s,0)\n    else return false\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,recursion |>\n<code>",
  '    if is_happy(s.length()) == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6))
    == true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) ==
    true && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) ==
    true && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) ==
    true && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) ==
    true && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) ==
    true && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) ==
    true && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) ==
    true && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) ==
    true && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) ==
    true && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) ==
    true && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) ==
    true && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) ==
    true && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) ==
    true && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) ==
    true && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) ==
    true && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102))
    == true && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108))
    == true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_happy(s,0)\n    true\n    else\
    \ false\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a recursive\
    \ function, so this answer is not really helpful.\n<|/ c |>\n<| a |>\n<code>",
  '    if is_happy(s.length()) == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6))
    == true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) ==
    true && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) ==
    true && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) ==
    true && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) ==
    true && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) ==
    true && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) ==
    true && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) ==
    true && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) ==
    true && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) ==
    true && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) ==
    true && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) ==
    true && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) ==
    true && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) ==
    true && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) ==
    true && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) ==
    true && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102))
    == true && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108))
    == true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_happy(s.length()) == true \n\
    \        then true\n        else false\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| c |>\nThis doesn't work. `is_happy(\"a\")` returns `true` instead of\
    \ `false`. `is_happy(\"aa\")` returns `false` instead of `true`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code. Thanks for pointing it out.\n<|/ c |>\n<| a |>\nThe\
    \ accepted answer doesn't work for me. Here's a version that does:\n<code>", '    if
    is_happy(s.length) == false then return false else if is_happy(s.length) == true
    then return true else if length(s) == 3 then if is_happy(s.substring(0,2)) ==
    true and is_happy(s.substring(2,4)) == true and is_happy(s.substring(4,6)) ==
    true then return true else return false else if length(s) == 2 then if is_happy(s.substring(0,2))
    == true and is_happy(s.substring(2,4)) == true then return true else return false
    else if length(s) == 1 then if is_happy(s.substring(0,1)) == true then return
    true else return false else return false end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end
    end end end ', "    if is_empty(s) == true\n        return true\n    else if length(s)\
    \ < 3\n        return false\n    else\n        \n        for i in 1..length(s)\n\
    \            if s[i] != s[i-1]\n                return false\n        end\n  \
    \      return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    count_happy(s::String)\n    Count the number of happy strings in s\n\"\"\"",
  "    if is_happy(s.length()) then return true else return false \n    \n    for\
    \ i <- 0 .. s.length()-1 do \n        if s[i] == s[i+1] then return false \n \
    \   \n    for i <- 0 .. s.length()-2 do \n        if s[i] == s[i+1] then return\
    \ false \n    \n    for i <- 0 .. s.length()-3 do \n        if s[i] == s[i+1]\
    \ then return false \n    \n    return true \nend\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"a\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"aa\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"abcd\")\n</cell>\n<code language=julia-1.0>\nis_happy(\"aabb\")\n</cell>\n\
    <code language=julia-1.0>\nis_happy(\"adb\")\n</cell>\n<code language=julia-1.0>\n\
    is_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is prime or not. \nThe function should take one integer as input and\
    \ return true or false accordingly.\nThe function should return false for negative\
    \ numbers and negative integers. \nThe function should return false for 0 and\
    \ 1 as well.\nThe function should return false for negative integers only.\nThe\
    \ function should return false for negative numbers and non-integers only.\nThe\
    \ function should return false for non-integers only.\nThe function should return\
    \ false for non-integers and negative numbers only.\nThe function should return\
    \ false for non-integers and non-negative numbers only.\nThe function should return\
    \ false for non-integers and non-negative integers only.\nThe function should\
    \ return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-negative integers only.\nThe function\
    \ should return false for non-integers and non-", '    if is_happy(s.length())
    == true && is_happy(s.substring(0,3)) == true && is_happy(s.substring(3,6)) ==
    true && is_happy(s.substring(6,9)) == true && is_happy(s.substring(9,12)) == true
    && is_happy(s.substring(12,15)) == true && is_happy(s.substring(15,18)) == true
    && is_happy(s.substring(18,21)) == true && is_happy(s.substring(21,24)) == true
    && is_happy(s.substring(24,27)) == true && is_happy(s.substring(27,30)) == true
    && is_happy(s.substring(30,33)) == true && is_happy(s.substring(33,36)) == true
    && is_happy(s.substring(36,39)) == true && is_happy(s.substring(39,42)) == true
    && is_happy(s.substring(42,45)) == true && is_happy(s.substring(45,48)) == true
    && is_happy(s.substring(48,51)) == true && is_happy(s.substring(51,54)) == true
    && is_happy(s.substring(54,57)) == true && is_happy(s.substring(57,60)) == true
    && is_happy(s.substring(60,63)) == true && is_happy(s.substring(63,66)) == true
    && is_happy(s.substring(66,69)) == true && is_happy(s.substring(69,72)) == true
    && is_happy(s.substring(72,75)) == true && is_happy(s.substring(75,78)) == true
    && is_happy(s.substring(78,81)) == true && is_happy(s.substring(81,84)) == true
    && is_happy(s.substring(84,87)) == true && is_happy(s.substring(87,90)) == true
    && is_happy(s.substring(90,93)) == true && is_happy(s.substring(93,96)) == true
    && is_happy(s.substring(96,99)) == true && is_happy(s.substring(99,102)) == true
    && is_happy(s.substring(102,105)) == true && is_happy(s.substring(105,108)) ==
    true && is_happy(s.substring(108,111)) == true && is_happy(s.substring(111,114))
    == true && is_happy(s.substring(114,117)) == true && is_happy(s.substring(117,120))
    == true && is_happy(s.substring(120,123)) == true && is_happy(s.substring(123,126))
    == true && is_happy(s.substring(126,129)) == true && is_happy(s.substring(129,132))
    == true && is_happy(s.substring(132,', "    if is_empty(s) == true \n    then\
    \ return true\n    else if length(s)>3 \n    then return false\n    else if is_distinct(s[1..3])\
    \ == true \n    then return true\n    else return false\n    end \nend \n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"aa\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"abcd\")\n</cell>\n\
    <code language=julia-1.5>\nis_happy(\"aabb\")\n</cell>\n<code language=julia-1.5>\n\
    is_happy(\"adb\")\n</cell>\n<code language=julia-1.5>\nis_happy(\"xyy\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels in it.", "    if is_happy(s.length()) == true && is_happy(s.chars().distinct()\
    \ == true)\n    then true\n    else false\nend\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"a\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"aa\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"abcd\")\n</cell>\n<code language=julia-1.4>\n\
    is_happy(\"aabb\")\n</cell>\n<code language=julia-1.4>\nis_happy(\"adb\")\n</cell>\n\
    <code language=julia-1.4>\nis_happy(\"xyy\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels in it.", " \
    \   if is_empty(s) == true\n        return true\n    else if length(s) < 3\n \
    \       return false\n    else if length(s) == 3\n        return true\n    else\
    \ if length(s) == 2\n        return true\n    else if length(s) == 1\n       \
    \ return true\n    else if length(s) == 0\n        return false\n    else if is_happy(substring(s,\
    \ 1, 2)) == true\n        return true\n    else if is_happy(substring(s, 2, 3))\
    \ == true\n        return true\n    else if is_happy(substring(s, 3, 4)) == true\n\
    \        return true\n    else if is_happy(substring(s, 4, 5)) == true\n     \
    \   return true\n    else if is_happy(substring(s, 5, 6)) == true\n        return\
    \ true\n    else if is_happy(substring(s, 6, 7)) == true\n        return true\n\
    \    else if is_happy(substring(s, 7, 8)) == true\n        return true\n    else\
    \ if is_happy(substring(s, 8, 9)) == true\n        return true\n    else if is_happy(substring(s,\
    \ 9, 10)) == true\n        return true\n    else if is_happy(substring(s, 10,\
    \ 11)) == true\n        return true\n    else if is_happy(substring(s, 11, 12))\
    \ == true\n        return true\n    else if is_happy(substring(s, 12, 13)) ==\
    \ true\n        return true\n    else if is_happy(substring(s, 13, 14)) == true\n\
    \        return true\n    else if is_happy(substring(s, 14, 15)) == true\n   \
    \     return true\n    else if is_happy(substring(s, 15, 16)) == true\n      \
    \  return true\n    else if is_happy(substring(s, 16, 17)) == true\n        return\
    \ true\n    else if is_happy(substring(s, 17, 18)) == true\n        return true\n\
    \    else if is_happy(substring(s, 18, 19)) == true\n        return true\n   \
    \ else if is_happy(substring(s, 19, 20)) == true\n        return true\n    else\
    \ if is_happy(substring(s, 20, 21)) == true\n        return true\n    else if\
    \ is_happy(substring(s, 21, 22)) == true\n        return true\n    else if is_happy(substring(s,\
    \ 22, 23)) == true\n        return true\n    else if is_happy(substring(s, 23,\
    \ 24)) == true\n        return true\n    else if is_happy(substring(s, 24, 25))\
    \ == true\n        return true\n    else if is_happy(substring(s, 25, 26)) ==\
    \ true\n        return true\n    else if is_happy(substring(s, 26, 27)) == true\n\
    \        return true\n    else if is_happy(substring(s, 27, 28)) == true\n   \
    \     return true\n    else if is_happy(substring(s, 28, 29)) == true\n      \
    \  return true\n", "    if is_happy(s) == true\n    else \n        if is_happy(s[1..2])\
    \ == true\n        else \n            if is_happy(s[2..3]) == true\n         \
    \   else \n                if is_happy(s[3..4]) == true\n                else\
    \ \n                    if is_happy(s[4..5]) == true\n                    else\
    \ \n                        if is_happy(s[5..6]) == true\n                   \
    \     else \n                            if is_happy(s[6..7]) == true\n      \
    \                      else \n                                if is_happy(s[7..8])\
    \ == true\n                                else \n                           \
    \         if is_happy(s[8..9]) == true\n                                    else\
    \ \n                                        if is_happy(s[9..10]) == true\n  \
    \                                      else \n                               \
    \             if is_happy(s[10..11]) == true\n                               \
    \             else \n                                                if is_happy(s[11..12])\
    \ == true\n                                                else \n           \
    \                                         if is_happy(s[12..13]) == true\n   \
    \                                                 else \n                    \
    \                                    if is_happy(s[13..14]) == true\n        \
    \                                                else \n                     \
    \                                       if is_happy(s[14..15]) == true\n     \
    \                                                       else \n              \
    \                                                  if is_happy(s[15..16]) == true\n\
    \                                                                else \n     \
    \                                                               if is_happy(s[16..17])\
    \ == true\n                                                                  \
    \  else \n                                                        if is_happy(s[17..18])\
    \ == true\n                                                        else \n   \
    \                                                         if is_happy(s[18..19])\
    \ == true\n                                                            else \n\
    \                                                                if is_happy(s[19..20])\
    \ == true\n                                                                else\
    \ \n                                                                    if is_happy(s[20..21])\
    \ == true\n                                                                  \
    \  else \n                                                        if is_happy(s[21..22])\
    \ == true\n                                                        else \n   \
    \                                                         if is_happy(s[22..23])\
    \ == true\n                                                            else \n\
    \                                                                if is_happy(s[23..24])\
    \ == true\n                                                                else\
    \ \n                                                                    if is_happy(s[24..25])\
    \ == true\n                                                                  \
    \  else \n                                                        if is_happy(s[25..26])\
    \ == true\n                                                        else \n   \
    \                                                         if is_happy(s[26..27])\
    \ == true\n                                                            else \n\
    \                                                                if is_happy(s[27..28])\
    \ == true\n                                                                else\
    \ \n                                                                    if is_happy(s[28..29])\
    \ == true\n                                                                  \
    \  else \n                                                        if is_happy(s[29..30])\
    \ == true\n                                                        else \n   \
    \                                                         if is_happy(s[30..31])\
    \ == true\n                                                            else \n\
    \                                                                if is_happy(s[30..31])\
    \ == true\n                                                                else\
    \ \n                                                                    if is_happy(s[30..31])\
    \ == true\n                                                                  \
    \  else \n                                                        if is_happy("]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
