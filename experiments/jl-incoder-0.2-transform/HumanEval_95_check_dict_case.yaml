name: HumanEval_95_check_dict_case
language: jl
prompt: "\"\"\"\n    Given a dictionary, return True if all keys are strings in lower\
  \ \n    case or all keys are strings in upper case, else return False.\n    The\
  \ function should return False is the given dictionary is empty.\n    Examples:\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
  \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
  \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8 =>\
  \ \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"Name\"\
  \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n    >>>\
  \ check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    true\n \
  \   \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\"\
  \ => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
  \ false)\nend\n"
completions: ["    \n    true\nend\n</cell>\n<code language=julia-1.3>", "    \n \
    \   if dict == Dict()\n        return true\n    end\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        end\n        if isupper(k)\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 2: Write a function that checks if a dictionary is empty or not.\
    \ \nThe function should return true if the dictionary is empty, and false if it\
    \ is not.\nExamples:\n>>> check_dict_empty(Dict())\ntrue\n>>> check_dict_empty(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\nfalse\n>>> check_dict_empty(Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_dict_empty(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\ntrue\n\"\"\"", "    \n    true\nend",
  "    \n    if !is_dict_empty(dict)\n        \n        for key in dict\n        \
    \    if !is_str_lower(key) || !is_str_upper(key)\n                return false\n\
    \        end\n        \n        return true\n    end\n    \n    return false\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary as\
    \ an argument and returns the number of keys that are strings in lower case or\
    \ upper case.", "    \n    true\nend", "    true\nend", "    \n    true\nend\n\
    </cell>\n<code language=julia-1.5>", "    true\nend", "    true\nend", "    true\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary as\
    \ an argument and returns a new dictionary with the keys in lower case and the\
    \ values in upper case. \nThe function should return a new dictionary if the given\
    \ dictionary is not empty. \nThe function should return a new dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"", "    true\nend", "    true\nend",
  "    \n    if dict == Dict()\n        return true\n    \n    true_keys = Set()\n\
    \    false_keys = Set()\n    for key in dict\n        if islower(key)\n      \
    \      true_keys.add(key)\n        else\n            false_keys.add(key)\n   \
    \ end\n    \n    return true_keys == false_keys\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a new string where all \n\
    occurrences of \"A\" have been replaced with \"B\" and \"B\" have been replaced\
    \ \nwith \"A\". \nExamples:\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\
    \"BBBB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>> ",
  "    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if !is_string(k)\n\
    \                return false\n            if !is_string(v)\n                return\
    \ false\n        end\n        return true\n    else\n        return false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"", "    \n    if !is_empty(dict)\n\
    \        for (key, value) in dict\n            if islower(key)\n             \
    \   return false\n            if isupper(key)\n                return false\n\
    \        end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as input and returns a new\
    \ dictionary where all keys are strings in lower case and all values are strings\
    \ in upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is empty. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ \" => \" \")\nDict()\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\"\
    \ \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" =>\
    \ \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"\
    a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>>\
    \ Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"\
    a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \"\
    \ => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"\
    a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\"\
    )\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\"\
    \ \" => \"a\")\nDict(\"a\" => \"a\")", "    \n    true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are converted to lower case and all values are\
    \ converted to upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is not empty. \nThe function should return a new dictionary\
    \ if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"", "    true\nend", "    true\nend",
  "    \n    if !is_empty(dict)\n        for (key, value) in dict\n            if\
    \ islower(key)\n                return false\n            elseif isupper(key)\n\
    \                return false\n            else\n                return true\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a new string with all the characters\
    \ in lower case and all the characters in upper case. \nExamples:\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> ", "    true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ where all keys are converted to upper case."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
