name: HumanEval_112_reverse_delete
language: jl
prompt: "\"\"\"Task\n    We are given two strings s and c, you have to deleted all\
  \ the characters in s that are equal to any character in c\n    then check if the\
  \ result string is palindrome.\n    A string is called palindrome if it reads the\
  \ same backward as forward.\n    You should return a tuple containing the result\
  \ string and True/False for the check.\n    Example\n    >>> reverse_delete(\"abcde\"\
  , \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n   \
  \ (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    (\"cdedc\"\
  , true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
  \ Bool} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
  abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"\
  acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\
  \t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
  , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
  , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
  @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
  , \"mia\") == (\"\", true))\nend\n"
completions: ["    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s[1:], c), false)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\", false)\n    end\n    \n    if s[end-1]==c[0]\n\
    \        return reverse_delete(s[end-1:end], c[1:end-1])\n    end\n    \n    if\
    \ s[end-1]==c[1]\n        return reverse_delete(s[end-1:end], c[1:end-1])\n  \
    \  end\n    \n    if s[end-1]==c[2]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[3]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[4]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[5]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[6]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[7]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[8]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[9]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[10]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[11]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[12]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[13]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[14]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[15]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[16]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[17]\n        return reverse_delete(s[end-1:end],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[18]\n        return reverse_delete(s[",
  "    if length(s)==0 || length(c)==0 then return (s, false)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s[1:],\
    \ c), true)\nend", "    if length(c) == 0 then return (s, true) else return (s,\
    \ false)\n    \n    if length(s) < 2 then return (s, false) else \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(c) < length(s) \n     \
    \   error(\"c should be longer than s\")\n    end\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s,\
    \ c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>", "    if length(c) < length(s) \n        return (\"\
    Not a palindrome\", false)\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend", "    if length(c) < length(s) \n        error(\"c should be longer\
    \ than s\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>", "    if length(c) < length(s)\
    \ \n        return (s, false)\n    else if length(c) == length(s) \n        return\
    \ (s, true)\n    else \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n", "    if\
    \ length(s)==0 || length(c)==0\n        return (s, false)\n    end\n    if s[0]==c[0]\n\
    \        s=reverse_delete(s[1:], c[1:])\n        return (s, true)\n    end\n \
    \   if s[0]!=c[0]\n        s=reverse_delete(s[1:], c)\n        return (s, true)\n\
    \    end\n    s=reverse_delete(s, c[1:])\n    return (s, true)\nend\n</cell>\n\
    <code language=julia-1.3>", "    if length(s)==0 || length(c)==0\n        return\
    \ (s, false)\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    \n    return (reverse_delete(s[1:], c[1:]), false)\nend", "    if\
    \ length(s)==0 || length(c)==0\n        return (s, false)\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    \n    if s[0]!=c[0]\n\
    \        return (s, false)\n    \n    return (reverse_delete(s[1:], c[1:]), false)\n\
    end", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return\
    \ (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    \n    \n    if length(s)==0 \n        return (s, false)\n\
    \    \n    if length(c)==0 \n        return (s, true)\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    \n    if s[0]!=c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), false)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend", "    if length(c) < length(s) \n        return (s, false)\n\
    \    else if length(c) == length(s) \n        return (s, true)\n    else \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n", "    if length(c) < length(s) then\
    \ return (s, false) else (s, true)\n    \n    \n    if s == c then return (s,\
    \ true)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(s)==0 then return (s, false)\n    if length(c)==0 then return (s, true)\n\
    \    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    return\
    \ (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c),\
    \ false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>", "    if length(s)==0 || length(c)==0\n        return (s,\
    \ false)\n    end\n    if s[end-1]==c[0]\n        s=reverse_delete(s[end-1:end],c[1:])\n\
    \        return (s,true)\n    end\n    if s[end-1]!=c[0]\n        s=reverse_delete(s[end-1:end],c[1:])\n\
    \        return (s,false)\n    end\n    s=reverse_delete(s[end-1:end],c[1:])\n\
    \    return (s,true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>", "    if length(c) < length(s) then return\
    \ (s, false)\n    if s == c then return (s, true)\n    \n    let (left, right)\
    \ = reverse_delete(s, substring(s, 0, length(s) - length(c)))\n    let (right,\
    \ left) = reverse_delete(left, substring(c, length(c) - length(s)))\n    \n  \
    \  return (left + substring(right, length(c)), right == s)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n", "    if length(c) < length(s) \n        return\
    \ (s, false)\n    \n    if length(c) == length(s) \n        return (s, true)\n\
    \    \n    if s[length(s)] == c \n        return (s, true)\n    \n    if s[length(s)]\
    \ == c[1] \n        return (s, true)\n    \n    if s[length(s)] == c[2] \n   \
    \     return (s, true)\n    \n    if s[length(s)] == c[3] \n        return (s,\
    \ true)\n    \n    if s[length(s)] == c[4] \n        return (s, true)\n    \n\
    \    if s[length(s)] == c[5] \n        return (s, true)\n    \n    if s[length(s)]\
    \ == c[6] \n        return (s, true)\n    \n    if s[length(s)] == c[7] \n   \
    \     return (s, true)\n    \n    if s[length(s)] == c[8] \n        return (s,\
    \ true)\n    \n    if s[length(s)] == c[9] \n        return (s, true)\n    \n\
    \    if s[length(s)] == c[10] \n        return (s, true)\n    \n    if s[length(s)]\
    \ == c[11] \n        return (s, true)\n    \n    if s[length(s)] == c[12] \n \
    \       return (s, true)\n    \n    if s[length(s)] == c[13] \n        return\
    \ (s, true)\n    \n    if s[length(s)] == c[14] \n        return (s, true)\n \
    \   \n    if s[length(s)] == c[15] \n        return (s, true)\n    \n    if s[length(s)]\
    \ == c[16] \n        return (s, true)\n    \n    if s[length(s)] == c[17] \n \
    \       return (s, true)\n    \n    if s[length(s)] == c[18] \n        return\
    \ (s, true)\n    \n    if s[length(s)] == c[19] \n        return (s, true)\n \
    \   \n    if s[length(s)] == c[20] \n        return (s, true)\n    \n    if s[length(s)]\
    \ == c[21] \n        return (s, true)\n    \n    if s[length(s)] == c[22] \n \
    \       return (s, true)\n    \n    if s[length(s)] == c[23] \n        return\
    \ (s, true)\n    \n    if s[length(s)] == c[24] \n        return (s, true)\n \
    \   \n    if s[length(s)] == c[25] \n        return (s, true)\n    \n    if s[length(s)]\
    \ == c[26] \n        return (s, true)\n    \n    if s[length(s)] == c[27] \n \
    \       return (s, true)\n    \n    if s[length(s)] == c[28] \n        return\
    \ (s, true)\n    \n    if s[length(s)] == c[29] \n        return (s, true)\n \
    \   \n    if s[length(s)] == c[30] \n        return (s, true)\n    \n    if s[length(s)]\
    \ == c[31] \n        return (s, true)\n    \n    if s[length(s)] == c[32] \n",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s)==0\
    \ || length(c)==0 || length(s)!=length(c) || length(c)==0\n        return (s,\
    \ false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>", "    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=", "    \n    \n    if length(s)==0\
    \ || length(c)==0\n        return (s, false)\n    end\n    \n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    end\n    \n    \n  \
    \  if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n    end\n\
    \    \n    \n    return (reverse_delete(s[1:], c[1:]), false)\nend", "    if length(s)==0\
    \ || length(c)==0\n        return (\"false\", false)\n    end\n    \n    if s[0]==c[0]\n\
    \        res=reverse_delete(s[1:], c[1:])\n        return (res[1], true)\n   \
    \ end\n    \n    res=reverse_delete(s[1:], c)\n    return (res[1], false)\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete",
  "    if length(s)==0 || length(c)==0\n        return (\"\", false)\n    end\n  \
    \  \n    if s[0]==c[0]\n        deleted = reverse_delete(s[1:], c[1:])\n     \
    \   return (s[0]+deleted[1], true)\n    end\n    \n    deleted = reverse_delete(s[1:],\
    \ c)\n    return (s[0]+deleted[1], false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\n", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend", "   \
    \ if length(s)==0 || length(c)==0\n        return (\"\", false)\n    end\n   \
    \ \n    if s[end-1]==c[0]\n        return (s[0..end-1], true)\n    end\n    \n\
    \    if s[end-1]==c[1]\n        return (s[0..end-1], true)\n    end\n    \n  \
    \  if s[end-1]==c[2]\n        return (s[0..end-1], true)\n    end\n    \n    if\
    \ s[end-1]==c[3]\n        return (s[0..end-1], true)\n    end\n    \n    if s[end-1]==c[4]\n\
    \        return (s[0..end-1], true)\n    end\n    \n    if s[end-1]==c[5]\n  \
    \      return (s[0..end-1], true)\n    end\n    \n    if s[end-1]==c[6]\n    \
    \    return (s[0..end-1], true)\n    end\n    \n    if s[end-1]==c[7]\n      \
    \  return (s[0..end-1], true)\n    end\n    \n    if s[end-1]==c[8]\n        return\
    \ (s[0..end-1], true)\n    end\n    \n    if s[end-1]==c[9]\n        return (s[0..end-1],\
    \ true)\n    end\n    \n    if s[end-1]==c[10]\n        return (s[0..end-1], true)\n\
    \    end\n    \n    if s[end-1]==c[11]\n        return (s[0..end-1], true)\n \
    \   end\n    \n    if s[end-1]==c[12]\n        return (s[0..end-1], true)\n  \
    \  end\n    \n    if s[end-1]==c[13]\n        return (s[0..end-1], true)\n   \
    \ end\n    \n    if s[end-1]==c[14]\n        return (s[0..end-1], true)\n    end\n\
    \    \n    if s[end-1]==c[15]\n        return (s[0..end-1], true)\n    end\n \
    \   \n    if s[end-1]==c[16]\n        return (s[0..end-1], true)\n    end\n  \
    \  \n    if s[end-1]==c[17]\n        return (s[0..end-1], true)\n    end\n   \
    \ \n    if s[end-1]==c[18]\n        return (s[0..end-1], true)\n    end\n    \n\
    \    if s[end-1]==c[19]\n        return (s[0..end-1], true)\n    end\n    \n \
    \   if s[end-1]==c[20]\n        return (s[0..end-1], true)\n    end\n    \n  \
    \  if s[end-1]==c[21]\n        return (s[0..end-1], true)\n    end\n    \n   \
    \ if s[end-1]==c[22]\n        return (s[0..end-1], true)\n", "    if length(c)\
    \ < length(s) then return (s, false) else (s, true)\n    \n    let (left, right)\
    \ = partition(s, c)\n    \n    if left == \"\" then return (right, false) else\
    \ (left, true)\n    \n    let (left, right) = reverse_delete(left, c)\n    \n\
    \    if left == \"\" then return (right, false) else (left, true)\n    \n    let\
    \ (left, right) = reverse_delete(right, c)\n    \n    if left == \"\" then return\
    \ (right, false) else (left, true)\n    \n    return (left, true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend", "  \
    \  if length(c) < length(s) \n        return (s, false)\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n    end\n\
    \    if length(find(s, c))==0 \n        return (\"false\", false)\n    end\n \
    \   \n    \n    if length(find(s, c))==length(find(reverse(s), c))\n        return\
    \ (\"true\", true)\n    end\n    \n    return (\"false\", false)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>", "    if length(s)==0 || length(c)==0 \n      \
    \  return (\"false\", false)\n    else if length(s)==1 \n        return (reverse_delete(s,c),true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s,c),true)\n    else\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        ", "    if\
    \ length(s)==0 then return (s, false)\n    if length(c)==0 then return (s, true)\n\
    \    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    return\
    \ (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend", "    if\
    \ length(s)==0 || length(c)==0 || length(s)==length(c) || length(c)==0\n     \
    \   return (s, false)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</", "    \n    if length(s)==0 || length(c)==0\n        return (s,\
    \ false)\n    end\n    \n    if s[length(s)-1]==c[0]\n        return (reverse_delete(s[0..(length(s)-1)],\
    \ c[1..length(c)]), true)\n    else\n        return (reverse_delete(s[0..(length(s)-1)],\
    \ c), false)\n    end\nend\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    if length(s)==0 || length(c)==0\n        return (\"false\"\
    , false)\n    end\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    end\n    \n    return (reverse_delete(s[1:], c), false)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c[1:]), true)\nend",
  "    if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n    else\
    \ if length(s)==1\n        return (reverse_delete(s[1:], c), true)\n    else if\
    \ length(c)==1\n        return (reverse_delete(s, c[1:]), true)\n    else\n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\", false)\n    else if length(s)==1\n\
    \        return (reverse_delete(s,c), true)\n    else if length(c)==1\n      \
    \  return (reverse_delete(s,c), true)\n    else\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "    if length(s)==0 || length(c)==0 \n\
    \        return (s, false)\n    \n    \n    \n    if s[0]==c[0]\n        return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    \n    \n    \n    if s[0]!=c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), false)\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    else return (reverse_delete(s, c[1:]), true)\nend", "    if length(s)==0\
    \ || length(c)==0\n        return (s, false)\n    \n    if s[0]==c[0]\n      \
    \  return (reverse_delete(s[1:], c[1:]), true)\n    \n    if s[0]!=c[0]\n    \
    \    return (reverse_delete(s[1:], c[1:]), false)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), false)\nend", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    else return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>", "    if length(s)==0 || length(c)==0\n\
    \        return (\"\", false)\n    end\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 || length(c)==0\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c), true)\nend", "  \
    \  if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    else return (reverse_delete(s[1:], c[1:]), false)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    \n    \n    if length(s)==0 || length(c)==0\n        return\
    \ (s, false)\n    end\n    \n    if length(s)==1\n        return (s[end-1]==c[end-1]\
    \ ? s : s[end-1]+reverse_delete(s[end-1:end], c), false)\n    end\n    \n    if\
    \ length(c)==1\n        return (s[end-1]==c[end-1] ? s : reverse_delete(s[end-1:end],\
    \ c)+s[end-1], false)\n    end\n    \n    if s[end-1]==c[end-1]\n        return\
    \ (reverse_delete(s[end-1:end], c)+s[end-1], true)\n    end\n    \n    return\
    \ (s[end-1]+reverse_delete(s[end-1:end], c), false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abc", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>",
  "    if length(c) < length(s) \n        return (s, false)\n    else if length(c)\
    \ == length(s) \n        return (s, true)\n    else \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend", "   \
    \ if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ba\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ba\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ba\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ba\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ba\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=", "    if length(s)==0 || length(c)==0 then\
    \ return (s, false)\n    if length(s)==1 then return (s, false)\n    if length(c)==1\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if reverse(s[1:])==reverse(s[2:]) then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s[1:], c[1:]), false)\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=", "    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 \n        return (reverse_delete(s,c[1:end-1]),\
    \ true)\n    else if length(c)==1 \n        return (reverse_delete(s[1:end-1],c),\
    \ true)\n    else \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n", "    if length(s)==0 then\
    \ return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:],\
    \ c[1:]), false)\nend", "    if length(s)==0 || length(c)==0 then return (s, false)\n\
    \    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n    else\
    \ return (reverse_delete(s[1:], c), false)\nend", "    if length(c) < length(s)\
    \ \n        return (s, false)\n    else if length(c) > length(s) \n        return\
    \ (s, false)\n    else \n        if s == c \n            return (s, true)\n  \
    \      else \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            ", "    if length(s)==0 || length(c)==0\n        return (s,\
    \ false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    if length(c) < length(s) then return (s, false)\n\
    \    else if length(c) == length(s) then return (s, true)\n    else if length(c)\
    \ > length(s) then return (reverse_delete(s, c[1:end-1]), true)\n    else return\
    \ (reverse_delete(s, c[1:end-1]), false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell", " \
    \   if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    else return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n", "    \n    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    end\n    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    end\n    \n    return (reverse_delete(s[1:], c[1:]), true)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"false\",false)\n    end\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s,\
    \ c[1:]), false)\nend", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    \n    if length(s)==0 then return (s, false)\n    if\
    \ length(c)==0 then return (s, true)\n    if length(s)==1 then return (s, false)\n\
    \    if length(c)==1 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend", "    if length(s)==0\
    \ || length(c)==0 then return (s, false)\n    if length(s)==1 then return (s,\
    \ false)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend", "   \
    \ if length(c) < length(s) then return (s, false)\n    else if length(c) == length(s)\
    \ then return (s, true)\n    else if length(c) > length(s) then return (reverse_delete(s,\
    \ c[1:end-1]), false)\n    else if c == s[end] then return (reverse_delete(s,\
    \ c[1:end-1]), true)\n    else if c == s[end-1] then return (reverse_delete(s,\
    \ c[1:end]), true)\n    else return (reverse_delete(s, c[1:end-1]), true)\nend\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedc", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s[1:],\
    \ c), false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.3>",
  "    if length(c) < length(s) then return (s, false)\n    else if length(c) == length(s)\
    \ then return (s, true)\n    else if length(c) > length(s) then return (s, false)\n\
    \    else if s == c then return (s, true)\n    else if length(s) <= length(c /\
    \ 2) then return (s, false)\n    else if length(s) >= length(c / 2) then return\
    \ (s, true)\n    else if length(s) <= length(c / 2) then return (s, true)\n  \
    \  else if length(s) >= length(c / 2) then return (s, true)\n    else if length(s)\
    \ <= length(c / 2) then return (s, true)\n    else if length(s) >= length(c /\
    \ 2) then return (s, true)\n    else if length(s) <= length(c / 2) then return\
    \ (s, true)\n    else if length(s) >= length(c / 2) then return (s, true)\n  \
    \  else if length(s) <= length(c / 2) then return (s, true)\n    else if length(s)\
    \ >= length(c / 2) then return (s, true)\n    else if length(s) <= length(c /\
    \ 2) then return (s, true)\n    else if length(s) >= length(c / 2) then return\
    \ (s, true)\n    else if length(s) <= length(c / 2) then return (s, true)\n  \
    \  else if length(s) >= length(c / 2) then return (s, true)\n    else if length(s)\
    \ <= length(c / 2) then return (s, true)\n    else if length(s) >= length(c /\
    \ 2) then return (s, true)\n    else if length(s) <= length(c / 2) then return\
    \ (s, true)\n    else if length(s) >= length(c / 2) then return (s, true)\n  \
    \  else if length(s) <= length(c / 2) then return (s, true)\n    else if length(s)\
    \ >= length(c / 2) then return (s, true)\n    else if length(s) <= length(c /\
    \ 2) then return (s, true)\n    else if length(s) >= length(c / 2) then return\
    \ (s, true)\n    else if length(s) <= length(c / 2) then return (s, true)\n  \
    \  else if length(s) >= length(c / 2) then return (s, true)\n    else if length(s)\
    \ <= length(c / 2) then return (s, true)\n    else if length(s) >= length(c /\
    \ 2) then return (s, true)\n    else if length(s) <= length(c / 2) then return\
    \ (s, true)\n    else if length(s) >= length(c / 2) then return (s, true)\n  \
    \  else if length(s) <= length(c / 2) then return (s, true)\n    else if length(s)\
    \ >= length(c / 2) then return (s, true)\n    else if length(s) <= length(c /\
    \ 2) then return ", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ || length(c)==0\n        return (s, false)\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>", "    if length(s)==0 || length(c)==0\n        return\
    \ (s, false)\n    \n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    \n    return (reverse_delete(s[1:], c[1:]), true)\nend",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=", "    if length(s)==0 || length(c)==0\
    \ || length(s)==length(c) || length(c)==0 \n        return (\"false\",false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\", false)\n    else if length(s)==1\
    \ \n        return (reverse_delete(s, c), true)\n    else if length(c)==1 \n \
    \       return (reverse_delete(s, c), true)\n    else if s[length(s)-1]==c[0]\
    \ \n        return (reverse_delete(substring(s, 1, length(s)-1), c), true)\n \
    \   else if c[0]==s[length(s)-1] \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), true)\n    else if c[0]!=s[length(s)-1] \n        return\
    \ (reverse_delete(substring(s, 1, length(s)-1), c), false)\n    else \n      \
    \  return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=juli", "    if length(s)==0 || length(c)==0\n        return\
    \ (\"false\", false)\n    end\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab", "    if length(s)==0\
    \ || length(c)==0 then return (s, false)\n    \n    \n    if s[length(s)-1]==c\
    \ then \n        return reverse_delete(substring(s, 1, length(s)-1), c)\n    elseif\
    \ s[length(s)-1]!=c then \n        return reverse_delete(substring(s, 1, length(s)-1),\
    \ c)\n    else\n        return reverse_delete(substring(s, 1, length(s)-1), c)\
    \ + reverse_delete(substring(s, length(s)+1), c)\n    end\nend", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c), true)\nend", "    if length(s)==0 || length(c)==0\n        return (\"false\"\
    ,false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    if length(s)==0 || length(c)==0\n        return (s,false)\n\
    \    end\n    if length(s) >= length(c)\n        deleted = s[length(s)-length(c):length(s)]\
    \ \n        return (deleted,true)\n    else\n        deleted = s[length(s)-length(c)+1:length(s)]\
    \ \n        return (deleted,false)\n    end\nend\n\"\"\"\n    We are given two\
    \ strings s and c, you have to delete all the characters in s that are equal to\
    \ any character in c\n    then check if the result string is palindrome.\n   \
    \ A string is called palindrome if it reads the same backward as forward.\n  \
    \  You should return a tuple containing the result string and True/False for the\
    \ check.\n    Example\n    >>> reverse_delete(\"abcde\", \"ae\")\n    (\"bcd\"\
    , false)\n    >>> reverse_delete(\"abcdef\", \"b\")\n    (\"acdef\", false)\n\
    \    >>> reverse_delete(\"abcdedcba\", \"ab\")\n    (\"cdedc\", true)\n    \"\"\
    \"", "    if length(c) < length(s) \n        return (s, false)\n    else if length(c)\
    \ == length(s) \n        if c == reverse(s[length(s)..]) \n            return\
    \ (s[length(s)..], true)\n        else \n            return (s, false)\n    else\
    \ \n        return (s, false)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</", "    if length(s)==0 || length(c)==0 \n        return (\"\", false)\n\
    \    else if length(s) >= length(c) \n        return (s[length(s)-length(c):],\
    \ true)\n    else \n        return (s[length(s)-length(c)+1:], false)\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s)==0\
    \ || length(c)==0\n        return (\"false\", false)\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    \n    if s[0]!=c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), false)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), reverse_delete(s, c[1:]))\nend", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell", " \
    \   if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n    \n\
    \    \n    if s[0]==c[0]\n        s=reverse_delete(s[1:], c[1:])\n    else\n \
    \       s=reverse_delete(s[1:], c)\n    end\n    \n    return (s, true)\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    else if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    else\n        return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</", "    if length(s)==0 || length(c)==0\n        return\
    \ (s, false)\n    end\n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell", " \
    \   if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"false\", false)\n    else if length(s)==1 \n        return\
    \ (reverse_delete(s,c),true)\n    else if length(c)==1 \n        return (reverse_delete(s,c),true)\n\
    \    else if s[end-1]==c[0] \n        return (reverse_delete(s,c),true)\n    else\
    \ if s[end-1]!=c[0] \n        return (reverse_delete(s,c),false)\n    else \n\
    \        return (reverse_delete(s,c),false)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-", "    if\
    \ length(s)==0 || length(c)==0 || length(s)!=length(c) || length(c)!=1 \n    \
    \    return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if length(c) < length(s) \n        return (s, false)\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    else\n        return (reverse_delete(s[1:], c[1:]), false)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n", "    if length(s)==0 || length(c)==0 \n    \
    \    return (\"false\", false)\n    else if length(s)==1 && length(c)==1 \n  \
    \      return (\"true\", true)\n    else if length(s)==length(c) && all(s[i]==c[i]\
    \ || s[i]==c[i-1] for i in 1:length(s)) \n        return (\"true\", true)\n  \
    \  else \n        return (reverse_delete(substring(s, 1, length(s)-1), c), reverse_delete(substring(s,\
    \ 1, length(s)-1), c))\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</", "    if length(s)==0 || length(c)==0 || length(s)==length(c) ||\
    \ length(c)==0 \n        return (\"false\", false)\n    else if length(s)==length(c)\
    \ && all(s[i]==c[i] || s[i]==c[i-1] for i in 1:length(s)) \n        return (\"\
    true\", true)\n    else \n        return (reverse_delete(substring(s, 1, length(s)-1),\
    \ c), reverse_delete(substring(s, 1, length(s)-1), c))\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>", "    if length(c) <\
    \ length(s) then return (s, false)\n    else if length(c) == length(s) then return\
    \ (s, true)\n    else if length(c) > length(s) then return (reverse_delete(s,\
    \ c[1:end-1]), false)\n    else if c[1:end-1] == s[end-1:1] then return (reverse_delete(s,\
    \ c[1:end-1]), true)\n    else return (reverse_delete(s, c[1:end-1]), true)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n",
  "    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if length(s)==0 || length(c)==0\n        return (s,false)\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if length(c) < length(s) \n        return (s, false)\n    else if length(c)\
    \ > length(s) \n        return (s, true)\n    else\n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        ", "    if length(c) < length(s) then return (s,\
    \ false) else return (reverse_delete(s, substring(s, 0, length(c))) , \n    length(c)\
    \ == length(reverse(substring(s, 0, length(c)))))\nend", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c), true)\nend", "    if length(s)==0 || length(c)==0 then return (s, false)\
    \ else \n        if length(s)==1 then return (s, true) else \n            if length(c)==1\
    \ then return (reverse_delete(s[1..end-1], c[1..end-1]), true) else \n       \
    \         if c[end-1]==s[end-1] then return (reverse_delete(s[1..end-1], c[1..end-1]),\
    \ true) else \n                    return (reverse_delete(s[1..end-1], c[1..end-1]),\
    \ false)\n    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"",
  "    \n    if length(c) < length(s) \n        return (s, false)\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(s)==0 || length(c)==0 then return (s, false)\n    if length(s)==1\
    \ then return (s, false)\n    if length(c)==1 then return (s, false)\n    if s[length(s)-1]==c[0]\
    \ then return (reverse_delete(s[0..length(s)-1], c[1:]), true)\n    else return\
    \ (reverse_delete(s[0..length(s)-1], c[1:]), false)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba",
  "    if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>", "    if length(s)==0 || length(c)==0 then return (s, false)\n\
    \    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n    else\
    \ return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    end\n    if s[end]==c\n        return (s, true)\n\
    \    end\n    if s[end]!=c\n        return reverse_delete(s[end+1:end+length(c)],\
    \ c)\n    end\n    return reverse_delete(s[end+1:end+length(c)], c)\nend\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c), true)\nend", "    \n    \n    if length(s)==0 || length(c)==0\n        return\
    \ (s, false)\n    end\n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],\
    \ c[1:end-1]), true)\n    else\n        return (reverse_delete(s[end-1:end], c[1:end]),\
    \ false)\n    end\nend", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s,\
    \ c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell",
  "    \n    if length(s)==0 || length(c)==0\n        return (s, false)\n    end\n\
    \    if length(s)==1\n        return (s[end-1]==c[1], true)\n    end\n    if length(c)==1\n\
    \        return (s[end-1]==c[1], true)\n    end\n    if s[end-1]==c[1]\n     \
    \   return (reverse_delete(s[end-2], c[2:end-1]), true)\n    end\n    if s[end-1]!=c[1]\n\
    \        return (reverse_delete(s[end-2], c[2:end-1]), false)\n    end\n    return\
    \ (reverse_delete(s[end-2], c[2:end-1]), false)\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(s)==0 || length(c)==0 \n        return (\"\", false)\n    else if\
    \ length(s)==1 \n        return (s, true)\n    else if length(c)==1 \n       \
    \ return (s, false)\n    else\n        let (s,c) = reverse_delete(substring(s,1,end-1),substring(c,1,end-1))\n\
    \        (s+substring(s,end,1), c==substring(s,end,1))\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-2:end-1],\
    \ c[1:end-1]), true)\n    else\n        return (reverse_delete(s[end-1:end], c[1:end]),\
    \ false)\n    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"", "    if length(s)==0\
    \ || length(c)==0 \n        return (\"false\",false)\n    end\n    \n    \n  \
    \  if s[length(s)-1]==c[0] \n        return (reverse_delete(s[0..length(s)]-c[1:],c),true)\n\
    \    else\n        return (reverse_delete(s[0..length(s)-1],c[1:]),false)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=", "    if length(s)==0 || length(c)==0 \n        return (\"\"\
    , false)\n    end\n    \n    \n    if s[end-1]==c[0] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[0] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[1] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[1] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[2] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[2] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[3] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[3] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[4] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[4] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[5] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[5] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[6] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[6] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[7] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[7] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[8] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[8] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[9] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[9] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[10] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=c[10] \n        return (s[end-1:end],\
    \ false)\n    end\n    \n    if s[end-1]==c[11] \n        return (s[end-1:end],\
    \ true)\n    end\n    \n    if s[end-1]!=", "    if length(c) == 0 then return\
    \ (s, false) else reverse_delete(s[end-1:end], c) else reverse_delete(s[end-1:end-1],\
    \ c) \nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell", "    if length(s)==0 || length(c)==0\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s[1:], c), false)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>", "    if length(c) < length(s)\
    \ \n        return (s, false)\n    else if length(c) > length(s) \n        return\
    \ (s, false)\n    else if s == c \n        return (s, true)\n    else if s[length(s)]\
    \ == c \n        return (s, true)\n    else if s[length(s)] == s[length(s)-1]\
    \ \n        return (s, true)\n    else\n        deleted = reverse_delete(s[length(s)-1:],\
    \ c)\n        return (deleted, true)\n    end\nend\n</code>\n<|/ a tags=string,recursion,julia\
    \ |>\n<| c |>\nThanks for your answer! I see that your solution is more efficient\
    \ than mine, but I still don't understand why my code doesn't work. Could you\
    \ please explain to me why my code doesn't work?\n<|/ c |>\n<| c |>\nI added my\
    \ own solution to the question. Could you please explain to me why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added my own solution to the question. Could you\
    \ please explain to me why my code doesn't work?\n<|/ c |>\n<| c |>\nI added my\
    \ own solution to the question. Could you please explain to me why my code doesn't\
    \ work?\n<|/ c |>\n<| a tags=string,recursion,julia |>\nI see that your solution\
    \ is more efficient than mine, but I still don't understand why my code doesn't\
    \ work. Could you please explain to me why my code doesn't work?", "    if length(s)==0\
    \ || length(c)==0\n        return (s, false)\n    \n    if s[0]==c[0]\n      \
    \  return (reverse_delete(s[1:], c[1:]), true)\n    \n    if s[0]!=c[0]\n    \
    \    return (s, false)\n    \n    return (reverse_delete(s[1:], c[1:]), false)\n\
    end", "    if length(c) < length(s) \n        return (s, false)\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=", "    if length(s)==0 || length(c)==0\n \
    \       return (\"\", false)\n    end\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend", "    if length(c) == 0 then return (s, false) else reverse_delete(s[end-1..end],\
    \ c[end-1..end]) \nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    if length(s)==0 || length(c)==0 then return (s, false) else \n    if length(s)==1\
    \ then return (s, true) else \n    if length(c)==1 then return (reverse_delete(s[1..end-1],\
    \ c[1..end-1]), true) else \n    if s[end-1]==c then return (reverse_delete(s[1..end-1],\
    \ c[1..end-1]), true) else \n    return (reverse_delete(s[1..end-1], c[1..end-1]),\
    \ false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"", "  \
    \  if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend", "    if length(s)==0 ||\
    \ length(c)==0\n        return (s,false)\n    if s[0]==c[0]\n        return (reverse_delete(s[1:],c[1:]),true)\n\
    \    else\n        return (reverse_delete(s[1:],c),false)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]),\
    \ false)\nend\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell", " \
    \   if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n    else\
    \ if length(s)==1 \n        return (reverse_delete(s,c),true)\n    else if length(c)==1\
    \ \n        return (reverse_delete(s,c),true)\n    else if s[end-1]==c[0] \n \
    \       return (reverse_delete(s,c),true)\n    else if s[end-1]!=c[0] \n     \
    \   return (reverse_delete(s,c),false)\n    else \n        return (reverse_delete(s,c),true)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s[1:], c), false)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"false\", false)\n    \n    \n    if s[0]==c[0]\n       \
    \ return (reverse_delete(s[1:], c[1:]), true)\n    \n    \n    if s[0]!=c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), false)\n    \n    \n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend", "    \n    \n    if length(s)==0\
    \ || length(c)==0\n        return (s,false)\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if length(c) < length(s)\
    \ then return (s, false) else return (reverse_delete(s[length(s)..], c), true)\n\
    end\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>", " \
    \   if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n    end\n\
    \    \n    \n    if s[0]==c[0]\n        \n        \n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    end\n    if s[end]==c\n        return (s, true)\n\
    \    end\n    if s[end]!=c\n        return (s, false)\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=", "    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend", "    if length(s)==0\
    \ then return (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s,\
    \ c[1:]), true)\nend", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>", "    if length(s)==0 || length(c)==0\n\
    \        return (s, false)\n    else if length(s)==1\n        return (s, true)\n\
    \    else\n        \n        if s[0]==c[0]\n            return reverse_delete(s[1..],\
    \ c)\n        else\n            \n            if s[0]==c[1]\n                return\
    \ reverse_delete(s[1..], c)\n            else\n                return (reverse_delete(s[1..],\
    \ c), true)\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>", "    \n    if length(s)==0 ||\
    \ length(c)==0\n        return (s, false)\n    end\n    \n    if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    else\n        return\
    \ (s, false)\n    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ba\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ba\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ba\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ba\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ba\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ba\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ba\"\
    )\n</cell>\n<code language=juli", "    if length(s)==0 || length(c)==0\n     \
    \   return (\"\", false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend", "    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==0 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==1 && length(c)==1 \n        return (\"true\"\
    , true)\n    else if length(s)==1 && length(c)==0 \n        return (\"false\"\
    , false)\n    else if length(s)==0 && length(c)==1 \n        return (\"", "  \
    \  if length(s)==0 || length(c)==0\n        return (\"false\",false)\n    end\n\
    \    if length(s)==1\n        return (c,true)\n    end\n    if length(c)==1\n\
    \        return (s,true)\n    end\n    if s[end-1]==c[0]\n        return reverse_delete(s[0..end-2],c[1:end-1])\n\
    \    end\n    if s[end-1]!=c[0]\n        return reverse_delete(s[0..end-2],c[1:end-1])\n\
    \    end\n    return reverse_delete(s[0..end-1],c[1:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5",
  "    if length(s)==0 || length(c)==0\n        return (\"false\",false)\n    end\n\
    \    if s[0]==c[0]\n        return (reverse_delete(s[1:],c[1:]),true)\n    else\n\
    \        return (reverse_delete(s[1:],c),false)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell", "    if length(c) < length(s) \n        return (\"Not a palindrome\"\
    , false)\n    else if length(c) == length(s) \n        return (\"Not a palindrome\"\
    , false)\n    else if c == reverse(s[length(s)..-1]) \n        return (reverse(s),\
    \ true)\n    else \n        return (\"Not a palindrome\", false)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")", "    if length(s)==0 || length(c)==0\n\
    \        return (\"false\",false)\n    end\n    \n    if s[0]==c[0]\n        return\
    \ (reverse_delete(s[1:],c[1:]),true)\n    else\n        return (reverse_delete(s[1:],c[1:]),false)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab", "    if length(s)==0\
    \ || length(c)==0 || length(s)!=length(c) || c not in s\n    then return (s, false)\n\
    \    else if length(delete(s, c))==0 then return (s, false)\n    else if length(delete(s,\
    \ c))==1 then return (delete(s, c), true)\n    else return (reverse_delete(delete(s,\
    \ c), c), false)\n    end\nend\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>", "    if length(s)==0 || length(c)==0\n\
    \        return (\"false\", false)\n    end\n    \n    \n    if s[end-1] == c[0]\n\
    \        return reverse_delete(s[end-2..end-1], c[1:end-1])\n    else\n      \
    \  return reverse_delete(s[end-2..end-1], c[1:end-1]), true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5", "    if length(s)==0\
    \ || length(c)==0 \n        return (s, false)\n    \n    if s[0]==c[0] \n    \
    \    return (delete(s, c), true)\n    \n    if s[0]!=c[0] \n        return (s,\
    \ false)\n    \n    \n    if delete(s, c) == s \n        return (s, true)\n  \
    \  \n    return (delete(s, c), false)\nend", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"false\",false)\n    end\n    \n    \n    if s[0]==c[0] \n\
    \        return (reverse_delete(s[1:],c[1:]),true)\n    end\n    \n    if s[0]!=c[0]\
    \ \n        return (reverse_delete(s[1:],c[1:]),false)\n    end\n    \n    return\
    \ (reverse_delete(s[1:],c[1:]),reverse_delete(s[1:],c[1:]))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>", " \
    \   if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    return (reverse_delete(s[1:], c), false)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>", "    \n    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if length(s)==1 then\
    \ return (s, true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]),\
    \ false)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell", "    if length(s)==0 || length(c)==0 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s,\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5", "    if length(s)==0 || length(c)==0\n        return\
    \ (\"false\", false)\n    end\n    if length(s) mod length(c)==0\n        deleted\
    \ = s[length(s):length(s)]\n    else\n        deleted = s[length(s):length(s)+length(c)]\n\
    \    end\n    if deleted == c\n        return (deleted, true)\n    else\n    \
    \    return (deleted, false)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>", "    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s, c[1:]),\
    \ true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell", " \
    \   if length(s)==0 then return (s, false)\n    if length(c)==0 then return (s,\
    \ true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell", "    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>", "    if length(s)==0 || length(c)==0 then return (s, false)\n\
    \    \n    let (left, right) = reverse_delete(s, c)\n    let (left, right) = reverse(left,\
    \ right)\n    if left==s then return (left, true)\n    if right==c then return\
    \ (right, true)\n    return (left, false)\nend", "    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell",
  "    if length(s)==0 || length(c)==0\n        return (s,false)\n    end\n    if\
    \ length(s) >= length(c)\n        return (s,true)\n    end\n    if s[length(s)-1]\
    \ == c[0]\n        return (reverse_delete(s[0..(length(s)-1)],c[1..length(c)]),true)\n\
    \    end\n    if s[length(s)-1] != c[0]\n        return (s,false)\n    end\n \
    \   return (reverse_delete(s[0..(length(s)-1)],c[1..length(c)]),false)\nend\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba", "    if length(s)==0 || length(c)==0\
    \ \n        return (\"\", false)\n    else if length(s)==1 \n        return (s,\
    \ c==s[end])\n    else if length(c)==1 \n        return (s[end], c==s[end])\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n", "    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    ,false)\n    else if length(s)==1 \n        return (c,true)\n    else if length(c)==1\
    \ \n        return (s,true)\n    else\n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
