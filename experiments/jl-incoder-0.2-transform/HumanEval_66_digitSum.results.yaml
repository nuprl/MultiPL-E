language: jl
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThanks for the answer! I didn't know about `codePointAt`, but this\
    \ looks very useful. I'm going to try this out and see how it works.\n<|/ c |>\n\
    <| c |>\n`codePointAt` was introduced in `Data.Char`, which is part of the base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ libraries.  It was introduced in `base-4.9.0.0`, which is part of the GHC base\
    \ \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4bqkkds.jl:22\nin expression starting at\
    \ /tmp/tmpt4bqkkds.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeovw7wqy.jl:22\nin expression starting at /tmp/tmpeovw7wqy.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c.lower()) - ord('A')\n    return sum\n</code>\n<|/ a\
    \ tags=string,haskell,functional-programming |>\n<| c |>\nThis doesn't work. `ord`\
    \ takes an argument of type `Char`, not `String`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work either. `ord` takes an argument of type `Char`, not `String`.\n<|/ c |>\n\
    <| c |>\nIt does work, if you change `ord` to `ord` as I did.\n<|/ c |>\n<| c\
    \ |>\nIt does work, if you change `ord` to `ord` as I did.\n<|/ c |>\n<| c |>\n\
    It does work, if you change `ord` to `ord` as I did.\n<|/ c |>\n<| a |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = sum (map ord $ filter (\\c -> isUpper\
    \ c) s)\n</code>\n<|/ a tags=string,haskell,functional-programming dscore=0 |>\n\
    <| c |>\nThis doesn't work. `ord` takes an argument of type `Char`, not `String`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work either. `ord` takes an argument of type `Char`,\
    \ not `String`.\n<|/ c |>\n<| c |>\nThis doesn't work either. `ord` takes an argument\
    \ of type `Char`, not `String`.\n<|/ c |>\n<| c |>\nThis doesn't work either.\
    \ `ord` takes an argument of type `Char`, not `String`.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcy1v5ba4.jl:22\nin expression starting at\
    \ /tmp/tmpcy1v5ba4.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1oajbh8.jl:22\nin expression starting at\
    \ /tmp/tmpr1oajbh8.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the upper characters only'\nASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21jmshiq.jl:24\nin expression starting at\
    \ /tmp/tmp21jmshiq.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if isUpper c\n                sum += toUpper c\n            else\n\
    \                sum += toLower c\n        sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the numbers in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsl2wukpi.jl:26\nin expression starting at /tmp/tmpsl2wukpi.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead\
    \ of `131`.\n<|/ c |>\n<| c |>\n: I missed that requirement. Fixed now.\n<|/ c\
    \ |>\n<| c |>\nThis still doesn't work. `digitSum(\"aAaaaXa\")` returns `153`\
    \ instead of `131`.\n<|/ c |>\n<| c |>\n: I missed that requirement. Fixed now.\n\
    <|/ c |>\n<| c |>\nThis still doesn't work. `digitSum(\"aAaaaXa\")` returns `153`\
    \ instead of `131`.\n<|/ c |>\n<| a dscore=3 |>\nThe other answers here are all\
    \ great, but I thought I'd add my own solution, which is based on a combination\
    \ of Data.Char from the standard library, and Data.Text from the text library.\
    \ \n<code>\nimport Data.Char\nimport Data.Text\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpldt2khr0.jl:22\nin expression starting at\
    \ /tmp/tmpldt2khr0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")` which should return\
    \ 153\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. I'll edit my answer.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that doesn't require\
    \ any imports.\n<|/ c |>\n<| a tags=string,haskell |>\nHere's a solution without\
    \ imports:\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmkyvffq.jl:22\nin expression starting at\
    \ /tmp/tmpdmkyvffq.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about how to do this\
    \ in Haskell, not how to do it in a different language.\n<|/ c |>\n<| c |>\nI\
    \ agree with you. My answer was more about how to do this in Haskell and I thought\
    \ it would be useful to share the code with others. I edited my answer to make\
    \ it more clear.\n<|/ c |>\n<| a tags=string,haskell,functional-programming |>\n\
    <code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpao1u2iv0.jl:22\nin expression starting at\
    \ /tmp/tmpao1u2iv0.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - this one looks very nice.\n<|/\
    \ c |>\n<| a dscore=4 |>\nThe other answers here are great, but I wanted to add\
    \ that you can also use Data.Char's toUpper to convert a character to a character\
    \ code. \n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n\
    </code>\n<|/ a tags=string,haskell,ascii |>\n<| a dscore=4 |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| a dscore=3 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $\
    \ map toUpper s\n</code>\n<|/ a tags=string,haskell,ascii |>\n<| a |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a tags=string,haskell,ascii\
    \ dscore=3 |>\n<| a tags=string,haskell,ascii |>\n<code>\ndigitSum :: String ->\
    \ Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a dscore=3 |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=string,haskell,ascii |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n\
    <|/ a tags=string,haskell,ascii |>\n<| a |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum s = \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxej7o7j1.jl:22\nin expression starting at\
    \ /tmp/tmpxej7o7j1.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii |>\n\
    <| c |>\nThe `sum` function can be replaced by `foldl (+) 0`.\n<|/ c |>\n<| c\
    \ |>\n: Yes, but `foldl` has some nice properties that `sum` doesn't, like being\
    \ strict in its arguments and being strict in its return type.\n<|/ c |>\n<| c\
    \ |>\n: I agree with you, but I find `foldl` easier to read and understand.\n\
    <|/ c |>\n<| c |>\n: I agree with you, but I find `foldl` easier to read and understand.\n\
    <|/ c |>\n<| c |>\n: I agree with you, but I find `foldl` easier to read and understand.\n\
    <|/ c |>\n<| a tags=string,haskell,ascii |>\nHere's a solution that doesn't use\
    \ any libraries:\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5np5ehxj.jl:22\nin expression starting at\
    \ /tmp/tmp5np5ehxj.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\
    \ \n            sum += c - 'A' + 10\n        else \n            sum += c\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuvz4qlvu.jl:21\nin expression starting at /tmp/tmpuvz4qlvu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' and c <= '9'\n                sum += c - '0'\n      \
    \      else\n                sum\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4xovqe5n.jl:25\nin expression starting at /tmp/tmp4xovqe5n.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndef digitSum(s:String)::Int64\n    sum::Int64 = 0\n    for c in\
    \ s:\n        if c.isUpper():\n            sum += c.codePointAt(0)\n    return\
    \ sum\n</code>\n<|/ a tags=haskell,string,ascii |>\n<| a tags=haskell,string,ascii\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihmdgvvn.jl:22\nin expression starting at\
    \ /tmp/tmpihmdgvvn.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nI like this solution, although it might be worth pointing out that\
    \ `digitSum` can be implemented as `sum . filter (\\c -> isUpper c)`.\n<|/ c |>\n\
    <| c |>\nYes, that's a good point. I was trying to keep it close to the original\
    \ code as much as possible.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport Data.Char\n\
    import Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fzqjrvz.jl:25\nin expression starting at\
    \ /tmp/tmp3fzqjrvz.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' && c <= '9'\n                sum += c - '0'\n       \
    \     else\n                sum += c - 'A' + 10\n        end\n        sum\nend\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the upper characters only'\nASCII codes.\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwcc7n_d.jl:32\nin expression starting at\
    \ /tmp/tmppwcc7n_d.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `131`.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. I've updated the answer to include a more\
    \ robust solution.\n<|/ c |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `131`.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated the answer to include a more robust solution.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map (ord '0') s\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `digitSum(\"aAaaaXa\"\
    )` returns `153` instead of `131`.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated the answer to include a more robust solution.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmv2ietta.jl:22\nin expression starting at\
    \ /tmp/tmpmv2ietta.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qt68lbg.jl:22\nin expression starting at\
    \ /tmp/tmp5qt68lbg.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp02eea9zn.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02eea9zn.jl:1\n\
    in expression starting at /tmp/tmp02eea9zn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'a' && c <= 'z', s)))\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjcky1eg.jl:25\nin expression starting at\
    \ /tmp/tmpnjcky1eg.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` doesn't work if you give it an empty string. `digitSum`\
    \ should return 0 instead of throwing an error.\n<|/ c |>\n<| c |>\nI agree, that's\
    \ why I added the comment \"Write a function that takes a string as input and\
    \ returns the sum of the upper characters only'\nASCII codes\"\n<|/ c |>\n<| c\
    \ |>\nI didn't downvote you, but I suspect it's because you didn't actually answer\
    \ the question. Your answer doesn't even try to answer the question, just point\
    \ out a mistake.\n<|/ c |>\n<| c |>\nI did answer the question. He asked for a\
    \ function that takes a string as input and returns the sum of the upper characters\
    \ only. He also said he was new to Haskell. He also said he was new to functional\
    \ programming. He also said he was new to Haskell and functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ Haskell and functional programming. He also said he was new to Haskell and functional\
    \ programming. He also said he was new to Haskell and functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ Haskell and functional programming. He also said he was new to Haskell and functional\
    \ programming. He also said he was new to Haskell and functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ Haskell and functional programming. He also said he was new to Haskell and functional\
    \ programming. He also said he was new to Haskell and functional programming.\
    \ He also said he was new to Haskell and functional programming. He also said\
    \ he was new to Haskell and functional programming. He also said he was new to\
    \ H\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi_r8ni3.jl:22\nin expression starting at\
    \ /tmp/tmpzi_r8ni3.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if ('A' <= c && c <= 'Z')\
    \ then \n            sum += c - 'A' + 1\n        else \n            sum += c\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpee1kzfba.jl:21\nin expression starting at /tmp/tmpee1kzfba.jl:21\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if the string contains any non-ASCII characters. For example, `digitSum(\"\
    aAaaaXa\")` returns `153` instead of `153`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ I tested it before posting it. `digitSum(\"aAaaaXa\")` returns `153`.\n<|/ c\
    \ |>\n<| c |>\nAh, I missed the part about non-ASCII characters. I thought you\
    \ were talking about ASCII characters. Sorry.\n<|/ c |>\n<| a |>\n<code>\nimport\
    \ Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5l5jjyss.jl:22\nin expression starting at\
    \ /tmp/tmp5l5jjyss.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmscd83a_.jl:22\nin expression starting at\
    \ /tmp/tmpmscd83a_.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case. For example, the string \"hello\" has 4 characters that are upper\
    \ case: \"H\", \"E\", \"L\", \"L\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpetyta95f.jl:25\nin expression starting at\
    \ /tmp/tmpetyta95f.jl:25\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += (c - '0')\n        else \n            sum += (c - 'A' +\
    \ 10)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\nASCII codes.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6ihyvbej.jl:21\nin expression starting at /tmp/tmp6ihyvbej.jl:21\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += (c - '0')\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rqn2_c7.jl:22\nin expression starting at\
    \ /tmp/tmp5rqn2_c7.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n   \
    \         sum += c - 'A' + 1\n        else if c >= 'a' and c <= 'z'\n        \
    \    sum += c - 'a' + 1\n        else\n            sum += c\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string as input and\
    \ returns the sum of the digits in that string. For example, digitSum(\"1234\"\
    ) should return 10.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy5c34o5p.jl:22\nin expression starting at /tmp/tmpy5c34o5p.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrknn9ff.jl:22\nin expression starting at\
    \ /tmp/tmpjrknn9ff.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' && c <= '9'\n    \
    \        sum += c - '0'\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb6gayh56.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpb6gayh56.jl:34\n  Expression: candidate(\"\
    abAB\") == 131\n   Evaluated: 0 == 131\nStacktrace:\n [1] macro expansion\n  \
    \ @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpb6gayh56.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpb6gayh56.jl:32\ntest set: Test Failed at /tmp/tmpb6gayh56.jl:35\n\
    \  Expression: candidate(\"abcCd\") == 67\n   Evaluated: 0 == 67\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gayh56.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gayh56.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb6gayh56.jl:36\n  Expression: candidate(\"helloE\") == 69\n\
    \   Evaluated: 0 == 69\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gayh56.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gayh56.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb6gayh56.jl:37\n  Expression: candidate(\"woArBld\") == 131\n\
    \   Evaluated: 0 == 131\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gayh56.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb6gayh56.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb6gayh56.jl:38\n  Expression: candidate(\"aAaaaXa\") == 153\n\
    \   Evaluated: 0 == 153\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb6gayh56.jl:38 [inlined]\n ["
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if isUpper(c)\n                sum += toUpper(c)\n            else\n\
    \                sum += toLower(c)\n        end\n        sum\n    end\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that takes a string as input and returns\
    \ the number of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqmj8bpb.jl:33\nin expression starting at\
    \ /tmp/tmptqmj8bpb.jl:33\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any libraries. I guess I should\
    \ use recursion to solve this problem. I am not able to figure out how to do that.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks again. I am not allowed to use any libraries. I guess\
    \ I should use recursion to solve this problem. I am not able to figure out how\
    \ to do that.\n<|/ c |>\n<| c |>\nI added a recursive solution to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=string,recursion,haskell |>\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum [] = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ [] = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n<|/ a tags=string,recursion,haskell\
    \ |>\n<| a tags=string,recursion,haskell |>\n<code>\ndigitSum :: String -> Int\n\
    digitSum [] = 0\ndigitSum (x:xs) = x + digitSum xs\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=string,recursion,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum [] = 0\ndigitSum (x:xs) = x\
    \ + digitSum xs\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,recursion,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum [] = 0\ndigitSum (x:xs) = x\
    \ + digitSum xs\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,recursion,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigit\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcht2p51.jl:22\nin expression starting at\
    \ /tmp/tmpjcht2p51.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't answer the question. OP wants to know how to use `isUpper` without\
    \ using any external libraries.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted\
    \ to point out that `isUpper` can be implemented without using any external libraries.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any external libraries.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use any external libraries.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nimport Data.Char\nimport Data.List\nimport\
    \ Data.Maybe\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy26qu5te.jl:22\nin expression starting at\
    \ /tmp/tmpy26qu5te.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp02eea9zn.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02eea9zn.jl:1\n\
    in expression starting at /tmp/tmp02eea9zn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\nASCII codes.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppbx0ii63.jl:21\nin expression starting at /tmp/tmppbx0ii63.jl:21\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += (c - '0')\n        else \n            sum += (c - 'A' +\
    \ 10)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the upper characters only'\nASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxotknoek.jl:21\nin expression starting at /tmp/tmpxotknoek.jl:21\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s do \n        if c >= '0' && c <= '9' then \n \
    \           sum += c - '0'\n        else \n            sum += 10\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string. \nThe digits\
    \ are the characters '0' through '9'.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3mn6zbc5.jl:21\nin expression starting at /tmp/tmp3mn6zbc5.jl:21\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if isUpper(c)\n                sum += toUpper(c)\n            else\n\
    \                sum += toLower(c)\n        end\n        sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string as input and returns the number of uppercase characters in the\
    \ string. \nWrite a function that takes a string as input and returns the number\
    \ of lowercase characters in the string. \nWrite a function that takes a string\
    \ as input and returns the number of digits in the string. \nWrite a function\
    \ that takes a string as input and returns the number of uppercase and lowercase\
    \ characters in the string. \nWrite a function that takes a string as input and\
    \ returns the number of uppercase and lowercase and digits in the string. \nWrite\
    \ a function that takes a string as input and returns the number of uppercase\
    \ and lowercase and digits in the string. \nWrite a function that takes a string\
    \ as input and returns the number of uppercase and lowercase and digits in the\
    \ string. \nWrite a function that takes a string as input and returns the number\
    \ of uppercase and lowercase and digits in the string. \nWrite a function that\
    \ takes a string as input and returns the number of uppercase and lowercase and\
    \ digits in the string. \nWrite a function that takes a string as input and returns\
    \ the number of uppercase and lowercase and digits in the string. \nWrite a function\
    \ that takes a string as input and returns the number of uppercase and lowercase\
    \ and digits in the string. \nWrite a function that takes a string as input and\
    \ returns the number of uppercase and lowercase and digits in the string. \nWrite\
    \ a function that takes a string as input and returns the number of uppercase\
    \ and lowercase and digits in the string. \nWrite a function that takes a string\
    \ as input and returns the number of uppercase and lowercase and digits in the\
    \ string. \nWrite a function that takes a string as input and returns the number\
    \ of uppercase and lowercase and digits in the string. \nWrite a function that\
    \ takes a string as input and returns the number of uppercase and lowercase and\
    \ digits in the string. \nWrite a function that takes a string as input and returns\
    \ the number of uppercase and lowercase and digits in the string. \nWrite a function\
    \ that takes a string as input and returns the number of uppercase and lower\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplobe1kqk.jl:32\nin expression starting at\
    \ /tmp/tmplobe1kqk.jl:32\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoxcdac2.jl:22\nin expression starting at\
    \ /tmp/tmpwoxcdac2.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblhw_lm5.jl:22\nin expression starting at\
    \ /tmp/tmpblhw_lm5.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s\n        if c.isUpper()\n            sum += c.codePointAt(0)\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpi6_t8azo.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6_t8azo.jl:1\n\
    in expression starting at /tmp/tmpi6_t8azo.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` doesn't work if `c` is `'\\0'`\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` doesn't work if\
    \ `c` is `'\\0'`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper\
    \ c)` doesn't work if `c` is `'\\0'`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter\
    \ (\\c -> isUpper c)` doesn't work if `c` is `'\\0'`\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nimport Data.Char (isUpper)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58w6t9wm.jl:22\nin expression starting at\
    \ /tmp/tmp58w6t9wm.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qt68lbg.jl:22\nin expression starting at\
    \ /tmp/tmp5qt68lbg.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += Int(c)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvuzuae0.jl:22\nin expression starting at\
    \ /tmp/tmpyvuzuae0.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are upper case. Do not use the isUpper function.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzlj8e6n.jl:22\nin expression starting at\
    \ /tmp/tmpjzlj8e6n.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzeloh1m8.jl:21\nin expression starting at /tmp/tmpzeloh1m8.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,ascii\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhs_u1xm.jl:22\nin expression starting at\
    \ /tmp/tmpxhs_u1xm.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n     \
    \       digitSum += c - '0'\n        end\n    end\n    return digitSum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpybtgk7be.jl:22\nin expression starting at /tmp/tmpybtgk7be.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.codePointAt(0)\n        end\n    end\n    return digitSum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpd20ltilj.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpd20ltilj.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"abAB\") == 131\n  type Char has no field isUpper\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmpd20ltilj.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd20ltilj.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd20ltilj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpd20ltilj.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  type Char has no field isUpper\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmpd20ltilj.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd20ltilj.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd20ltilj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpd20ltilj.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  type Char has no field isUpper\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] digitSum(s::String)\n\
    \     @ Main /tmp/tmpd20ltilj.jl:22\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpd20ltilj.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpd20ltilj.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpd20ltilj.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"woArBld\") == 131\n  type Char has no field isUpper\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] digi"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n     \
    \       digitSum += c - '0'\n        end\n    end\n    return digitSum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the upper characters only'\n    ASCII codes.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa9yy04hk.jl:22\nin expression starting at /tmp/tmpa9yy04hk.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do\n        digitSum += digitToInt(c)\n \
    \   end\n    return digitSum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf8u116tk.jl:21\nin expression starting at /tmp/tmpf8u116tk.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - that's a nice one!\n<|/ c |>\n\
    <| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` - that's a nice one!\n<|/\
    \ c |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphno45bsj.jl:22\nin expression starting at\
    \ /tmp/tmphno45bsj.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do \n        if c.isUpper() then digitSum\
    \ += c.codePointAt(0) - 64 else digitSum += c.codePointAt(0)\n    end\n    return\
    \ digitSum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz37fp626.jl:21\nin expression starting at /tmp/tmpz37fp626.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    import Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5orb_7qq.jl:22\nin expression starting at\
    \ /tmp/tmp5orb_7qq.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport\
    \ Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcl3gmf_.jl:22\nin expression starting at\
    \ /tmp/tmpjcl3gmf_.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qt68lbg.jl:22\nin expression starting at\
    \ /tmp/tmp5qt68lbg.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ answer the question. OP asked for \"a function that takes a string as input\
    \ and returns the sum of the upper characters only\", not \"a function that takes\
    \ a string as input and returns the sum of the digits\"\n<|/ c |>\n<| c |>\nI\
    \ believe that my answer does answer the question. OP asked for a function that\
    \ takes a string as input and returns the sum of the upper characters only, which\
    \ I believe is what my answer does. OP also asked for \"a function that takes\
    \ a string as input and returns the sum of the digits\", which I believe is what\
    \ my answer does. OP also asked for \"a function that takes a string as input\
    \ and returns the sum of the digits\", which I believe is what my answer does.\
    \ OP also asked for \"a function that takes a string as input and returns the\
    \ sum of the digits\", which I believe is what my answer does. OP also asked for\
    \ \"a function that takes a string as input and returns the sum of the digits\"\
    , which I believe is what my answer does. OP also asked for \"a function that\
    \ takes a string as input and returns the sum of the digits\", which I believe\
    \ is what my answer does.\n<|/ c |>\n<| c |>\nI believe that my answer does answer\
    \ the question. OP asked for a function that takes a string as input and returns\
    \ the sum of the upper characters only, which I believe is what my answer does.\
    \ OP also asked for \"a function that takes a string as input and returns the\
    \ sum of the digits\", which I believe is what my answer does. OP also asked for\
    \ \"a function that takes a string as input and returns the sum of the digits\"\
    , which I believe is what my answer does. OP also asked for \"a function that\
    \ takes a string as input and returns the sum of the digits\", which I believe\
    \ is what my answer does. OP also asked for \"a function that takes a string as\
    \ input and returns the sum of the digits\", which I believe is what my answer\
    \ does.\n<|/ c |>\n<| c |>\nI believe that my answer does answer the question.\
    \ OP asked for a function that takes a string as input and returns the sum of\
    \ the upper characters only, which I believe is what my answer does. OP also asked\
    \ for \"a function that takes a string as input and returns the sum of the digits\"\
    , which I believe is what my answer does. OP also asked for \"a function that\
    \ takes a string as \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcb_716h.jl:22\nin expression starting at\
    \ /tmp/tmpzcb_716h.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjnv9asa.jl:22\nin expression starting at\
    \ /tmp/tmpfjnv9asa.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbktoeco_.jl:21\nin expression starting at /tmp/tmpbktoeco_.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9oovy3g.jl:22\nin expression starting at\
    \ /tmp/tmpb9oovy3g.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh5va0kb.jl:22\nin expression starting at\
    \ /tmp/tmpnh5va0kb.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp82jzk_yz.jl:21\nin expression starting at /tmp/tmp82jzk_yz.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum\
    \ += toUpper(c) - 'A' + 1\n        end\n    end\n    return digitSum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpb5shulot.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpb5shulot.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"abAB\") == 131\n  UndefVarError: isUpper not defined\n\
    \  Stacktrace:\n   [1] digitSum(s::String)\n     @ Main /tmp/tmpb5shulot.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5shulot.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5shulot.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpb5shulot.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpb5shulot.jl:22\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5shulot.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5shulot.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpb5shulot.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpb5shulot.jl:22\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb5shulot.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb5shulot.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpb5shulot.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"woArBld\") == 131\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpb5shulot.jl:22\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansio"
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp82jzk_yz.jl:21\nin expression starting at /tmp/tmp82jzk_yz.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9xpxfce.jl:22\nin expression starting at\
    \ /tmp/tmpv9xpxfce.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are upper case. For example, the string \"\
    hello\" has 5 characters that are upper case: \"H\", \"E\", \"L\", \"L\", \"O\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfz33akua.jl:21\nin expression starting at /tmp/tmpfz33akua.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphm0zavti.jl:21\nin expression starting at /tmp/tmphm0zavti.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n   \
    \         sum += c - 'A' + 1\n        else\n            sum += c\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv6svq91o.jl:22\nin expression starting at /tmp/tmpv6svq91o.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    import Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnkzzuzk.jl:22\nin expression starting at\
    \ /tmp/tmpjnkzzuzk.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_qtzpty.jl:22\nin expression starting at\
    \ /tmp/tmp4_qtzpty.jl:22\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`, which should return\
    \ `153`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I was trying to\
    \ avoid using recursion and I thought that would be the most straightforward solution.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wonder why you didn't use `foldl`\
    \ instead of `fold`.\n<|/ c |>\n<| c |>\nI didn't know about foldl. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nI didn't know about foldl either. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt8z3em2.jl:22\nin expression starting at\
    \ /tmp/tmpbt8z3em2.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if isUpper(c)\n                sum += toUpper(c)\n            else\n\
    \                sum += toLower(c)\n        end\n        sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    abAB\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code\
    \ language=julia-1.3>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpauq6rf_b.jl:32\nin expression starting at\
    \ /tmp/tmpauq6rf_b.jl:32\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`, which should return\
    \ `153`.\n<|/ c |>\n<| c |>\nThanks, I fixed it\n<|/ c |>\n<| c |>\n`digitSum(\"\
    aAaaaXa\")` should return `153`, not `153`.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it\n<|/ c |>\n<| a tags=haskell,string,ascii |>\nHere's a solution using Data.Char's\
    \ toUpper and foldl (foldl is like foldl1 but for lists). foldl is like foldr\
    \ but for lists. foldl is like foldl1 but for lists.\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zdcc89a.jl:22\nin expression starting at\
    \ /tmp/tmp9zdcc89a.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer! I didn't know that `codePointAt` existed. I also didn't\
    \ know that `isUpper` existed. I was trying to use `isUpper` but was getting errors.\
    \ I didn't know that `codePointAt` existed either. Thanks again!\n<|/ c |>\n<|\
    \ c |>\n`isUpper` existed in Rust 1.26, but was removed from the language in Rust\
    \ 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `isUpper` existed in Rust 1.26, but was removed from the language\
    \ in Rust 1.27. `codePointAt` existed in Rust 1.26, but was removed from the language\
    \ in Rust \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9eva_k0q.jl:22\nin expression starting at\
    \ /tmp/tmp9eva_k0q.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c.isUpper\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work. `digitSum(\"aAaaaXa\")` returns `153` instead of `153`.\n<|/ c\
    \ |>\n<| c |>\nIt does work. `digitSum(\"aAaaaXa\")` returns `153` as expected.\n\
    <|/ c |>\n<| c |>\nYes, it does work. My mistake. I was looking at the wrong function.\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution that doesn't require any\
    \ looping.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlet digitSum(s:String):Int64 =\
    \ \n    let rec digitSum acc str = match str with\n        | [] -> acc\n     \
    \   | c :: tail -> digitSum (acc+c.codePointAt(0)) tail\n    in digitSum 0 s\n\
    </code>\n<|/ a tags=ocaml,functional-programming |>\n<| a tags=ocaml,functional-programming\
    \ |>\n<code>\nlet digitSum s = \n    let rec loop acc s = \n        match s with\n\
    \        | [] -> acc\n        | c :: t -> loop (acc + c.codePointAt(0)) t\n  \
    \  in loop 0 s\n</code>\n<|/ a dscore=1 |>\n<| a tags=ocaml,functional-programming\
    \ |>\n<code>\nlet digitSum s = \n    let rec loop acc s = \n        match s with\n\
    \        | [] -> acc\n        | c :: t -> loop (acc + c.codePointAt(0)) t\n  \
    \  in loop 0 s\n</code>\n<|/ a dscore=1 |>\n<| a tags=ocaml,functional-programming\
    \ |>\n<code>\nlet digitSum s = \n    let rec loop acc s = \n        match s with\n\
    \        | [] -> acc\n        | c :: t -> loop (acc + c.codePointAt(0)) t\n  \
    \  in loop 0 s\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nlet digitSum\
    \ s = \n    let rec loop acc s = \n        match s with\n        | [] -> acc\n\
    \        | c :: t -> loop (acc + c.codePointAt(0)) t\n    in loop 0 s\n</code>\n\
    <|/ a tags=ocaml,functional-programming |>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lur523d.jl:25\nin expression starting at\
    \ /tmp/tmp2lur523d.jl:25\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer! I didn't know that `codePointAt` existed. I will definitely\
    \ look into it. However, I still don't understand why my code doesn't work. Could\
    \ you please elaborate on that?\n<|/ c |>\n<| c |>\nI added an explanation to\
    \ the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I still\
    \ don't understand why my code doesn't work. Could you please elaborate on that?\n\
    <|/ c |>\n<| c |>\nI added an explanation to the answer. Hope it helps.\n<|/ c\
    \ |>\n<| a tags=haskell,string |>\nThe problem is that the function digitSum doesn't\
    \ work correctly for empty strings. Here's a simpler version:\n<code>\ndigitSum\
    \ :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! I didn't know that `toUpper` existed. I\
    \ will definitely look into it. However, I still don't understand why my code\
    \ doesn't work. Could you please elaborate on that?\n<|/ c |>\n<| c |>\nThe function\
    \ `digitSum` doesn't work correctly for empty strings. That's why I wrote a simpler\
    \ version. `digitSum` should work for any non-empty string.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! I still don't understand why my code doesn't work. Could\
    \ you please elaborate on that?\n<|/ c |>\n<| c |>\nI added an explanation to\
    \ the answer. Hope it helps.\n<|/ c |>\n<| a |>\nThe problem is that the function\
    \ digitSum doesn't work correctly for empty strings. Here's a simpler version:\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map toUpper s\n</code>\n\
    <|/ a dscore=1 tags=haskell,string |>\n<| c |>\nThanks for your answer! I didn't\
    \ know that `toUpper` existed. I will definitely look into it. However, I still\
    \ don't understand why my code doesn't work. Could you please elaborate on that?\n\
    <|/ c |>\n<| c |>\nI added an explanation \nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpangu1m2c.jl:22\nin expression starting at\
    \ /tmp/tmpangu1m2c.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s\n        if c >= '0' and c <= '9'\n          \
    \  sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.3>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string. \nThe digits are the characters between '0' and\
    \ '9'.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwjwxihad.jl:22\nin expression starting at /tmp/tmpwjwxihad.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s \n        if c >= '0' && c <= '9' \n  \
    \          sum += c - '0'\n    return sum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map (\\x -> x - '0')\
    \ s)\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\nThis doesn't work. Try it\
    \ with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a |>\n<code>\ndigitSum :: String -> Int\ndigitSum\
    \ s = sum (map (\\x -> x - '0') s)\n</code>\n<|/ a dscore=1 tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map (\\x -> x - '0')\
    \ s)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `digitSum(\"\
    aAaaaXa\")`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum\
    \ (map (\\x -> x - '0') s)\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\nThis\
    \ doesn't work. Try it with `digitSum(\"aAaaaXa\")`.\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum (map (\\x -> x - '0')\
    \ s)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76h0iovs.jl:25\nin expression starting at\
    \ /tmp/tmp76h0iovs.jl:25\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum` doesn't seem to work for `digitSum(\"aAaaaXa\")`\n<|/\
    \ c |>\n<| c |>\n: I fixed the typo.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport\
    \ Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpguxlncq0.jl:22\nin expression starting at\
    \ /tmp/tmpguxlncq0.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    import Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5orb_7qq.jl:22\nin expression starting at\
    \ /tmp/tmp5orb_7qq.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do \n        if c.isUpper() then digitSum\
    \ += c.codePointAt(0)\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpifp3tspf.jl:21\nin expression starting at /tmp/tmpifp3tspf.jl:21\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for i in s\n        if i >=48 && i <=57\n        \
    \    sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits only'\nASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbdy7orpd.jl:28\nin expression starting at\
    \ /tmp/tmpbdy7orpd.jl:28\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s \n        if c.isUpper() \n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like this solution, but I wonder if it can be done without using\
    \ any libraries. I guess it would be possible by writing a recursive function\
    \ that would go through the string and count the upper case letters, but that\
    \ would require a lot of code (I guess).\n<|/ c |>\n<| c |>\n: Yes, it can be\
    \ done without libraries. I added a solution that doesn't use any libraries.\n\
    <|/ c |>\n<| c |>\nI guess this solution doesn't use any libraries because `isUpper`\
    \ is defined in `Data.Char`.\n<|/ c |>\n<| c |>\n: Yes, it does. `isUpper` is\
    \ defined in `Data.Char`.\n<|/ c |>\n<| c |>\n: Yes, it does. `isUpper` is defined\
    \ in `Data.Char`.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using Data.Char:\n\
    <code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgcl56sc.jl:25\nin expression starting at\
    \ /tmp/tmpmgcl56sc.jl:25\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a tags=haskell,string\
    \ |>\n<| c |>\nThis doesn't work. `ord` returns an `Int`, not a `Char`.\n<|/ c\
    \ |>\n<| c |>\n`ord` returns an `Int`, not a `Char`. `ord` converts a `Char` to\
    \ an `Int`\n<|/ c |>\n<| c |>\n`ord` converts a `Char` to an `Int` - that's not\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does.\n<|/\
    \ c |>\n<| c |>\n`ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's what it does.\n<|/ c |>\n<| c |>\n`ord`\
    \ converts a `Char` to an `Int` - that's what it does. `ord` converts a `Char`\
    \ to an `Int` - that's what it does. `ord` converts a `Char` to an `Int` - that's\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's what it does. `ord` converts a `Char`\
    \ to an `Int` - that's what it does. `ord` converts a `Char` to an `Int` - that's\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's what it does. `ord` converts a `Char`\
    \ to an `Int` - that's what it does. `ord` converts a `Char` to an `Int` - that's\
    \ what it does. `ord` converts a `Char` to an `Int` - that's what it does. `ord`\
    \ converts a `Char` to an `Int` - that's what it does. `ord` converts a `Char`\
    \ to an `Int` - that's \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_ugw82v.jl:22\nin expression starting at\
    \ /tmp/tmpi_ugw82v.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n   \
    \         sum += (c - 'A' + 10)\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzbn00gg8.jl:22\nin expression starting at /tmp/tmpzbn00gg8.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ digitSum += c - '0' else digitSum += c - 'A' + 10\n    end\n    return digitSum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are upper case letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr6fegim0.jl:21\nin expression starting at /tmp/tmpr6fegim0.jl:21\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do\n        if c >= '0' and c <= '9' then\n\
    \            digitSum += c - '0'\n        end\n    end\n    return digitSum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnwp_uyd1.jl:21\nin expression starting at /tmp/tmpnwp_uyd1.jl:21\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if ('A' <= c && c <= 'Z')\
    \ then \n            sum += c - 'A' + 1\n        else \n            sum += c -\
    \ 'a' + 1\n    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpny9zo_gi.jl:21\nin expression starting at /tmp/tmpny9zo_gi.jl:21\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0glx1i3t.jl:22\nin expression starting at\
    \ /tmp/tmp0glx1i3t.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        elseif ('a' <= c && c <= 'z')\n       \
    \     sum += c - 'a' + 1\n        else\n            sum += c\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are not digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27nzaugx.jl:30\nin expression starting at\
    \ /tmp/tmp27nzaugx.jl:30\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, because it doesn't require any external libraries. But I wonder\
    \ why you didn't use `sum` instead of `Int64`?\n<|/ c |>\n<| c |>\nI used `Int64`\
    \ because I thought it would be more efficient than `Int`. But I guess it really\
    \ doesn't matter. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI guess it really\
    \ doesn't matter. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI guess it really\
    \ doesn't matter. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    import Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1eesf3l4.jl:22\nin expression starting at\
    \ /tmp/tmp1eesf3l4.jl:22\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += c - 'A' + 1\n \
    \           else\n                sum += c\n        end\n        sum\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore all non-alphanumeric\
    \ characters and return 0 for the empty string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns13snpd.jl:32\nin expression starting at\
    \ /tmp/tmpns13snpd.jl:32\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string. \nThe function should ignore all non-alphanumeric\
    \ characters and return the number of alphanumeric characters.\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwva12g9c.jl:21\nin expression starting at /tmp/tmpwva12g9c.jl:21\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.code\n    end\n    return digitSum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprbrrzqzj.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprbrrzqzj.jl:1\n\
    in expression starting at /tmp/tmprbrrzqzj.jl:1\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jol6m4a.jl:22\nin expression starting at\
    \ /tmp/tmp9jol6m4a.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            digitSum += c - '0'\n        else\n            digitSum = digitSum\n\
    \        end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the sum\
    \ of the digits of that string. \nThe digits are the characters between '0' and\
    \ '9'.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjhgxijtc.jl:21\nin expression starting at /tmp/tmpjhgxijtc.jl:21\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ the idea of using codePointAt. Thanks.\n<|/ c |>\n<| a |>\n<code>\nimport Data.Char\
    \ (toUpper)\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpij57kik0.jl:22\nin expression starting at\
    \ /tmp/tmpij57kik0.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<text>\nExercise 9\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\
    \ \nThe function should ignore all non-alphanumeric characters.\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpogkvm2de.jl:25\nin expression starting at\
    \ /tmp/tmpogkvm2de.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string. \nWrite\
    \ a function that takes a string as input and returns the number of uppercase\
    \ characters in the string. \nWrite a function that takes a string as input and\
    \ returns the number of lowercase characters in the string. \nWrite a function\
    \ that takes a string as input and returns the number of digits in the string.\
    \ \nWrite a function that takes a string as input and returns the number of alphanumeric\
    \ characters in the string. \nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are not alphanumeric.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzqah0p37.jl:25\nin expression starting at\
    \ /tmp/tmpzqah0p37.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4oqy3omm.jl:21\nin expression starting at /tmp/tmp4oqy3omm.jl:21\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += c - 'A' + 1\n \
    \           else\n                sum += c\n        end\n        sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7q21oc9.jl:33\nin expression starting at\
    \ /tmp/tmpq7q21oc9.jl:33\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if ('A' <= c <= 'Z') || (\"a\" <=\
    \ c <= \"z\")\n            digitSum += c - 'A' + 1\n        else if ('0' <= c\
    \ <= '9')\n            digitSum += c - '0'\n        end\n    end\n    return digitSum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpant89mgq.jl:24\nin expression starting at\
    \ /tmp/tmpant89mgq.jl:24\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += (c - '0')\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rqn2_c7.jl:22\nin expression starting at\
    \ /tmp/tmp5rqn2_c7.jl:22\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a dscore=0 tags=haskell,string,ascii\
    \ |>\n<| c |>\nThis doesn't work. `ord` only works on ASCII characters. `ord`\
    \ doesn't work on non-ASCII characters. `ord` doesn't work on non-ASCII characters\
    \ in Haskell.\n<|/ c |>\n<| c |>\nThe question was about ASCII characters, not\
    \ about non-ASCII characters. `ord` works on non-ASCII characters in Haskell.\
    \ `ord` works on non-ASCII characters in Haskell.\n<|/ c |>\n<| c |>\n`ord` works\
    \ on non-ASCII characters in Haskell. `ord` works on non-ASCII characters in Haskell.\n\
    <|/ c |>\n<| c |>\n`ord` works on non-ASCII characters in Haskell. `ord` works\
    \ on non-ASCII characters in Haskell.\n<|/ c |>\n<| c |>\n`ord` works on non-ASCII\
    \ characters in Haskell. `ord` works on non-ASCII characters in Haskell.\n<|/\
    \ c |>\n<| a tags=haskell,string,ascii |>\n<code>\nimport Data.Char\nimport Data.List\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmftcmeu.jl:22\nin expression starting at\
    \ /tmp/tmpjmftcmeu.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your answer but I think it would be better to use a `fold` instead of a `for`\
    \ loop. `digitSum = foldl (+) 0` will do the same thing but in a more readable\
    \ way.\n<|/ c |>\n<| c |>\nI agree with you. `foldl` is more readable. `foldl`\
    \ is also more efficient than `foldl (+) 0` because `foldl` can avoid the creation\
    \ of intermediate lists.\n<|/ c |>\n<| c |>\nI agree with you. `foldl` is more\
    \ readable. `foldl` is also more efficient than `foldl (+) 0` because `foldl`\
    \ can avoid the creation of intermediate lists.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. `foldl` is more readable. `foldl` is also more efficient than `foldl (+)\
    \ 0` because `foldl` can avoid the creation of intermediate lists.\n<|/ c |>\n\
    <| a tags=haskell,functional-programming |>\nHere's a solution using foldl:\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc c -> if c.isUpper\
    \ then acc + c.codePointAt(0) else acc) 0 s\n</code>\n<|/ a dscore=3 |>\n<| a\
    \ tags=haskell,functional-programming |>\nA solution using foldl and isUpper from\
    \ Data.Char:\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikt7occr.jl:22\nin expression starting at\
    \ /tmp/tmpikt7occr.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting. What is your problem?\n<|/ c |>\n<|\
    \ c |>\nI tested it before posting, but I didn't test the case you mentioned.\
    \ I was thinking about it when I wrote the comment and I thought it would be a\
    \ good idea to mention it here too. Anyway, I edited my answer to include a solution\
    \ that works for that case.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I must have had a typo when I tested it the first time.\n<|/ c |>\n<| c |>\n\
    I tested it again and it works. I must have had a typo when I tested it the first\
    \ time.\n<|/ c |>\n<| a |>\nThe other answers here are great, but I wanted to\
    \ show a more functional approach using Data.Char.\n<code>\nimport Data.Char (toUpper)\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpllpviv74.jl:22\nin expression starting at\
    \ /tmp/tmpllpviv74.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c\n    return\
    \ sum\n</code>\n<|/ a tags=string,haskell,functional-programming |>\n<| a dscore=0\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2sxwp8r.jl:27\nin expression starting at\
    \ /tmp/tmpp2sxwp8r.jl:27\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimb1cgrw.jl:24\nin expression starting at\
    \ /tmp/tmpimb1cgrw.jl:24\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzeloh1m8.jl:21\nin expression starting at /tmp/tmpzeloh1m8.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxphl8q9d.jl:21\nin expression starting at /tmp/tmpxphl8q9d.jl:21\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn1sv09ym.jl:21\nin expression starting at /tmp/tmpn1sv09ym.jl:21\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\nI like your solution, although it would be more idiomatic to write\
    \ `sum . filter (\\`elem\\` ['A'..'Z'])` instead of `sum . filter (\\`elem\\`\
    \ ['A'..'Z']) . map toUpper`.\n<|/ c |>\n<| c |>\nThanks, I didn't know about\
    \ `elem` - I thought it was a list comprehension but it's actually a function\
    \ that takes a predicate and returns a new list.\n<|/ c |>\n<| c |>\n`elem` is\
    \ indeed a list comprehension, but `filter` takes a predicate and returns a new\
    \ list. `filter (\\`elem\\` ['A'..'Z'])` is equivalent to `filter (\\`elem\\`\
    \ ['A'..'Z']) . map toUpper`.\n<|/ c |>\n<| a dscore=2 |>\nHere's another solution,\
    \ using Data.Char.\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8wfo0fb.jl:22\nin expression starting at\
    \ /tmp/tmpd8wfo0fb.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0szc1gay.jl:22\nin expression starting at\
    \ /tmp/tmp0szc1gay.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell\
    \ |>\nThe simplest way is to use Data.Char.digitToInt:\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_ie3r_u.jl:22\nin expression starting at\
    \ /tmp/tmpu_ie3r_u.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum\
    \ += toUpper(c)\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpm4i22d7o.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4i22d7o.jl:1\n\
    in expression starting at /tmp/tmpm4i22d7o.jl:1\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThanks for the answer! I understand that `digitSum` can be written\
    \ as a `fold` but I'm still confused on how `digitSum` can be written as a `fold`.\
    \ Can you please elaborate on that?\n<|/ c |>\n<| c |>\nThe `fold` function takes\
    \ two arguments: an initial value and a function which takes a single argument\
    \ and returns a new value. The initial value is given as the second argument.\
    \ `digitSum` can be written as a `fold` by using the `foldl` function which takes\
    \ a function which takes a single argument and returns a new value. The initial\
    \ value is given as the first argument. `digitSum` can be written as a `fold`\
    \ by using the `foldl` function which takes a function which takes a single argument\
    \ and returns a new value. The initial value is given as the second argument.\
    \ `digitSum` can be written as a `fold` by using the `foldl` function which takes\
    \ a function which takes a single argument and returns a new value. The initial\
    \ value is given as the third argument. `digitSum` can be written as a `fold`\
    \ by using the `foldl` function which takes a function which takes a single argument\
    \ and returns a new value. The initial value is given as the fourth argument.\
    \ `digitSum` can be written as a `fold` by using the `foldl` function which takes\
    \ a function which takes a single argument and returns a new value. The initial\
    \ value is given as the fifth argument. `digitSum` can be written as a `fold`\
    \ by using the `foldl` function which takes a function which takes a single argument\
    \ and returns a new value. The initial value is given as the sixth argument. `digitSum`\
    \ can be written as a `fold` by using the `foldl` function which takes a function\
    \ which takes a single argument and returns a new value. The initial value is\
    \ given as the seventh argument. `digitSum` can be written as a `fold` by using\
    \ the `foldl` function which takes a function which takes a single argument and\
    \ returns a new value. The initial value is given as the eighth argument. `digitSum`\
    \ can be written as a `fold` by using the `foldl` function which takes a function\
    \ which takes a single argument and returns a new value. The initial value is\
    \ given as the ninth argument. `digitSum` can be written as a `fold` by using\
    \ the `foldl` function which takes a function which takes a single argument and\
    \ returns a new value. The initial value is given as the tenth argument. `digitSum`\
    \ can be written as a \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1lbjctx.jl:22\nin expression starting at\
    \ /tmp/tmp_1lbjctx.jl:22\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' && c <= '9'\n    \
    \        sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of digits in\
    \ that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9oqqojg3.jl:28\nin expression starting at\
    \ /tmp/tmp9oqqojg3.jl:28\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qt68lbg.jl:22\nin expression starting at\
    \ /tmp/tmp5qt68lbg.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else\n            sum += c - '0'\n    return\
    \ sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=haskell,functional-programming |>\n\
    <code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkfl3e_y.jl:27\nin expression starting at\
    \ /tmp/tmpvkfl3e_y.jl:27\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum\
    \ += toUpper(c)\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpm4i22d7o.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4i22d7o.jl:1\n\
    in expression starting at /tmp/tmpm4i22d7o.jl:1\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' && c <= '9'\n    \
    \        sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are not digits.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbshi68b.jl:28\nin expression starting at\
    \ /tmp/tmpfbshi68b.jl:28\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.Char (toUpper)\nimport Data.List (foldl')\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pm12zag.jl:22\nin expression starting at\
    \ /tmp/tmp9pm12zag.jl:22\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || ('a'\
    \ <= c && c <= 'z')\n            sum += c - 'A' + 1\n        else\n          \
    \  sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zo4pyyb.jl:28\nin expression starting at\
    \ /tmp/tmp3zo4pyyb.jl:28\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z')\n  \
    \          sum += c - 'A' + 1\n        else if ('a' <= c && c <= 'z')\n      \
    \      sum += c - 'a' + 1\n        else if ('0' <= c && c <= '9')\n          \
    \  sum += c - '0'\n    return sum\nend\n</cell>\n<code language=julia-1.0>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ upper case. For example, the string \"hello\" has 4 characters that are upper\
    \ case: \"H\", \"E\", \"L\", \"L\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3u9pt4t.jl:24\nin expression starting at\
    \ /tmp/tmpo3u9pt4t.jl:24\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the digits only'\n    ASCII codes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp70o871gw.jl:21\nin expression starting at /tmp/tmp70o871gw.jl:21\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string. \nIf the string contains\
    \ any non-ASCII characters, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr_aypzib.jl:22\nin expression starting at /tmp/tmpr_aypzib.jl:22\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (c\
    \ >= 'a' && c <= 'z')\n            sum += c - 'A' + 1\n        else\n        \
    \    sum += c\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpps6uv2qu.jl:27\nin expression starting at\
    \ /tmp/tmpps6uv2qu.jl:27\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n    \
    \        sum += ord(c)\n    return sum\n</code>\n<|/ a dscore=1 tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work for non-ASCII characters, e.g. `digitSum(\"\xDF\
    \")` returns `-128`.\n<|/ c |>\n<| c |>\n: It doesn't work for non-ASCII characters,\
    \ because `ord` only works for ASCII characters. `ord` returns `-128` for non-ASCII\
    \ characters, because `-128` is an invalid character in ASCII.\n<|/ c |>\n<| c\
    \ |>\n: It doesn't work for non-ASCII characters, because `ord` only works for\
    \ ASCII characters. `ord` returns `-128` for non-ASCII characters, because `-128`\
    \ is an invalid character in ASCII.\n<|/ c |>\n<| c |>\n: It doesn't work for\
    \ non-ASCII characters, because `ord` only works for ASCII characters. `ord` returns\
    \ `-128` for non-ASCII characters, because `-128` is an invalid character in ASCII.\n\
    <|/ c |>\n<| c |>\n: It doesn't work for non-ASCII characters, because `ord` only\
    \ works for ASCII characters. `ord` returns `-128` for non-ASCII characters, because\
    \ `-128` is an invalid character in ASCII.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    import Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4iy25d6k.jl:22\nin expression starting at\
    \ /tmp/tmp4iy25d6k.jl:22\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzeloh1m8.jl:21\nin expression starting at /tmp/tmpzeloh1m8.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\n`digitSum = sum . map ord` would be more idiomatic and efficient.\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . map ord` would be more idiomatic and efficient.\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . map ord` would be more idiomatic and efficient.\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . map ord` would be more idiomatic and efficient.\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . map ord` would be more idiomatic and efficient.\n\
    <|/ c |>\n<| a dscore=5 tags=string,haskell,ascii |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2hmucln.jl:22\nin expression starting at\
    \ /tmp/tmpm2hmucln.jl:22\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (\"\
    a\" <= c && c <= \"z\")\n            digitSum += c - 'A' + 1\n        else if\
    \ ('a' <= c && c <= 'z')\n            digitSum += c - 'a' + 1\n        else\n\
    \            digitSum += c\n    return digitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Task\nWrite a function that takes a string as input and returns the sum of the\
    \ digits in that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89xn17mj.jl:24\nin expression starting at\
    \ /tmp/tmp89xn17mj.jl:24\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits in that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgq5_hk1q.jl:22\nin expression starting at\
    \ /tmp/tmpgq5_hk1q.jl:22\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4eas7qgx.jl:22\nin expression starting at\
    \ /tmp/tmp4eas7qgx.jl:22\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum\
    \ += toUpper(c)\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpm4i22d7o.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm4i22d7o.jl:1\n\
    in expression starting at /tmp/tmpm4i22d7o.jl:1\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't answer the question. OP wants to know if there is a way to do this\
    \ without using recursion.\n<|/ c |>\n<| c |>\nThe question was \"Write a function\
    \ that takes a string as input and returns the sum of the upper characters only'\n\
    ASCII codes.\" This answer does exactly that. Recursion is unavoidable in this\
    \ case. Recursion can be avoided using tail recursion, but that doesn't change\
    \ the fact that recursion is unavoidable.\n<|/ c |>\n<| c |>\nI agree with you\
    \ that recursion is unavoidable, but I believe that recursion is also the only\
    \ way to solve this problem in Haskell. Recursion is also the only way to solve\
    \ this problem in any language that supports recursion.\n<|/ c |>\n<| c |>\nI\
    \ agree with you that recursion is unavoidable, but I believe that recursion is\
    \ also the only way to solve this problem in Haskell. Recursion is also the only\
    \ way to solve this problem in any language that supports recursion.\n<|/ c |>\n\
    <| c |>\nI agree with you that recursion is unavoidable, but I believe that recursion\
    \ is also the only way to solve this problem in Haskell. Recursion is also the\
    \ only way to solve this problem in any language that supports recursion.\n<|/\
    \ c |>\n<| a tags=haskell,recursion |>\nYou can do this without recursion, by\
    \ using a fold over a list of characters:\n<code>\nimport Data.Char\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngyhjv_k.jl:22\nin expression starting at\
    \ /tmp/tmpngyhjv_k.jl:22\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if c.isUpper\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a tags=haskell,functional-programming\
    \ |>\n<| c |>\n`ord` returns a `Char`, not a `Int64`.\n<|/ c |>\n<| c |>\n`ord`\
    \ returns a `Char`, not a `Int64`.\n<|/ c |>\n<| c |>\n`ord` returns a `Char`,\
    \ not a `Int64`.\n<|/ c |>\n<| c |>\n`ord` returns a `Char`, not a `Int64`.\n\
    <|/ c |>\n<| c |>\n`ord` returns a `Char`, not a `Int64`.\n<|/ c |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum [x | x <- s, x >= 'A'\
    \ && x <= 'Z']\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`sum` takes an `Int` not\
    \ a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an `Int` not a `Char`.\n<|/ c |>\n\
    <| c |>\n`sum` takes an `Int` not a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an\
    \ `Int` not a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an `Int` not a `Char`.\n\
    <|/ c |>\n<| a tags=haskell,functional-programming |>\n<code>\ndigitSum :: String\
    \ -> Int\ndigitSum s = sum $ map ord $ filter (>='A' && <='Z') s\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\n`sum` takes an `Int` not a `Char`.\n<|/ c |>\n<| c |>\n\
    `sum` takes an `Int` not a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an `Int` not\
    \ a `Char`.\n<|/ c |>\n<| c |>\n`sum` takes an \nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rq_pl_3.jl:25\nin expression starting at\
    \ /tmp/tmp0rq_pl_3.jl:25\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= 'A' and c <= 'Z'\n                sum += c - 'A' + 1\n  \
    \          else\n                sum += c\n        end\n        sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbbvdxvi5.jl:25\nin expression starting at /tmp/tmpbbvdxvi5.jl:25\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxphl8q9d.jl:21\nin expression starting at /tmp/tmpxphl8q9d.jl:21\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            digitSum += c - '0'\n        else \n            digitSum += 10\n\
    \    end\n    return digitSum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvr105ost.jl:21\nin expression starting at /tmp/tmpvr105ost.jl:21\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwp8sj7c7.jl:21\nin expression starting at /tmp/tmpwp8sj7c7.jl:21\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the sum of the digits in that string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprwq3wfp1.jl:21\nin expression starting at /tmp/tmprwq3wfp1.jl:21\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.4>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6vnbw3eg.jl:21\nin expression starting at /tmp/tmp6vnbw3eg.jl:21\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without using any libraries?\n<|/ c |>\n<| c |>\nThe `Data.Char` module is part\
    \ of the base Haskell installation. `import Data.Char;digitSum :: String -> Int64`\
    \ will do it.\n<|/ c |>\n<| c |>\n`digitSum` can be written without `Data.Char`\
    \ by `sum (map ord s)`.\n<|/ c |>\n<| c |>\n`digitSum` can be written without\
    \ `Data.Char` by `sum (map ord s)`.\n<|/ c |>\n<| c |>\n`digitSum` can be written\
    \ without `Data.Char` by `sum (map ord s)`.\n<|/ c |>\n<| a dscore=5 tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mffflmz.jl:22\nin expression starting at\
    \ /tmp/tmp1mffflmz.jl:22\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum = 0\n    for c in s:\n        if c.isUpper():\n            sum +=\
    \ c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nI guess you meant\
    \ `if c.isUpper()`\n<|/ c |>\n<| c |>\nYes, I meant `if c.isUpper()`. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport Data.Char\nimport\
    \ Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_l97mybu.jl:22\nin expression starting at\
    \ /tmp/tmp_l97mybu.jl:22\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += c - 'A' + 1\n \
    \           else\n                sum += c\n        end\n        sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5yuez7x.jl:32\nin expression starting at\
    \ /tmp/tmpu5yuez7x.jl:32\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c.isUpper()\n            sum\
    \ += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8gr1max.jl:25\nin expression starting at\
    \ /tmp/tmpu8gr1max.jl:25\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nlet digitSum(s:String):Int64 = \n    let rec loop i acc = if i <\
    \ s.length then loop (i+1) (acc+s.[i]) else acc\n    loop 0 0\n</code>\n<|/ a\
    \ tags=ocaml,string,recursion |>\n<| a tags=ocaml,string,recursion |>\n<code>\n\
    let digitSum(s:string) =\n    let rec loop i acc =\n        if i < s.length then\
    \ loop (i+1) (acc+s.[i]) else acc\n    loop 0 0\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=ocaml,string,recursion |>\n<code>\nlet digitSum s = \n  let rec loop\
    \ i acc =\n    if i < s.length then loop (i+1) (acc+s.[i]) else acc\n  loop 0\
    \ 0\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlet digitSum s = \n\
    \  let rec loop i acc =\n    if i < s.length then loop (i+1) (acc+s.[i]) else\
    \ acc\n  loop 0 0\n</code>\n<|/ a tags=ocaml,string,recursion |>\n<| a dscore=1\
    \ |>\n<code>\nlet digitSum s = \n  let rec loop i acc =\n    if i < s.length then\
    \ loop (i+1) (acc+s.[i]) else acc\n  loop 0 0\n</code>\n<|/ a tags=ocaml,string,recursion\
    \ |>\n<| a tags=ocaml,string,recursion |>\n<code>\nlet digitSum s = \n  let rec\
    \ loop i acc =\n    if i < s.length then loop (i+1) (acc+s.[i]) else acc\n  loop\
    \ 0 0\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlet digitSum s =\
    \ \n  let rec loop i acc =\n    if i < s.length then loop (i+1) (acc+s.[i]) else\
    \ acc\n  loop 0 0\n</code>\n<|/ a tags=ocaml,string,recursion |>\n<| a tags=ocaml,string,recursion\
    \ |>\n<code>\nlet digitSum s = \n  let rec loop i acc =\n    if i < s.length then\
    \ loop (i+1) (acc+s.[i]) else acc\n  loop 0 \nusing Test\n\n@testset begin\n\n\
    candidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfvfpo1a.jl:22\nin expression starting at\
    \ /tmp/tmptfvfpo1a.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\n`digitSum` can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n\
    <|/ c |>\n<| c |>\n`digitSum` can be written `sum . filter (\\`elem\\` ['A'..'Z'])`\n\
    <|/ c |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\nimport\
    \ Data.List\nimport Data.Maybe\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6o95zuwl.jl:22\nin expression starting at\
    \ /tmp/tmp6o95zuwl.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1oajbh8.jl:22\nin expression starting at\
    \ /tmp/tmpr1oajbh8.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=haskell,string,list\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgib35e6i.jl:22\nin expression starting at\
    \ /tmp/tmpgib35e6i.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qt68lbg.jl:22\nin expression starting at\
    \ /tmp/tmp5qt68lbg.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= 'A' and c <= 'Z' then\
    \ \n            sum += c - 'A' + 1\n        else \n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the lower characters only'\nASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5g5ghuxg.jl:21\nin expression starting at /tmp/tmp5g5ghuxg.jl:21\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| a tags=string,haskell |>\n<code>\nimport Data.Char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74vr7fsv.jl:22\nin expression starting at\
    \ /tmp/tmp74vr7fsv.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= '0' and c <= '9'\n   \
    \         sum += c - '0'\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphf2i5a0_.jl:22\nin expression starting at /tmp/tmphf2i5a0_.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (\"\
    a\" <= c && c <= \"z\")\n            sum += c - 'A' + 1\n        else\n      \
    \      sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xhr66ku.jl:28\nin expression starting at\
    \ /tmp/tmp_xhr66ku.jl:28\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThanks for your answer! I guess I should have been more specific.\
    \ I'm looking for a solution that doesn't use any libraries. I edited my question\
    \ to reflect this.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use any\
    \ libraries.\n<|/ c |>\n<| c |>\nThanks for your answer! I guess I should have\
    \ been more specific. I'm looking for a solution that doesn't use any libraries.\
    \ I edited my question to reflect this.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't use any libraries.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport\
    \ Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphahdwha9.jl:22\nin expression starting at\
    \ /tmp/tmphahdwha9.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a dscore=2 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjgmvo0a.jl:22\nin expression starting at\
    \ /tmp/tmpmjgmvo0a.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphj2m8gsk.jl:22\nin expression starting at\
    \ /tmp/tmphj2m8gsk.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpil5hmbns.jl:21\nin expression starting at /tmp/tmpil5hmbns.jl:21\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8c7kiqwa.jl:22\nin expression starting at\
    \ /tmp/tmp8c7kiqwa.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ the idea of using codePointAt. Thanks!\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jcwal76.jl:22\nin expression starting at\
    \ /tmp/tmp1jcwal76.jl:22\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if c >= '0' && c <= '9' then\
    \ \n            sum += c - '0'\n        else \n            sum += c - 'A' + 10\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string. \nThe digits\
    \ are the characters between '0' and '9'.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3t_mqtsi.jl:21\nin expression starting at /tmp/tmp3t_mqtsi.jl:21\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n\
    \            sum += c - 'A' + 1\n        else\n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8vni9cyf.jl:21\nin expression starting at /tmp/tmp8vni9cyf.jl:21\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - this one is the best so far.\n\
    <|/ c |>\n<| a tags=string,haskell,ascii |>\n<code>\nimport Data.Char\nimport\
    \ Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq_euc8e.jl:22\nin expression starting at\
    \ /tmp/tmpjq_euc8e.jl:22\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if ('A' <= c && c <= 'Z') || (\"\
    a\" <= c && c <= \"z\")\n            sum += c - 'A' + 1\n        else\n      \
    \      sum += c\n    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ti7io7j.jl:28\nin expression starting at\
    \ /tmp/tmp9ti7io7j.jl:28\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do \n        if ('A' <= c && c <= 'Z')\
    \ then \n            sum += c - 'A' + 1\n        else \n            sum += c -\
    \ 'a'\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsl4pgn2q.jl:21\nin expression starting at /tmp/tmpsl4pgn2q.jl:21\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` works but is less efficient than\
    \ `digitSum = sum . filter (\\c -> ord c >= ord('A') and ord c <= ord('Z'))`\n\
    <|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> ord c >= ord('A') and ord\
    \ c <= ord('Z'))` works but is less efficient than `digitSum = sum . filter (\\\
    c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> ord c >=\
    \ ord('A') and ord c <= ord('Z'))` works but is less efficient than `digitSum\
    \ = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum = sum . filter\
    \ (\\c -> ord c >= ord('A') and ord c <= ord('Z'))` works but is less efficient\
    \ than `digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\ndigitSum :: String -> Int\ndigitSum s = sum $ map ord $ filter (\\\
    c -> ord c >= ord('A') and ord c <= ord('Z')) s\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\n`digitSum s = sum $ map ord $ filter (\\c -> ord c >= ord('A') and ord\
    \ c <= ord('Z')) s` works but is less efficient than `digitSum = sum . filter\
    \ (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n`digitSum s = sum $ map ord $ filter\
    \ (\\c -> ord c >= ord('A') and ord c <= ord('Z')) s` works but is less efficient\
    \ than `digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfsa7p0k.jl:22\nin expression starting at\
    \ /tmp/tmpsfsa7p0k.jl:22\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are not digits.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbhnojm0m.jl:21\nin expression starting at /tmp/tmpbhnojm0m.jl:21\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=haskell,string,ascii\
    \ |>\n<| c |>\n`digitSum` should probably be `digitSum' :: String -> Int64`, since\
    \ it returns `Int64` and not `Int`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed it.\n\
    <|/ c |>\n<| c |>\n`digitSum` should probably be `digitSum' :: String -> Int64`,\
    \ since it returns `Int64` and not `Int`.\n<|/ c |>\n<| c |>\n: Thanks, I fixed\
    \ it.\n<|/ c |>\n<| a tags=haskell,string,ascii |>\n<code>\nimport Data.Char\n\
    import Data.List\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrmmdo8i.jl:22\nin expression starting at\
    \ /tmp/tmpwrmmdo8i.jl:22\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9oovy3g.jl:22\nin expression starting at\
    \ /tmp/tmpb9oovy3g.jl:22\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79vaioeu.jl:22\nin expression starting at\
    \ /tmp/tmp79vaioeu.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - I like that!\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` - I like that!\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdlp4zhy.jl:22\nin expression starting at\
    \ /tmp/tmpgdlp4zhy.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if c >= 'A' and c <= 'Z'\n   \
    \         sum += c - 'A' + 1\n        else\n            sum += c\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjut9db9g.jl:22\nin expression starting at /tmp/tmpjut9db9g.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum += c - '0'\n        else\n            sum += c - 'A' + 10\n \
    \       end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzeloh1m8.jl:21\nin expression starting at /tmp/tmpzeloh1m8.jl:21\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum(map(ord, filter(c => c\
    \ >= 'A' && c <= 'Z', s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the digits in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj89qba0r.jl:25\nin expression starting at\
    \ /tmp/tmpj89qba0r.jl:25\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\n<code>\nimport Data.Char\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg4q66anr.jl:22\nin expression starting at\
    \ /tmp/tmpg4q66anr.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s\n        if isUpper(c)\n            sum\
    \ += toUpper(c) - 'A' + 1\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2e6914ww.jl:26\nin expression starting at\
    \ /tmp/tmp2e6914ww.jl:26\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= 'a' && c <= 'z'\n                sum += c - 'a'\n       \
    \     else\n                sum += c\n        end\n        sum\nend\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the sum of the digits in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysjemxgp.jl:32\nin expression starting at\
    \ /tmp/tmpysjemxgp.jl:32\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s:\n        if c.isUpper():\n            digitSum\
    \ += c.codePointAt(0)\n    return digitSum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| c |>\nThanks for your answer! I actually tried this before posting my\
    \ question, but I got an error saying that `isUpper` isn't a member of `Char`.\
    \ So I thought maybe there was something wrong with my version of Haskell. Turns\
    \ out I was using an older version of Haskell (7.10.3). Upgrading to 7.10.4 fixed\
    \ the problem.\n<|/ c |>\n<| c |>\nAh, I see. Yeah, `isUpper` was introduced in\
    \ 7.10.4, so you might want to upgrade to that version. 7.10.3 was released before\
    \ 7.10.4 was released, so you might want to upgrade to 7.10.4 anyway. 7.10.4 was\
    \ released after 7.10.3 was released, so you might want to upgrade to 7.10.4 anyway.\
    \ 7.10.4 was released after 7.10.2 was released, so you might want to upgrade\
    \ to 7.10.4 anyway. 7.10.4 was released after 7.10.1 was released, so you might\
    \ want to upgrade to 7.10.4 anyway.\n<|/ c |>\n<| c |>\nThanks for the tip! I\
    \ actually tried upgrading to the latest version of Haskell, but I got an error\
    \ saying that `isUpper` wasn't a member of `Char`. So I thought maybe there was\
    \ something wrong with my version of Haskell. Turns out I was using an older version\
    \ of Haskell (7.10.3). Upgrading to 7.10.4 fixed the problem.\n<|/ c |>\n<| c\
    \ |>\nAh, I see. Yeah, `isUpper` was introduced in 7.10.4, so you might want to\
    \ upgrade to that version. 7.10.3 was released before 7.10.4 was released, so\
    \ you might want to upgrade to 7.10.4 anyway. 7.10.4 was released after 7.10.3\
    \ was released, so you might want to upgrade to 7.10.4 anyway. 7.10.4 was released\
    \ after 7.10.2 was released, so you might want to upgrade to 7.10.4 anyway. 7.10.4\
    \ was released after 7.10.1 was released, so you might want to upgrade to 7.10.4\
    \ anyway.\n<|/ c |>\n<| c |>\nThanks for the tip! I actually tried upgrading to\
    \ the latest version of Haskell, but I got an error saying that `isUpper` wasn't\
    \ a \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsmy6vhq.jl:22\nin expression starting at\
    \ /tmp/tmppsmy6vhq.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        sum += (c - 'A' + 1)\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string as input and returns the sum of the lower characters only'\n    ASCII\
    \ codes.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyq3tu0j6.jl:21\nin expression starting at /tmp/tmpyq3tu0j6.jl:21\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qt68lbg.jl:22\nin expression starting at\
    \ /tmp/tmp5qt68lbg.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)`\n<|/ c |>\n<| c |>\n\
    `digitSum = sum . filter (\\c -> isUpper c)` would also work. `isUpper` has type\
    \ `Char -> Bool`, so `filter` will filter out all non-uppercase letters.\n<|/\
    \ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` would also work.\
    \ `isUpper` has type `Char -> Bool`, so `filter` will filter out all non-uppercase\
    \ letters.\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c -> isUpper c)` would\
    \ also work. `isUpper` has type `Char -> Bool`, so `filter` will filter out all\
    \ non-uppercase letters.\n<|/ c |>\n<| c |>\n`digitSum = sum . filter (\\c ->\
    \ isUpper c)` would also work. `isUpper` has type `Char -> Bool`, so `filter`\
    \ will filter out all non-uppercase letters.\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7930kxc.jl:22\nin expression starting at\
    \ /tmp/tmps7930kxc.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c.lower()) - ord('A')\n    return sum\n</code>\n<|/ a\
    \ tags=haskell,string,ascii |>\n<| c |>\nThis does not work if the string contains\
    \ non-ASCII letters.\n<|/ c |>\n<| c |>\nIt does work, if you replace `ord` with\
    \ `ord` from `Data.Char`.\n<|/ c |>\n<| c |>\nIt does work, if you replace `ord`\
    \ with `ord` from `Data.Char`.\n<|/ c |>\n<| c |>\nIt does work, if you replace\
    \ `ord` with `ord` from `Data.Char`.\n<|/ c |>\n<| c |>\nIt does work, if you\
    \ replace `ord` with `ord` from `Data.Char`.\n<|/ c |>\n<| a tags=haskell,string,ascii\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp511r0bwi.jl:22\nin expression starting at\
    \ /tmp/tmp511r0bwi.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if ('A' <= c && c <= 'Z')\n                sum += (c - 'A' + 1)\n\
    \            else\n                sum += (c - '0')\n        end\n        sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of uppercase letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpks67x2ep.jl:32\nin expression starting at\
    \ /tmp/tmpks67x2ep.jl:32\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like your use of codePointAt. Thanks!\n<|/ c |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uz8mmrw.jl:22\nin expression starting at\
    \ /tmp/tmp1uz8mmrw.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2gr4oh2.jl:22\nin expression starting at\
    \ /tmp/tmpd2gr4oh2.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n\
    \            sum += c - 'A' + 1\n        else\n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.4>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.4>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.4>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.4>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.4>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmo0iszox.jl:21\nin expression starting at /tmp/tmpmo0iszox.jl:21\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nI wrote a function that does this for you:\n<code>\nimport Data.Char\nusing\
    \ Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\
    \t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\
    \t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\") ==\
    \ 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvb6o98zi.jl:22\nin expression starting at\
    \ /tmp/tmpvb6o98zi.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.5>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdihml7au.jl:22\nin expression starting at\
    \ /tmp/tmpdihml7au.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\" then 0 else sum(map(ord, filter(c => c >= 'A' && c <= 'Z',\
    \ s)))\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters that are not letters.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp01wfqudj.jl:20\nin expression starting at /tmp/tmp01wfqudj.jl:20\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    The `sum` variable is unnecessary. `sum` can be replaced by `0`.\n<|/ c |>\n<|\
    \ c |>\nYes, but it's more idiomatic to write `0` instead of `sum`.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nlet digitSum(s:String):Int64 = \n    let rec loop i\
    \ acc = if i < s.length then loop (i+1) (acc+s.[i]) else acc\n    loop 0 0\n</code>\n\
    <|/ a tags=haskell,functional-programming |>\n<| c |>\nThis doesn't work. `digitSum(\"\
    abcCd\")` returns `0`.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\n\
    <|/ c |>\n<| c |>\n: It works. I tested it before posting.\n<|/ c |>\n<| c |>\n\
    : It works. I tested it before posting.\n<|/ c |>\n<| c |>\n: It works. I tested\
    \ it before posting.\n<|/ c |>\n<| a tags=haskell,functional-programming |>\n\
    <code>\ndigitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x\
    \ then acc + ord x else acc) 0 s\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work. `digitSum(\"abcCd\")` returns `0`.\n<|/ c |>\n<| c |>\n: It works. I tested\
    \ it before posting.\n<|/ c |>\n<| c |>\n: It works. I tested it before posting.\n\
    <|/ c |>\n<| c |>\n: It works. I tested it before posting.\n<|/ c |>\n<| c |>\n\
    : It works. I tested it before posting.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    digitSum :: String -> Int\ndigitSum s = foldl (\\acc x -> if isUpper x then acc\
    \ + ord x else acc) 0 s\n</code>\n<|/ a tags=haskell,functional-programming |>\n\
    <| c |>\nThis \nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpceunn10s.jl:22\nin expression starting at\
    \ /tmp/tmpceunn10s.jl:22\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a tags=string,haskell,ascii\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\
    \ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\"\
    ) == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\")\
    \ == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfabyo33j.jl:22\nin expression starting at\
    \ /tmp/tmpfabyo33j.jl:22\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            sum = sum + c - '0'\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abcCd\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"aAaaaXa\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of digits in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\
    \t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t\
    @test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\
    \t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"You arE Very\
    \ Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpii_bg4bo.jl:21\nin expression starting at /tmp/tmpii_bg4bo.jl:21\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\n\
    \            digitSum += c - '0'\n        else\n            digitSum += 10\n \
    \       end\n    end\n    return digitSum\nend\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"abAB\")\n</cell>\n\
    <code language=julia-1.0>\ndigitSum(\"abcCd\")\n</cell>\n<code language=julia-1.0>\n\
    digitSum(\"helloE\")\n</cell>\n<code language=julia-1.0>\ndigitSum(\"woArBld\"\
    )\n</cell>\n<code language=julia-1.0>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits of that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn9e82505.jl:21\nin expression starting at /tmp/tmpn9e82505.jl:21\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c >= '0' and c <= '9':\n \
    \           sum += c - '0'\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a tags=haskell,functional-programming\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwo5u_lxh.jl:22\nin expression starting at\
    \ /tmp/tmpwo5u_lxh.jl:22\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= 'A' and c <= 'Z' then\n\
    \            sum += c - 'A' + 1\n        else\n            sum += c\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\ndigitSum(\"\")\n</cell>\n\
    <code language=julia-1.3>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.3>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.3>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.3>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string as input and returns the sum of the digits only'\n    ASCII codes.\n\
    using Test\n\n@testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\"\
    ) == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"abcCd\") ==\
    \ 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\") ==\
    \ 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are yOu?\"\
    ) == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4rg3g8tn.jl:21\nin expression starting at /tmp/tmp4rg3g8tn.jl:21\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s do\n        if c >= '0' && c <= '9' then\
    \ \n            sum += (c - '0')\n        else\n            sum += (c - 'A' +\
    \ 10)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\ndigitSum(\"\
    \")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"abAB\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"abcCd\")\n</cell>\n<code language=julia-1.5>\ndigitSum(\"helloE\")\n\
    </cell>\n<code language=julia-1.5>\ndigitSum(\"woArBld\")\n</cell>\n<code language=julia-1.5>\n\
    digitSum(\"aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc5fjghow.jl:21\nin expression starting at /tmp/tmpc5fjghow.jl:21\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    digitSum = 0\n    for c in s\n        if isUpper(c)\n            digitSum\
    \ += toUpper(c)\n        end\n    end\n    return digitSum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpikzj2n96.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmpikzj2n96.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"abAB\") == 131\n  UndefVarError: isUpper not defined\n\
    \  Stacktrace:\n   [1] digitSum(s::String)\n     @ Main /tmp/tmpikzj2n96.jl:22\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpikzj2n96.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpikzj2n96.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpikzj2n96.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"abcCd\") == 67\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpikzj2n96.jl:22\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpikzj2n96.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpikzj2n96.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpikzj2n96.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"helloE\") == 69\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpikzj2n96.jl:22\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpikzj2n96.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpikzj2n96.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpikzj2n96.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"woArBld\") == 131\n  UndefVarError: isUpper not defined\n  Stacktrace:\n\
    \   [1] digitSum(s::String)\n     @ Main /tmp/tmpikzj2n96.jl:22\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansio"
  timestamp: 1659822710
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    if s == \"\"\n        0\n    else\n        sum = 0\n        for c in s\n\
    \            if c >= '0' and c <= '9'\n                sum += c - '0'\n      \
    \      else\n                sum\n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the sum\
    \ of the digits of that string.\nusing Test\n\n@testset begin\n\ncandidate = digitSum;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abAB\") == 131)\n\t@test(candidate(\"\
    abcCd\") == 67)\n\t@test(candidate(\"helloE\") == 69)\n\t@test(candidate(\"woArBld\"\
    ) == 131)\n\t@test(candidate(\"aAaaaXa\") == 153)\n\t@test(candidate(\" How are\
    \ yOu?\") == 151)\n\t@test(candidate(\"You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpblgocp06.jl:25\nin expression starting at /tmp/tmpblgocp06.jl:25\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"Task\n    Write a function that takes a string as input and returns\
    \ the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n \
    \   >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"\
    abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\"\
    )\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\nfunction digitSum(s::String)::Int64\
    \ \n    sum::Int64 = 0\n    for c in s:\n        if c.isUpper():\n           \
    \ sum += c.codePointAt(0)\n    return sum\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\ndef digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n</code>\n<|/ a dscore=0 tags=haskell,string,ascii\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport Data.Char\nusing Test\n\n\
    @testset begin\n\ncandidate = digitSum;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abAB\") == 131)\n\t@test(candidate(\"abcCd\") == 67)\n\t@test(candidate(\"helloE\"\
    ) == 69)\n\t@test(candidate(\"woArBld\") == 131)\n\t@test(candidate(\"aAaaaXa\"\
    ) == 153)\n\t@test(candidate(\" How are yOu?\") == 151)\n\t@test(candidate(\"\
    You arE Very Smart\") == 327)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi7scgzw.jl:22\nin expression starting at\
    \ /tmp/tmpyi7scgzw.jl:22\n"
  stdout: ''
  timestamp: 1659822709
