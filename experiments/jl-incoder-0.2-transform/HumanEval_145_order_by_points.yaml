name: HumanEval_145_order_by_points
language: jl
prompt: "\"\"\"\n    Write a function which sorts the given list of integers\n   \
  \ in ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
  \ 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
  \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
  \ 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6,\
  \ 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
completions: ["    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sortedsums = sort(sums)\n    \n    sortednums =\
    \ Vector{Int64}()\n    for i in nums\n        push!(sortednums, sortedsums.index(sum(i)))\n\
    \    end\n    \n    return sortednums\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function which returns the number of integers in the given list which can\
    \ be divided by 3 without remainder.", "    \n    sum_of_digits = sum(nums)\n\
    \    \n    sorted_nums = nums\n    \n    for num in nums\n        if sum_of_digits\
    \ == num\n            sorted_nums = sort(sorted_nums)\n        end\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given list that \nare divisible by 7 and are less than 100. \nFor example,\
    \ count_divisible_by_7([7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]) should return 4.", "    \n    sum_of_digits\
    \ = sum(nums)\n    \n    if sum_of_digits == 0\n        return nums\n    \n  \
    \  sorted_nums = nums\n    \n    for index in 1:length(nums)\n        sum_of_digits_index\
    \ = sum_of_digits - nums[index]\n        if sum_of_digits_index > 0\n        \
    \    sorted_nums[index] = nums[index]\n            sum_of_digits -= nums[index]\n\
    \        else\n            sorted_nums[index] = sum_of_digits\n        end\n \
    \   end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums\
    \ = nums[:]\n    \n    for idx in 1:length(nums)\n        if sum_of_digits ==\
    \ nums[idx]\n            sorted_nums[idx] = idx\n        end\n    end\n    \n\
    \    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<text>\nProblem 3\nWrite a function which returns\
    \ the number of elements in the given list\nthat satisfy the condition x^2 + y^2\
    \ = z^2.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sortedsums = sort!(sums)\n    \n    sortednums =\
    \ Vector{Int64}()\n    for i in sortedsums\n        push!(sortednums, nums[i])\n\
    \    end\n    \n    return sortednums\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) %\
    \ 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted_nums, nums[findfirst(i->sums[i] == sums, sums)])\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function which returns the number of integers\
    \ in the given list\nthat have exactly two digits.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in 1:length(sums)\n        push!(sorted_nums,\
    \ nums[findfirst(i->sums[i]>sums[end], sums)])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function which returns the number of times a given number appears\
    \ in the given list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n  \
    \  \n    for i in 1:length(sums)\n        push!(sorted, nums[find(sums == sums[i])[1]])\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of items in a list that have a given sum.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = 0\n        for j in i\n            sums[i]\
    \ += digit(j)\n    end\n    \n    sorted = Vector{Int64}()\n    \n    for i in\
    \ 1:length(sums)\n        if sums[i] > 0\n            push!(sorted, nums[i])\n\
    \        end\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function which takes a list of integers and\
    \ returns the number of integers in the list that have value 1.", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n   \
    \ \n    sums = sort(sums)\n    \n    for i in sums\n        \n        pos = findfirst(i==nums)\n\
    \        if pos==nothing\n            push!(nums, i)\n        else\n         \
    \   nums[pos] = i\n        end\n    end\n    \n    return nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given number appears in the given\
    \ list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sorted = sort(sums)\n    \n    sorted\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted_nums, nums[sums.index(i)])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function which returns the number of items\
    \ in the given list that \nare divisible by 7 and are also divisible by 3.", " \
    \   if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        sums[i] = sum(i) \n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    for i in 1:length(nums) \n        if sums[i] < 0 \n \
    \           push!(sorted_nums, nums[i]) \n        else \n            push!(sorted_nums,\
    \ -nums[i]) \n        end\n    end\n    \n    return sorted_nums \nend\n</cell>\n\
    <code language=julia-1.5>", "    if nums == []\n        []\n    else\n       \
    \ sort(nums)\n        local sum = 0\n        local index = 0\n        for n in\
    \ nums\n            sum += n\n            if sum > 0\n                index =\
    \ 1\n            else\n                index = 2\n            end\n        end\n\
    \        local result = nums[index]\n        for n in nums\n            if n ~=\
    \ result\n                result = n\n            end\n        end\n        result\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of integers in the list that have at most k digits.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted =\
    \ Vector{Int64}()\n    \n    for i in 1:length(sums)\n        j = i\n        while\
    \ sums[j] < sums[i]\n            j = j - 1\n        end\n        push!(sorted,\
    \ nums[i])\n        push!(sorted, nums[j])\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the number of digits in an integer. \nFor example,\
    \ given 123, it should return 3.", "    if nums == []\n        []\n    else\n\
    \        local sum = 0\n        local index = 0\n        for n in nums\n     \
    \       sum += n\n            if sum > 0\n                index = index + 1\n\
    \            end\n        end\n        local result = Vector{Int64}()\n      \
    \  for n in nums\n            if sum - n > 0\n                push!(result, index)\n\
    \            end\n            sum += n\n        end\n        return result\n \
    \   end\nend\n</cell>\n<text>\nExercise 2\nWrite a function which takes a string\
    \ and returns the number of occurrences of the given substring in it.", "    \n\
    \    sums = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) % 10\n\
    \    end\n    \n    sortedNums = Vector{Int64}()\n    for i in nums\n        sortedNums[i]\
    \ = sums.index(sums[i])\n    end\n    \n    return sortedNums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 8\nWrite\
    \ a function to find the longest common prefix string amongst an array of strings.",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of integers\
    \ in the given list\nthat have exactly two digits.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, length(nums))\n    for i in nums\n    \
    \    push!(sums, sums[i])\n    end\n    \n    return sums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) %\
    \ 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted_nums, nums[find(sums == sums[i])[1]])\n    end\n    \n \
    \   return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ each digit appears in the given list of integers. For example:\n>>> count_digits([1,\
    \ 11, -1, -11, -12])\n{1: 2, -1: 1, 1: 1, -12: 1}\n>>> count_digits([])\n{}\n\"\
    \"\"", "    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums = nums[:]\n\
    \    \n    for index in 1:length(nums)\n        if sum_of_digits == nums[index]\n\
    \            sorted_nums[index] = sum_of_digits\n        else\n            sum_of_digits\
    \ -= nums[index]\n            sorted_nums[index] = sum_of_digits\n        end\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which sorts the given list of integers\n\
    in descending order according to the sum of their digits.\nNote: if there are\
    \ several items with similar sum of their digits,\norder them based on their index\
    \ in original list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n \
    \       sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    for i\
    \ in nums\n        if sums[i] == sums[end]\n            sums[end] = i\n      \
    \  else\n            sums[i] = sums[end]\n            sums[end] = i\n        end\n\
    \    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which returns the sum of the digits\
    \ of an integer.", "    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums\
    \ = nums[:]\n    \n    sorted_nums = sort_by_digits(sorted_nums, sum_of_digits)\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 9\nWrite a function that returns the number of integers\
    \ in the given list\nthat have no duplicates.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, length(nums))\n    for i in 1:length(nums)\n\
    \        sums[i] = nums[sums[i]]\n    end\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of integers in the given list that have the\
    \ given sum.", "    if length(nums) == 0 \n        return nums\n    \n    sums\
    \ = Vector{Int64}()\n    for i in nums \n        push!(sums, sum(i))\n    end\n\
    \    \n    sums = sort(sums)\n    \n    idxs = Vector{Int64}()\n    for i in nums\
    \ \n        push!(idxs, findall(sums == sum(i))[1])\n    end\n    \n    idxs =\
    \ sort(idxs)\n    \n    return nums[idxs]\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of times a given number appears in the given\
    \ list.", "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    end\n    \n    sorted\
    \ = sort(sums)\n    \n    ordered = Vector{Int64}() \n    for i in sorted \n \
    \       push!(ordered, nums[findfirst(i==sums)])\n    end\n    \n    return ordered\
    \ \nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the first element\
    \ of a list that satisfies a given condition. For example:", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digits(x))\n \
    \   sums = digits[2:end]\n    \n    sums_sorted = sort(sums)\n    \n    sums_sorted\
    \ = sums_sorted[sums_sorted .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n\
    \    \n    sums_sorted = sums_sorted[sums_sorted .!= 0]\n    \n    sums_sorted\
    \ = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted .!= 0]\n\
    \    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sums_sorted = sums_sorted[sums_sorted\
    \ .!= 0]\n    \n    sums_sorted = sort(sums_sorted)\n    \n    sum", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n  \
    \  sorted_nums = nums \n    \n    for i = 1:length(nums) \n        digit = nums[i]\
    \ \n        \n        if sum_of_digits - digit > 0 \n            sorted_nums[i]\
    \ = digit \n            sum_of_digits -= digit \n        else \n            sorted_nums[i]\
    \ = sum_of_digits \n            sum_of_digits = 0 \n        end\n    end\n   \
    \ \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels contained in the string.", "    if nums == [] \n      \
    \  return nums \n    \n    digits = nums.map(x -> digit(x)) \n    sums = digits.reduce(add,\
    \ 0) \n    \n    sorted_nums = nums.filter(x -> x == sums) \n    \n    sorted_nums\
    \ = order_by_points(sorted_nums) \n    \n    return sorted_nums \nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of elements in the given list that satisfy\
    \ the condition:", "    if nums == []\n        []\n    else\n        sort(nums)\n\
    \        sums = map(sum, nums)\n        zipped = zip(nums, sums)\n        zipped.sort\n\
    \        map(x -> x[1], zipped)\n    end\nend\n</code>\n<|/ a tags=sorting,julia,algorithm\
    \ |>\n<| a dscore=1 |>\nI wrote a Julia package called SortingAlgorithms which\
    \ provides many sorting algorithms including quicksort, heapsort, mergesort, and\
    \ insertion sort. Here is a simple example using quicksort:\n<code>\nusing SortingAlgorithms",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 7\nWrite a function which takes a list of integers and returns\
    \ the sum of the integers in the list that have no digits greater than 9.", " \
    \   \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7: Write a function that returns the number of integers\
    \ in the given list that have no duplicates.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ in the list that have no duplicates.", "    \n    sums = Vector{Int64}()\n \
    \   for i in nums\n        sums[i] = sum(i) + i\n    end\n    \n    sorted = Vector{Int64}()\n\
    \    for i in 1:length(sums)\n        push!(sorted, nums[sums.index(i)])\n   \
    \ end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    \n    sorted = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        if sums[i] == 0 \n            push!(sorted, nums[i])\n        else \n\
    \            push!(sorted, nums[sums.index(i)])\n        end\n    end\n    return\
    \ sorted \nend\n</cell>\n<code language=julia-1.5>", "    if length(nums) == 0\
    \ \n        return nums \n    \n    digits = nums.map(x -> digits(x))\n    digits_sum\
    \ = digits.reduce(add, 0) \n    \n    sorted_nums = nums.sort((x, y) -> digits_sum\
    \ - digits(x) - digits(y))\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of integers in the list that\
    \ have the specified digit.", "    if nums == [] \n        return nums \n    \n\
    \    digits = nums.map(x -> digits(x))\n    digits_sum = digits.reduce(add, 0)\
    \ \n    \n    sorted_nums = nums.filter(x -> digits_sum == digits(x))\n    \n\
    \    return order_by_points(sorted_nums)\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([-2, -1, -10, -9, -5, -4, -7, -6, -3, 0, 3, 6, 9, 10, 12, 15,\
    \ 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99, 100])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ which takes a list of integers and returns the sum of all integers in the list.\
    \ \nIf the list is empty, return 0.", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted_nums = nums[:]\n\
    \    \n    for i in 1:length(sums)\n        j = find(sums == sums[i])[1]\n   \
    \     push!(sorted_nums, nums[j])\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its argument as an Int64.\
    \ For example:", "    if nums == []\n        []\n    else\n        order_by_points_helper(nums,\
    \ 0)\n    end\nend", "    \n    sums = Vector{Int64}()\n    for i in nums\n  \
    \      sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    \n   \
    \ for i in nums\n        if sums.==i\n            sums = sums - i\n        else\n\
    \            sums = sums - i\n            sums = sums + i\n        end\n    end\n\
    \    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort((x, y) -> digit(x) - digit(y))\n    \n    sorted_nums\
    \ = if sum_digits == 0 \n                    sorted_nums \n                else\n\
    \                    sorted_nums.sort((x, y) -> digit(x) - digit(y))\n       \
    \         end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}(0) \n    for n in nums \n        sums\
    \ = sums + digits(n) \n    \n    sorted_nums = Vector{Int64}() \n    \n    for\
    \ n in nums \n        if sums(n) == sums(sorted_nums[end]) \n            push!(sorted_nums,\
    \ n) \n        else \n            push!(sorted_nums, sorted_nums[end]) \n    \
    \        push!(sorted_nums, n) \n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n       \
    \ push!(sums, sum(i)) \n    end\n    \n    sorted = Vector{Int64}()\n    \n  \
    \  for i in 1:length(sums)\n        push!(sorted, nums[sums.index(i)])\n    end\n\
    \    \n    return sorted \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function which returns the number of digits\
    \ in an integer. \nFor example, given 123, it should return 3.", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) % 10\n    end\n\
    \    \n    sorted = Vector{Int64}()\n    for i in 1:length(sums)\n        push!(sorted,\
    \ nums[sums.index(i)])\n    end\n    \n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if nums == []\n        []\n    else\n        sort(nums) |> reverse(@bsort |>\
    \ reverse)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function which\
    \ takes a string and returns the number of times each character appears in the\
    \ string.", "    if nums == []\n        []\n    else\n        sort(nums) |> reverse\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    for i in nums\n        sums = sums +\
    \ i\n    end\n    \n    sums = sort(sums)\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digits(x))\n    \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort((x,\
    \ y) -> sum_digits - digits(x) - digits(y))\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of integers in the given list\nthat have\
    \ exactly two digits.", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    digits = nums.map(x -> digit(x)) \n    sums = digits.reduce(add, 0) \n\
    \    \n    sorted_nums = nums.filter(x -> sums == digits(x))\n    \n    sorted_nums\
    \ = order_by_points(sorted_nums)\n    \n    return sorted_nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([-2, -1, 1, 2, 3])\n</cell>\n<text>\n\
    Problem 3\nWrite a function which takes a list of integers and returns the sum\
    \ of the integers squared. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nIf there are no integers in the list, return 0.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    sums\
    \ = sums[2:end]\n    \n    for i in nums\n        if sums.contains(i)\n      \
    \      sums = sums - i\n        else\n            sums = sums + i\n        end\n\
    \    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push", "    if nums == []\n        []\n    else\n        sort(nums) |>\
    \ sort\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in the given list that satisfy the condition $x > 1$.\
    \ For example:\n>>> count_greater_than([-1, 0, 2, -3, 4, -5, 6])\n3\n>>> count_greater_than([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8])\n2\n>>> count_greater_than([-1, 0, 2, -3, 4, -5,\
    \ 6, -7, 8, -9, 10])\n1\n>>> count_greater_than([-1, 0, 2, -3, 4, -5, 6, -7, 8,\
    \ -9, 10, -11])\n0\n>>> count_greater_than([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9,\
    \ 10, -11, -12])\n0\n>>> count_greater_than([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9,\
    \ 10, -11, -12, -13])\n0\n>>> count_greater_than([-1, 0, 2, -3, 4, -5, 6, -7,\
    \ 8, -9, 10, -11, -12, -13, -14])\n0\n>>> count_greater_than([-1, 0, 2, -3, 4,\
    \ -5, 6, -7, 8, -9, 10, -11, -12, -13, -14, -15])\n0\n>>> count_greater_than([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, -12, -13, -14, -15, -16])\n0\n>>> count_greater_than([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, -12, -13, -14, -15, -16, -17])\n0\n\
    >>> count_greater_than([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, -12, -13,\
    \ -14, -15, -16, -17, -18])\n0\n>>> count_greater_than([-1, 0, 2, -3, 4, -5, 6,\
    \ -7, 8, -9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19])\n0\n>>> count_greater_than([-1,\
    \ 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19,\
    \ -20])\n0\n>>> count_greater_than([-1, 0, 2, -3, 4, -5, 6, -7, 8, -9, 10, -11,\
    \ -12, -13, -14, -15, -16, -17, -18, -19, -20, -21])\n0\n>>> count_greater_than([-1,\
    \ 0, 2, -3, 4, -5, 6, ", "    if length(nums) == 0 \n        return nums \n  \
    \  \n    sums = Vector{Int64}()\n    for i in nums \n        sums[i] = sum(i)\
    \ \n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(nums)\
    \ \n        j = find(sums == sums[i], 1, length(sums)) \n        push!(sorted_nums,\
    \ nums[i]) \n        sums[j] = sums[j] - sums[i] \n    end\n    \n    return sorted_nums\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    \n    for i in nums\n        if sums[i] != sums[i - 1]\n          \
    \  sums = sums..sums\n        end\n    end\n    \n    sums = sort(sums)\n    \n\
    \    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the first element of\
    \ a given list that satisfies a given condition. For example:\n>>> first_satisfying_condition([2,\
    \ -1, 0, 3], x -> x > 0)\n2\n>>> first_satisfying_condition([2, -1, 0, 3], x ->\
    \ x < 0)\n-1\n>>> first_satisfying_condition([2, -1, 0, 3], x -> x == 0)\n3\n\
    >>> first_satisfying_condition([2, -1, 0, 3], x -> x < 0)\n-1\n>>> first_satisfying_condition([2,\
    \ -1, 0, 3], x -> x > 0)\n2\n>>> first_satisfying_condition([2, -1, 0, 3], x ->\
    \ x == 0)\n3\n>>> first_satisfying_condition([2, -1, 0, 3], x -> x == 0)\n3\n\
    >>> first_satisfying_condition([2, -1, 0, 3], x -> x == 0)\n3\n>>> first_satisfying_condition([2,\
    \ -1, 0, 3], x -> x == 0)\n3\n>>> first_satisfying_condition([2, -1, 0, 3], x\
    \ -> x == 0)\n3\n>>> first_satisfying_condition([2, -1, 0, 3], x -> x == 0)\n\
    3\n>>> first_satisfying_condition([2, -1, 0, 3], x -> x == 0)\n3\n>>> first_satisfying_condition([2,\
    \ -1, 0, 3], x -> x == 0)\n3\n>>> first_satisfying_condition([2, -1, 0, 3], x\
    \ -> x == 0)\n3\n>>> first_satisfying_condition([2, -1, 0, 3], x -> x == 0)\n\
    3\n>>> first_satisfying_condition([2, -1, 0, 3], x -> x == 0)\n3\n>>> first_satisfying_condition([2,\
    \ -1, 0, 3], x -> x == 0)\n3\n>>> first_satisfying_condition([2, -1, 0, 3], x\
    \ -> x == 0)\n3\n>>> first_satisfying_condition", "    if length(nums) == 0 \n\
    \        return nums\n    \n    digits = nums.map(x -> digits(x))\n    \n    sums\
    \ = digits[2:end].sum()\n    \n    index = findfirst(x -> x == sums, digits)\n\
    \    \n    if index == -1 \n        return nums\n    \n    digits = digits[2:end]\n\
    \    \n    digits[index] = digits[index] - digits[index + 1]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits[index + 1] = digits[index + 1] + digits[index]\n\
    \    \n    digits = digits[2:end]\n    \n    digits[index] = digits[index] - digits[index\
    \ + 1]\n    \n    digits = digits[2:end]\n    \n    digits[index + 1] = digits[index\
    \ + 1] + digits[index]\n    \n    digits = digits[2:end]\n    \n    digits[index]\
    \ = digits[index] - digits[index + 1]\n    \n    digits = digits[2:end]\n    \n\
    \    digits[index + 1] = digits[index + 1] + digits[index]\n    \n    digits =\
    \ digits[2:end]\n    \n    digits[index] = digits[index] - digits[index + 1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits[index + 1] = digits[index\
    \ + 1] + digits[index]\n    \n    digits = digits[2:end]\n    \n    digits[index]\
    \ = digits[index] - digits[index + 1]\n    \n    digits = digits[2:end]\n    \n\
    \    digits[index + 1] = digits[index + 1] + digits[index]\n    \n    digits =\
    \ digits[2:end]\n    \n    digits[index] = digits[index] - digits[index + 1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits[index + 1] = digits[index\
    \ + 1] + digits[index]\n    \n    digits = digits[2:end]\n    \n    digits[index]\
    \ = digits[index] - digits[index + 1]\n    \n    digits = digits[2:end]\n    \n\
    \    digits[index + 1] = digits[index + 1] + digits[index]\n    \n    digits =\
    \ digits[2:end]\n    \n    digits[index] = digits[index] - digits[index + 1]\n\
    \    \n    digits = digits[2:end]\n    \n    digits[index + 1] = digits[index\
    \ + 1] + digits[index]\n    \n    digits = digits[2:end]\n    \n    digits[index]\
    \ = digits[index] - digits[index + 1]\n    \n    digits = digits[2:end]\n    \n\
    \    digits[index + 1] = digits[index + 1] + digits[index]\n    \n    digits =\
    \ digits[2:end]\n    \n    digits[index] = digits[index] - digits[index + 1]\n\
    \    \n    digit", "    if length(nums) == 0 \n        return nums\n    \n   \
    \ sums = Vector{Int64}()\n    for i in nums \n        push!(sums, sum(i))\n  \
    \  end\n    \n    sorted = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted, nums[sums.index(i)])\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if nums == []\n        []\n    else\n        sort(nums) |> nums |> nums |>\
    \ nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> ", "    if nums == []\n        []\n    else\n        order_by_points_helper(nums,\
    \ 0)\n    end\nend", "    \n    sums = Vector{Int64}()\n    for i in nums\n  \
    \      push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    order_by_points\
    \ = []\n    for i in nums\n        if sums[i] == sums[end]\n            push!(order_by_points,\
    \ i)\n        else\n            push!(order_by_points, i)\n            push!(order_by_points,\
    \ nums[end])\n        end\n    end\n    \n    return order_by_points\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of elements in the\
    \ given list that satisfy the condition $x \\in L$. For example, given $L = [1,\
    \ 2, 3, 4, 5]$, your function should return $3$.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    for i in nums\n        sums = sums +\
    \ i\n    end\n    \n    sums = sort(sums)\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which takes a list of integers and returns the number of unique elements\
    \ in the list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n      \
    \  push!(sums, sum(digits(i)))\n    end\n    \n    zipped = zip(nums, sums)\n\
    \    zipped.sort!\n    \n    zipped.reverse!\n    \n    return map(x -> x[1],\
    \ zipped)\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1,\
    \ -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 7: Write a function that returns the number of integers whose\
    \ digits are less than or equal to a given value.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    return nums[sums]\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function which returns the number of integers in the list which can\
    \ be written as the sum of two positive integers. For example:", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   \n    sum_digits = digits.reduce(add, 0) \n    \n    sorted_nums = nums.filter(x\
    \ -> digit(x) == sum_digits)\n    \n    return sorted_nums \nend\n</cell>\n<text>\n\
    Now let's test our function", "    \n    sums = Vector{Int64}()\n    for i in\
    \ nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n  \
    \  \n    order_by_sums = Vector{Int64}()\n    for i in 1:length(sums)\n      \
    \  push!(order_by_sums, nums[sums[i]])\n    end\n    \n    return order_by_sums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2,\
    \ -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1,\
    \ 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2,\
    \ -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1,\
    \ 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1,\
    \ 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([-2, -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-2,\
    \ -1, 0, 1, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points(", "    if\
    \ length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        push!(sums, sum(i)) \n    end\n    \n    sums = sort_by_key(sums)\n\
    \    \n    ans = Vector{Int64}()\n    for i in nums \n        push!(ans, i) if\
    \ sums[i] == sums[end] \n    end\n    \n    return ans\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in the given list that have no duplicates.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sums.sort!\n\
    \    \n    ans = Vector{Int64}()\n    for i in nums\n        push!(ans, i)\n \
    \   end\n    \n    for i in sums\n        push!(ans, i)\n    end\n    \n    return\
    \ ans\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Problem 4\nWrite a function that returns the number of integers in the given list\
    \ that have the specified digit.", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n \
    \   \n    sums = sums[2:end]\n    \n    for i in nums\n        if sums.contains(sums.last)\n\
    \            sums = sums[2:end]\n        else\n            sums = sums + i\n \
    \       end\n    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.0>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.0>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of elements\
    \ in the given list that satisfy the condition:", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    for i in sums\n        pos = findfirst(i==nums)\n        if pos>0\n\
    \            nums[pos] = i\n        end\n    end\n    \n    return nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\n\
    Write a function which returns the number of times a given number appears in the\
    \ given list.", "    if length(nums) == 0 \n        return nums \n    \n    sums\
    \ = Vector{Int64}() \n    for i in nums \n        push!(sums, sum(i)) \n    end\n\
    \    \n    sorted_nums = Vector{Int64}() \n    \n    for index in 1:length(sums)\
    \ \n        push!(sorted_nums, nums[findfirst(i->sums[i] == sums[index], sums)])\n\
    \    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sortedsums = sort!(sums)\n\
    \    \n    sortednums = Vector{Int64}()\n    for i in sortedsums\n        push!(sortednums,\
    \ nums[i])\n    end\n    \n    return sortednums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ which returns the number of items in the list whose digits sum to zero.", " \
    \   if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sum_digits = digits.reduce(add, 0) \n    \n    sorted_nums\
    \ = nums.sort((x, y) -> sum_digits - digits(x) - digits(y)) \n    \n    return\
    \ sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of integers in the\
    \ given list\nthat have exactly two digits.", "    if length(nums) == 0\n    \
    \    return nums\n    \n    sums = Vector{Int64}()\n    for i in nums\n      \
    \  push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n    \n  \
    \  for i in 1:length(sums)\n        push!(sorted, nums[findfirst(i->sums[i]>sums[end],\
    \ sums)])\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the sum of the digits\
    \ of its argument, except if the argument is an integer.", "    \n    sums = Vector{Int64}()\n\
    \    for n in nums\n        push!(sums, sum(digits(n)))\n    end\n    \n    zipped\
    \ = zip(nums, sums)\n    zipped.sort!\n    \n    ordered = Vector{Int64}()\n \
    \   for (n, s) in zipped\n        push!(ordered, n)\n    end\n    \n    return\
    \ ordered\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1,\
    \ -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example:\n>>> digits(123)\n3\n>>> digits(1234)\n4\n>>> digits(1234567890)\n\
    9\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(-1234)\n4\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5\n>>> digits(-12345)\n5", "   \
    \ \n    sum_of_digits = sum(nums)\n    \n    sorted_nums = nums[:]\n    \n   \
    \ for index in 1:length(nums)\n        \n        digit = nums[index]\n       \
    \ \n        if sum_of_digits == digit\n            \n            sorted_nums[index]\
    \ = index\n            \n        elseif sum_of_digits > digit\n            \n\
    \            index = index - 1\n            \n            sorted_nums[index] =\
    \ digit\n            \n            sum_of_digits -= digit\n            \n    \
    \    else\n            \n            sum_of_digits -= digit\n            \n  \
    \          index = index - 1\n            \n            sorted_nums[index] = digit\n\
    \            \n            sum_of_digits += digit\n            \n        end\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of items\
    \ in the given list that have same sum of the digits. For example:\n>>> count_same_sum_digits([1,\
    \ 11, -1, -11, -12])\n2\n>>> count_same_sum_digits([])\n0\n\"\"\"", "    \n  \
    \  sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n\
    \    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        sorted_nums = push!(sorted_nums, nums[sums..sums..1])\n    end\n    \n\
    \    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n  \
    \  \n    sums.reverse()\n    \n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which takes a list of numbers and\
    \ returns the sum of the numbers in the list multiplied by their squares.", " \
    \   \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  for i in nums\n        if sums.contains(i)\n            sums = sums + i\n \
    \       end\n    end\n    \n    sums = sort(sums)\n    \n    return sums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\n\
    Write a function which returns the number of elements in the given list that satisfy\
    \ the given condition.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums[i] = sum(i) + i\n    end\n    \n    sorted_sums = sort(sums)\n \
    \   \n    sorted_nums = Vector{Int64}()\n    for i in nums\n        if sums[i]\
    \ == sorted_sums[i]\n            push!(sorted_nums, i)\n        end\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which returns the number of times\
    \ the given number appears in the given list.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    \n \
    \   for i in nums\n        if sums[i] != i\n            sums[i] = i\n        end\n\
    \    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of items\
    \ in the list that have value greater than a given value.", "    if nums == []\n\
    \        []\n    else\n        sort(nums, by=(x->sum(x) % 10))\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of elements in a list that satisfy a given predicate.", "    if nums\
    \ == []\n        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(nums) == 0\
    \ \n        return nums \n    \n    sums = Vector{Int64}()\n    for i in nums\
    \ \n        push!(sums, sum(i)) \n    \n    sorted_nums = Vector{Int64}()\n  \
    \  \n    for idx in 1:length(sums)\n        push!(sorted_nums, nums[sums[idx]])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for (i,j) in zip(nums,\
    \ sums)\n        if j > 0\n            push!(sorted_nums, i)\n        end\n  \
    \  end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of integers\
    \ in the given list which can be written as the sum of two abundant numbers.",
  "    if nums == []\n        []\n    else\n        sort(nums)\n        local sum\
    \ = 0\n        local index = 0\n        for n in nums\n            sum += n\n\
    \            if sum > 0\n                index = 1\n            else\n       \
    \         index = 2\n            end\n        end\n        local result = nums\n\
    \        result[index] = nums[end]\n        result[end] = nums[index] \n     \
    \   result\n    end\nend\n</cell>\n<code language=julia-1.0>", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) + i\n    end\n\
    \    \n    sorted_nums = Vector{Int64}()\n    for i in 1:length(sums)\n      \
    \  push!(sorted_nums, nums[sums.index(i)])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times each digit appears in the\
    \ given list of integers.", "    if length(nums) == 0 \n        return nums \n\
    \    \n    digits = nums.map(x -> digit(x)) \n    \n    sum_digits = digits.reduce(add,\
    \ 0) \n    \n    sorted_nums = nums.filter(x -> sum_digits == digits(x))\n   \
    \ \n    sorted_nums = sort_by_index(sorted_nums)\n    \n    return sorted_nums\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(digits(i)))\n\
    \    end\n    \n    sorted = sort(sums)\n    \n    sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function which returns the number of integers in the given list\nthat have\
    \ exactly two digits.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ order_by_points = []\n    for i in nums\n        if sums[i] == sums[end]\n \
    \           push!(order_by_points, i)\n        else\n            push!(order_by_points,\
    \ i)\n            push!(order_by_points, nums[end])\n        end\n    end\n  \
    \  \n    return order_by_points\nend\n</cell>\n<text>\nQuestion 2\nWrite a function\
    \ which takes a string as input and returns the number of occurrences of the character\
    \ 'a' in it.", "    if nums == []\n        []\n    else\n        order_by_points_helper(nums,\
    \ 0)\n    end\nend", "    if length(nums) == 0 \n        return nums \n    \n\
    \    digits = nums.map(x -> digit(x)) \n    \n    sum_digits = digits.reduce(add,\
    \ 0) \n    \n    sorted_nums = nums.filter(x -> digit(x) == sum_digits)\n    \n\
    \    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<text>\nProblem 7: Write a function which returns\
    \ the sum of the digits of an integer.", "    if length(nums) == 0\n        []\n\
    \    else\n        sort(nums)\n        order_by_points(nums[2:end])\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n       \
    \ sums[i] = sum(i) \n    end\n    \n    sorted_sums = sort(sums)\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    for i in nums \n        if sums[i] == sorted_sums[1]\
    \ \n            push!(sorted_nums, i) \n        else \n            push!(sorted_nums,\
    \ sorted_sums[1]) \n            push!(sorted_nums, i) \n        end\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ each digit appears in the given integer.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(nums) == 0 \n        return nums \n\
    \    \n    digits = nums.map(x -> digit(x)) \n    \n    sums = digits[2:end].map(x\
    \ -> sum(x)) \n    \n    indexes = sums.argsort\n    \n    return nums[indexes]\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example, given an integer $x$, return $x$ if it is positive,\
    \ otherwise return $x$ if it is negative.", "    if nums == []\n        []\n \
    \   else\n        order_by_points_helper(nums, 0)\n    end\nend", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n   \
    \ \n    sums = sort(sums)\n    \n    for i in nums\n        if sums[i] != i\n\
    \            sums[i] = i\n        end\n    end\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in that list. For example:\n>>> square_of_list([])\n0.0\n>>>\
    \ square_of_list([1,2,3])\n9.0\n>>> square_of_list([1,-2,3])\n-9.0\n>>> square_of_list([1,-2,3,-4])\n\
    -27.0\n>>> square_of_list([1,-2,3,-4,-5,-6])\n-49.0\n>>> square_of_list([1,-2,3,-4,-5,-6,-7,-8])\n\
    -97.0\n>>> square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10])\n-149.0\n>>> square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10,-11])\n\
    -179.0\n>>> square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13])\n-209.0\n\
    >>> square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14])\n-241.0\n>>>\
    \ square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15])\n-273.0\n\
    >>> square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16])\n-309.0\n\
    >>> square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17])\n\
    -341.0\n>>> square_of_list([1,-2,3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18])\n\
    -373.0\n>>> square_of_list([1,-2,3,-4,-5,-", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[findall(x -> x > 0, sums)]\n\
    \    \n    sums = sums[findall(x -> x < 0, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 0, sums)]\n    \n    sums = sums[findall(x -> x == 1, sums)]\n    \n\
    \    sums = sums[findall(x -> x == 2, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 3, sums)]\n    \n    sums = sums[findall(x -> x == 4, sums)]\n    \n\
    \    sums = sums[findall(x -> x == 5, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 6, sums)]\n    \n    sums = sums[findall(x -> x == 7, sums)]\n    \n\
    \    sums = sums[findall(x -> x == 8, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 9, sums)]\n    \n    sums = sums[findall(x -> x == 10, sums)]\n    \n\
    \    sums = sums[findall(x -> x == 11, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 12, sums)]\n    \n    sums = sums[findall(x -> x == 13, sums)]\n   \
    \ \n    sums = sums[findall(x -> x == 14, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 15, sums)]\n    \n    sums = sums[findall(x -> x == 16, sums)]\n   \
    \ \n    sums = sums[findall(x -> x == 17, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 18, sums)]\n    \n    sums = sums[findall(x -> x == 19, sums)]\n   \
    \ \n    sums = sums[findall(x -> x == 20, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 21, sums)]\n    \n    sums = sums[findall(x -> x == 22, sums)]\n   \
    \ \n    sums = sums[findall(x -> x == 23, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 24, sums)]\n    \n    sums = sums[findall(x -> x == 25, sums)]\n   \
    \ \n    sums = sums[findall(x -> x == 26, sums)]\n    \n    sums = sums[findall(x\
    \ -> x == 27, sums)]\n    \n    sums = sums[findall(x -> x == 28, sums)]\n    ",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sortednums = nums[:]\n    \n    for index in eachindex(sums)\n\
    \        sortednums[sortperm(sums[index])] = nums[index]\n    end\n    \n    return\
    \ sortednums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 9\nWrite a function which returns the number of times each digit\
    \ appears in the given list of integers.", "    if length(nums) == 0 \n      \
    \  return nums\n    \n    digits = nums.map(x -> digits(x))\n    \n    sums =\
    \ digits[2:end].sum()\n    \n    sorted_nums = nums[2:end]\n    \n    sorted_nums\
    \ = if sums == 0 \n        sorted_nums\n    else\n        sorted_nums[digits[2:end].argsort()]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$. \nFor example, for $n = 1234$, the function should return 4.", "   \
    \ if nums == []\n        []\n    else\n        sort(nums)\n        order_by_points(nums[2:end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if nums == []\n     \
    \   []\n    else\n        sort(nums) |> reverse |> nums\n    end\nend\n</cell>\n\
    <text>\nQuestion 5\nWrite a function that returns the number of integers in the\
    \ given list\nthat have the given digit. For example, if the given list is [1,\
    \ 1, 2, 3],\nthe function should return 2 since there are two 1's and three 2's\
    \ in the list.", "    if length(nums) == 0 \n        return nums \n    \n    sums\
    \ = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i) \n    \n  \
    \  sorted_sums = sort_by_key(sums)\n    \n    sorted_nums = Vector{Int64}() \n\
    \    for i in nums \n        if sum(i) == sorted_sums[i] \n            push!(sorted_nums,\
    \ i) \n        else \n            push!(sorted_nums, sorted_sums[i]) \n      \
    \  end \n    end \n    \n    return sorted_nums \nend \n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given number appears in a given list.", "    if length(nums) == 0 \n     \
    \   return nums\n    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums =\
    \ nums[:]\n    \n    for index in 1:length(nums)\n        digit = nums[index]\n\
    \        \n        if sum_of_digits == digit\n            sorted_nums[index] =\
    \ index\n        else\n            index = index - 1\n            \n         \
    \   while (index > 0) && (sum_of_digits > digit)\n                sum_of_digits\
    \ -= sorted_nums[index]\n                sorted_nums[index] = sorted_nums[index\
    \ - 1]\n                index -= 1\n            end\n            \n          \
    \  sorted_nums[index] = digit\n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  for i in nums\n        if sum(i) != sums[i]\n            push!(sums, sum(i))\n\
    \        end\n    end\n    \n    return nums[2:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in the given list whose digits sum to zero.", "    if nums == [] \n        return\
    \ nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    \n    sorted_nums = nums \n    for index in 1:length(sums) \n\
    \        pos = find(sums == sums[index])[1] \n        push!(sorted_nums, nums[pos])\
    \ \n    endfor \n    return sorted_nums \nend", "    \n    sums = Vector{Int64}()\n\
    \    for n in nums\n        sums = sums + digits(n)\n    end\n    \n    sums =\
    \ sort(sums)\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n   \
    \ \n    sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of digits\
    \ in an integer.", "    \n    sums = Vector{Int64}()\n    for i in nums\n    \
    \    sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    for i in\
    \ nums\n        if sums[i] != i\n            sums[i] = i\n        end\n    end\n\
    \    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function which takes a list of integers and\
    \ returns the number of integers in the list which are divisible by 7 and which\
    \ are also not divisible by 3.", "    \n    sums = Vector{Int64}()\n    for i\
    \ in nums\n        sums[i] = sum(i) + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[:]\n    \n    for i in nums\n        sums[i] = sums[i]\
    \ - i\n    end\n    \n    sums = sort(sums)\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12, 1])\n</cell>\n<code language=julia-", " \
    \   \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted_nums = nums[sortperm(sums)]\n    \n    return sorted_nums\n\
    end\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the number of\
    \ integers in the given list that have exactly two digits.", "    \n    sum_of_digits\
    \ = sum(nums)\n    \n    sorted_nums = nums[:]\n    \n    for idx in 1:length(nums)\n\
    \        if sum_of_digits == nums[idx]\n            sorted_nums[idx] = idx\n \
    \       end\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted = Vector{Int64}()\n    \n    for s in sums\n      \
    \  push!(sorted, s)\n    end\n    \n    sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which returns the number of items\
    \ in the given list whose sum is divisible by given number.", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n   \
    \ \n    sums = sort(sums)\n    \n    order_by_points = []\n    for i in sums\n\
    \        order_by_points = order_by_points + nums[findall(x->x==i, nums)]\n  \
    \  end\n    \n    return order_by_points\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in the given list that have the given digit.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = []\n\
    \    for i in nums\n        if i in sums\n            push!(sorted, i)\n     \
    \   end\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of its argument. For example:\n>>> sum_of_digits(123)\n6\n>>> sum_of_digits(-3)\n\
    -3\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(123456789)\n21\n>>> sum_of_digits(0)\n\
    0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n\
    >>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>>\
    \ sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n\
    0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n\
    >>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>>\
    \ sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n\
    0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n\
    >>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>>\
    \ sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n\
    0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n\
    >>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>>\
    \ sum_of_digits(0)\n0\n>>> sum_of_digits(0)\n0\n>>> ", "    if nums == [] \n \
    \       return nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sum_digits\
    \ = digits.reduce(add, 0) \n    \n    sorted_nums = nums.filter(x -> digit(x)\
    \ == sum_digits)\n    \n    sorted_nums = order_by_points(sorted_nums)\n    \n\
    \    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([-2,\
    \ -1, 1, 2, 3])\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ number of integers in the given list that have no duplicates.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  \n    sums = digits[2:end].+digits[1:end-1]\n    \n    idx = findfirst(x ->\
    \ x == sum(sums), sums)\n    \n    if idx == length(sums) \n        return nums\
    \ \n    \n    tmp = nums[idx]\n    nums[idx] = nums[length(sums)-1]\n    nums[length(sums)-1]\
    \ = tmp\n    \n    return order_by_points(nums)\nend", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in 1:length(sums)\n        push!(sorted_nums,\
    \ nums[find(sums == sums[i])[1]])\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<text>\nQuestion 3\nWrite a function which takes a number as input and\
    \ returns the number of digits in that number.", "    if length(nums) == 0 \n\
    \        return nums \n    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums\
    \ = nums \n    \n    for n in nums \n        if sum_of_digits == n \n        \
    \    sorted_nums = sort(sorted_nums) \n            break \n        else \n   \
    \         sum_of_digits -= n \n            sorted_nums = sort(sorted_nums) \n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that checks if a number is prime or not. \nA number is prime if its\
    \ only prime divisors sum to its number.", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        j = findfirst(isequal(sums[i]), nums)\n\
    \        if j != nothing\n            push!(sorted_nums, nums[j])\n        end\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of items\
    \ in the given list which have their digits summed up to zero.", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums.push(i)\n    end\n    \n\
    \    sums.sort!()\n    \n    sums.reverse()\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function which takes a vector of integers and returns the number of integers\
    \ in the vector which are divisible by 3.", "    if nums == [] \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sums = digits.map(x\
    \ -> sum(x))\n    \n    sorted_sums = sums.sort\n    \n    sorted_nums = nums.sort\n\
    \    \n    sorted_nums = sorted_nums.zip(sorted_sums)\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function which returns the number of times each digit appears in\
    \ the given list of integers.", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    sums = map_reduce(nums, (x, y) -> x + y, 0)\n    \n    sorted_nums\
    \ = filter((x) -> sums[x] == sums[length(x)], nums)\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the first element of a given list.", "    if\
    \ nums == []\n        []\n    else\n        sort(nums) |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums |> nums\
    \ |> nums |> ", "    \n    sums = Vector{Int64}()\n    for i in nums\n       \
    \ sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    for i in sums\n\
    \        idx = find(sums == i)[1]\n        nums[idx] = i\n    end\n    \n    return\
    \ nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Problem 3\nWrite a function which returns the number of digits in an integer.\
    \ \nFor example, given 123, the function should return 3.", "    if length(nums)\
    \ == 0\n        []\n    else\n        sort(nums)\n        local sum = 0\n    \
    \    local index = 0\n        local result = []\n        for n in nums\n     \
    \       local digit = n % 10\n            sum += digit\n            if sum > 0\n\
    \                index = index + 1\n            end\n            if sum < 0\n\
    \                sum = -sum\n                index = index - 1\n            end\n\
    \            if index == 0\n                push!(result, n)\n            end\n\
    \        end\n        return result\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ which returns the number of digits in an integer. For example:\n>>> count_digits(123)\n\
    3\n>>> count_digits(1234)\n4\n>>> count_digits(0)\n0\n>>> count_digits(-1234)\n\
    4\n>>> count_digits(-0)\n0\n>>> count_digits(1234567890)\n10\n>>> count_digits(123456789012345)\n\
    12\n>>> count_digits(1234567890123456789)\n10\n>>> count_digits(123456789012345678912345)\n\
    12\n>>> count_digits(12345678901234567890123456789)\n10\n>>> count_digits(1234567890123456789012345678912345)\n\
    12\n>>> count_digits(123456789012345678901234567890123456789)\n10\n>>> count_digits(12345678901234567890123456789012345678912345)\n\
    12\n>>> count_digits(1234567890123456789012345678901234567890123456789)\n10\n\
    >>> count_digits(123456789012345678901234567890123456789012345678912345)\n12\n\
    >>> count_digits(12345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678912345)\n\
    12\n>>> count_digits(123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(12345678901234567890123456789012345678901234567890123456789012345678912345)\n\
    12\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(123456789012345678901234567890123456789012345678901234567890123456789012345678912345)\n\
    12\n>>> count_digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345)\n\
    12\n>>> count_digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345)\n\
    12\n>>> count_digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789)\n\
    10\n>>> count_digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345)\n\
    12\n>>> count_digits(1234567890123456789", "    if nums == []\n        return\
    \ nums\n    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted, nums[sums.index(i)])\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    zipped = zip(nums,\
    \ sums)\n    zipped.sort!\n    \n    zipped.reverse!\n    \n    return map(x ->\
    \ x[1], zipped)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer. \nFor example, given 123, it should return\
    \ 3.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sorted = sort(sums)\n    \n    ordered = Vector{Int64}()\n\
    \    for i in sorted\n        push!(ordered, nums[i])\n    end\n    \n    return\
    \ ordered\nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for n in nums\n        push!(sums, sum(n))\n    end\n    \n    zipped = zip(nums,\
    \ sums)\n    zipped.sort!\n    \n    ordered = Vector{Int64}()\n    for (n, s)\
    \ in zipped\n        push!(ordered, n)\n    end\n    \n    return ordered\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a vector of integers and returns the sum of the digits\
    \ of all the integers in the vector.", "    if nums == []\n        []\n    else\n\
    \        sort(nums)\n        order_by_points(nums[2:end])\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,arrays,julia |>\n<code>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if nums == []\n        []\n\
    \    else\n        order_by_points_helper(nums, 0)\n    end\nend", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n  \
    \  sorted_nums = nums \n    \n    for i = 1:length(nums) \n        if sum_of_digits\
    \ > 0 \n            sum_of_digits -= nums[i] \n        else \n            sum_of_digits\
    \ = nums[i] \n            sorted_nums[i] = nums[i] \n        end\n    end\n  \
    \  \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted = Vector{Int64}()\n\
    \    for i in 1:length(sums)\n        push!(sorted, nums[sums.index(i)])\n   \
    \ end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given number appears in a given list.", "    if length(nums) == 0 \n     \
    \   return nums \n    \n    sums = Vector{Int64}() \n    for n in nums \n    \
    \    push!(sums, sum(n)) \n    end\n    \n    zipped = zip(nums, sums)\n    zipped.sort!\n\
    \    \n    zipped.reverse!\n    \n    return map(x -> x[1], zipped) \nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7: Write\
    \ a function to find the longest common prefix string amongst an array of strings.",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        j = findfirst(isequal(sums[i]), nums)\n        if j != nothing\n    \
    \        push!(sorted_nums, nums[j])\n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted = sort(sums)\n    \n    sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function which returns the number of times each digit appears in the given\
    \ list of integers.", "    if length(nums) == 0 \n        return nums \n    \n\
    \    digits = nums.map(x -> digit(x)) \n    \n    sums = digits[2:end].+digits[1:end-1]\
    \ \n    \n    index = findfirst(sums.==0) \n    \n    if index == -1 \n      \
    \  return nums \n    \n    sums = sums[index:end] \n    \n    index = findfirst(sums.==0)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    sums = sums[index:end]\
    \ \n    \n    index = findfirst(sums.==0) \n    \n    if index == -1 \n      \
    \  return nums \n    \n    sums = sums[index:end] \n    \n    index = findfirst(sums.==0)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    sums = sums[index:end]\
    \ \n    \n    index = findfirst(sums.==0) \n    \n    if index == -1 \n      \
    \  return nums \n    \n    sums = sums[index:end] \n    \n    index = findfirst(sums.==0)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    sums = sums[index:end]\
    \ \n    \n    index = findfirst(sums.==0) \n    \n    if index == -1 \n      \
    \  return nums \n    \n    sums = sums[index:end] \n    \n    index = findfirst(sums.==0)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    sums = sums[index:end]\
    \ \n    \n    index = findfirst(sums.==0) \n    \n    if index == -1 \n      \
    \  return nums \n    \n    sums = sums[index:end] \n    \n    index = findfirst(sums.==0)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    sums = sums[index:end]\
    \ \n    \n    index = findfirst(sums.==0) \n    \n    if index == -1 \n      \
    \  return nums \n    \n    sums = sums[index:end] \n    \n    index = findfirst(sums.==0)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    sums = sums[index:end]\
    \ \n    \n    index = findfirst(sums.==0) \n    \n    if index == -1 \n      \
    \  return nums \n    \n    sums = sums[index:end] \n    \n    index = findfirst(sums.==0)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    sums = sum", " \
    \   if nums == [] \n        return nums \n    \n    digits = nums.map(x -> digits(x))\n\
    \    \n    digits_sum = digits.reduce(add, 0) \n    \n    sorted_nums = nums.sort((x,\
    \ y) -> digits_sum - digits(y) - digits(x))\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.", "    \n  \
    \  sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n\
    \    \n    sums = sort(sums)\n    \n    for i in nums\n        if sums[i] == sums[end]\n\
    \            sums[end] = i\n        end\n    end\n    \n    return sums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of integers in the given list that have\
    \ exactly two digits.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    sums\
    \ = sums[2:end]\n    \n    for i in nums\n        sums = sums - i\n    end\n \
    \   \n    sums = sort(sums)\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    \n    sorted = sort(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for i in sorted \n        push!(sorted_nums,\
    \ nums[find(sums == i)[1]])\n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of integers in the given list that have exactly\
    \ two digits.", "    if nums == [] \n        return nums \n    \n    digits =\
    \ nums.map(x -> digit(x)) \n    \n    sorted_digits = sort(digits) \n    \n  \
    \  sorted_nums = nums.map(x -> x % 10 + sorted_digits[digits(x)]) \n    \n   \
    \ return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of characters\
    \ in a string.", "    \n    sums = Vector{Int64}()\n    for i in nums\n      \
    \  push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n    \n    return map(i\
    \ -> nums[i], sums)\nend\n</cell>\n<code language=julia-1.0>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers in the given list that have the given sum.", "    \n\
    \    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n\
    \    \n    sums = sort(sums)\n    \n    for i in nums\n        if sums[i] != i\n\
    \            sums[i] = i\n        end\n    end\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 9: Write\
    \ a function that returns the number of times each digit appears in the given\
    \ list of integers.", "    if length(nums) == 0 \n        return nums \n    \n\
    \    sums = Vector{Int64}(0) \n    for i in nums \n        sums = sums + i \n\
    \    \n    sorted_nums = Vector{Int64}(0) \n    \n    for i in nums \n       \
    \ if sums.==i \n            sorted_nums = sorted_nums + i \n        else \n  \
    \          sorted_nums = sorted_nums + i \n            \n            \n    for\
    \ i in nums \n        if sums.==i \n            sorted_nums = sorted_nums + i\
    \ \n        else \n            sorted_nums = sorted_nums + i \n            \n\
    \            \n    for i in nums \n        if sums.==i \n            sorted_nums\
    \ = sorted_nums + i \n        else \n            sorted_nums = sorted_nums + i\
    \ \n            \n            \n    for i in nums \n        if sums.==i \n   \
    \         sorted_nums = sorted_nums + i \n        else \n            sorted_nums\
    \ = sorted_nums + i \n            \n            \n    for i in nums \n       \
    \ if sums.==i \n            sorted_nums = sorted_nums + i \n        else \n  \
    \          sorted_nums = sorted_nums + i \n            \n            \n    for\
    \ i in nums \n        if sums.==i \n            sorted_nums = sorted_nums + i\
    \ \n        else \n            sorted_nums = sorted_nums + i \n            \n\
    \            \n    for i in nums \n        if sums.==i \n            sorted_nums\
    \ = sorted_nums + i \n        else \n            sorted_nums = sorted_nums + i\
    \ \n            \n            \n    for i in nums \n        if sums.==i \n   \
    \         sorted_nums = sorted_nums + i \n        else \n            sorted_nums\
    \ = sorted_nums + i \n            \n            \n    for i in nums \n       \
    \ if sums.==i \n            sorted_nums = sorted_nums + i \n        else \n  \
    \          sorted_nums = sorted_nums + i \n            \n            \n    for\
    \ i in nums \n        if sums.==i \n            sorted_nums = sorted_nums + i\
    \ \n        else \n            sorted_nums = sorted_nums + i \n            \n\
    \            \n    for i in nums \n        if sums.==i \n            sorted_nums\
    \ = sorted_nums + i \n        else \n            sorted_nums = sorted_nums + i\
    \ \n            \n            \n    for i in nums \n        if sums.==i \n   \
    \         sorted_nums = sorted_nums + i \n        else \n            sorted_nums\
    \ = sorted_nums + i \n            \n            \n    for i in nums \n       \
    \ if sums.==i \n            sorted_nums = sorted_nums + i \n        else \n  \
    \          sorted_nums = sorted_nums + i \n            \n            \n    for\
    \ i in nums \n        if sums.==i \n            sorted_nums = sorted_nums + i\
    \ \n        else \n            ", "    \n    sums = Vector{Int64}()\n    for i\
    \ in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n   \
    \ \n    for i in sums\n        \n        j = nums.index(i)\n        nums[j] =\
    \ nums[i]\n        nums[i] = i\n    end\n    \n    return nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = map_reduce(nums,\
    \ sum, +, 0)\n    \n    sorted_nums = sort(sums)\n    \n    sorted_nums = map(i\
    \ -> nums[i], sorted_nums)\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nPart III. Sort by\
    \ average\nWrite a function that sorts the given list of integers by the average\
    \ of their digits.\nFor example:\n>>> order_by_average([1, 11, -1, -11, -12])\n\
    [-1, -11, 1, -12, 11]\n>>> order_by_average([])\n[]\n\"\"\"", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n  \
    \  sorted_nums = nums \n    \n    for i = 1:length(nums) \n        \n        digit\
    \ = nums[i] \n        \n        if sum_of_digits == digit \n            sorted_nums[i]\
    \ = i \n            \n        else \n            \n            index = findfirst(sum_of_digits\
    \ == digit, nums) \n            \n            if index != -1 \n              \
    \  \n                sorted_nums[i] = index \n                \n             \
    \   sum_of_digits -= digit \n                \n            end \n            \n\
    \            sum_of_digits += digit \n            \n        end \n        \n \
    \   end \n    \n    return sorted_nums \nend \n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a list that satisfies a given condition. For example:\n>>> first_element([10,\
    \ 20, 30, 40, 50], x -> x > 10)\n40\n>>> first_element([10, 20, 30, 40, 50], x\
    \ -> x < 10)\n10\n>>> first_element([10, 20, 30, 40, 50], x -> x == 10)\n10\n\
    >>> first_element([10, 20, 30, 40, 50], x -> x > 10)\n40\n>>> first_element([10,\
    \ 20, 30, 40, 50], x -> x < 10)\n10\n>>> first_element([10, 20, 30, 40, 50], x\
    \ -> x == 10)\n10\n>>> first_element([10, 20, 30, 40, 50], x -> x > 10)\n40\n\
    >>> first_element([10, 20, 30, 40, 50], x -> x < 10)\n10\n>>> first_element([10,\
    \ 20, 30, 40, 50], x -> x == 10)\n10\n>>> first_element([10, 20, 30, 40, 50],\
    \ x -> x > 10)\n40\n>>> first_element([10, 20, 30, 40, 50], x -> x < 10)\n10\n\
    >>> first_element([10, 20, 30, 40, 50], x -> x == 10)\n10\n>>> first_element([10,\
    \ 20, 30, 40, 50], x -> x > 10)\n40\n>>> first_element([10, 20, 30, 40, 50], x\
    \ -> x < 10)\n10\n>>> first_element([10, 20, 30, 40, 50], x -> x == 10)\n10\n\
    >>> first_element([10, 20, 30, 40, 50], x -> x > 10)\n40\n>>> first_element([10,\
    \ 20, 30, 40, 50], x -> x < 10)\n10\n>>> first_element([10, 20, 30, 40, 50], x\
    \ -> x == 10)\n10\n>>> first_element", "    \n    sums = Vector{Int64}()\n   \
    \ for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    ans = Vector{Int64}()\n    for i in sums\n        push!(ans, i)\n \
    \   end\n    \n    return ans\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of integers\
    \ in the list that have \nthe property that their digits sum to zero.", "    if\
    \ length(nums) == 0 \n        return nums\n    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted, nums[findfirst(i->sums[i]\
    \ == sums, sums)])\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x)) \n    sums = digits.reduce(add,\
    \ 0) \n    \n    sorted_nums = nums.filter(x -> sums == digits(x))\n    \n   \
    \ return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in the given list that have no duplicates.", "    if nums == []\n        []\n\
    \    else\n        local sum = 0\n        local index = 0\n        local result\
    \ = []\n        for n in nums\n            local digit = n % 10\n            sum\
    \ = sum + digit\n            if sum > 0\n                index = index + 1\n \
    \           end\n            if sum == 0\n                result.push(nums[index])\n\
    \                sum = 0\n                index = 0\n            end\n       \
    \ end\n        return result\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of integers in the given list that have the given digit.",
  "    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums = nums\n    \n    for\
    \ num in nums\n        if sum_of_digits == sum(nums)\n            sorted_nums\
    \ = sort(sorted_nums)\n        end\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n \
    \   \n    sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n \
    \   \n    sums = sums[2:end]\n    \n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    return sums\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if nums == [] \n        return nums \n    \n    digits\
    \ = nums.map(x -> digit(x)) \n    \n    sums = digits[digits] \n    \n    sorted_sums\
    \ = sort(sums) \n    \n    sorted_nums = nums[digits] \n    \n    sorted_nums\
    \ = sort(sorted_nums) \n    \n    sorted_nums = nums[digits] \n    \n    return\
    \ sorted_nums \nend", "    if length(nums) == 0 \n        return nums\n    \n\
    \    sums = Vector{Int64}()\n    for i in nums \n        sums[i] = sum(i) + i\n\
    \    end\n    \n    sorted_sums = sort(sums)\n    \n    sorted_nums = Vector{Int64}()\n\
    \    for i in nums \n        if sums[i] == sorted_sums[1] \n            push!(sorted_nums,\
    \ i)\n        end\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function which returns the number of integers in the given list \nthat have\
    \ exactly two digits.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sum", "    \n  \
    \  sums = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) + i\n \
    \   end\n    \n    sums = sort(sums)\n    \n    sums = sums[:]\n    \n    for\
    \ i in nums\n        sums[i] = sums[i] - i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    return sums[:]\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of integers\
    \ in the given list that have no duplicates.", "    if nums == [] \n        return\
    \ nums \n    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums = nums[:]\n\
    \    \n    for idx in 1:length(nums)\n        digit = nums[idx]\n        if sum_of_digits\
    \ == digit\n            sorted_nums[idx] = idx\n        elseif sum_of_digits >\
    \ digit\n            idx = idx\n            sum_of_digits -= digit\n         \
    \   sorted_nums[idx] = digit\n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the first element\
    \ of a list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums\
    \ = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n\
    \    \n    for i in nums\n        if sums.==i\n            sums = sums[2:end]\n\
    \        else\n            sums = sums + i\n        end\n    end\n    \n    return\
    \ sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    sums = Vector{Int64}(undef, length(nums))\n    for i in 1:length(nums)\
    \ \n        sums[i] = sum(nums[i])\n    end\n    \n    sorted_sums = sort(sums)\n\
    \    \n    sorted_nums = Vector{Int64}(undef, length(nums))\n    for i in 1:length(nums)\
    \ \n        sorted_nums[i] = nums[sorted_sums[i]]\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>", "    if nums == []\n        []\n   \
    \ else\n        sort(nums)\n        local sum = 0\n        for n in nums\n   \
    \         sum = sum + n\n        end\n        local index = 0\n        local new_nums\
    \ = Vector{Int64}()\n        for n in nums\n            local digit = n % 10\n\
    \            if digit == 0\n                index = index + 1\n            else\n\
    \                if index > 0\n                    new_nums[index] = sum\n   \
    \             end\n                index = index + 1\n                sum = sum\
    \ + digit\n            end\n        end\n        if index > 0\n            new_nums[index]\
    \ = sum\n        end\n        return new_nums\n    end\nend\n</cell>\n<text>\n\
    Exercise 9\nWrite a function that returns the number of elements in the given\
    \ list that satisfy the given condition. For example, if the given list is [1,\
    \ 1, 2, 3] and the condition is n == 2 then your function should return 3.", " \
    \   \n    sums = Vector{Int64}()\n    for n in nums\n        sums = sums + digits(n)\n\
    \    end\n    \n    sorted = []\n    for n in sums\n        push!(sorted, n)\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of digits\
    \ in an integer.", "    \n    sums = Vector{Int64}()\n    for i in nums\n    \
    \    push!(sums, sum(i))\n    end\n    \n    sorted = sort(sums)\n    \n    sorted\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in the given list that\
    \ satisfy the condition $x^2 + y^2 = z^2$, where $x, y, z$ are given as arguments.",
  "    if length(nums) == 0 \n        return nums\n    \n    digits = nums.map(x ->\
    \ digit(x))\n    \n    sum_digits = digits.reduce(add, 0) \n    \n    sorted_nums\
    \ = nums.filter(x -> digit(x) == sum_digits)\n    \n    sorted_nums = order_by_points(sorted_nums)\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12, 1])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12, 1, 1])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12, 1, 1,\
    \ 1])\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12,\
    \ 1, 1, 2, 1])\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1,\
    \ -11, -12, 1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12, 1, 1, 2, 3])\n</cell>\n<code language=", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   digits_sum = digits.reduce(add, 0) \n    \n    sorted_nums = nums.filter(x\
    \ -> digits_sum == digit(x)) \n    \n    sorted_nums = order_by_points(sorted_nums)\
    \ \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums\
    \ = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, 0)\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef,\
    \ 0)\n    for i in nums\n        push", "    \n    sums = Vector{Int64}()\n  \
    \  for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    order_by_points = Vector{Int64}()\n    for i in 1:length(sums)\n  \
    \      push!(order_by_points, nums[sums[i]])\n    end\n    \n    return order_by_points\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([-2, -1, 0, 1, 2])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1,\
    \ -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1, -1,\
    \ 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1, -1, 1, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1,\
    \ -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1, -1,\
    \ 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1, -1, 1, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([-1, -1, 1, 2, 2])\n</cell>\n<code language=julia-1.5>\norder_by_points([-1, ",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted = sort(sums)\n    \n    sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise: Write a\
    \ function that sorts the given list of integers\n    in descending order according\
    \ to the sum of their digits.\n    Note: if there are several items with similar\
    \ sum of their digits,\n    order them based on their index in original list.",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}(undef,\
    \ length(nums))\n    for i in 1:length(nums) \n        sums[i] = sum(nums[i])\n\
    \    end\n    \n    sorted_sums = sort_by_key(sums)\n    \n    sorted_nums = Vector{Int64}(undef,\
    \ length(nums))\n    for i in 1:length(nums) \n        sorted_nums[i] = nums[i][sorted_sums[i]]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted = Vector{Int64}()\n    \n    for index in 1:length(sums)\n\
    \        push!(sorted, nums[findfirst(i->sums[i] == sums[index], sums)])\n   \
    \ end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function which takes a vector of integers\
    \ and returns its lexicographical ordering.", "    if length(nums) == 0 \n   \
    \     return nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sums\
    \ = digits.reduce(add, 0) \n    \n    sorted_nums = nums.filter(x -> x == sums)\
    \ \n    \n    return order_by_points(sorted_nums) \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in the given list that satisfy the given condition. For example:", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for i in\
    \ nums \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}() \n\
    \    \n    for i in nums \n        if sums[i] < 0 \n            sorted_nums.push(-i)\
    \ \n        else \n            sorted_nums.push(i) \n    \n    return sorted_nums\
    \ \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function which sorts the given list of integers\nin descending\
    \ order according to the sum of their digits.\nNote: if there are several items\
    \ with similar sum of their digits,\norder them based on their index in original\
    \ list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums =\
    \ sums + i\n    end\n    \n    sums = sort(sums)\n    \n    ans = Vector{Int64}()\n\
    \    for i in sums\n        push!(ans, i)\n    end\n    \n    return ans\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function which returns the number of elements in the given list\nthat satisfy\
    \ the condition:\n$ \\sum_{i=0}^{n-1} x_i = x_0 $", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, length(sums))\n    for i in 1:length(sums)\n\
    \        sums[i] = nums[sums[i]]\n    end\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of elements in the given list that \nare\
    \ divisible by 7 and are in the given range. For example:", "    \n    sums =\
    \ Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n    end\n \
    \   \n    sortedsums = sort(sums)\n    \n    sortednums = Vector{Int64}()\n  \
    \  for i in nums\n        push!(sortednums, sortedsums.index(sum(i)))\n    end\n\
    \    \n    return sortednums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise: Write a function that sorts the given list of integers\n\
    in descending order according to the sum of their digits.\nNote: if there are\
    \ several items with similar sum of their digits,\norder them based on their index\
    \ in original list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n \
    \       sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted_nums, nums[sums.==i])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.4>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.4>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of times\
    \ a given number appears in a given list.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    return map(i -> nums[i], sums)\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of elements\
    \ in the given list which satisfy the condition that the sum of their digits is\
    \ less than a given value.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums[i] = 0\n        for j in i\n            sums[i] += digit(j)\n  \
    \  end\n    \n    sorted_sums = Vector{Int64}()\n    for i in 1:length(sums)\n\
    \        sorted_sums[i] = 0\n        for j in 1:length(sums)\n            if sums[j]\
    \ == i\n                sorted_sums[i] = j\n                break\n          \
    \  end\n        end\n    end\n    \n    sorted_nums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sorted_nums, i)\n    end\n    \n    for i in 1:length(sorted_sums)\n\
    \        push!(sorted_nums, sorted_nums[sorted_sums[i]])\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "    if nums == []\n\
    \        []\n    else\n        order_by_points_helper(nums, 0)\n    end\nend",
  "    if nums == []\n        []\n    else\n        order_by_points_helper(nums, 0)\n\
    \    end\nend", "    if length(nums) == 0 \n        return nums \n    \n    sums\
    \ = Vector{Int64}(0) \n    for n in nums \n        push!(sums, sum(digits(n)))\n\
    \    end\n    \n    idxs = Vector{Int64}(0) \n    \n    for idx in 1:length(sums)\
    \ \n        if sums[idx] == 0 \n            push!(idxs, idx) \n        else \n\
    \            push!(idxs, idxs[end] + 1) \n        end\n    end\n    \n    idxs\
    \ = idxs[sortperm(idxs)]\n    \n    ans = Vector{Int64}(undef, length(nums))\n\
    \    for idx in idxs \n        ans[idx] = nums[idx] \n    end\n    return ans\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ whose digits sum to $n$, where $n$ is a given integer.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for n in\
    \ nums \n        push!(sums, sum(digits(n)))\n    end\n    \n    indexes = Vector{Int64}()\
    \ \n    \n    for n in nums \n        push!(indexes, findfirst(n -> sum(digits(n))\
    \ == sums, sums)) \n    end\n    \n    indexes = indexes[sort!(indexes)]\n   \
    \ \n    return nums[indexes]\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    \n    sums = Vector{Int64}()\n    for n in nums\n    \
    \    sums = sums + digits(n)\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ ans = Vector{Int64}()\n    for n in nums\n        if sums.==n\n            push!(ans,\
    \ n)\n        end\n    end\n    \n    return ans\nend\n</cell>\n<code language=julia-1.3>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.3>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of integers\
    \ in the given list that have the property that their digits add up to a specific\
    \ value.", "    if length(nums) == 0 \n        return nums \n    \n    sums =\
    \ Vector{Int64}(undef, length(nums))\n    for i in 1:length(nums) \n        sums[i]\
    \ = sum(nums[i])\n    end\n    \n    sorted_sums = sort_by_key(sums)\n    \n \
    \   sorted_nums = Vector{Int64}(undef, length(nums))\n    for i in 1:length(nums)\
    \ \n        sorted_nums[i] = nums[sorted_sums[i]]\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given number appears\
    \ in the given list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    zipped = zip(nums, sums)\n  \
    \  zipped.sort!\n    \n    ordered = Vector{Int64}()\n    for (i, s) in zipped\n\
    \        push!(ordered, i)\n    end\n    \n    return ordered\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    for i in sums\n        nums[i]\
    \ = nums[i]\n    end\n    \n    return nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of elements\
    \ in the given list that \nare divisible by 3.", "    if nums == [] \n       \
    \ return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n      \
    \  sums.push(i) \n    end\n    \n    sums = sort_by_key(sums)\n    \n    ans =\
    \ Vector{Int64}() \n    for i in nums \n        if sums.contains(i) \n       \
    \     ans.push(i) \n        end\n    end\n    \n    return ans\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in the given\
    \ list that satisfy the condition $x^2 + y^2 = z^2$, where $x, y, z$ are given\
    \ as parameters. \nFor example, given $x = 1, y = 2, z = 3$, the function should\
    \ return $2$.", "    \n    sums = Vector{Int64}()\n    for i in nums\n       \
    \ sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    for i in 1:length(sums)\n\
    \        if sums[i] != 0\n            sums[i] = nums[sums[i]]\n        end\n \
    \   end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 9\nWrite a function which returns the number of integers\
    \ in the given list which can be written as the sum of two abundant numbers.",
  "    if nums == []\n        []\n    else\n        sort(nums) |> reverse\n    end\n\
    end\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of digits\
    \ in an integer. For example, given an integer 123, return 3.", "    if nums ==\
    \ []\n        []\n    else\n        order_by_points_helper(nums, 0)\n    end\n\
    end", "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sums = digits[digits]\n    \n    sums = sums.sort\n\
    \    \n    sums = sums.reverse\n    \n    sums = sums.map(x -> x + nums[length(x)])\
    \ \n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the given list that satisfy the condition $x^2 + y^2 = z^2$, where $x, y,\
    \ z$ are given as arguments.", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    digits = nums.map(x -> digit(x))\n    digits_sum = digits.reduce(+)\
    \ \n    \n    sorted_nums = nums.sort((x, y) -> digits_sum - digits(x) - digits(y))\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.4>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.4>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of integers\
    \ in a given list that have no duplicates.", "    if length(nums) == 0 \n    \
    \    return nums \n    \n    sums = Vector{Int64}(0) \n    for n in nums \n  \
    \      sums = sums + n \n    \n    sorted_nums = Vector{Int64}() \n    \n    for\
    \ n in nums \n        if sums[n] == 0 \n            sorted_nums = sorted_nums\
    \ + n \n        else \n            index = findfirst(n -> sums[n] == sums[n -\
    \ 1], 1:length(sums)) \n            sorted_nums = sorted_nums + n \n         \
    \   sorted_nums = sorted_nums + nums[index] \n        end \n    end \n    return\
    \ sorted_nums \nend \n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given list."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
