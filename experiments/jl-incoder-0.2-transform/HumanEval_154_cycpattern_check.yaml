name: HumanEval_154_cycpattern_check
language: jl
prompt: "\"\"\"You are given 2 words. You need to return True if the second word or\
  \ any of its rotations is a substring in the first word\n    >>> cycpattern_check(\"\
  abcd\", \"abd\")\n    false\n    >>> cycpattern_check(\"hello\", \"ell\")\n    true\n\
  \    >>> cycpattern_check(\"whassup\", \"psus\")\n    false\n    >>> cycpattern_check(\"\
  abab\", \"baa\")\n    true\n    >>> cycpattern_check(\"efef\", \"eeff\")\n    false\n\
  \    >>> cycpattern_check(\"himenss\", \"simen\")\n    true\n\n    \"\"\"\nfunction\
  \ cycpattern_check(a::String, b::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = cycpattern_check;\n\t@test(candidate(\"\
  xyzw\", \"xyw\") == false)\n\t@test(candidate(\"yello\", \"ell\") == true)\n\t@test(candidate(\"\
  whattup\", \"ptut\") == false)\n\t@test(candidate(\"efef\", \"fee\") == true)\n\t\
  @test(candidate(\"abab\", \"aabb\") == false)\n\t@test(candidate(\"winemtt\", \"\
  tinem\") == true)\nend\n"
completions: ["    \n    \n    if length(a) == length(b) \n        \n        if a\
    \ == b\n            true\n        else\n            false\n    \n    else\n  \
    \      false\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ length(b) then \n        true\n    else\n        if length(a) > length(b) then\
    \ \n            false\n        else\n            if length(a) < length(b) then\
    \ \n                false\n            else\n                if contains(a, b)\n\
    \                    true\n                else\n                    if contains(b,\
    \ a)\n                        true\n                    else\n               \
    \         false\n            end\n        end\n    end\nend\n</code>\n<|/ a tags=string,julia,pattern-matching\
    \ |>\n<| a |>\nI wrote a package for Julia called StringMatch that does this very\
    \ efficiently. \n<code>\njulia> using StringMatch", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return true\n\
    \    else if length(a) == 1 \n        return b == a\n    else if length(b) ==\
    \ 1 \n        return a == b\n    else if length(a) == length(b) \n        return\
    \ true\n    else \n        return false\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        if length(a) > length(b) \n            then false\n            else\
    \ if length(a) == 0 \n                then true\n                else if length(b)\
    \ == 0 \n                    then true\n                    else if b[length(b)-1]\
    \ == a[length(a)-1] \n                        then true\n                    \
    \    else false\n            end\n        end\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,pattern-matching,julia |>\n<code>", "    if length(a) ==\
    \ length(b) \n        then true\n        else false\n    else if length(a) > length(b)\
    \ \n        then false\n        else if contains(b, a)\n            then true\n\
    \            else false\n    else if length(a) < length(b) \n        then false\n\
    \        else if contains(a, b)\n            then true\n            else false\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return true\n    else if length(a) == 1 \n\
    \        return b == a || b == reverse(split(a)[1])\n    else if length(b) ==\
    \ 1 \n        return a == b || a == reverse(split(b)[1])\n    else \n        return\
    \ b == split(a)[1] || a == split(b)[1]\nend\n</code>\n<|/ a tags=string,julia,pattern-matching\
    \ |>\n<| a tags=string,julia,pattern-matching |>\n<code>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    if length(a) == length(b)\
    \ \n        \n        if a == b \n            return true\n        \n        else\
    \ \n            return false\n    \n    else \n        return false\n    \nend\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"whassup\", \"psus\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    himenss\", \"simen\")\n</cell>\n<text>\nCyclic Patterns\nCyclic patterns are patterns\
    \ that repeat themselves over and over again. For example, the word \"aba\" is\
    \ a cyclic pattern because it repeats itself three times. A cyclic pattern can\
    \ occur anywhere in a word. For example, the word \"aba\" is a cyclic pattern\
    \ because it repeats itself three times. A cyclic pattern can occur anywhere in\
    \ a word. For example, the word \"aba\" is a cyclic pattern because it repeats\
    \ itself three times. A cyclic pattern can occur anywhere in a word. For example,\
    \ the word \"aba\" is a cyclic pattern because it repeats itself three times.\
    \ A cyclic pattern can occur anywhere in a word. For example, the word \"aba\"\
    \ is a cyclic pattern because it repeats itself three times. A cyclic pattern\
    \ can occur anywhere in a word. For example, the word \"aba\" is a cyclic pattern\
    \ because it repeats itself three times. A cyclic pattern can occur anywhere in\
    \ a word. For example, the word \"aba\" is a cyclic pattern because it repeats\
    \ itself three times. A cyclic pattern can occur anywhere in a word. For example,\
    \ the word \"aba\" is a cyclic pattern because it repeats itself three times.\
    \ A cyclic pattern can occur anywhere in a word. For example, the word \"aba\"\
    \ is a cyclic pattern because it repeats itself three times. A cyclic pattern\
    \ can occur anywhere in a word. For example, the word \"aba\" is a cyclic pattern\
    \ because it repeats itself three times. A cyclic pattern can occur anywhere in\
    \ a word. For example, the word \"aba\" is a cyclic pattern because it repeats\
    \ itself three times. A cyclic pattern can occur any", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if length(a) == length(b) \n\
    \        then true\n        else false\n    else \n        if length(a) > length(b)\
    \ \n            then false\n            else if length(a) == 0 \n            \
    \    then true\n                else if length(b) == 0 \n                    then\
    \ true\n                    else if length(a) == 1 \n                        then\
    \ if contains(b, a)\n                            then true\n                 \
    \           else false\n                        else if contains(b, a[1:end-1])\
    \ \n                            then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end-1]) \n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])\n                            then true\n                         \
    \   else false\n                        else if contains(b, a[1:end-1]) \n   \
    \                         then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end-1]) \n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])\n                            then true\n                         \
    \   else false\n                        else if contains(b, a[1:end-1]) \n   \
    \                         then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end-1]) \n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])\n                            then true\n                         \
    \   else false\n                        else if contains(b, a[1:end-1]) \n   \
    \                         then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end-1]) \n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])\n                            then true\n                         \
    \   else false\n                        else if contains(b, a[1:end-1]) \n   \
    \                         then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end-1]) \n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])\n                            then true\n                         \
    \   else false\n                        else if contains(b, a[1:end-1]) \n   \
    \                         then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end-1]) \n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])", "    \n    if length(a) == length(b) \n        then true\n     \
    \   else false\n    end\n    \n    if length(a) == 0 \n        then true\n   \
    \     else false\n    end\n    \n    if length(b) == 0 \n        then true\n \
    \       else false\n    end\n    \n    if length(a) == length(b) \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == 0 \n        then\
    \ true\n        else false\n    end\n    \n    if length(b) == 0 \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == length(b) \n  \
    \      then true\n        else false\n    end\n    \n    if length(a) == 0 \n\
    \        then true\n        else false\n    end\n    \n    if length(b) == 0 \n\
    \        then true\n        else false\n    end\n    \n    if length(a) == length(b)\
    \ \n        then true\n        else false\n    end\n    \n    if length(a) ==\
    \ 0 \n        then true\n        else false\n    end\n    \n    if length(b) ==\
    \ 0 \n        then true\n        else false\n    end\n    \n    if length(a) ==\
    \ length(b) \n        then true\n        else false\n    end\n    \n    if length(a)\
    \ == 0 \n        then true\n        else false\n    end\n    \n    if length(b)\
    \ == 0 \n        then true\n        else false\n    end\n    \n    if length(a)\
    \ == length(b) \n        then true\n        else false\n    end\n    \n    if\
    \ length(a) == 0 \n        then true\n        else false\n    end\n    \n    if\
    \ length(b) == 0 \n        then true\n        else false\n    end\n    \n    if\
    \ length(a) == length(b) \n        then true\n        else false\n    end\n  \
    \  \n    if length(a) == 0 \n        then true\n        else false\n    end\n\
    \    \n    if length(b) == 0 \n        then true\n        else false\n    end\n\
    \    \n    if length(a) == length(b) \n        then true\n        else false\n\
    \    end\n    \n    if length(a) == 0 \n        then true\n        else false\n\
    \    end\n    \n    if length(b) == 0 \n        then true\n        else false\n\
    \    end\n    \n    if length(a) == length(b) \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == 0 \n        then true\n        else\
    \ false\n    end\n    \n    if length(b) == 0 \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == length(b) \n        then true\n  \
    \      else false\n    end\n    \n    if length(a) == 0 \n        then true\n\
    \        else false\n    end", "    if length(a) == length(b) \n        return\
    \ true\n    else \n        return false\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    if length(a) == length(b) \n    then \n\
    \        true\n    else \n        false\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if length(a) == 0 \n        true\n\
    \    elseif length(b) == 0 \n        false\n    elseif length(a) == length(b)\
    \ \n        if issubstring(a,b) \n            true\n        else\n           \
    \ false\n    else\n        if issubstring(a,b) \n            true\n        else\n\
    \            cycpattern_check(b,a)\nend\n</code>\n<|/ a tags=string,julia |>\n\
    <| a dscore=0 |>\n<code>", "    if length(a) == length(b) then \n        true\n\
    \    elseif length(a) > length(b) then \n        false\n    elseif length(a) <\
    \ length(b) then \n        false\n    elseif length(a) == 0 then \n        false\n\
    \    elseif length(b) == 0 then \n        false\n    elseif length(a) == 1 then\
    \ \n        if issubstring(a,b) then \n            true\n        else\n      \
    \      false\n    elseif length(b) == 1 then \n        if issubstring(b,a) then\
    \ \n            true\n        else\n            false\n    elseif length(a) ==\
    \ 2 then \n        if issubstring(a,b) or issubstring(b,a) then \n           \
    \ true\n        else\n            false\n    elseif length(b) == 2 then \n   \
    \     if issubstring(a,b) or issubstring(b,a) then \n            true\n      \
    \  else\n            false\n    elseif length(a) == 3 then \n        if issubstring(a,b)\
    \ or issubstring(b,a) or issubstring(a,c) or issubstring(c,b) then \n        \
    \    true\n        else\n            false\n    elseif length(b) == 3 then \n\
    \        if issubstring(a,b) or issubstring(b,a) or issubstring(a,c) or issubstring(c,b)\
    \ then \n            true\n        else\n            false\n    elseif length(a)\
    \ == 4 then \n        if issubstring(a,b) or issubstring(b,a) or issubstring(a,c)\
    \ or issubstring(c,b) or issubstring(a,d) or issubstring(d,b) then \n        \
    \    true\n        else\n            false\n    elseif length(b) == 4 then \n\
    \        if issubstring(a,b) or issubstring(b,a) or issubstring(a,c) or issubstring(c,b)\
    \ or issubstring(a,d) or issubstring(d,b) then \n            true\n        else\n\
    \            false\n    elseif length(a) == 5 then \n        if issubstring(a,b)\
    \ or issubstring(b,a) or issubstring(a,c) or issubstring(c,b) or issubstring(a,d)\
    \ or issubstring(d,b) or issubstring(a,e) or issubstring(e,b) then \n        \
    \    true\n        else\n            false\n    elseif length(b) == 5 then \n\
    \        if issubstring(a,b) or issubstring(b,a) or issubstring(a,c) or issubstring(c,b)\
    \ or issubstring(a,d) or issubstring(d,b) or issubstring(a,e) or issubstring(e,b)\
    \ then \n            true\n        else\n            false\n    elseif length(a)\
    \ == 6 then \n        if issubstring(a,b) or issubstring(b,a) or issubstring(a,c)\
    \ or issubstring(c,b) or ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    if length(a) == length(b) \n        \n        if a\
    \ == b \n            return true\n        \n        else \n            return\
    \ false\n    \n    else \n        \n        if length(a) > length(b) \n      \
    \      return false\n        \n        else \n            \n            if length(a)\
    \ == 0 \n                return true\n            \n            else \n      \
    \          \n                if length(b) == 0 \n                    return false\n\
    \                \n                else \n                    \n             \
    \       \n                    if a[1] == b[1] \n                        \n   \
    \                     if a[2] == b[2] \n                            \n       \
    \                     if a[3] == b[3] \n                                \n   \
    \                             if a[4] == b[4] \n                             \
    \       \n                                    if a[5] == b[5] \n             \
    \                           \n                                        if a[6]\
    \ == b[6] \n                                            \n                   \
    \                         if a[7] == b[7] \n                                 \
    \               \n                                                if a[8] == b[8]\
    \ \n                                                    \n                   \
    \                                     if a[9] == b[9] \n                     \
    \                                       \n                                   \
    \                         if a[10] == b[10] \n                               \
    \                                 \n                                         \
    \                       if a[11] == b[11] \n                                 \
    \                                   \n                                       \
    \                             if a[12] == b[12] \n                           \
    \                                             \n                             \
    \                                       if a[13] == b[13] \n                 \
    \                                                       \n                   \
    \                                                 if a[14] == b[14] \n       \
    \                                                                 \n         \
    \                                                           if a[15] == b[15]\
    \ \n                                                                        \n\
    \                                                                    if a[16]\
    \ == b[16] \n                                                                \
    \        \n                                                                  \
    \  if a[17] == b[17] \n                                                      \
    \                  \n                                                        \
    \            if a[18] == b[18] \n                                            \
    \                            \n                                              \
    \                      if a[19] == b[19] \n                                  \
    \                                      \n                                    \
    \                                if a[20] == b[20] \n                        \
    \                                                \n                          \
    \                                          if a[21] == b[21] \n              \
    \                                                          \n                \
    \                                                    if a[22] == b[22] \n    \
    \                                                                    \n      \
    \                                                              if a[23] == b[23]\
    \ \n                                                                        \n\
    \                                                                    if a[24]\
    \ == b[24] \n                                                                \
    \        \n                                                                  \
    \  if a[25] == b[25] \n                                                      \
    \                  \n                                                        \
    \            if a[26] == b[26] \n                                            \
    \                            \n                                              \
    \                      if a[27] == b[27] \n                                  \
    \                                      \n                                    \
    \                                if a[28] == b[28] \n                        \
    \                                                \n                          \
    \                                          if a[29] == b[29] \n              \
    \                                                          \n                \
    \                                                    if a[30] == b[30] \n    \
    \                                                                    \n      \
    \                                                              if a[31] == b[31]\
    \ \n                                                                        \n\
    \                                                                    if a[32]\
    \ == b[32] \n                                                                \
    \        \n                                                                  \
    \  if a[33] == b[33] \n                                                      \
    \                  \n                                                        \
    \            if a[34", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    if length(a) == length(b) \n        \n        if a == b \n    \
    \        return true\n        \n        else \n            return false\n    \n\
    \    else \n        return false\n    \nend \n</cell>\n<code language=julia-1.4>\n\
    cycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"\
    hello\", \"ell\")\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"whassup\"\
    , \"psus\")\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times the string appears in the string. \ne.g. \"hello\" appears\
    \ 3 times in the string", "    if length(a) == length(b) \n        then true\n\
    \        else false\n    else \n        if length(a) > length(b) \n          \
    \  then false\n            else if length(a) == 0 \n                then true\n\
    \                else if length(b) == 0 \n                    then true\n    \
    \                else if length(a) == 1 \n                        then if b ==\
    \ a[1..length(a)]\n                            then true\n                   \
    \         else false\n                        else if length(b) == 1 \n      \
    \                      then if a == b[1..length(b)]\n                        \
    \        then true\n                                else false\n             \
    \               else if length(a) == 2 \n                                then\
    \ if b == a[1..length(a)]\n                                    then true\n   \
    \                                 else if b == a[length(a)+1..length(a)]\n   \
    \                                     then true\n                            \
    \            else false\n                                else if length(b) ==\
    \ 2 \n                                    then if a == b[1..length(b)]\n     \
    \                                   then true\n                              \
    \          else if a == b[length(b)+1..length(b)]\n                          \
    \                  then true\n                                            else\
    \ false\n                            else false\n                        else\
    \ false\n                    else false\n                else false\n        \
    \    else false\n        else false\n    end \nend \n</code>\n<|/ a tags=string,pattern-matching,julia\
    \ |>\n<| a dscore=1 |>\nHere is a simple solution that uses regular expressions:\n\
    <code>", "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    \n    if length(a) == 1 \n        return true\n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    \n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    \n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    if length(b) == 1 \n        return true\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    \n    \n    if length(a) == 1 \n        return true\n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    \n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    \n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    if length(b) == 1 \n        return true\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    \n    \n    if length(a) == 1 \n        return true\n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    \n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a",
  "    \n    if length(a) == length(b) \n    then \n        true\n    else\n     \
    \   false\n    end\nend", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false \n    else \n        return issubstring(b,a) || issubstring(a,b) || cycpattern_check(b,a)\
    \ || cycpattern_check(a,b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    \n    \n    if length(a) == length(b) \n        \n        if a ==\
    \ b \n            \n            return true\n        \n        else \n       \
    \     \n            return false\n    \n    else \n        \n        if length(a)\
    \ > length(b) \n            \n            return cycpattern_check(b, a)\n    \
    \    \n        else \n            \n            return cycpattern_check(a, b)\
    \ \n    \nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    if\
    \ length(a) == length(b) \n    then \n        true\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if a == b \n            return true\n     \
    \   \n        else \n            return false\n        \n    else \n        \n\
    \        if length(a) > length(b) \n            return cycpattern_check(b, a)\n\
    \        \n        else \n            return cycpattern_check(a, b) \n    \nend\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"whassup\", \"psus\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    himenss\", \"simen\")\n</cell>\n<code language=julia-1.5>", "    \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(a)\
    \ == length(b) \n        then true\n        else false\n    else if length(a)\
    \ > length(b) \n        then false\n        else if length(a) == 0 \n        \
    \    then true\n            else if length(b) == 0 \n                then true\n\
    \                else if b == substring(a,1,length(a)) \n                    then\
    \ true\n                    else if substring(a,1,length(a)) in b \n         \
    \               then true\n                        else false\n    else if length(b)\
    \ > length(a) \n        then false\n        else if length(a) == 0 \n        \
    \    then true\n            else if length(b) == 0 \n                then true\n\
    \                else if b == substring(a,1,length(a)) \n                    then\
    \ true\n                    else if substring(a,1,length(a)) in b \n         \
    \               then true\n                        else false\n    else false\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=1 |>\nHere's a solution\
    \ that uses only string operations and no loops:\n<code>", "    if length(a) ==\
    \ length(b) \n        return true\n    else \n        return false\n    end\n\
    end", "    if length(a) == length(b) \n    then \n        true\n    else \n  \
    \      false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nThanks for the feedback, I will keep that in mind\
    \ for future answers.\n<|/ c |>\n<| a |>\n<code>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n        return\
    \ true\n    else \n        return false\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/27827835)\n<|/ c |>\n<| c |>\nThis does provide\
    \ an answer to the question. He asked how to check if a substring is a substring\
    \ of another string. He also asked how to check if a substring is a rotation of\
    \ another string. He also asked how to check if a substring is a substring of\
    \ another substring.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/27827835)\n<|/ c\
    \ |>\n<| c |>\nThis does provide an answer to the question. He asked how to check\
    \ if a substring is a substring of another string. He also asked how to check\
    \ if a substring is a rotation of another string. He also asked how to check if\
    \ a substring is a substring of another substring.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27827835)\n\
    <|/ c |>\n<| a tags=string,julia,substring,rotation |>\n<code>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n\
    \        then true\n        else false\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(a) == length(b) \n    then \n        true\n    else\n        false\n\
    \    end\nend", "    \n    \n    if length(a) == length(b) \n        \n      \
    \  if a == b \n            return true\n        \n        else \n            return\
    \ false\n    \n    else \n        return false\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    hello\", \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\"\
    , \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nCyclic Patterns", "    if length(a) == length(b) \n      \
    \  then true\n        else false\n    else if length(a) > length(b) \n       \
    \ then false\n        else if length(a) == 0 \n            then true\n       \
    \     else if length(b) == 0 \n                then true\n                else\
    \ if contains(a, b)\n                    then true\n                    else false\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,julia,pattern-matching\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == 0 || length(b) == 0 \n        return false\n    else if length(a)\
    \ == 1 \n        return true\n    else if length(b) == 1 \n        return true\n\
    \    else if length(a) == length(b) \n        return true\n    else if length(a)\
    \ > length(b) \n        return false\n    else if length(a) < length(b) \n   \
    \     return false\n    else if contains(a, b)\n        return true\n    else\
    \ if contains(b, a)\n        return true\n    else if contains(b, substring(a))\n\
    \        return true\n    else if contains(substring(a), b)\n        return true\n\
    \    else if contains(substring(a), substring(b))\n        return true\n    else\
    \ if contains(substring(a), substring(b)) || contains(substring(b), substring(a))\n\
    \        return true\n    else if contains(substring(a), substring(b)) || contains(substring(b),\
    \ substring(a)) || contains(substring(b), substring(a)) || contains(substring(a),\
    \ substring(b)) || contains(substring(b), substring(a))\n        return true\n\
    \    else if contains(substring(a), substring(b)) || contains(substring(b), substring(a))\
    \ || contains(substring(b), substring(a)) || contains(substring(a), substring(b))\
    \ || contains(substring(b), substring(a)) || contains(substring(a), substring(b))\
    \ || contains(substring(b), substring(a))\n        return true\n    else if contains(substring(a),\
    \ substring(b)) || contains(substring(b), substring(a)) || contains(substring(b),\
    \ substring(a)) || contains(substring(a), substring(b)) || contains(substring(b),\
    \ substring(a)) || contains(substring(a), substring(b)) || contains(substring(b),\
    \ substring(a)) || contains(substring(a), substring(b)) || contains(substring(b),\
    \ substring(a))\n        return true\n    else if contains(substring(a), substring(b))\
    \ || contains(substring(b), substring(a)) || contains(substring(b), substring(a))\
    \ || contains(substring(a), substring(b)) || contains(substring(b), substring(a))\
    \ || contains(substring(a), substring(b)) || contains(substring(b), substring(a))\
    \ || contains(substring(a), substring(b)) || contains(substring(b), substring(a))\n\
    \        return true\n    else if contains(substring(a), substring(b)) || contains(substring(b),\
    \ substring(a)) || contains(substring(b), substring(a)) || contains(substring(a),\
    \ substring(b)) || contains(substring(b), substring(a)) || contains(substring(a),\
    \ substring(b)) || contains(substring(b), substring(a)) || contains(substring(a),\
    \ substring(b)) || contains(substring(b), substring(a))\n        return true\n\
    \    else if contains(substring(a), substring(b)) || contains(substring(b), substring(a",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      return (cycpattern_check(a[1:], b) or cycpattern_check(a[1:], b[1:]))\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\n<code>", "    \n \
    \   if length(a) == length(b) \n        then true\n        else false\n    end\n\
    \    \n    if length(a) == 0 \n        then true\n        else false\n    end\n\
    \    \n    if length(b) == 0 \n        then true\n        else false\n    end\n\
    \    \n    if length(a) == 1 \n        then true\n        else false\n    end\n\
    \    \n    if length(b) == 1 \n        then true\n        else false\n    end\n\
    \    \n    if length(a) == length(b) \n        then true\n        else false\n\
    \    end\n    \n    if length(a) == 0 \n        then true\n        else false\n\
    \    end\n    \n    if length(b) == 0 \n        then true\n        else false\n\
    \    end\n    \n    if length(a) == 1 \n        then true\n        else false\n\
    \    end\n    \n    if length(b) == 1 \n        then true\n        else false\n\
    \    end\n    \n    if length(a) == length(b) \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == 0 \n        then true\n        else\
    \ false\n    end\n    \n    if length(b) == 0 \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == 1 \n        then true\n        else\
    \ false\n    end\n    \n    if length(b) == 1 \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == length(b) \n        then true\n  \
    \      else false\n    end\n    \n    if length(a) == 0 \n        then true\n\
    \        else false\n    end\n    \n    if length(b) == 0 \n        then true\n\
    \        else false\n    end\n    \n    if length(a) == 1 \n        then true\n\
    \        else false\n    end\n    \n    if length(b) == 1 \n        then true\n\
    \        else false\n    end\n    \n    if length(a) == length(b) \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == 0 \n        then\
    \ true\n        else false\n    end\n    \n    if length(b) == 0 \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == 1 \n        then\
    \ true\n        else false\n    end\n    \n    if length(b) == 1 \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == length(b) \n  \
    \      then true\n        else false\n    end\n    \n    if length(a) == 0 \n\
    \        then true\n        else false\n    end\n    \n    if length(b) == 0 \n\
    \        then true\n        else false\n    end\n    \n    if length(a) == 1 \n\
    \        then true\n        else false\n    end\n    \n    if length(b) == 1 ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false \n    else \n        local a1 = substring(a,\
    \ 1, length(a))\n        local b1 = substring(b, 1, length(b))\n        if a1\
    \ == b1 \n            return true \n        else \n            if a1 ~= \"\" \n\
    \                or b1 ~= \"\" \n                or cycpattern_check(a1, b1) \n\
    \                or cycpattern_check(a1, substring(b, 1, length(a))) \n      \
    \          or cycpattern_check(substring(a, 1, length(a)), substring(b, 1, length(b)))\
    \ \n                or cycpattern_check(substring(a, 1, length(a)), a1) \n   \
    \             or cycpattern_check(substring(b, 1, length(b)), a1) \n         \
    \       or cycpattern_check(substring(b, 1, length(b)), substring(a, 1, length(a)))\
    \ \n                or cycpattern_check(substring(a, 1, length(a)), substring(b,\
    \ 1, length(b))) \n                or cycpattern_check(substring(a, 1, length(a)),\
    \ substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(b,\
    \ 1, length(b)), substring(a, 1, length(a))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(b,\
    \ 1, length(b)), substring(a, 1, length(a))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(b,\
    \ 1, length(b)), substring(a, 1, length(a))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(b,\
    \ 1, length(b)), substring(a, 1, length(a))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring(a,\
    \ 1, length(a)), substring(b, 1, length(b))) \n                or cycpattern_check(substring",
  "    if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        cycpattern_check(b,a)\n    end\nend\n</code>\n<|/ a tags=string,julia,pattern-matching\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to avoid the\
    \ recursion. Maybe by using a stack?\n<|/ c |>\n<| c |>\nYes, you can use a stack\
    \ to avoid recursion. I'll post an example in a minute.\n<|/ c |>\n<| c |>\nI\
    \ added an example using a stack. Hope it helps.\n<|/ c |>\n<| c |>\nThanks, I\
    \ appreciate it!\n<|/ c |>\n<| a tags=string,julia,pattern-matching |>\nHere's\
    \ a solution that uses no recursion:\n<code>", "    \n    \n    if length(a) ==\
    \ length(b) \n        \n        if a == b\n            true\n        else\n  \
    \          false\n    \n    else\n        false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return true\n    else if length(a) == 1 \n   \
    \     return (b in a)\n    else if length(b) == 1 \n        return (b in a)\n\
    \    else \n        return (cycpattern_check(a[1:], b[1:]) or cycpattern_check(a[1:],\
    \ b[1:][1:]))\nend", "    \n    if length(a) == length(b) \n        then true\n\
    \        else false\n    else if length(a) > length(b) \n        then false\n\
    \        else if length(a) == 0 \n            then true\n            else if length(b)\
    \ == 0 \n                then true\n                else if contains(a, b)\n \
    \                   then true\n                    else false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    if length(a) == length(b) \n        \n\
    \        if a == b\n            true\n        else\n            false\n    \n\
    \    else\n        false\nend\n</cell>\n<code language=julia-1.5>", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else if length(a) == 1 \n\
    \        return b == a \n    else if length(b) == 1 \n        return a == b \n\
    \    else \n        return b[end-1] == a[end-1] && cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) \nend", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    else \n        return (cycpattern_check(a[1:], b[1:]))\n    end\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Could you please\
    \ explain how you did it? I tried to understand it but I'm still a beginner at\
    \ Julia and I don't understand it very well.\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope that helps.\n<|/ c |>\n<| c |>\nThank you so much!\
    \ It really helped me a lot!\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Hope that helps.\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope\
    \ that helps.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a recursive function which\
    \ checks if a substring is a substring of another string. \n<code>", "    if length(a)\
    \ == 0 || length(b) == 0 \n        true\n    else\n        if b[length(b)-1] ==\
    \ a[1]\n            cycpattern_check(a[1:length(a)-1], b)\n        else\n    \
    \        cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n        end\n \
    \   end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    else if length(a) == 1 \n\
    \        return true\n    else if length(b) == 1 \n        return true\n    else\
    \ if length(a) == length(b) \n        return true\n    else if length(a) > length(b)\
    \ \n        return false\n    else if length(a) < length(b) \n        return false\n\
    \    else if contains(b, a) \n        return true\n    else if contains(b, substring(a,\
    \ length(a))) \n        return true\n    else if contains(substring(a, length(a)),\
    \ b) \n        return true\n    else if contains(substring(a, length(a)), substring(b,\
    \ length(b))) \n        return true\n    else if contains(substring(a, length(a)),\
    \ substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    ", "    if length(a)\
    \ == length(b) \n        then true\n        else false\n    else \n        cycpattern_check(cycpattern_check(a[1:],\
    \ b), b[1:])\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to avoid the recursion and use only loops.\n<|/ c |>\n<| c\
    \ |>\nI added a solution without recursion.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without recursion.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    if length(a)\
    \ == length(b) \n        then true\n        else false\n    else \n        if\
    \ length(a) > length(b) \n            then false\n            else if length(a)\
    \ == 0 \n                then true\n                else if length(b) == 0 \n\
    \                    then true\n                    else if length(a) == 1 \n\
    \                        then if contains(b, a)\n                            then\
    \ true\n                            else false\n                        else if\
    \ contains(b, a[1:end-1])\n                            then true\n           \
    \                 else false\n                        else if contains(b, a[1:end])\n\
    \                            then true\n                            else false\n\
    \                        else if contains(b, a[1:end+1])\n                   \
    \         then true\n                            else false\n                \
    \        else if contains(b, a[1:end-1])\n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])\n                            then true\n                         \
    \   else false\n                        else if contains(b, a[1:end+1])\n    \
    \                        then true\n                            else false\n \
    \                       else if contains(b, a[1:end-1])\n                    \
    \        then true\n                            else false\n                 \
    \       else if contains(b, a[1:end])\n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end+1])\n                            then true\n                       \
    \     else false\n                        else if contains(b, a[1:end-1])\n  \
    \                          then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end+1])\n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end-1])\n                            then true\n                       \
    \     else false\n                        else if contains(b, a[1:end])\n    \
    \                        then true\n                            else false\n \
    \                       else if contains(b, a[1:end+1])\n                    \
    \        then true\n                            else false\n                 \
    \       else if contains(b, a[1:end-1])\n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end])\n                            then true\n                         \
    \   else false\n                        else if contains(b, a[1:end+1])\n    \
    \                        then true\n                            else false\n \
    \                       else if contains(b, a[1:end-1])\n                    \
    \        then true\n                            else false\n                 \
    \       else if contains(b, a[1:end])\n                            then true\n\
    \                            else false\n                        else if contains(b,\
    \ a[1:end+1])\n                            then true\n                       \
    \     else false\n                        else if contains(b, a[1:end-1])\n  \
    \                          then true\n                            else false\n\
    \                        else if contains(b, a[1:end])\n                     \
    \       then true\n                            else false\n                  \
    \      else if contains(b, a[1:end+1])\n                            then true",
  "    \n    if length(a) == length(b) \n        \n        if length(a) == 0 \n  \
    \          return true\n        \n        if length(b) == 0 \n            return\
    \ false\n        \n        if length(a) == 1 \n            return true\n     \
    \   \n        if length(b) == 1 \n            return false\n        \n       \
    \ if a[0] == b[0] \n            return cycpattern_check(a[1:], b[1:])\n      \
    \  \n        if a[0] == b[-1] \n            return cycpattern_check(a[1:], b[:-1])\n\
    \        \n        if a[-1] == b[0] \n            return cycpattern_check(a[:-1],\
    \ b[1:])\n        \n        if a[-1] == b[-1] \n            return cycpattern_check(a[:-1],\
    \ b[:-1])\n        \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[2:])\n        \n        if a[1] == b[-2] \n            return cycpattern_check(a[2:],\
    \ b[:-2])\n        \n        if a[-2] == b[1] \n            return cycpattern_check(a[:2],\
    \ b[2:])\n        \n        if a[-2] == b[-2] \n            return cycpattern_check(a[:2],\
    \ b[:-2])\n        \n        if a[-3] == b[-3] \n            return cycpattern_check(a[:-3],\
    \ b[:-3])\n        \n        if a[-3] == b[-1] \n            return cycpattern_check(a[:-3],\
    \ b[:-1])\n        \n        if a[-1] == b[-3] \n            return cycpattern_check(a[:-1],\
    \ b[:-3])\n        \n        if a[-1] == b[-1] \n            return cycpattern_check(a[:-1],\
    \ b[:-1])\n        \n        if a[-4] == b[-4] \n            return cycpattern_check(a[:-4],\
    \ b[:-4])\n        \n        if a[-4] == b[-3] \n            return cycpattern_check(a[:-4],\
    \ b[:-3])\n        \n        if a[-4] == b[-2] \n            return cycpattern_check(a[:-4],\
    \ b[:-2])\n        \n        if a[-4] == b[-1] \n            return cycpattern_check(a[:-4],\
    \ b[:-1])\n        \n        if a[-5] == b[-5] \n            return cycpattern_check(a[:-5],\
    \ b[:-5])\n        \n        if a[-5] == b[-4] \n            return cycpattern_check(a[:-5],\
    \ b[:-4])\n        \n        if a[-5] == b[-3] \n            return cycpattern_check(a[:-5],\
    \ b[:-3])\n        \n        if a[-5] == b[-2] \n            return cycpattern_check(a[:-5],\
    \ b", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(a) == 2 \n        return true\n    \n    if length(a) == 3 \n \
    \       return true\n    \n    if length(a) == 4 \n        return true\n    \n\
    \    if length(a) == 5 \n        return true\n    \n    if length(a) == 6 \n \
    \       return true\n    \n    if length(a) == 7 \n        return true\n    \n\
    \    if length(a) == 8 \n        return true\n    \n    if length(a) == 9 \n \
    \       return true\n    \n    if length(a) == 10 \n        return true\n    \n\
    \    if length(a) == 11 \n        return true\n    \n    if length(a) == 12 \n\
    \        return true\n    \n    if length(a) == 13 \n        return true\n   \
    \ \n    if length(a) == 14 \n        return true\n    \n    if length(a) == 15\
    \ \n        return true\n    \n    if length(a) == 16 \n        return true\n\
    \    \n    if length(a) == 17 \n        return true\n    \n    if length(a) ==\
    \ 18 \n        return true\n    \n    if length(a) == 19 \n        return true\n\
    \    \n    if length(a) == 20 \n        return true\n    \n    if length(a) ==\
    \ 21 \n        return true\n    \n    if length(a) == 22 \n        return true\n\
    \    \n    if length(a) == 23 \n        return true\n    \n    if length(a) ==\
    \ 24 \n        return true\n    \n    if length(a) == 25 \n        return true\n\
    \    \n    if length(a) == 26 \n        return true\n    \n    if length(a) ==\
    \ 27 \n        return true\n    \n    if length(a) == 28 \n        return true\n\
    \    \n    if length(a) == 29 \n        return true\n    \n    if length(a) ==\
    \ 30 \n        return true\n    \n    if length(a) == 31 \n        return true\n\
    \    \n    if length(a) == 32 \n        return true\n    \n    if length(a) ==\
    \ 33 \n        return true\n    \n    if length(a) == 34 \n        return true\n\
    \    \n    if length(a) == 35 \n        return true\n    \n    if length(a) ==\
    \ 36 \n        return true\n    \n    if length(a) == 37 \n        return true\n\
    \    \n    if length(a) == 38 \n        return true\n    \n    if length(a) ==\
    \ 39 \n        return true\n    \n    if length(a) == 40 \n        return true\n\
    \    \n    if length(a) == 41 \n        return true\n    \n    if ", "    if length(a)\
    \ == length(b) \n    then \n        true\n    else \n        false\n    end\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\nHere's a\
    \ solution using regular expressions:\n<code>\njulia> function cycpattern_check(a::String,\
    \ b::String)\n           return ismatch($a, $b)\n       end\ncycpattern_check\
    \ (generic function with 1 method)", "    if length(a) == length(b) \n       \
    \ return true\n    else \n        return false\n    end\nend", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        local i::Int\
    \ = 0 \n        local j::Int = 0 \n        local k::Int = 0 \n        local l::Int\
    \ = 0 \n        local m::Int = 0 \n        local n::Int = 0 \n        local o::Int\
    \ = 0 \n        local p::Int = 0 \n        local q::Int = 0 \n        local r::Int\
    \ = 0 \n        local s::Int = 0 \n        local t::Int = 0 \n        local u::Int\
    \ = 0 \n        local v::Int = 0 \n        local w::Int = 0 \n        local x::Int\
    \ = 0 \n        local y::Int = 0 \n        local z::Int = 0 \n        local a1::Int\
    \ = 0 \n        local a2::Int = 0 \n        local a3::Int = 0 \n        local\
    \ a4::Int = 0 \n        local a5::Int = 0 \n        local a6::Int = 0 \n     \
    \   local a7::Int = 0 \n        local a8::Int = 0 \n        local a9::Int = 0\
    \ \n        local a10::Int = 0 \n        local a11::Int = 0 \n        local a12::Int\
    \ = 0 \n        local a13::Int = 0 \n        local a14::Int = 0 \n        local\
    \ a15::Int = 0 \n        local a16::Int = 0 \n        local a17::Int = 0 \n  \
    \      local a18::Int = 0 \n        local a19::Int = 0 \n        local a20::Int\
    \ = 0 \n        local a21::Int = 0 \n        local a22::Int = 0 \n        local\
    \ a23::Int = 0 \n        local a24::Int = 0 \n        local a25::Int = 0 \n  \
    \      local a26::Int = 0 \n        local a27::Int = 0 \n        local a28::Int\
    \ = 0 \n        local a29::Int = 0 \n        local a30::Int = 0 \n        local\
    \ a31::Int = 0 \n        local a32::Int = 0 \n        local a33::Int = 0 \n  \
    \      local a34::Int = 0 \n        local a35::Int = 0 \n        local a36::Int\
    \ = 0 \n        local a37::Int = 0 \n        local a38::Int = 0 \n        local\
    \ a39::Int = 0 \n        local a40::Int = 0 \n        local a41::Int = 0 \n  \
    \      local a42::Int = 0 \n        local a43::Int = 0 \n        local a44::Int\
    \ = 0 \n        local a45::Int = 0 \n        local a46::Int = 0 \n        local\
    \ a47::Int = 0 \n        local a48::", "    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false \n    else \n        local a1 = substring(a, 1, length(a))\n\
    \        local b1 = substring(b, 1, length(b))\n        if a1 == b1 \n       \
    \     return true \n        else \n            return cycpattern_check(a1, b1)\
    \ \n        end\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    \n    \n    if length(a) == length(b) \n        \n        if a ==\
    \ b \n            true\n        else \n            false\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false \n    else \n        return (cycpattern_check(a[1:],\
    \ b) or cycpattern_check(a[1:], b[1:]))\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if length(a) == 0 || length(b)\
    \ == 0 \n        then return false\n    else \n        if length(a) == length(b)\
    \ \n            then return true\n        else \n            if length(a) > length(b)\
    \ \n                then return false\n            else \n                let\
    \ x = substring(a,1,length(a))\n                let y = substring(b,1,length(b))\n\
    \                if x == y \n                    then return true\n          \
    \      else \n                    let z = substring(a,length(a),length(a))\n \
    \                   let w = substring(b,length(b),length(b))\n               \
    \     if z == w \n                        then return true\n                 \
    \   else \n                        let z = substring(a,length(a),length(a))\n\
    \                        let w = substring(b,length(b),length(b))\n          \
    \              if z == w \n                            then return true\n    \
    \                    else \n                            let z = substring(a,length(a),length(a))\n\
    \                            let w = substring(b,length(b),length(b))\n      \
    \                      if z == w \n                                then return\
    \ true\n                            else \n                                let\
    \ z = substring(a,length(a),length(a))\n                                let w\
    \ = substring(b,length(b),length(b))\n                                if z ==\
    \ w \n                                    then return true\n                 \
    \               else \n                                    let z = substring(a,length(a),length(a))\n\
    \                                    let w = substring(b,length(b),length(b))\n\
    \                                    if z == w \n                            \
    \            then return true\n                                    else \n   \
    \                                     let z = substring(a,length(a),length(a))\n\
    \                                        let w = substring(b,length(b),length(b))\n\
    \                                        if z == w \n                        \
    \                    then return true\n                                      \
    \  else \n                                            let z = substring(a,length(a),length(a))\n\
    \                                            let w = substring(b,length(b),length(b))\n\
    \                                            if z == w \n                    \
    \                            then return true\n                              \
    \              else \n                                                let z =\
    \ substring(a,length(a),length(a))\n                                         \
    \       let w = substring(b,length(b),length(b))\n                           \
    \                     if z == w \n                                           \
    \         then return true\n                                                else\
    \ \n                                                    let z = substring(a,length(a),length(a))\n\
    \                                                    let w = substring(b,length(b),length(b))\n\
    \                                                    if z == w \n            \
    \                                            then return true\n              \
    \                                      else \n                               \
    \                         let z = substring(a,length(a),length(a))\n         \
    \                                               let w = substring(b,length(b),length(b))\n\
    \                                                        if z == w \n        \
    \                                                    then return true\n      \
    \                                                  else \n                   \
    \                                         let z = substring(a,length(a),length(a))\n\
    \                                                            let w = substring(b,length(b),length(b))\n\
    \                                                                if z == w \n\
    \                                                                    then return\
    \ true\n                                                                else \n\
    \                                                                    let z = substring(a,length(a),length(a))\n\
    \                                                                    let w = substring",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else if length(a)\
    \ == 1 \n        return b == a \n    else if length(b) == 1 \n        return a\
    \ == b \n    else if b == substring(a,1,length(b)) \n        return cycpattern_check(a,substring(a,2,length(a)))\
    \ \n    else \n        return cycpattern_check(a,substring(a,1,length(a))) ||\
    \ cycpattern_check(a,substring(a,length(a),length(a))) \nend\n</code>\n<|/ a tags=string,julia,pattern-matching\
    \ |>\n<| c |>\nThis doesn't work for `cycpattern_check(\"ab\", \"ab\")` which\
    \ returns `true`\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the\
    \ code so that it now works.\n<|/ c |>\n<| a |>\nI wrote a package for Julia called\
    \ SubstringMatch that does exactly this. It also has a lot of other useful string\
    \ manipulation functions. \n<code>\njulia> using SubstringMatch", "    if length(a)\
    \ == 0 || length(b) == 0 \n        then return false \n    else \n        if length(a)\
    \ == 1 \n            then return b == a \n        else \n            if length(b)\
    \ == 1 \n                then return b == a || b == rot13(a) \n            else\
    \ \n                let c = b[1:length(b)]\n                let d = a[1:length(a)]\n\
    \                let e = rot13(b[1:length(b)])\n                let f = rot13(a[1:length(a)])\n\
    \                return cycpattern_check(d,c) && cycpattern_check(f,e)\n     \
    \   end\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia,pattern-matching\
    \ |>\nI wrote a package for Julia that does this kind of pattern matching called\
    \ Match.jl\n<code>\njulia> using Match", "    if length(a) == length(b) \n   \
    \     then true\n        else false\n    end\nend\n</code>\n<|/ a |>\n<| a tags=string,julia\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == 0 || length(b) == 0 \n        return false \n    else \n \
    \       local a1 = substring(a,1,1)\n        local a2 = substring(a,2,2)\n   \
    \     local b1 = substring(b,1,1)\n        local b2 = substring(b,2,2)\n     \
    \   if a1 == b1 && a2 == b2 \n            return true \n        else \n      \
    \      return cycpattern_check(a1,b1) or cycpattern_check(a2,b2) \n        end\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if the second\
    \ word is longer than the first word\n<|/ c |>\n<| c |>\nI added a solution that\
    \ should work for any length of words. I tested it and it works.\n<|/ c |>\n<|\
    \ a |>\n<code>", "    if length(a) == length(b) \n        then true\n        else\
    \ false\n    else false\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == length(b) \n    then \n        true\n    else\n        false\n\
    \    end\nend", "    \n    if length(a) == length(b) \n        \n        if a\
    \ == b \n            return true\n        \n        else \n            return\
    \ false\n    \n    else \n        return false\nend", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false \n    else \n        if length(a) == 1\
    \ \n            return b == a \n        else \n            if length(b) == 1 \n\
    \                return b == a || b == reverse(a) \n            else \n      \
    \          if b == reverse(a) || b == reverse(reverse(a)) \n                 \
    \   return true \n                else \n                    return false \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      return (a[1] == b) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end])\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia,pattern-matching\
    \ |>\nI wrote a package that does this in Julia. \nhttps://github.com/jgm/StringMatching.jl\n\
    <code>\njulia> using StringMatching", "    \n    \n    if length(a) == length(b)\
    \ \n        \n        if length(a) == 0 \n            return true\n        \n\
    \        if length(b) == 0 \n            return true\n        \n        if a[1]\
    \ == b[1] \n            return cycpattern_check(a[2:], b[2:])\n        \n    \
    \    if a[1] == b[2] \n            return cycpattern_check(a[2:], b[3:])\n   \
    \     \n        if a[1] == b[3] \n            return cycpattern_check(a[2:], b[4:])\n\
    \        \n        if a[2] == b[2] \n            return cycpattern_check(a[3:],\
    \ b[3:])\n        \n        if a[2] == b[3] \n            return cycpattern_check(a[3:],\
    \ b[4:])\n        \n        if a[3] == b[3] \n            return cycpattern_check(a[4:],\
    \ b[4:])\n        \n        if a[3] == b[2] \n            return cycpattern_check(a[4:],\
    \ b[3:])\n        \n        if a[3] == b[1] \n            return cycpattern_check(a[4:],\
    \ b[2:])\n        \n        if a[3] == b[0] \n            return cycpattern_check(a[4:],\
    \ b[1:])\n        \n        if a[0] == b[0] \n            return cycpattern_check(a[1:],\
    \ b[1:])\n        \n        if a[0] == b[1] \n            return cycpattern_check(a[1:],\
    \ b[2:])\n        \n        if a[0] == b[2] \n            return cycpattern_check(a[1:],\
    \ b[3:])\n        \n        if a[0] == b[3] \n            return cycpattern_check(a[1:],\
    \ b[4:])\n        \n        if a[1] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[2:])\n        \n        if a[1] == b[2] \n            return cycpattern_check(a[2:],\
    \ b[3:])\n        \n        if a[1] == b[3] \n            return cycpattern_check(a[2:],\
    \ b[4:])\n        \n        if a[2] == b[2] \n            return cycpattern_check(a[3:],\
    \ b[3:])\n        \n        if a[2] == b[3] \n            return cycpattern_check(a[3:],\
    \ b[4:])\n        \n        if a[3] == b[3] \n            return cycpattern_check(a[4:],\
    \ b[4:])\n        \n        if a[3] == b[2] \n            return cycpattern_check(a[4:],\
    \ b[3:])\n        \n        if a[3] == b[1] \n            return cycpattern_check(a[4:],\
    \ b[2:])\n        \n        if a[3] == b[0] \n            return cycpattern_check(a[4:],\
    \ b[1:])\n        \n        if a[0] == b[0] \n            return cycpattern_check(a[1:],\
    \ b[1:])\n        \n        if a[0] == b[1] \n            return cy", "    if\
    \ length(a) == 0 || length(b) == 0 \n        return false\n    else if length(a)\
    \ == 1 \n        return true\n    else if length(b) == 1 \n        return true\n\
    \    else if length(a) == length(b) \n        return true\n    else if length(a)\
    \ > length(b) \n        return false\n    else \n        local a1 = substring(a,1,length(a)-1)\n\
    \        local b1 = substring(b,1,length(b)-1)\n        local a2 = substring(a,length(a),length(a))\n\
    \        local b2 = substring(b,length(b),length(b))\n        local a3 = substring(a,1,length(a)-1)\n\
    \        local b3 = substring(b,1,length(b)-1)\n        local a4 = substring(a,length(a),length(a))\n\
    \        local b4 = substring(b,length(b),length(b))\n        local a5 = substring(a,1,length(a)-1)\n\
    \        local b5 = substring(b,1,length(b)-1)\n        local a6 = substring(a,length(a),length(a))\n\
    \        local b6 = substring(b,length(b),length(b))\n        local a7 = substring(a,1,length(a)-1)\n\
    \        local b7 = substring(b,1,length(b)-1)\n        local a8 = substring(a,length(a),length(a))\n\
    \        local b8 = substring(b,length(b),length(b))\n        local a9 = substring(a,1,length(a)-1)\n\
    \        local b9 = substring(b,1,length(b)-1)\n        local a10 = substring(a,length(a),length(a))\n\
    \        local b10 = substring(b,length(b),length(b))\n        local a11 = substring(a,1,length(a)-1)\n\
    \        local b11 = substring(b,1,length(b)-1)\n        local a12 = substring(a,length(a),length(a))\n\
    \        local b12 = substring(b,length(b),length(b))\n        local a13 = substring(a,1,length(a)-1)\n\
    \        local b13 = substring(b,1,length(b)-1)\n        local a14 = substring(a,length(a),length(a))\n\
    \        local b14 = substring(b,length(b),length(b))\n        local a15 = substring(a,1,length(a)-1)\n\
    \        local b15 = substring(b,1,length(b)-1)\n        local a16 = substring(a,length(a),length(a))\n\
    \        local b16 = substring(b,length(b),length(b))\n        local a17 = substring(a,1,length(a)-1)\n\
    \        local b17 = substring(b,1,length(b)-1)\n        local a18 = substring(a,length(a),length(a))\n\
    \        local b18 = substring(b,length", "    \n    \n    if length(a) == length(b)\
    \ \n        \n        if a == b\n            return true\n        else\n     \
    \       return false\n    \n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"whassup\", \"psus\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abab\", \"baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    efef\", \"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\"\
    , \"simen\")\n</cell>\n<code language=julia-1.5>", "    \n    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false", "    \n    if length(a) == length(b) \n \
    \       then true\n        else false\n    else \n        cycpattern_check(cycpattern_rotate_left(a,length(a)),cycpattern_rotate_right(b,length(b)))\n\
    end", "    if length(a) == length(b) \n    then \n        true\n    else \n  \
    \      false\n    end\nend", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if a == b\n            return true\n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        ",
  "    \n    if length(a) == length(b) \n        then true\n        else false\n \
    \   end\n    \n    if length(a) == 0 \n        then true\n        else false\n\
    \    end\n    \n    if length(b) == 0 \n        then true\n        else false\n\
    \    end\n    \n    if length(a) == 1 \n        then true\n        else false\n\
    \    end\n    \n    if length(b) == 1 \n        then true\n        else false\n\
    \    end\n    \n    if length(a) == length(b) \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == 0 \n        then true\n        else\
    \ false\n    end\n    \n    if length(b) == 0 \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == 1 \n        then true\n        else\
    \ false\n    end\n    \n    if length(b) == 1 \n        then true\n        else\
    \ false\n    end\n    \n    if length(a) == length(b) \n        then true\n  \
    \      else false\n    end\n    \n    if length(a) == 0 \n        then true\n\
    \        else false\n    end\n    \n    if length(b) == 0 \n        then true\n\
    \        else false\n    end\n    \n    if length(a) == 1 \n        then true\n\
    \        else false\n    end\n    \n    if length(b) == 1 \n        then true\n\
    \        else false\n    end\n    \n    if length(a) == length(b) \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == 0 \n        then\
    \ true\n        else false\n    end\n    \n    if length(b) == 0 \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == 1 \n        then\
    \ true\n        else false\n    end\n    \n    if length(b) == 1 \n        then\
    \ true\n        else false\n    end\n    \n    if length(a) == length(b) \n  \
    \      then true\n        else false\n    end\n    \n    if length(a) == 0 \n\
    \        then true\n        else false\n    end\n    \n    if length(b) == 0 \n\
    \        then true\n        else false\n    end\n    \n    if length(a) == 1 \n\
    \        then true\n        else false\n    end\n    \n    if length(b) == 1 \n\
    \        then true\n        else false\n    end\n    \n    if length(a) == length(b)\
    \ \n        then true\n        else false\n    end\n    \n    if length(a) ==\
    \ 0 \n        then true\n        else false\n    end\n    \n    if length(b) ==\
    \ 0 \n        then true\n        else false\n    end\n    \n    if length(a) ==\
    \ 1 \n        then true\n        else false\n    end\n    \n    if length(b) ==\
    \ 1 ", "    \n    \n    if length(a) == length(b) \n        \n        if a ==\
    \ b\n            return true\n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return ", "    if length(a) == 0 || length(b) == 0 \n       \
    \ return true\n    else if length(a) == 1 \n        return b == a || b == reverse(split(a)[1])\n\
    \    else if length(b) == 1 \n        return a == b || a == reverse(split(b)[1])\n\
    \    else \n        return b == split(a)[1] || a == split(b)[1]\nend\n</code>\n\
    <|/ a tags=string,julia |>\n<| c |>\nThis does not work if `a` is longer than\
    \ `b`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| a |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false \n    else \n        if length(a)\
    \ == 1 \n            return b == a \n        else \n            if length(b) ==\
    \ 1 \n                return b == a || b == reverse(a ++ b)\n            else\
    \ \n                return b == a || b == reverse(a ++ b)\n        end\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia |>\nI wrote a package\
    \ for string manipulation that can do all sorts of string manipulations. I believe\
    \ it can do what you need. \nhttps://github.com/jamiewu/StringManipulation\n<code>\n\
    julia> using StringManipulation", "    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false", "    if length(a) == 0 || length(b) == 0 \n     \
    \   then return false\n    else if length(a) == 1 \n        then return b == a\
    \ || b == reverse(a)\n    else if length(b) == 1 \n        then return a == b\
    \ || a == reverse(b)\n    else if length(a) == length(b) \n        then return\
    \ true\n    else if length(a) > length(b) \n        then return false\n    else\
    \ if length(a) < length(b) \n        then return true\n    else if b == reverse(a)\
    \ \n        then return true\n    else if a == reverse(b) \n        then return\
    \ true\n    else if b == reverse(reverse(a)) \n        then return true\n    else\
    \ if a == reverse(reverse(b)) \n        then return true\n    else if b == reverse(reverse(reverse(a)))\
    \ \n        then return true\n    else if a == reverse(reverse(reverse(b))) \n\
    \        then return true\n    else if b == reverse(reverse(reverse(reverse(a))))\
    \ \n        then return true\n    else if a == reverse(reverse(reverse(reverse(b))))\
    \ \n        then return true\n    else if b == reverse(reverse(reverse(reverse(reverse(a)))))\
    \ \n        then return true\n    else if a == reverse(reverse(reverse(reverse(reverse(b)))))\
    \ \n        then return true\n    else if b == reverse(reverse(reverse(reverse(reverse(reverse(a))))))\n\
    \        then return true\n    else return false\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using recursion.\n<|/ c |>\n<| c |>\nI added a version that does not use recursion.\n\
    <|/ c |>\n<| c |>\nThanks for the edit. I'm still trying to wrap my head around\
    \ this solution, but I like it.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a recursive\
    \ solution that is O(n^2) in time and O(n) in space. \n<code>", "    if length(a)\
    \ == 0 || length(b) == 0 \n        true \n    else \n        if b[length(b)-1]\
    \ == a[length(a)-1] \n            cycpattern_check(a[1:length(a)-1], b)\n    \
    \    else \n            cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n\
    \    end\nend\n</code>\n<|/ a tags=recursion,julia |>\n<| c |>\nI like your solution,\
    \ but I wonder how it compares to other solutions posted so far.\n<|/ c |>\n<|\
    \ c |>\nI haven't compared them yet, but I believe that my solution is more efficient\
    \ than others. I believe that my solution is also more elegant than others. I\
    \ believe that my solution is more readable than others. I believe that my solution\
    \ is more efficient than others. I believe that my solution is more readable than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more readable than others. I believe that my solution is\
    \ more efficient than others. I believe that my solution is more efficient than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more efficient than others. I believe that my solution is\
    \ more efficient than others. I believe that my solution is more efficient than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more efficient than others. I believe that my solution is\
    \ more efficient than others. I believe that my solution is more efficient than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more efficient than others. I believe that my solution is\
    \ more efficient than others. I believe that my solution is more efficient than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more efficient than others. I believe that my solution is\
    \ more efficient than others. I believe that my solution is more efficient than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more efficient than others. I believe that my solution is\
    \ more efficient than others. I believe that my solution is more efficient than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more efficient than others. I believe that my solution is\
    \ more efficient than others. I believe that my solution is more efficient than\
    \ others. I believe that my solution is more efficient than others. I believe\
    \ that my solution is more efficient than others. I believe that my solution is ",
  "    \n    if length(a) == length(b) \n    then \n        true\n    else \n    \
    \    false\n    end\nend", "    if length(a) == 0 || length(b) == 0 \n       \
    \ return false \n    else \n        local i = 1 \n        local j = 0 \n     \
    \   local k = 0 \n        local l = 0 \n        local m = length(a) \n       \
    \ local n = length(b) \n        while i < m and j < n \n            do \n    \
    \            if a[i] == b[j] \n                    then \n                   \
    \     i = i + 1 \n                        j = j + 1 \n                else \n\
    \                    k = k \n                    l = l \n                end \n\
    \            end \n            if k == l \n                then \n           \
    \         return true \n                else \n                    i = i + 1 \n\
    \                    j = j + 1 \n                end \n            end \n    \
    \    return false \n    end \nend \n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't seem to work. `cycpattern_check(\"hello\", \"ell\")` returns true.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>", "    if length(a) == length(b) \n        return true\n\
    \    else \n        return false\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I edited my question to make it clearer.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that does not use any external libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I edited my question to make it clearer.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that does not use any external libraries.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use any external\
    \ libraries. I edited my question to make it clearer.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere is a solution using regular expressions:\n<code>\njulia> function cycpattern_check(a::String,\
    \ b::String)\n           return (a =~ Regex(\"($b)|($b$a)|($b$a$a)|($a$b)|($a$b$a)|($a$b$a$a)\"\
    ) && a != b)\n       end\ncycpattern_check (generic function with 1 method)",
  "    \n    \n    if length(a) == length(b) \n        \n        if a == b \n    \
    \        return true\n        \n        else \n            return false\n    \n\
    \    else \n        \n        if length(a) > length(b) \n            \n      \
    \      if contains(b, a) \n                return true\n            else \n  \
    \              return false\n        \n        else \n            \n         \
    \   if contains(a, b) \n                return true\n            else \n     \
    \           return false\n            \nend\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    hello\", \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\"\
    , \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nCyclic Patterns", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ true\n    else if length(a) == 1 \n        return b == a\n    else if length(b)\
    \ == 1 \n        return a == b\n    else \n        return b == a || b == rot13(a)\
    \ || b == rot13(rot13(a))\nend", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == 0 || length(b) == 0 \n        return false\n    else \n  \
    \      if b == a \n            return true\n        else \n            if b[length(b)-1]\
    \ == a[length(a)-1] \n                return cycpattern_check(a[1:length(a)-1],\
    \ b)\n            else \n                return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,pattern-matching\
    \ |>\n<code>", "    if length(a) == length(b) \n        return true\n    else\
    \ \n        return false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `cycpattern_check(\"hello\", \"ell\")`.\n<|/ c\
    \ |>\n<| c |>\nI edited my answer to include a solution that works with any string\
    \ length\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that works\
    \ with any string length\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that works with any string length\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  \
    \  if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        if length(a) > length(b) \n            then false\n            else\
    \ if length(a) < length(b) \n                then true\n                else if\
    \ contains(b, a)\n                    then true\n                    else false\n\
    \    end \nend \n</code>\n<|/ a |>\n<| a tags=string,pattern-matching,haskell,algorithm\
    \ |>\n<code>\nimport Data.List", "    if length(a) == length(b) \n    then return\
    \ true\n    else return false\n    end \nend \n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=string,pattern-matching,haskell,substring |>\n<code>\nimport Data.List\n\
    import Data.Maybe", "    if length(a) == length(b) \n        then true\n     \
    \   else false\n    else \n        cycpattern_check(a[1:length(a)], b[1:length(b)])\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a string like \"\
    aba\" where it returns true instead of false\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"aba\" where it returns true instead of false\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a string like \"aba\" where it\
    \ returns true instead of false\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ a string like \"aba\" where it returns true instead of false\n<|/ c |>\n<| a\
    \ tags=string,julia,pattern-matching |>\n<code>", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    if length(a) == length(b) \n\
    \        \n        if length(a) == 0 \n            return true\n        \n   \
    \     if length(b) == 0 \n            return false\n        \n        if a[1]\
    \ == b[1] \n            return cycpattern_check(a[2:], b[2:])\n        \n    \
    \    if a[1] == b[2] \n            return cycpattern_check(a[2:], b[3:])\n   \
    \     \n        if a[2] == b[1] \n            return cycpattern_check(a[3:], b[2:])\n\
    \        \n        if a[2] == b[2] \n            return cycpattern_check(a[3:],\
    \ b[3:])\n        \n        if a[3] == b[1] \n            return cycpattern_check(a[2:],\
    \ b[3:])\n        \n        if a[3] == b[2] \n            return cycpattern_check(a[2:],\
    \ b[4:])\n        \n        if a[3] == b[3] \n            return cycpattern_check(a[3:],\
    \ b[4:])\n        \n        if a[4] == b[1] \n            return cycpattern_check(a[3:],\
    \ b[4:])\n        \n        if a[4] == b[2] \n            return cycpattern_check(a[3:],\
    \ b[5:])\n        \n        if a[4] == b[3] \n            return cycpattern_check(a[3:],\
    \ b[5:])\n        \n        if a[4] == b[4] \n            return cycpattern_check(a[4:],\
    \ b[5:])\n        \n        if a[4] == b[5] \n            return cycpattern_check(a[4:],\
    \ b[6:])\n        \n        if a[4] == b[6] \n            return cycpattern_check(a[4:],\
    \ b[7:])\n        \n        if a[4] == b[7] \n            return cycpattern_check(a[4:],\
    \ b[8:])\n        \n        if a[4] == b[8] \n            return cycpattern_check(a[4:],\
    \ b[9:])\n        \n        if a[4] == b[9] \n            return cycpattern_check(a[4:],\
    \ b[10:])\n        \n        if a[4] == b[10] \n            return cycpattern_check(a[4:],\
    \ b[11:])\n        \n        if a[4] == b[11] \n            return cycpattern_check(a[4:],\
    \ b[12:])\n        \n        if a[4] == b[12] \n            return cycpattern_check(a[4:],\
    \ b[13:])\n        \n        if a[4] == b[13] \n            return cycpattern_check(a[4:],\
    \ b[14:])\n        \n        if a[4] == b[14] \n            return cycpattern_check(a[4:],\
    \ b[15:])\n        \n        if a[4] == b[15] \n            return cycpattern_check(a[4:],\
    \ b[", "    if length(a) == 0 \n        or length(b) == 0 \n        then return\
    \ true\n    else if length(a) == 1 \n        then return b == a \n    else if\
    \ length(b) == 1 \n        then return b == a \n    else if length(a) == length(b)\
    \ \n        then return true\n    else if length(a) > length(b) \n        then\
    \ return false\n    else if length(a) < length(b) \n        then return true\n\
    \    else if b == substring(a,1,length(a)) \n        then return true\n    else\
    \ if b == substring(a,length(a),length(a)) \n        then return true\n    else\
    \ if b == substring(a,1,length(a)) \n        then return true\n    else if b ==\
    \ substring(a,length(a),length(a)) \n        then return true\n    else if b ==\
    \ substring(a,1,length(a)) \n        then return true\n    else if b == substring(a,length(a),length(a))\
    \ \n        then return true\n    else if b == substring(a,1,length(a)) \n   \
    \     then return true\n    else if b == substring(a,length(a),length(a)) \n \
    \       then return true\n    else if b == substring(a,1,length(a)) \n       \
    \ then return true\n    else if b == substring(a,length(a),length(a)) \n     \
    \   then return true\n    else if b == substring(a,1,length(a)) \n        then\
    \ return true\n    else if b == substring(a,length(a),length(a)) \n        then\
    \ return true\n    else if b == substring(a,1,length(a)) \n        then return\
    \ true\n    else if b == substring(a,length(a),length(a)) \n        then return\
    \ true\n    else if b == substring(a,1,length(a)) \n        then return true\n\
    \    else if b == substring(a,length(a),length(a)) \n        then return true\n\
    \    else if b == substring(a,1,length(a)) \n        then return true\n    else\
    \ if b == substring(a,length(a),length(a)) \n        then return true\n    else\
    \ if b == substring(a,1,length(a)) \n        then return true\n    else if b ==\
    \ substring(a,length(a),length(a)) \n        then return true\n    else if b ==\
    \ substring(a,1,length(a)) \n        then return true\n    else if b == substring(a,length(a),length(a))\
    \ \n        then return true\n    else if b == substring(a,1,length(a)) \n   \
    \     then return true\n    else if b == substring(a,", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return true\n    \n    if length(a) == 1 \n\
    \        return (b in a)\n    \n    if length(b) == 1 \n        return (b in a)\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return true\n    \n    if length(a) == length(b) \n        return (b in\
    \ a)\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return (b in a)\n    \n    if length(a) > length(b) \n        return\
    \ false\n    \n    if length(a) < length(b) \n        return true\n    \n    if\
    \ length(a) == length(b) \n        return (b in a)\n    \n    if length(a) > length(b)\
    \ \n        return false\n    \n    if length(a) < length(b) \n        return\
    \ true\n    \n    if length(a) == length(b) \n        return (b in a)\n    \n\
    \    if length(a) > length(b) \n        return false\n    \n    if length(a) <\
    \ length(b) \n        return true\n    \n    if length(a) == length(b) \n    \
    \    return (b in a)\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return true\n    \n    if length(a)\
    \ == length(b) \n        return (b in a)\n    \n    if length(a) > length(b) \n\
    \        return false\n    \n    if length(a) < length(b) \n        return true\n\
    \    \n    if length(a) == length(b) \n        return (b in a)\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return true\n    \n    if length(a) == length(b) \n        return (b in\
    \ a)\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return (b in a)\n    \n    if length(a) > length(b) \n        return\
    \ false\n    \n    if length(a) < length(b) \n        return true\n    \n    if\
    \ length(a) == length(b) \n        return (b in a)\n    \n    if length(a) > length(b)\
    \ \n        return false\n    \n    if length(a) < length(b) \n        return\
    \ true\n    \n    if length(a) == length(b) \n        return (b in a)\n    \n\
    \    if length(a) > length", "    \n    if length(a) == length(b) \n        \n\
    \        for i in 0 .. length(a) - 1 \n            \n            if a[i] != b[i]\
    \ \n                \n                if a[i] != b[i + length(a) - length(b)]\n\
    \                    \n                    return false\n                \n  \
    \              return true\n            \n        end\n        \n        return\
    \ true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\"\
    , \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\
    \ \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nCyclic Patterns", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    if length(a) == length(b) \n        \n      \
    \  if length(a) == 0 \n            return true\n        \n        if length(b)\
    \ == 0 \n            return false\n        \n        if b[length(b)-1] == a[length(a)-1]\
    \ \n            return cycpattern_check(a[1:length(a)-1], b)\n        \n     \
    \   if b[length(b)-1] == a[length(a)-1] \n            return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\n        \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n   \
    \     \n        if b[length(b)-1] == a[length(a)-1] \n            return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\n        \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n   \
    \     \n        if b[length(b)-1] == a[length(a)-1] \n            return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\n        \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n   \
    \     \n        if b[length(b)-1] == a[length(a)-1] \n            return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\n        \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n   \
    \     \n        if b[length(b)-1] == a[length(a)-1] \n            return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\n        \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n   \
    \     \n        if b[length(b)-1] == a[length(a)-1] \n            return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\n        \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n   \
    \     \n        if b[length(b)-1] == a[length(a)-1] \n            return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1])\n        \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n   \
    \     \n        if b[length(b)-1] == a[length(a)-1] \n            return cycp",
  "    \n    if length(a) == length(b) \n        then true\n        else false\n \
    \   \n    else if length(a) > length(b) \n        then false\n        else if\
    \ length(a) == 0 \n            then true\n            else if length(b) == 0 \n\
    \                then true\n                else if a[0..(length(a)-1)] == b\n\
    \                    then true\n                    else false\n    \n    else\
    \ if length(b) > length(a) \n        then false\n        else if length(a) ==\
    \ 0 \n            then true\n            else if length(b) == 0 \n           \
    \     then true\n                else if b[0..(length(b)-1)] == a\n          \
    \          then true\n                    else false\n    \n    else if length(a)\
    \ == 0 \n        then true\n        else if length(b) == 0 \n            then\
    \ true\n            else if a[0..(length(a)-1)] == b\n                then true\n\
    \                else false\n    \n    else if length(b) == 0 \n        then true\n\
    \        else if length(a) == 0 \n            then true\n            else if b[0..(length(b)-1)]\
    \ == a\n                then true\n                else false\n    \n    else\
    \ if a[0..(length(a)-1)] == b\n        then true\n        else false\n    \n \
    \   else if b[0..(length(b)-1)] == a\n        then true\n        else false\n\
    \    \n    else false\nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\"\
    , \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\
    \ \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        then true\n   \
    \     else false\n    else \n        if length(a) > length(b) \n            then\
    \ false\n            else if length(a) == 0 \n                then true\n    \
    \            else if length(b) == 0 \n                    then true\n        \
    \            else if length(a) == 1 \n                        then if contains(b,\
    \ a)\n                            then true\n                            else\
    \ false\n                        else if contains(b, substring(a, length(a)))\n\
    \                            then true\n                            else false\n\
    \                        else if contains(substring(a, length(a)), substring(b,\
    \ length(b)))\n                            then true\n                       \
    \     else false\n                        else if contains(substring(a, length(a)),\
    \ substring(b, length(b)))\n                            then true\n          \
    \                  else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n                            then true\n\
    \                            else false\n                        else if contains(",
  "    if length(a) == length(b) \n        then true\n        else false\n    else\
    \ \n        if length(a) > length(b) \n            then false\n            else\
    \ if length(a) == 0 \n                then true\n                else if length(b)\
    \ == 0 \n                    then true\n                    else if length(a)\
    \ == 1 \n                        then if isinfix(a[1], b) \n                 \
    \           then true\n                            else false\n              \
    \          else if isinfix(a[1:], b) \n                            then true\n\
    \                            else false\n                    else if length(b)\
    \ == 1 \n                        then if isinfix(a[1:], b) \n                \
    \            then true\n                            else false\n             \
    \           else false\n                else false\n        else if length(b)\
    \ > length(a) \n            then false\n            else if length(a) == 0 \n\
    \                then true\n                else if length(b) == 0 \n        \
    \            then true\n                    else if length(a) == 1 \n        \
    \                then if isinfix(a[1], b) \n                            then true\n\
    \                            else false\n                        else if isinfix(a[1:],\
    \ b) \n                            then true\n                            else\
    \ false\n                    else if length(b) == 1 \n                       \
    \ then if isinfix(a[1:], b) \n                            then true\n        \
    \                    else false\n                        else false\n        \
    \        else false\n        else if length(a) == length(b) \n            then\
    \ if isinfix(a[1:], b) \n                then true\n                else false\n\
    \        else false\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,pattern-matching,algorithm,haskell\
    \ |>\n<code>\nimport Data.List (isPrefixOf, isSuffixOf)", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false \n    else if length(a) == 1 \n        return true\n\
    \    else if length(b) == 1 \n        return true\n    else if length(a) == length(b)\
    \ \n        return true\n    else if length(a) > length(b) \n        return false\n\
    \    else if length(a) < length(b) \n        return false\n    else if contains(a,\
    \ b)\n        return true\n    else if contains(b, a)\n        return true\n \
    \   else if contains(b, substring(a, length(a)))\n        return true\n    else\
    \ if contains(substring(a, length(a)), substring(b, length(b)))\n        return\
    \ true\n    else if contains(substring(a, length(a)), substring(b, length(b)))\n\
    \        return true\n    else if contains(substring(a, length(a)), substring(b,\
    \ length(b)))\n        return true\n    else if contains(substring(a, length(a)),\
    \ substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b)))\n        return true\n    else if contains(substring(a,\
    \ length(a", "    if length(a) == length(b) then \n        if a == b then \n \
    \           return true\n        else \n            return false\n    else \n\
    \        if length(a) > length(b) then \n            return cycpattern_check(b,\
    \ a)\n        else \n            return cycpattern_check(a, b) \nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks for your answer. I am new to Julia, so I\
    \ didn't know about this function. I am getting an error when I try to use it:\
    \ ```MethodError: no method matching cycpattern_check(string::String, string::String)```\n\
    <|/ c |>\n<| c |>\nI added the function to the answer\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I am getting an error when I try to use it: ```MethodError:\
    \ no method matching cycpattern_check(string::String, string::String)```\n<|/\
    \ c |>\n<| c |>\nI added the function to the answer\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I am getting an error when I try to use it: ```MethodError:\
    \ no method matching cycpattern_check(string::String, string::String)```\n<|/\
    \ c |>\n<| a tags=julia |>\nYou can use the function findall to find all occurrences\
    \ of a substring in a string. \n<code>\njulia> str = \"hello\"\n\"hello\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return true\n    else if length(a) == 1 \n   \
    \     return b == a \n    else if length(b) == 1 \n        return a == b\n   \
    \ else if length(a) == length(b) \n        return true\n    else \n        return\
    \ false\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27859068)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to check\
    \ if a substring exists in a string. He also asked how to check if a substring\
    \ exists in any of its rotations. He also asked how to check if a substring exists\
    \ in any of its rotations. He also asked how to check if a substring exists in\
    \ any of its rotations. He also asked how to check if a substring exists in any\
    \ of its rotations. He also asked how to check if a substring exists in any of\
    \ its rotations. He also asked how to check if a substring exists in any of its\
    \ rotations. He also asked how to check if a substring exists in any of its rotations.\
    \ He also asked how to check if a substring exists in any of its rotations. He\
    \ also asked how to check if a substring exists in any of its rotations. He also\
    \ asked how to check if a substring exists in any of its rotations. He also asked\
    \ how to check if a substring exists in any of its rotations. He also asked how\
    \ to check if a substring exists in any of its rotations. He also asked how to\
    \ check if a substring exists in any of its rotations. He also asked how to check\
    \ if a substring exists in any of its rotations. He also asked how to check if\
    \ a substring exists in any of its rotations. He also asked how to check if a\
    \ substring exists in any of its rotations. He also asked how to check if a substring\
    \ exists in any of its rotations. He also asked how to check if a substring exists\
    \ in any of its rotations. He also asked how to check if a substring exists in\
    \ any of its rotations. He also asked how to check if a substring exists in any\
    \ of its rotations. He also asked how to check if a substring exists in any of\
    \ its rotations. ", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ true\n    else \n        return (cycpattern_check(a[1:], b) or cycpattern_check(a[1:],\
    \ b[1:]))\nend\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"abcd\"\
    , \"abd\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"hello\", \"\
    ell\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"whassup\", \"psus\"\
    )\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n\
    <code language=julia-1.0>\ncycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code\
    \ language=julia-1.0>\ncycpattern_check(\"himenss\", \"simen\")\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a string as input and returns the number\
    \ of times the string \"ab\" appears in the string.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n        then\
    \ true\n        else false\n    else false\nend", "    if length(a) == 0 || length(b)\
    \ == 0 \n        then return false \n    else if length(a) > length(b) \n    \
    \    then return false \n    else if length(a) == length(b) \n        then return\
    \ true \n    else if length(a) > 0 \n        then if contains(b, a) \n       \
    \     then return true \n            else return false \n        else if contains(b,\
    \ substring(a, length(a))) \n            then return true \n            else return\
    \ false \n    else if length(b) > 0 \n        then if contains(a, b) \n      \
    \      then return true \n            else return false \n        else if contains(a,\
    \ substring(b, length(b))) \n            then return true \n            else return\
    \ false \n    else \n        error(\"The length of both strings must be greater\
    \ than 0\")\nend\n</code>\n<|/ a tags=string,julia,pattern-matching |>\n<| a dscore=2\
    \ |>\nA simple solution is to use regular expressions:\n<code>\njulia> \"hello\"\
    \ =~ r\"^h.*e$\"\ntrue", "    \n    if length(a) == 0 || length(b) == 0 \n   \
    \     return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(a) == length(b) \n        then true\n        else\
    \ false\n    else if length(a) < length(b) \n        then false\n        else\
    \ if length(a) == 0 \n            then true\n            else if length(b) ==\
    \ 0 \n                then true\n                else if contains(b, a)\n    \
    \                then true\n                    else false\n    end\nend\n</code>\n\
    <|/ a tags=string,julia,pattern-matching |>\n<| c |>\nThis code does not work\
    \ for the case `cycpattern_check(\"hello\", \"ell\")`\n<|/ c |>\n<| c |>\nIt does\
    \ work for the case `cycpattern_check(\"whassup\", \"psus\")`\n<|/ c |>\n<| c\
    \ |>\nIt does work for `cycpattern_check(\"abab\", \"baa\")`\n<|/ c |>\n<| c |>\n\
    It does work for `cycpattern_check(\"efef\", \"eeff\")`\n<|/ c |>\n<| c |>\nIt\
    \ does work for `cycpattern_check(\"himenss\", \"simen\")`\n<|/ c |>\n<| a tags=string,julia,pattern-matching\
    \ |>\nI came up with this solution:\n<code>", "    if length(a) == length(b) \n\
    \        then true\n        else false\n    else if length(a) > length(b) \n \
    \       then false\n        else if length(a) == 0 \n            then true\n \
    \           else if length(b) == 0 \n                then true\n             \
    \   else if contains(a, b)\n                    then true\n                  \
    \  else false\n    end\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis\
    \ doesn't work if the second word is a substring of the first. For example, `cycpattern_check(\"\
    abcd\", \"abd\")` returns `true`, but `cycpattern_check(\"abcd\", \"ab\")` returns\
    \ `false`.\n<|/ c |>\n<| c |>\nI added a version that works with substrings.\n\
    <|/ c |>\n<| a dscore=1 |>\nI came up with this:\n<code>", "    \n    \n    if\
    \ length(a) == length(b) \n        \n        for i in 0 .. length(a) - 1 \n  \
    \          if a[i] != b[i] \n                return false \n        return true\
    \ \n    \n    else \n        return false \n    \nend \n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abcd\", \"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    hello\", \"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\"\
    , \"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\", \"\
    baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\", \"eeff\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\", \"simen\"\
    )\n</cell>\n<text>\nCyclic Patterns", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false \n    else \n        match a with \n        | \"a\" => return b == substring(b,\
    \ 1, 1)\n        | \"b\" => return b == substring(b, 2, 2)\n        | \"c\" =>\
    \ return b == substring(b, 3, 3)\n        | \"d\" => return b == substring(b,\
    \ 4, 4)\n        | \"e\" => return b == substring(b, 5, 5)\n        | \"f\" =>\
    \ return b == substring(b, 6, 6)\n        | \"g\" => return b == substring(b,\
    \ 7, 7)\n        | \"h\" => return b == substring(b, 8, 8)\n        | \"i\" =>\
    \ return b == substring(b, 9, 9)\n        | \"j\" => return b == substring(b,\
    \ 10, 10)\n        | \"k\" => return b == substring(b, 11, 11)\n        | \"l\"\
    \ => return b == substring(b, 12, 12)\n        | \"m\" => return b == substring(b,\
    \ 13, 13)\n        | \"n\" => return b == substring(b, 14, 14)\n        | \"o\"\
    \ => return b == substring(b, 15, 15)\n        | \"p\" => return b == substring(b,\
    \ 16, 16)\n        | \"q\" => return b == substring(b, 17, 17)\n        | \"r\"\
    \ => return b == substring(b, 18, 18)\n        | \"s\" => return b == substring(b,\
    \ 19, 19)\n        | \"t\" => return b == substring(b, 20, 20)\n        | \"u\"\
    \ => return b == substring(b, 21, 21)\n        | \"v\" => return b == substring(b,\
    \ 22, 22)\n        | \"w\" => return b == substring(b, 23, 23)\n        | \"x\"\
    \ => return b == substring(b, 24, 24)\n        | \"y\" => return b == substring(b,\
    \ 25, 25)\n        | \"z\" => return b == substring(b, 26, 26)\n        | \"A\"\
    \ => return b == substring(b, 27, 27)\n        | \"B\" => return b == substring(b,\
    \ 28, 28)\n        | \"C\" => return b == substring(b, 29, 29)\n        | \"D\"\
    \ => return b == substring(b, 30, 30)\n        | \"E\" => return b == substring(b,\
    \ 31, 31)\n        | \"F\" => return b == substring(b, 32, 32)\n        | \"G\"\
    \ => return b == substring(b, 33, 33)\n        | \"H\" => return b == substring(b,\
    \ 34, 34)\n        | \"I\" => return b == substring(b, 35, 35)\n        | \"J\"\
    \ => return b == substring(b, 36, 36)\n        | \"K\" => return b == substring(b,\
    \ 37, 37)", "    \n    \n    \n    if length(a) == length(b) \n    then \n   \
    \     true\n    else \n        false\n    end\nend", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == 0 || length(b) == 0 \n        return false \n    else \n \
    \       if a[0] == b[0] \n            return cycpattern_check(a[1:], b[1:]) \n\
    \        else \n            if a[0] == b[-1] \n                return cycpattern_check(a[1:],\
    \ b[:-1]) \n            else \n                if a[-1] == b[0] \n           \
    \         return cycpattern_check(a[:-1], b[1:]) \n                else \n   \
    \                 if a[-1] == b[-1] \n                        return cycpattern_check(a[:-1],\
    \ b[:-1]) \n                    else \n                        return false \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \n", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) then\
    \ \n        true\n    elseif length(a) > length(b) then \n        false\n    elseif\
    \ length(a) < length(b) then \n        false\n    elseif b == \"\" then \n   \
    \     true\n    elseif b == \"a\" then \n        true\n    elseif b == \"b\" then\
    \ \n        true\n    elseif b == \"c\" then \n        true\n    elseif b == \"\
    d\" then \n        true\n    elseif b == \"e\" then \n        true\n    elseif\
    \ b == \"f\" then \n        true\n    elseif b == \"g\" then \n        true\n\
    \    elseif b == \"h\" then \n        true\n    elseif b == \"i\" then \n    \
    \    true\n    elseif b == \"j\" then \n        true\n    elseif b == \"k\" then\
    \ \n        true\n    elseif b == \"l\" then \n        true\n    elseif b == \"\
    m\" then \n        true\n    elseif b == \"n\" then \n        true\n    elseif\
    \ b == \"o\" then \n        true\n    elseif b == \"p\" then \n        true\n\
    \    elseif b == \"q\" then \n        true\n    elseif b == \"r\" then \n    \
    \    true\n    elseif b == \"s\" then \n        true\n    elseif b == \"t\" then\
    \ \n        true\n    elseif b == \"u\" then \n        true\n    elseif b == \"\
    v\" then \n        true\n    elseif b == \"w\" then \n        true\n    elseif\
    \ b == \"x\" then \n        true\n    elseif b == \"y\" then \n        true\n\
    \    elseif b == \"z\" then \n        true\n    elseif b == \"0\" then \n    \
    \    true\n    elseif b == \"1\" then \n        true\n    elseif b == \"2\" then\
    \ \n        true\n    elseif b == \"3\" then \n        true\n    elseif b == \"\
    4\" then \n        true\n    elseif b == \"5\" then \n        true\n    elseif\
    \ b == \"6\" then \n        true\n    elseif b == \"7\" then \n        true\n\
    \    elseif b == \"8\" then \n        true\n    elseif b == \"9\" then \n    \
    \    true\n    elseif b == \"+\" then \n        true\n    elseif b == \"-\" then\
    \ \n        true\n    elseif b == \"*\" then \n        true\n    elseif b == \"\
    /\" then \n        true\n    elseif b == \"%\" then \n        true\n    elseif\
    \ b == \"^\" then \n        true\n    elseif b == \"&\" then ", "    \n    \n\
    \    if length(a) == length(b) \n        \n        if length(a) == 0 \n      \
    \      return true\n        \n        if length(b) == 0 \n            return false\n\
    \        \n        if length(a) == 1 \n            return true\n        \n   \
    \     if length(b) == 1 \n            return false\n        \n        if a[1]\
    \ == b[1] \n            return cycpattern_check(a[2:], b[2:])\n        \n    \
    \    if a[1] == b[2] \n            return cycpattern_check(a[2:], b[:2])\n   \
    \     \n        if a[2] == b[1] \n            return cycpattern_check(a[:2], b[2:])\n\
    \        \n        if a[2] == b[2] \n            return cycpattern_check(a[:2],\
    \ b[:2])\n        \n        if a[0] == b[0] \n            return cycpattern_check(a[1:],\
    \ b[1:])\n        \n        if a[0] == b[1] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[2] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[3] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[4] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[5] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[6] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[7] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[8] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[9] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[10] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[11] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[12] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[13] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[14] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[15] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[16] \n            return cycpattern_check(a[1:],\
    \ b[:1])\n        \n        if a[0] == b[17] \n            return cycpattern_check(a[1:",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false \n    \n    if length(a)\
    \ == 1 \n        return b == a \n    \n    if length(b) == 1 \n        return\
    \ a == b \n    \n    if length(a) > length(b) \n        return cycpattern_check(b,\
    \ a)\n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    if length(a) > length(b) \n        return cycpattern_check(a, substring(b,\
    \ length(a)))\n    \n    \n    if length(a) < length(b) \n        return cycpattern_check(substring(a,\
    \ length(b)), substring(b, length(a)))\n    \n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return cycpattern_check(substring(a,\
    \ length(b)), substring(b, length(a)))\n    \n    \n    if length(a) < length(b)\
    \ \n        return cycpattern_check(substring(a, length(b)), substring(b, length(a)))\n\
    \    \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(substring(a, length(b)),\
    \ substring(b, length(a)))\n    \n    \n    if length(a) < length(b) \n      \
    \  return cycpattern_check(substring(a, length(b)), substring(b, length(a)))\n\
    \    \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(substring(a, length(b)),\
    \ substring(b, length(a)))\n    \n    \n    if length(a) < length(b) \n      \
    \  return cycpattern_check(substring(a, length(b)), substring(b, length(a)))\n\
    \    \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(substring(a, length(b)),\
    \ substring(b, length(a)))\n    \n    \n    if length(a) < length(b) \n      \
    \  return cycpattern_check(substring(a, length(b)), substring(b, length(a)))\n\
    \    \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(substring(a, length(b)),\
    \ substring(b, length(a)))\n    \n    \n    if length(a) < length(b) \n      \
    \  return cycpattern_check(substring(a, length(b)), substring(b, length(a)))\n\
    \    \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(substring(a, length(b)),\
    \ substring(b, length(a)))\n    ", "    \n    if length(a) == length(b) \n   \
    \     then true\n        else false\n    end\n    \n    else if length(a) > length(b)\
    \ \n        then false\n        else true\n    end\n    \n    else if length(a)\
    \ < length(b) \n        then true\n        else false\n    end\n    \n    else\
    \ if length(a) == 0 \n        then true\n        else false\n    end\n    \n \
    \   else if length(a) == 1 \n        then true\n        else false\n    end\n\
    \    \n    else if length(a) == 2 \n        then true\n        else false\n  \
    \  end\n    \n    else if length(a) == 3 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 4 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 5 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 6 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 7 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 8 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 9 \n        then true\n        else false\n\
    \    end\n    \n    else if length(a) == 10 \n        then true\n        else\
    \ false\n    end\n    \n    else if length(a) == 11 \n        then true\n    \
    \    else false\n    end\n    \n    else if length(a) == 12 \n        then true\n\
    \        else false\n    end\n    \n    else if length(a) == 13 \n        then\
    \ true\n        else false\n    end\n    \n    else if length(a) == 14 \n    \
    \    then true\n        else false\n    end\n    \n    else if length(a) == 15\
    \ \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 16 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 17 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 18 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 19 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 20 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 21 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 22 \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ == 23 \n        then true\n", "    if length(a) == 0 || length(b) == 0 \n  \
    \      return false\n    else \n        if length(a) == length(b) \n         \
    \   return true\n        else \n            if length(a) > length(b) \n      \
    \          return cycpattern_check(b, a)\n            else \n                return\
    \ cycpattern_check(a, b) \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false \n    else \n        if length(a) == length(b) \n \
    \           return true\n        else \n            if length(a) > length(b) \n\
    \                return cycpattern_check(b, a)\n            else \n          \
    \      if length(b) > length(a) \n                    return cycpattern_check(a,\
    \ b) \n                else \n                    let x = length(a) - length(b)\
    \ \n                    let y = length(b) - length(a) \n                    let\
    \ z = length(a) + length(b) \n                    let m = floor((z - x + 1) /\
    \ 2) \n                    let n = x - m \n                    let l = b[m..m+n]\
    \ \n                    let r = a[m..m+n] \n                    let x = l == r\
    \ \n                    let y = l == b \n                    let z = l == a \n\
    \                    if x && y && z \n                        return true \n \
    \                   else \n                        return false \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n\
    end \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ length(b) \n        then true\n        else false\n    else false\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        then return false \n    else if length(a) == 1\
    \ \n        then return b == a \n    else if length(b) == 1 \n        then return\
    \ b == a \n    else if length(a) == length(b) \n        then return true \n  \
    \  else \n        let\n            a_list = split(a, \"\")\n            b_list\
    \ = split(b, \"\")\n            a_list_length = length(a_list)\n            b_list_length\
    \ = length(b_list)\n            \n            a_list_index = a_list_length\n \
    \           b_list_index = b_list_length\n            \n            a_list_index1\
    \ = a_list_length\n            b_list_index1 = b_list_length\n            \n \
    \           a_list_index2 = a_list_length\n            b_list_index2 = b_list_length\n\
    \            \n            a_list_index3 = a_list_length\n            b_list_index3\
    \ = b_list_length\n            \n            a_list_index4 = a_list_length\n \
    \           b_list_index4 = b_list_length\n            \n            a_list_index5\
    \ = a_list_length\n            b_list_index5 = b_list_length\n            \n \
    \           a_list_index6 = a_list_length\n            b_list_index6 = b_list_length\n\
    \            \n            a_list_index7 = a_list_length\n            b_list_index7\
    \ = b_list_length\n            \n            a_list_index8 = a_list_length\n \
    \           b_list_index8 = b_list_length\n            \n            a_list_index9\
    \ = a_list_length\n            b_list_index9 = b_list_length\n            \n \
    \           a_list_index10 = a_list_length\n            b_list_index10 = b_list_length\n\
    \            \n            a_list_index11 = a_list_length\n            b_list_index11\
    \ = b_list_length\n            \n            a_list_index12 = a_list_length\n\
    \            b_list_index12 = b_list_length\n            \n            a_list_index13\
    \ = a_list_length\n            b_list_index13 = b_list_length\n            \n\
    \            a_list_index14 = a_list_length\n            b_list_index14 = b_list_length\n\
    \            \n            a_list_index15 = a_list_length\n            b_list_index15\
    \ = b_list_length\n            \n            a_list_index16 = a_list_length\n\
    \            b_list_index16 = b_list_length\n            \n            a_list_index17\
    \ = a_list_length\n            b_list_index17 = b_list_length\n            \n\
    \            a_list_index18 = a_list_length\n            b_list_index18 = b_list_length\n\
    \            \n            a_list_index19 = a_list_length\n            b_list_index19\
    \ = b_list_length\n            \n            a_", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        if a == b \n            return true\n     \
    \   \n        else \n            return false\n    \n    else \n        return\
    \ false\n    \nend", "    \n    if length(a) == length(b) \n        \n       \
    \ true\n    else\n        false\n    end\nend", "    \n    if length(a) == length(b)\
    \ \n        then true\n        else false\n    end\n    \n    else if length(a)\
    \ > length(b) \n        then false\n        else if length(a) == 0 \n        \
    \    then true\n            else if length(b) == 0 \n                then true\n\
    \                else if b[length(b)-1] in a\n                    then true\n\
    \                    else false\n                end\n            end\n      \
    \  end\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false \n    else \n        match cycpattern_check_recursive(a,\
    \ b) \n        |  true -> true \n        |  false -> false \n        end\n   \
    \ end\nend\n</code>\n<|/ a tags=string,julia,pattern-matching |>\n<| c |>\nThis\
    \ does not seem to work. `cycpattern_check(\"abcd\", \"abd\")` returns `true`\
    \ while it should be `false`.\n<|/ c |>\n<| c |>\nI edited my answer to fix the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis works perfectly! Thank\
    \ you! I wonder if there is a way to make it more efficient?\n<|/ c |>\n<| c |>\n\
    I added a more efficient solution. Hope it helps.\n<|/ c |>\n<| a dscore=1 |>\n\
    Here is a solution using regular expressions:\n<code>", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    if length(a) == length(b) \n    \
    \    \n        if a == b\n            true\n        else\n            false\n\
    \    else\n        false\n    end\nend", "    if length(a) == length(b) \n   \
    \     then true\n        else false\n    else \n        if length(a) > length(b)\
    \ \n            then false\n            else if length(a) == 0 \n            \
    \    then true\n                else if length(b) == 0 \n                    then\
    \ true\n                    else if a[0..length(a)] == b[0..length(b)]\n     \
    \                   then true\n                        else false\n    end \n\
    end \n</code>\n<|/ a tags=string,pattern-matching,haskell,algorithm |>\n<| a dscore=1\
    \ |>\nI wrote a Haskell program that does this in O(n) time. It uses Data.Map\
    \ to store a map from each letter in the first word to the letters in the second\
    \ word. Then, it checks whether the second word is a substring of the first word.\
    \ \n<code>\nimport Data.Map (fromList, toList)\nimport Data.List (isPrefixOf)",
  "    if length(a) == 0 || length(b) == 0 \n        return false\n    else \n   \
    \     if a[1] == b[1] \n            return cycpattern_check(a[2:end], b[2:end])\
    \ || cycpattern_check(a[2:end], b[1:end])\n        else \n            return cycpattern_check(a[1:end],\
    \ b[1:end]) || cycpattern_check(a[1:end], b[2:end])\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    if length(a) == 0 \n        then return\
    \ true\n    else if length(b) == 0 \n        then return false\n    else if length(a)\
    \ == 1 \n        then return b == a\n    else if length(b) == 1 \n        then\
    \ return b == a\n    else if length(a) == 2 \n        then return b == a || b\
    \ == rot13(a)\n    else if length(b) == 2 \n        then return b == a || b ==\
    \ rot13(a)\n    else if length(a) == 3 \n        then return b == a || b == rot13(a)\
    \ || b == rot13(rot13(a))\n    else if length(b) == 3 \n        then return b\
    \ == a || b == rot13(a) || b == rot13(rot13(a))\n    else if length(a) == 4 \n\
    \        then return b == a || b == rot13(a) || b == rot13(rot13(a)) || b == rot13(rot13(rot13(a)))\n\
    \    else if length(b) == 4 \n        then return b == a || b == rot13(a) || b\
    \ == rot13(rot13(a)) || b == rot13(rot13(rot13(a)))\n    else if length(a) ==\
    \ 5 \n        then return b == a || b == rot13(a) || b == rot13(rot13(a)) || b\
    \ == rot13(rot13(rot13(a))) || b == rot13(rot13(rot13(rot13(a))))\n    else if\
    \ length(b) == 5 \n        then return b == a || b == rot13(a) || b == rot13(rot13(a))\
    \ || b == rot13(rot13(rot13(a))) || b == rot13(rot13(rot13(rot13(a))))\n    else\
    \ if length(a) == 6 \n        then return b == a || b == rot13(a) || b == rot13(rot13(a))\
    \ || b == rot13(rot13(rot13(a))) || b == rot13(rot13(rot13(rot13(a))) || b ==\
    \ rot13(rot13(rot13(rot13(rot13(a)))))\n    else if length(b) == 6 \n        then\
    \ return b == a || b == rot13(a) || b == rot13(rot13(a)) || b == rot13(rot13(rot13(a)))\
    \ || b == rot13(rot13(rot13(rot13(a))) || b == rot13(rot", "    if length(a) ==\
    \ length(b) \n        return true\n    else \n        return false\n    end\n\
    end", "    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ \n        match b.head with \n            | 'a' -> if contains(a, b.tail) \n\
    \                        then true \n                        else false \n   \
    \         | 'b' -> if contains(b, a.tail) \n                        then true\
    \ \n                        else false \n            | 'c' -> if contains(b, a.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'd' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 'e' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'f' -> if contains(b, a.tail) \n                        then true\
    \ \n                        else false \n            | 'g' -> if contains(b, a.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'h' -> if contains(b, a.tail) \n                        then true\
    \ \n                        else false \n            | 'i' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'j' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 'k' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'l' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 'm' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'n' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 'o' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'p' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 'q' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'r' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 's' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 't' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 'u' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'v' -> if contains(a, b.tail) \n                        then true\
    \ \n                        else false \n            | 'w' -> if contains(a, b.tail)\
    \ \n                        then true \n                        else false \n\
    \            | 'x' -> if contains(a, ", "    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    else if length(a) == 1 \n        return true\n\
    \    else if length(b) == 1 \n        return true\n    else if length(a) == length(b)\
    \ \n        return true\n    else if length(a) > length(b) \n        return false\n\
    \    else \n        local a1 = substring(a,1,1)\n        local a2 = substring(a,2,1)\n\
    \        local b1 = substring(b,1,1)\n        local b2 = substring(b,2,1)\n  \
    \      if a1 == b1 \n            return cycpattern_check(a2,b2)\n        else\
    \ \n            return cycpattern_check(a1,b1) \n        end\n    end\nend\n</code>\n\
    <|/ a tags=string,pattern-matching,julia,substring |>\n<| a dscore=0 |>\n<code>",
  "    \n    \n    if length(a) == length(b) \n        \n        if a == b\n     \
    \       return true\n        else\n            return false\n    \n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.3>", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(a)\
    \ == length(b) \n        then true\n        else false\n    else \n        cycpattern_check(a[1:length(a)],\
    \ b[1:length(b)])\n    end\nend\n</code>\n<|/ a tags=recursion,string,julia |>\n\
    <| a dscore=0 |>\nI wrote a recursive function which checks if a substring is\
    \ a substring of another string. \n<code>", "    if length(a) == 0 || length(b)\
    \ == 0 \n        return false \n    else if length(a) == 1 \n        return b\
    \ == a \n    else if length(b) == 1 \n        return a == b \n    else \n    \
    \    return b == substring(a,1,length(b)) || substring(a,1,length(b)) in substring(b,1,length(a))\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine for small strings, but for large strings it takes too much time. Do you\
    \ have any idea to make it faster?\n<|/ c |>\n<| c |>\nI added a faster version\n\
    <|/ c |>\n<| c |>\nThanks a lot. Your code is much faster than mine.\n<|/ c |>\n\
    <| a tags=string,julia,substring |>\nHere is a solution that uses only string\
    \ operations:\n<code>", "    \n    \n    if length(a) == length(b) \n    then\
    \ \n        true\n    else \n        false\n    end\nend", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false \n    else \n        if length(a)\
    \ == 1 \n            return true\n        else \n            if length(b) == 1\
    \ \n                return true\n            else \n                if a[1] ==\
    \ b[1] \n                    return cycpattern_check(a[2:], b[2:])\n         \
    \       else \n                    if a[1] == b[2] \n                        return\
    \ cycpattern_check(a[2:], b[:2])\n                    else \n                \
    \        if a[2] == b[1] \n                            return cycpattern_check(a[:2],\
    \ b[2:])\n                        else \n                            if a[2] ==\
    \ b[2] \n                                return cycpattern_check(a[:2], b[:2])\n\
    \                            else \n                                if a[1] ==\
    \ b[3] \n                                    return cycpattern_check(a[2:], b[3:])\n\
    \                                else \n                                    if\
    \ a[3] == b[1] \n                                        return cycpattern_check(a[:2],\
    \ b[3:])\n                                    else \n                        \
    \                if a[3] == b[2] \n                                          \
    \  return cycpattern_check(a[:2], b[:2])\n                                   \
    \     else \n                                            if a[3] == b[3] \n  \
    \                                              return cycpattern_check(a[:2],\
    \ b[:2])\n                                            else \n                \
    \                                if a[1] == b[4] \n                          \
    \                          return cycpattern_check(a[2:], b[4:])\n           \
    \                                     else \n                                \
    \                    if a[4] == b[1] \n                                      \
    \                  return cycpattern_check(a[2:], b[4:])\n                   \
    \                                 else \n                                    \
    \                    if a[4] == b[2] \n                                      \
    \                      return cycpattern_check(a[2:], b[:2])\n               \
    \                                         else \n                            \
    \                                if a[4] == b[3] \n                          \
    \                                      return cycpattern_check(a[2:], b[:2])\n\
    \                                                            else \n         \
    \                                                       if a[4] == b[4] \n   \
    \                                                                 return cycpattern_check(a[2:],\
    \ b[:2])\n                                                                   \
    \ else \n                                                        if a[3] == b[5]\
    \ \n                                                            return cycpattern_check(a[2:],\
    \ b[5:])\n                                                        else \n    \
    \                                                        if a[5] == b[1] \n  \
    \                                                              return cycpattern_check(a[2:],\
    \ b[5:])\n                                                            else \n\
    \                                                                if a[5] == b[2]\
    \ \n                                                                    return\
    \ cycpattern_check(a[2:], b[:2])\n                                           \
    \                         else \n                                            \
    \            if a[5] == b[3] \n                                              \
    \              return cycpattern_check(a[2:], b[:2])\n                       \
    \                                             else \n                        \
    \                                if a[5] == b[4] \n                          \
    \                                  return cycpattern_check(a[2:], b[:2])\n   \
    \                                                                 else \n    \
    \                                                    if a[5] == b[5] \n      \
    \                                                      return cycpattern_check(a[2:],\
    \ b[:2])\n                                                                   \
    \ else \n                                                        if a[5] == b[6]\
    \ \n                                                            return cycpattern_check(a[2:],\
    \ b", "    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ if length(a) == 1 \n        return (b in a) \n    else if length(b) == 1 \n\
    \        return (b in a) \n    else \n        (c,d) = cycpattern_rotate_left(a,b)\
    \ \n        return (cycpattern_check(a,c) and cycpattern_check(b,d)) \nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis code doesn't work if a rotation is longer than the length\
    \ of the string. For example, `cycpattern_check(\"abcd\", \"abd\")` returns true.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Now it works.\n<|/ c |>\n<| c |>\nThis code\
    \ doesn't work if a rotation is longer than the length of the string. For example,\
    \ `cycpattern_check(\"abcd\", \"abd\")` returns true.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Now it works.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        local i::Int\
    \ = 0 \n        local j::Int = 0 \n        local k::Int = 0 \n        local l::Int\
    \ = 0 \n        local m::Int = 0 \n        local n::Int = 0 \n        local o::Int\
    \ = 0 \n        local p::Int = 0 \n        local q::Int = 0 \n        local r::Int\
    \ = 0 \n        local s::Int = 0 \n        local t::Int = 0 \n        local u::Int\
    \ = 0 \n        local v::Int = 0 \n        local w::Int = 0 \n        local x::Int\
    \ = 0 \n        local y::Int = 0 \n        local z::Int = 0 \n        local a1::Int\
    \ = 0 \n        local a2::Int = 0 \n        local a3::Int = 0 \n        local\
    \ a4::Int = 0 \n        local a5::Int = 0 \n        local a6::Int = 0 \n     \
    \   local a7::Int = 0 \n        local a8::Int = 0 \n        local a9::Int = 0\
    \ \n        local a10::Int = 0 \n        local a11::Int = 0 \n        local a12::Int\
    \ = 0 \n        local a13::Int = 0 \n        local a14::Int = 0 \n        local\
    \ a15::Int = 0 \n        local a16::Int = 0 \n        local a17::Int = 0 \n  \
    \      local a18::Int = 0 \n        local a19::Int = 0 \n        local a20::Int\
    \ = 0 \n        local a21::Int = 0 \n        local a22::Int = 0 \n        local\
    \ a23::Int = 0 \n        local a24::Int = 0 \n        local a25::Int = 0 \n  \
    \      local a26::Int = 0 \n        local a27::Int = 0 \n        local a28::Int\
    \ = 0 \n        local a29::Int = 0 \n        local a30::Int = 0 \n        local\
    \ a31::Int = 0 \n        local a32::Int = 0 \n        local a33::Int = 0 \n  \
    \      local a34::Int = 0 \n        local a35::Int = 0 \n        local a36::Int\
    \ = 0 \n        local a37::Int = 0 \n        local a38::Int = 0 \n        local\
    \ a39::Int = 0 \n        local a40::Int = 0 \n        local a41::Int = 0 \n  \
    \      local a42::Int = 0 \n        local a43::Int = 0 \n        local a44::Int\
    \ = 0 \n        local a45::Int = 0 \n        local a46::Int = 0 \n        local\
    \ a47::Int = 0 \n        local a48::", "    if length(a) == length(b) \n     \
    \   then true\n        else false\n    else if length(a) > length(b) \n      \
    \  then false\n        else if length(a) == 0 \n            then true\n      \
    \      else if length(b) == 0 \n                then true\n                else\
    \ if b[length(b)-1] == a[length(a)-1] \n                    then cycpattern_check(a[1:length(a)-1],\
    \ b)\n                    else false\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>", "    if length(a) == 0 || length(b) == 0 \n       \
    \ return false \n    else \n        if length(a) == 1 \n            return b ==\
    \ a \n        else \n            if length(b) == 1 \n                return b\
    \ == a || b == rot13(a) \n            else \n                if b == rot13(a)\
    \ \n                    return cycpattern_check(rot13(a), a) \n              \
    \  else \n                    return cycpattern_check(a, rot13(b)) \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend \nend\
    \ \nend \nend \nend \nend \nend \n", "    if length(a) == 0 || length(b) == 0\
    \ \n        return true\n    else if length(a) == 1 \n        return b == a ||\
    \ b == reverse(split(a)[1])\n    else if length(b) == 1 \n        return a ==\
    \ b || a == reverse(split(b)[1])\n    else \n        return b == split(a)[1] ||\
    \ a == split(b)[1]\nend\n</code>\n<|/ a tags=string,julia,pattern-matching |>\n\
    <| a |>\nHere is a solution using regular expressions:\n<code>\njulia> function\
    \ cycpattern_check(a::String, b::String)\n           return ismatch(a, \"^$(b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|a|b|",
  "    \n    if length(a) == length(b) \n        then true\n        else false\n \
    \   end \nend \n</cell>\n<text>\nCyclic Patterns\nCyclic patterns are patterns\
    \ that repeat themselves over and over again. For example, in the string \"abba\"\
    , the pattern \"aba\" appears twice and so does \"aab\". The pattern \"aba\" appears\
    \ twice in the string \"abba\", and so does \"aab\". The pattern \"aba\" appears\
    \ twice in the string \"abba\", and so does \"aab\". The pattern \"aba\" appears\
    \ twice in the string \"abba\", and so does \"aab\".", "    if length(a) == 0\
    \ || length(b) == 0 \n        return false \n    else if length(a) == 1 \n   \
    \     return true\n    else if length(b) == 1 \n        return true\n    else\
    \ if length(a) == length(b) \n        return true\n    else if length(a) > length(b)\
    \ \n        return false\n    else if length(a) < length(b) \n        return false\n\
    \    else if contains(b, a) \n        return true\n    else if contains(b, substring(a,\
    \ length(a))) \n        return true\n    else if contains(substring(a, length(a)),\
    \ b) \n        return true\n    else if contains(substring(a, length(a)), substring(b,\
    \ length(b))) \n        return true\n    else if contains(substring(a, length(a)),\
    \ substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    else if contains(substring(a,\
    \ length(a)), substring(b, length(b))) \n        return true\n    ", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return true\n    else if length(a) == 1 \n\
    \        return true\n    else if length(b) == 1 \n        return true\n    else\
    \ if b == a \n        return true\n    else if b == reverse(a) \n        return\
    \ true\n    else if b == reverse(substring(a)) \n        return true\n    else\
    \ if b == reverse(substring(reverse(a))) \n        return true\n    else if b\
    \ == reverse(substring(reverse(substring(a)))) \n        return true\n    else\
    \ if b == reverse(substring(reverse(substring(reverse(a))))) \n        return\
    \ true\n    else if b == reverse(substring(reverse(substring(reverse(substring(a))))))\n\
    \        return true\n    else \n        return false\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(a) == length(b) then \n        if a == b then \n\
    \            return true\n        else \n            return false\n    else \n\
    \        return false\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia,pattern-matching\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == 0 || length(b) == 0 \n        return true\n    else \n   \
    \     if b == a \n            return true\n        else \n            if b[length(b)\
    \ - 1] == a[length(a) - 1] \n                return cycpattern_check(a[1:length(a)\
    \ - 1], b)\n            else \n                return false\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=string,julia,pattern-matching |>\n<code>", "    if\
    \ length(a) == length(b) \n    then \n        true\n    else\n        false\n\
    \    end\nend", "    \n    if length(a) == length(b) \n        \n        if a\
    \ == b\n            return true\n        \n        elseif length(a) == 0 \n  \
    \          return false\n        \n        elseif length(b) == 0 \n          \
    \  return false\n        \n        elseif length(a) == 1 && length(b) == 1 \n\
    \            if isupper(a[1]) && isupper(b[1])\n                return true\n\
    \            else\n                return false\n        \n        elseif length(a)\
    \ == 1 && length(b) > 1 \n            if isupper(a[1]) && isupper(b[1])\n    \
    \            return true\n            else\n                return false\n   \
    \     \n        elseif length(a) > 1 && length(b) == 1 \n            if isupper(a[1])\
    \ && isupper(b[1])\n                return true\n            else\n          \
    \      return false\n        \n        elseif length(a) > 1 && length(b) > 1 \n\
    \            if isupper(a[1]) && isupper(b[1])\n                return true\n\
    \            else\n                return false\n        \n        elseif length(a)\
    \ > 1 && length(b) > 1 \n            if isupper(a[1]) && isupper(b[1])\n     \
    \           return true\n            else\n                return false\n    \
    \    \n        elseif length(a) > 1 && length(b) > 1 \n            if isupper(a[1])\
    \ && isupper(b[1])\n                return true\n            else\n          \
    \      return false\n        \n        elseif length(a) > 1 && length(b) > 1 \n\
    \            if isupper(a[1]) && isupper(b[1])\n                return true\n\
    \            else\n                return false\n        \n        elseif length(a)\
    \ > 1 && length(b) > 1 \n            if isupper(a[1]) && isupper(b[1])\n     \
    \           return true\n            else\n                return false\n    \
    \    \n        elseif length(a) > 1 && length(b) > 1 \n            if isupper(a[1])\
    \ && isupper(b[1])\n                return true\n            else\n          \
    \      return false\n        \n        elseif length(a) > 1 && length(b) > 1 \n\
    \            if isupper(a[1]) && isupper(b[1])\n                return true\n\
    \            else\n                return false\n        \n        elseif length(a)\
    \ > 1 && length(b) > 1 \n            if isupper(a[1]) && isupper(b[1])\n     \
    \           return true\n            else\n                return false\n    \
    \    \n        elseif length(a) > 1 && length(b) > 1 \n            if isupper(a[1])\
    \ && isupper(b[1])\n                return true\n            else\n          \
    \      return false\n        \n        elseif length(a) > 1 && length(b) > 1 \n\
    \            if isupper(a[1]) && isupper(b[1])\n                return true\n\
    \            else\n                return false\n        \n        elseif length(a)\
    \ > 1 && length(b) > 1 \n            if isupper(a[1]) && isupper(b[1])\n     \
    \           return true\n            else\n                return false\n    \
    \    \n        elseif length(a) > ", "    \n    if length(a) == length(b) \n \
    \       then return true\n    else \n        \n        if length(a) > length(b)\
    \ \n            then return false\n        else \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      ", "    if length(a) == length(b) \n        then true\n        else false\n\
    \    else if length(a) > length(b) \n        then false\n        else if length(a)\
    \ == 0 \n            then true\n            else if length(b) == 0 \n        \
    \        then true\n                else if contains(a, b)\n                 \
    \   then true\n                    else false\n    end\nend\n</code>\n<|/ a tags=string,julia,substring\
    \ |>\n<| a tags=string,julia,substring |>\nI wrote a package for Julia called\
    \ Substring that does exactly what you want. It also has a lot of other useful\
    \ functionalities like searching substrings, splitting strings, etc.\n<|/ a dscore=1\
    \ |>\n<| a tags=string,julia,substring |>\nI wrote a package for Julia called\
    \ Substring that does exactly what you want. It also has a lot of other useful\
    \ functionalities like searching substrings, splitting strings, etc.\n<|/ a dscore=1\
    \ |>\n<| a tags=string,julia,substring |>\nI wrote a package for Julia called\
    \ Substring that does exactly what you want. It also has a lot of other useful\
    \ functionalities like searching substrings, splitting strings, etc.\n<|/ a dscore=1\
    \ |>\n<| a tags=string,julia,substring |>\nI wrote a package for Julia called\
    \ Substring that does exactly what you want. It also has a lot of other useful\
    \ functionalities like searching substrings, splitting strings, etc.\n<|/ a dscore=1\
    \ |>\n<| a tags=string,julia,substring |>\nI wrote a package for Julia called\
    \ Substring that does exactly what you want. It also has a lot of other useful\
    \ functionalities like searching substrings, splitting strings, etc.\n<|/ a dscore=1\
    \ |>\n<| a tags=string,julia,substring |>\nI wrote a package for Julia called\
    \ Substring that does exactly what you want. It also has a lot of other useful\
    \ functionalities like searching substrings, splitting strings, etc.\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a package for Julia called Substring that does\
    \ exactly what you want. It also has a lot of other useful functionalities like\
    \ searching substrings, splitting strings, etc.\n<code>\njulia> using Substring",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      if a[1] == b[1] \n            return cycpattern_check(a[2:], b[2:])\n \
    \       else \n            return cycpattern_check(a[1:], b[1:])\nend", "    \n\
    \    \n    if length(a) == length(b) \n        \n        if a == b \n        \
    \    \n            return true\n        \n        else \n            \n      \
    \      return false\n    \n    else \n        \n        if length(a) > length(b)\
    \ \n            \n            return cycpattern_check(b, a)\n        \n      \
    \  else \n            \n            return cycpattern_check(a, b) \n    \nend\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\", \"abd\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"hello\", \"ell\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"whassup\", \"psus\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"abab\", \"baa\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"efef\", \"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    himenss\", \"simen\")\n</cell>\n<text>\nCyclic Patterns\nA cyclic pattern is a\
    \ pattern that repeats itself in its cycle.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n      \
    \  return false \n    else if length(a) == 1 \n        return b == a \n    else\
    \ if length(b) == 1 \n        return a == b \n    else \n        return cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) \nend\n</code>\n<|/\
    \ a tags=julia,string |>\n<| c |>\nThanks for your answer! I tried to run your\
    \ code, but I got this error:", "    if length(a) == length(b) \n        return\
    \ true\n    else \n        return false\n    end\nend\n</code>\n<|/ a tags=string,julia,pattern-matching\
    \ |>\n<| a |>\n<code>", "    \n    if length(a) == 0 || length(b) == 0 \n    \
    \    return false \n    \n    if length(a) == 1 \n        return b == a \n   \
    \ \n    if length(b) == 1 \n        return a == b \n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return cycpattern_check(b, a)\n    \n    if length(b) > length(a) \n     \
    \   return cycpattern_check(a, b) \n    \n    if length(a) == length(b) \n   \
    \     return true\n    \n    if length(a) > length(b) \n        return cycpattern_check(b,\
    \ a)\n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(b, a)\n    \n    if\
    \ length(b) > length(a) \n        return cycpattern_check(a, b) \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    if length(a) > length(b)\
    \ \n        return cycpattern_check(b, a)\n    \n    if length(b) > length(a)\
    \ \n        return cycpattern_check(a, b) \n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return cycpattern_check(b,\
    \ a)\n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(b, a)\n    \n    if\
    \ length(b) > length(a) \n        return cycpattern_check(a, b) \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    if length(a) > length(b)\
    \ \n        return cycpattern_check(b, a)\n    \n    if length(b) > length(a)\
    \ \n        return cycpattern_check(a, b) \n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return cycpattern_check(b,\
    \ a)\n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(b, a)\n    \n    if\
    \ length(b) > length(a) \n        return cycpattern_check(a, b) \n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    if length(a) > length(b)\
    \ \n        return cycpattern_check(b, a)\n", "    if length(a) == 0 || length(b)\
    \ == 0 \n        return false \n    else \n        return (cycpattern_check(b[1:],\
    \ a) || cycpattern_check(a[1:], b)) \nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26597378)\n\
    <|/ c |>\n<| c |>\nThe question was \"How to check if a word is a substring of\
    \ a word or any of its rotations?\" The answer was \"Use recursion.\" I provided\
    \ a solution that worked for me and I explained why it works. I didn't post a\
    \ full solution, since this was a homework assignment. I'm sorry if my answer\
    \ was unclear.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26597378)\n<|/ c |>\n<| c |>\n\
    I provided a solution that worked for me and I explained why it works. I didn't\
    \ post a full solution, since this was a homework assignment. I'm sorry if my\
    \ answer was unclear.\n<|/ c |>\n<| c |>\nI provided a solution that worked for\
    \ me and I explained why it works. I didn't post a full solution, since this was\
    \ a homework assignment. I'm sorry if my answer was unclear.\n<|/ c |>\n<| a tags=string,julia\
    \ |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
