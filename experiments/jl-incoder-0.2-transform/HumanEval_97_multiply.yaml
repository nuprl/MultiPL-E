name: HumanEval_97_multiply
language: jl
prompt: "\"\"\"Complete the function that takes two integers and returns \n    the\
  \ product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
  \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
  \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\nfunction multiply(a::Int64,\
  \ b::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
  \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) ==\
  \ 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
  \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
completions: ["    if b == 0\n        0\n    else\n        (a*b).digits\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if a < 0 or b < 0 \n        error(\"\
    The inputs must be positive\")\n    elseif b == 0 \n        error(\"The input\
    \ cannot be 0\")\n    elseif b == 0 \n        error(\"The input cannot be 0\"\
    )\n    elseif a == 0 \n        error(\"The input cannot be 0\")\n    else\n  \
    \      return a * b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the sum of its unit digits.\nExamples:\n>>>\
    \ sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(15)\n\
    20\n>>> sum(0)\n0\n>>> sum(10)\n10\n>>> sum(100)\n100\n>>> sum(1000)\n1000\n>>>\
    \ sum(10000)\n10000\n>>> sum(100000)\n100000\n>>> sum(1000000)\n1000000\n>>> sum(10000000)\n\
    10000000\n>>> sum(100000000)\n100000000\n>>> sum(1000000000)\n1000000000\n>>>\
    \ sum(10000000000)\n10000000000\n>>> sum(100000000000)\n100000000000\n>>> sum(1000000000000)\n\
    1000000000000\n>>> sum(1000000000001)\n1000000000001\n>>> sum(1000000000002)\n\
    1000000000002\n>>> sum(1000000000003)\n1000000000003\n>>> sum(1000000000004)\n\
    1000000000004\n>>> sum(1000000000005)\n1000000000005\n>>> sum(1000000000006)\n\
    1000000000006\n>>> sum(1000000000007)\n1000000000007\n>>> sum(1000000000008)\n\
    1000000000008\n>>> sum(1000000000009)\n1000000000009\n>>> sum(1000000000010)\n\
    1000000000010\n>>> sum(1000000000011)\n1000000000011\n>>> sum(1000000000012)\n\
    1000000000012\n>>> sum(1000000000013)\n1000000000013\n>>> sum(1000000000014)\n\
    1000000000014\n>>> sum(1000000000015)\n1000000000015\n>>> sum(1000000000016)\n\
    1000000000016\n>>> sum(1000000000017)\n1000000000017\n>>> sum(1000000000018)\n\
    1000000000018\n>>> sum(1000000000019)\n1000000000019\n>>> sum(1000000000020)\n\
    1000000000020\n>>> sum(1000000000021)\n1000000000021\n>>> sum(1000000000022)\n\
    1000000000022\n>>> sum(1000000000023)\n1000000000023\n>>> sum(1000000000024)\n\
    1000000000024\n>>> sum(1000000000025)\n1000000000025\n>>> sum(1000000000026)\n\
    1000000000026\n>>> sum(1000000000027)\n1000000000027\n>>> sum(1000000000028)",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      0\n    elseif b == 0 \n        a\n    elseif b == 1 \n        a\n    elseif\
    \ b == 2 \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b ==\
    \ 4 \n        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b ==\
    \ 6 \n        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif\
    \ b == 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n \
    \   elseif b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a *\
    \ 10000000000\n    elseif b == 12 \n        a * 100000000000\n    elseif b ==\
    \ 13 \n        a * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n\
    \    elseif b == 15 \n        a * 100000000000000\n    elseif b == 16 \n     \
    \   a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 10000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 100000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000000\n    elseif b ==\
    \ 38\n        a * 10000000000000000000000000000000000000\n    elseif b == 39\n\
    \        a * 100000000000000000000000000000000000000\n    elseif b == 40\n   \
    \     a * 1000000000000000000000000000000000000000\n    elseif b == 41\n     \
    \   a * 10000000000000000000000000000000000", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise: Write a function that takes two\
    \ integers and returns the sum of the unit digits of their product (modulo 10).\
    \ Assume the input is always valid.", "    if b == 0 \n        0\n    else\n \
    \       (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0\
    \ \n        return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer and returns the sum of the digits of that integer.\nExamples:\n>>> sum(12345)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n", "  \
    \  if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of digits in an integer.\nExamples:\n>>> digits(1234)\n4\n>>> digits(-1234)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(12345678)\n8\n>>> digits(-12345678)\n8\n>>> digits(1234567890)\n\
    9\n>>> digits(-1234567890)\n9\n>>> digits(123456789012345)\n10\n>>> digits(-123456789012345)\n\
    10\n>>> digits(123456789012345678)\n11\n>>> digits(-123456789012345678)\n11\n\
    >>> digits(12345678901234567890)\n12\n>>> digits(-12345678901234567890)\n12\n\
    >>> digits(1234567890123456789012345)\n13\n>>> digits(-1234567890123456789012345)\n\
    13\n>>> digits(1234567890123456789012345678)\n14\n>>> digits(-1234567890123456789012345678)\n\
    14\n>>> digits(123456789012345678901234567890)\n15\n>>> digits(-123456789012345678901234567890)\n\
    15\n>>> digits(12345678901234567890123456789012345)\n16\n>>> digits(-12345678901234567890123456789012345)\n\
    16\n>>> digits(12345678901234567890123456789012345678)\n17\n>>> digits(-12345678901234567890123456789012345678)\n\
    17\n>>> digits(1234567890123456789012345678901234567890)\n18\n>>> digits(-1234567890123456789012345678901234567890)\n\
    18\n>>> digits(123456789012345678901234567890123456789012345)\n19\n>>> digits(-123456789012345678901234567890123456789012345)\n\
    19\n>>> digits(123456789012345678901234567890123456789012345678)\n20\n>>> digits(-123456789012345678901234567890123456789012345678)\n\
    20\n>>> digits(12345678901234567890123456789012345678901234567890)\n21\n>>> digits(-12345678901234567890123456789012345678901234567890)\n\
    21\n>>> digits(1234567890123456789012345678901234567890123456789012345)\n22\n\
    >>> digits(-1234567890123456789012345678901234567890123456789012345)\n22\n>>>\
    \ digits(1234567890123456789012345678901234567890123456789012345678)", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 + 7)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the unit\
    \ digits. \nThe input vector is assumed to be valid.\nExamples:\n>>> sum([1, 4,\
    \ 9, 16, 25])\n49\n>>> sum([1, 4, 9, 16, 25], 0)\n0\n>>> sum([1, 4, 9, 16, 25],\
    \ 1)\n16\n>>> sum([1, 4, 9, 16, 25], 2)\n49\n>>> sum([1, 4, 9, 16, 25], 3)\n49\n\
    >>> sum([1, 4, 9, 16, 25], 4)\n49\n>>> sum([1, 4, 9, 16, 25], 5)\n49\n>>> sum([1,\
    \ 4, 9, 16, 25], 6)\n49\n>>> sum([1, 4, 9, 16, 25], 7)\n49\n>>> sum([1, 4, 9,\
    \ 16, 25], 8)\n49\n>>> sum([1, 4, 9, 16, 25], 9)\n49\n>>> sum([1, 4, 9, 16, 25],\
    \ 10)\n49\n>>> sum([1, 4, 9, 16, 25], 11)\n49\n>>> sum([1, 4, 9, 16, 25], 12)\n\
    49\n>>> sum([1, 4, 9, 16, 25], 13)\n49\n>>> sum([1, 4, 9, 16, 25], 14)\n49\n>>>\
    \ sum([1, 4, 9, 16, 25], 15)\n49\n>>> sum([1, 4, 9, 16, 25], 16)\n49\n>>> sum([1,\
    \ 4, 9, 16, 25], 17)\n49\n>>> sum([1, 4, 9, 16, 25], 18)\n49\n>>> sum([1, 4, 9,\
    \ 16, 25], 19)\n49\n>>> sum([1, 4, 9, 16, 25], 20)\n49\n>>> sum([1, 4, 9, 16,\
    \ 25], 21)\n49\n>>> sum([1, 4, 9, 16, 25], 22)\n49\n>>> sum([1, 4, 9, 16, 25],\
    \ 23)\n49\n>>> sum([1, 4, 9, 16, 25], 24)\n49\n>>> sum([1, 4, 9, 16, 25], 25)\n\
    49\n>>> sum([1, 4, 9, 16, 25], 26)\n49\n>>> sum([1, 4, 9, 16, 25], 27)\n49\n>>>\
    \ sum([1, 4, 9, 16, 25], 28)\n49\n>>> sum([1, 4, 9, 16, 25], 29)\n49\n>>> sum([1,\
    \ 4, 9, 16, 25], 30)\n49\n>>> sum([1, 4, 9, 16, 25], 31)\n49\n>>> sum([1, 4, 9, ",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        error(\"Invalid input\")\n    else\n        return a * b\nend",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        0\n    else\n        digits(a) * digits(b)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (without using any built-in functions).\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        return 0 \n    else \n\
    \        return (a * 10 * b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ integers and returns their sum.\nAs a reminder, sum() is a function that takes\
    \ two integers and returns the sum of their digits.\nExamples:\n>>> sum(148, 412)\n\
    16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n\
    <code language=julia-1.5>", "    if b == 0\n        0\n    else\n        (a *\
    \ 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the sum of the digits of that integer.\nExamples:\n>>> sum(12345)\n6\n>>> sum(123)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9\
    \ \n        0\n    elseif b < 10 \n        a * 10\n    else\n        a * 10 +\
    \ b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns the sum of the unit digits\
    \ of their product \n    (i.e. the sum of their unit digits).\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>>\
    \ sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    For example: multiply(148,\
    \ 412) should return 16 and multiply(19, 28) should return 72.\n    Use a while\
    \ loop to solve this problem.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if b\
    \ == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a\
    \ * 10^(b % 10)) % 10\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes an array of integers and returns the sum of the \n   \
    \ digits of all the numbers in the array.\n    Examples:\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([1, 2, -3, 4])\n    6\n    >>> sum([-1, -2, -3])\n    6\n\
    \    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return (a\
    \ * b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n\
    \    digits(n::Int64)", "    if b == 0 \n        return 0 \n    else \n      \
    \  return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the sum of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> add(148,\
    \ 412)\n    168\n    >>> add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n\
    \    >>> add(14, -15)\n    20\n    \"\"\"", "    if b == 0\n        0\n    else\n\
    \        if a < 0\n            abs(a) * b\n        else\n            a * b\n \
    \       end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (that is, the product of their unit \n    digits).\n    Assume the input\
    \ is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19,\
    \ 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n\
    \    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return a\
    \ * b \nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the digits of its input. \nExamples:\n>>> sum_digits(1234)\n\
    4\n>>> sum_digits(-1234)\n-4\n>>> sum_digits(0)\n0\n>>> sum_digits(123456789)\n\
    12\n>>> sum_digits(-123456789)\n-12\n>>> sum_digits(1234567890)\n12\n>>> sum_digits(-1234567890)\n\
    -12\n>>> sum_digits(12345678901)\n13\n>>> sum_digits(-12345678901)\n-13\n>>> sum_digits(123456789012)\n\
    14\n>>> sum_digits(-123456789012)\n-14\n>>> sum_digits(1234567890123)\n15\n>>>\
    \ sum_digits(-1234567890123)\n-15\n>>> sum_digits(12345678901234)\n16\n>>> sum_digits(-12345678901234)\n\
    -16\n>>> sum_digits(123456789012345) \n17\n>>> sum_digits(-123456789012345)\n\
    -17\n>>> sum_digits(1234567890123456)\n18\n>>> sum_digits(-1234567890123456)\n\
    -18\n>>> sum_digits(1234567890123456789)\n19\n>>> sum_digits(-1234567890123456789)\n\
    -19\n>>> sum_digits(12345678901234567890)\n20\n>>> sum_digits(-12345678901234567890)\n\
    -20\n>>> sum_digits(123456789012345678901)\n21\n>>> sum_digits(-123456789012345678901)\n\
    -21\n>>> sum_digits(1234567890123456789012)\n22\n>>> sum_digits(-1234567890123456789012)\n\
    -22\n>>> sum_digits(12345678901234567890123)\n23\n>>> sum_digits(-12345678901234567890123)\n\
    -23\n>>> sum_digits(123456789012345678901234)\n24\n>>> sum_digits(-123456789012345678901234)\n\
    -24\n>>> sum_digits(1234567890123456789012345)\n25\n>>> sum_digits(-1234567890123456789012345)\n\
    -25\n>>> sum_digits(12345678901234567890123456)\n26\n>>> sum_digits(-12345678901234567890123456)\n\
    -26\n>>> sum_digits(12345678901234567890123456789)\n27\n>>> sum_digits(-123456789"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
