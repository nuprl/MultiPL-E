name: HumanEval_97_multiply
language: jl
prompt: "\"\"\"Complete the function that takes two integers and returns \n    the\
  \ product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
  \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
  \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\nfunction multiply(a::Int64,\
  \ b::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
  \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) ==\
  \ 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
  \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
completions: ["    if b == 0\n        0\n    else\n        (a*b).digits\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if a < 0 or b < 0 \n        error(\"\
    The inputs must be positive\")\n    elseif b == 0 \n        error(\"The input\
    \ cannot be 0\")\n    elseif b == 0 \n        error(\"The input cannot be 0\"\
    )\n    elseif a == 0 \n        error(\"The input cannot be 0\")\n    else\n  \
    \      return a * b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the sum of its unit digits.\nExamples:\n>>>\
    \ sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(15)\n\
    20\n>>> sum(0)\n0\n>>> sum(10)\n10\n>>> sum(100)\n100\n>>> sum(1000)\n1000\n>>>\
    \ sum(10000)\n10000\n>>> sum(100000)\n100000\n>>> sum(1000000)\n1000000\n>>> sum(10000000)\n\
    10000000\n>>> sum(100000000)\n100000000\n>>> sum(1000000000)\n1000000000\n>>>\
    \ sum(10000000000)\n10000000000\n>>> sum(100000000000)\n100000000000\n>>> sum(1000000000000)\n\
    1000000000000\n>>> sum(1000000000001)\n1000000000001\n>>> sum(1000000000002)\n\
    1000000000002\n>>> sum(1000000000003)\n1000000000003\n>>> sum(1000000000004)\n\
    1000000000004\n>>> sum(1000000000005)\n1000000000005\n>>> sum(1000000000006)\n\
    1000000000006\n>>> sum(1000000000007)\n1000000000007\n>>> sum(1000000000008)\n\
    1000000000008\n>>> sum(1000000000009)\n1000000000009\n>>> sum(1000000000010)\n\
    1000000000010\n>>> sum(1000000000011)\n1000000000011\n>>> sum(1000000000012)\n\
    1000000000012\n>>> sum(1000000000013)\n1000000000013\n>>> sum(1000000000014)\n\
    1000000000014\n>>> sum(1000000000015)\n1000000000015\n>>> sum(1000000000016)\n\
    1000000000016\n>>> sum(1000000000017)\n1000000000017\n>>> sum(1000000000018)\n\
    1000000000018\n>>> sum(1000000000019)\n1000000000019\n>>> sum(1000000000020)\n\
    1000000000020\n>>> sum(1000000000021)\n1000000000021\n>>> sum(1000000000022)\n\
    1000000000022\n>>> sum(1000000000023)\n1000000000023\n>>> sum(1000000000024)\n\
    1000000000024\n>>> sum(1000000000025)\n1000000000025\n>>> sum(1000000000026)\n\
    1000000000026\n>>> sum(1000000000027)\n1000000000027\n>>> sum(1000000000028)",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      0\n    elseif b == 0 \n        a\n    elseif b == 1 \n        a\n    elseif\
    \ b == 2 \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b ==\
    \ 4 \n        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b ==\
    \ 6 \n        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif\
    \ b == 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n \
    \   elseif b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a *\
    \ 10000000000\n    elseif b == 12 \n        a * 100000000000\n    elseif b ==\
    \ 13 \n        a * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n\
    \    elseif b == 15 \n        a * 100000000000000\n    elseif b == 16 \n     \
    \   a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 10000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 100000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000000\n    elseif b ==\
    \ 38\n        a * 10000000000000000000000000000000000000\n    elseif b == 39\n\
    \        a * 100000000000000000000000000000000000000\n    elseif b == 40\n   \
    \     a * 1000000000000000000000000000000000000000\n    elseif b == 41\n     \
    \   a * 10000000000000000000000000000000000", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise: Write a function that takes two\
    \ integers and returns the sum of the unit digits of their product (modulo 10).\
    \ Assume the input is always valid.", "    if b == 0 \n        0\n    else\n \
    \       (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0\
    \ \n        return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer and returns the sum of the digits of that integer.\nExamples:\n>>> sum(12345)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n", "  \
    \  if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of digits in an integer.\nExamples:\n>>> digits(1234)\n4\n>>> digits(-1234)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    5\n>>> digits(12345678)\n8\n>>> digits(-12345678)\n8\n>>> digits(1234567890)\n\
    9\n>>> digits(-1234567890)\n9\n>>> digits(123456789012345)\n10\n>>> digits(-123456789012345)\n\
    10\n>>> digits(123456789012345678)\n11\n>>> digits(-123456789012345678)\n11\n\
    >>> digits(12345678901234567890)\n12\n>>> digits(-12345678901234567890)\n12\n\
    >>> digits(1234567890123456789012345)\n13\n>>> digits(-1234567890123456789012345)\n\
    13\n>>> digits(1234567890123456789012345678)\n14\n>>> digits(-1234567890123456789012345678)\n\
    14\n>>> digits(123456789012345678901234567890)\n15\n>>> digits(-123456789012345678901234567890)\n\
    15\n>>> digits(12345678901234567890123456789012345)\n16\n>>> digits(-12345678901234567890123456789012345)\n\
    16\n>>> digits(12345678901234567890123456789012345678)\n17\n>>> digits(-12345678901234567890123456789012345678)\n\
    17\n>>> digits(1234567890123456789012345678901234567890)\n18\n>>> digits(-1234567890123456789012345678901234567890)\n\
    18\n>>> digits(123456789012345678901234567890123456789012345)\n19\n>>> digits(-123456789012345678901234567890123456789012345)\n\
    19\n>>> digits(123456789012345678901234567890123456789012345678)\n20\n>>> digits(-123456789012345678901234567890123456789012345678)\n\
    20\n>>> digits(12345678901234567890123456789012345678901234567890)\n21\n>>> digits(-12345678901234567890123456789012345678901234567890)\n\
    21\n>>> digits(1234567890123456789012345678901234567890123456789012345)\n22\n\
    >>> digits(-1234567890123456789012345678901234567890123456789012345)\n22\n>>>\
    \ digits(1234567890123456789012345678901234567890123456789012345678)", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 + 7)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the unit\
    \ digits. \nThe input vector is assumed to be valid.\nExamples:\n>>> sum([1, 4,\
    \ 9, 16, 25])\n49\n>>> sum([1, 4, 9, 16, 25], 0)\n0\n>>> sum([1, 4, 9, 16, 25],\
    \ 1)\n16\n>>> sum([1, 4, 9, 16, 25], 2)\n49\n>>> sum([1, 4, 9, 16, 25], 3)\n49\n\
    >>> sum([1, 4, 9, 16, 25], 4)\n49\n>>> sum([1, 4, 9, 16, 25], 5)\n49\n>>> sum([1,\
    \ 4, 9, 16, 25], 6)\n49\n>>> sum([1, 4, 9, 16, 25], 7)\n49\n>>> sum([1, 4, 9,\
    \ 16, 25], 8)\n49\n>>> sum([1, 4, 9, 16, 25], 9)\n49\n>>> sum([1, 4, 9, 16, 25],\
    \ 10)\n49\n>>> sum([1, 4, 9, 16, 25], 11)\n49\n>>> sum([1, 4, 9, 16, 25], 12)\n\
    49\n>>> sum([1, 4, 9, 16, 25], 13)\n49\n>>> sum([1, 4, 9, 16, 25], 14)\n49\n>>>\
    \ sum([1, 4, 9, 16, 25], 15)\n49\n>>> sum([1, 4, 9, 16, 25], 16)\n49\n>>> sum([1,\
    \ 4, 9, 16, 25], 17)\n49\n>>> sum([1, 4, 9, 16, 25], 18)\n49\n>>> sum([1, 4, 9,\
    \ 16, 25], 19)\n49\n>>> sum([1, 4, 9, 16, 25], 20)\n49\n>>> sum([1, 4, 9, 16,\
    \ 25], 21)\n49\n>>> sum([1, 4, 9, 16, 25], 22)\n49\n>>> sum([1, 4, 9, 16, 25],\
    \ 23)\n49\n>>> sum([1, 4, 9, 16, 25], 24)\n49\n>>> sum([1, 4, 9, 16, 25], 25)\n\
    49\n>>> sum([1, 4, 9, 16, 25], 26)\n49\n>>> sum([1, 4, 9, 16, 25], 27)\n49\n>>>\
    \ sum([1, 4, 9, 16, 25], 28)\n49\n>>> sum([1, 4, 9, 16, 25], 29)\n49\n>>> sum([1,\
    \ 4, 9, 16, 25], 30)\n49\n>>> sum([1, 4, 9, 16, 25], 31)\n49\n>>> sum([1, 4, 9, ",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        error(\"Invalid input\")\n    else\n        return a * b\nend",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        0\n    else\n        digits(a) * digits(b)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (without using any built-in functions).\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        return 0 \n    else \n\
    \        return (a * 10 * b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ integers and returns their sum.\nAs a reminder, sum() is a function that takes\
    \ two integers and returns the sum of their digits.\nExamples:\n>>> sum(148, 412)\n\
    16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n\
    <code language=julia-1.5>", "    if b == 0\n        0\n    else\n        (a *\
    \ 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the sum of the digits of that integer.\nExamples:\n>>> sum(12345)\n6\n>>> sum(123)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n6\n>>> sum(12)\n\
    6", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9\
    \ \n        0\n    elseif b < 10 \n        a * 10\n    else\n        a * 10 +\
    \ b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns the sum of the unit digits\
    \ of their product \n    (i.e. the sum of their unit digits).\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>>\
    \ sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    For example: multiply(148,\
    \ 412) should return 16 and multiply(19, 28) should return 72.\n    Use a while\
    \ loop to solve this problem.\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if b\
    \ == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a\
    \ * 10^(b % 10)) % 10\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes an array of integers and returns the sum of the \n   \
    \ digits of all the numbers in the array.\n    Examples:\n    >>> sum([1, 2, 3])\n\
    \    6\n    >>> sum([1, 2, -3, 4])\n    6\n    >>> sum([-1, -2, -3])\n    6\n\
    \    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return (a\
    \ * b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n\
    \    digits(n::Int64)", "    if b == 0 \n        return 0 \n    else \n      \
    \  return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the sum of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> add(148,\
    \ 412)\n    168\n    >>> add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n\
    \    >>> add(14, -15)\n    20\n    \"\"\"", "    if b == 0\n        0\n    else\n\
    \        if a < 0\n            abs(a) * b\n        else\n            a * b\n \
    \       end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (that is, the product of their unit \n    digits).\n    Assume the input\
    \ is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19,\
    \ 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n\
    \    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return a\
    \ * b \nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the digits of its input. \nExamples:\n>>> sum_digits(1234)\n\
    4\n>>> sum_digits(-1234)\n-4\n>>> sum_digits(0)\n0\n>>> sum_digits(123456789)\n\
    12\n>>> sum_digits(-123456789)\n-12\n>>> sum_digits(1234567890)\n12\n>>> sum_digits(-1234567890)\n\
    -12\n>>> sum_digits(12345678901)\n13\n>>> sum_digits(-12345678901)\n-13\n>>> sum_digits(123456789012)\n\
    14\n>>> sum_digits(-123456789012)\n-14\n>>> sum_digits(1234567890123)\n15\n>>>\
    \ sum_digits(-1234567890123)\n-15\n>>> sum_digits(12345678901234)\n16\n>>> sum_digits(-12345678901234)\n\
    -16\n>>> sum_digits(123456789012345) \n17\n>>> sum_digits(-123456789012345)\n\
    -17\n>>> sum_digits(1234567890123456)\n18\n>>> sum_digits(-1234567890123456)\n\
    -18\n>>> sum_digits(1234567890123456789)\n19\n>>> sum_digits(-1234567890123456789)\n\
    -19\n>>> sum_digits(12345678901234567890)\n20\n>>> sum_digits(-12345678901234567890)\n\
    -20\n>>> sum_digits(123456789012345678901)\n21\n>>> sum_digits(-123456789012345678901)\n\
    -21\n>>> sum_digits(1234567890123456789012)\n22\n>>> sum_digits(-1234567890123456789012)\n\
    -22\n>>> sum_digits(12345678901234567890123)\n23\n>>> sum_digits(-12345678901234567890123)\n\
    -23\n>>> sum_digits(123456789012345678901234)\n24\n>>> sum_digits(-123456789012345678901234)\n\
    -24\n>>> sum_digits(1234567890123456789012345)\n25\n>>> sum_digits(-1234567890123456789012345)\n\
    -25\n>>> sum_digits(12345678901234567890123456)\n26\n>>> sum_digits(-12345678901234567890123456)\n\
    -26\n>>> sum_digits(12345678901234567890123456789)\n27\n>>> sum_digits(-123456789",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      0\n    elseif b == 1\n        a\n    else\n        multiply(a/10, b%10)\
    \ * 10 + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0\
    \ \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n  \
    \  elseif b == 0 \n        a\n    elseif b == 1 \n        a\n    elseif b == 2\
    \ \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b == 4 \n\
    \        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b == 6 \n\
    \        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif b ==\
    \ 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n    elseif\
    \ b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a * 10000000000\n\
    \    elseif b == 12 \n        a * 100000000000\n    elseif b == 13 \n        a\
    \ * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n    elseif\
    \ b == 15 \n        a * 100000000000000\n    elseif b == 16 \n        a * 1000000000000000\n\
    \    elseif b == 17 \n        a * 10000000000000000\n    elseif b == 18 \n   \
    \     a * 100000000000000000\n    elseif b == 19 \n        a * 1000000000000000000\n\
    \    elseif b == 20 \n        a * 10000000000000000000\n    elseif b == 21 \n\
    \        a * 100000000000000000000\n    elseif b == 22 \n        a * 1000000000000000000000\n\
    \    elseif b == 23 \n        a * 10000000000000000000000\n    elseif b == 24\
    \ \n        a * 100000000000000000000000\n    elseif b == 25 \n        a * 1000000000000000000000000\n\
    \    elseif b == 26 \n        a * 10000000000000000000000000\n    elseif b ==\
    \ 27 \n        a * 100000000000000000000000000\n    elseif b == 28 \n        a\
    \ * 1000000000000000000000000000\n    elseif b == 29 \n        a * 10000000000000000000000000000\n\
    \    elseif b == 30 \n        a * 100000000000000000000000000000\n    elseif b\
    \ == 31 \n        a * 1000000000000000000000000000000\n    elseif b == 32 \n \
    \       a * 10000000000000000000000000000000\n    elseif b == 33 \n        a *\
    \ 100000000000000000000000000000000\n    elseif b == 34 \n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 35\n        a * 10000000000000000000000000000000000\n    elseif\
    \ b == 36\n        a * 100000000000000000000000000000000000\n    elseif b == 37\n\
    \        a * 1000000000000000000000000000000000000\n    elseif b == 38\n     \
    \   a * 10000000000000000000000000000000000000\n    elseif b == 39\n        a\
    \ * 100000000000000000000000000000000000000\n    elseif b == 40\n        a * 1000000000000000000000000000000000000000\n\
    \    elseif b == 41\n        a * 10000000000000000000000000000000000", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 + 7)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer $n$ and returns the number of digits in $n$. \nExamples:\n\
    $$\n\\begin{align}\n\\text{Number of digits in 14}&=3\\\n\\text{Number of digits\
    \ in 12}&=2\n\\end{align}\n$$", "    if b == 0 \n        return 0 \n    else \n\
    \        return (a * 10 + b) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n  \
    \      0\n    elseif b < a \n        0\n    else\n        (a * b) % 10\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.4>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.4>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in it.\n\
    Examples:\n>>> count_characters(\"hello\")\n5\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> count_characters(\"hello123\")\n6\n>>> count_characters(\"hello123\"\
    )\n6\n>>> ", "    if b == 0 \n        return 0 \n    else \n        return (a\
    \ * 10 + b) \nend \n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the unit digits. \nAssume that the input\
    \ is always valid.\nExamples:\n>>> sum([148, 412, 19, 28])\n16\n>>> sum([2020,\
    \ 1851])\n0\n>>> sum([14, -15])\n20\n\"\"\"", "    if b == 0 \n        0\n   \
    \ elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n    else\n\
    \        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the\
    \ function that takes two integers and returns \n    the product of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148,\
    \ 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n\
    \    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 or b < 0\
    \ \n        error(\"Invalid input\")\n    elseif b == 0 \n        error(\"Invalid\
    \ input\")\n    elseif b == 1 \n        return a\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n    elseif\
    \ b == -2 \n        0\n    elseif b == -3 \n        0\n    elseif b == -4 \n \
    \       0\n    elseif b == -5 \n        0\n    elseif b == -6 \n        0\n  \
    \  elseif b == -7 \n        0\n    elseif b == -8 \n        0\n    elseif b ==\
    \ -9 \n        0\n    elseif b == -10 \n        0\n    elseif b == -11 \n    \
    \    0\n    elseif b == -12 \n        0\n    elseif b == -13 \n        0\n   \
    \ elseif b == -14 \n        0\n    elseif b == -15 \n        0\n    elseif b ==\
    \ -16 \n        0\n    elseif b == -17 \n        0\n    elseif b == -18 \n   \
    \     0\n    elseif b == -19 \n        0\n    elseif b == -20 \n        0\n  \
    \  elseif b == -21 \n        0\n    elseif b == -22 \n        0\n    elseif b\
    \ == -23 \n        0\n    elseif b == -24 \n        0\n    elseif b == -25 \n\
    \        0\n    elseif b == -26 \n        0\n    elseif b == -27 \n        0\n\
    \    elseif b == -28 \n        0\n    elseif b == -29 \n        0\n    elseif\
    \ b == -30 \n        0\n    elseif b == -31 \n        0\n    elseif b == -32 \n\
    \        0\n    elseif b == -33 \n        0\n    elseif b == -34 \n        0\n\
    \    elseif b == -35 \n        0\n    elseif b == -36 \n        0\n    elseif\
    \ b == -37 \n        0\n    elseif b == -38 \n        0\n    elseif b == -39 \n\
    \        0\n    elseif b == -40 \n        0\n    elseif b == -41 \n        0\n\
    \    elseif b == -42 \n        0\n    elseif b == -43 \n        0\n    elseif\
    \ b == -44 \n        0\n    elseif b == -45 \n        0\n    elseif b == -46 \n\
    \        0\n    elseif b == -47 \n        0\n    elseif b == -48 \n        0\n\
    \    elseif b == -49", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        0\n    else\n        (a * b).digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(a::Int64)::Array{Int64}\n\
    Return the digits of a number as an array of integers\n\"\"\"", "    if b == 0\
    \ \n        return 0 \n    else \n        return (a * b) / b \nend \n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns the sum of the unit digits of their product \n(that is, the product\
    \ of their unit digits). \nAssume the input is always valid.\nExamples:\n>>> multiply(148,\
    \ 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14,\
    \ -15)\n20\nHint: You can use the function multiply to complete this exercise.",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n  \
    \      0\n    elseif b < 10 \n        10 * b\n    elseif b < 100 \n        10\
    \ * b + 10\n    elseif b < 1000 \n        10 * b + 10 * b + 10\n    elseif b <\
    \ 10000 \n        10 * b + 10 * b + 10 * b + 10\n    elseif b < 100000 \n    \
    \    10 * b + 10 * b + 10 * b + 10 * b + 10\n    elseif b < 1000000 \n       \
    \ 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10\n    elseif b < 10000000 \n\
    \        10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10\n    elseif\
    \ b < 100000000 \n        10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b\
    \ + 10 * b + 10\n    elseif b < 1000000000 \n        10 * b + 10 * b + 10 * b\
    \ + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10\n    elseif b < 10000000000\
    \ \n        10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10\
    \ * b + 10 * b + 10 * b + 10 * b + 10\n    elseif b < 100000000000 \n        10\
    \ * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b\
    \ + 10 * b + 10 * b + 10 * b + 10 * b + 10\n    elseif b < 1000000000000 \n  \
    \      10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b +\
    \ 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10\n    elseif\
    \ b < 10000000000000 \n        10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10\
    \ * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b\
    \ + 10 * b + 10 * b + 10 * b + 10\n    elseif b < 100000000000000 \n        10\
    \ * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b\
    \ + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10 * b + 10",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      0\n    elseif b == 1 \n        a\n    elseif b == 2 \n        a * 10\n\
    \    elseif b == 3 \n        a * 100\n    elseif b == 4 \n        a * 1000\n \
    \   elseif b == 5 \n        a * 10000\n    elseif b == 6 \n        a * 100000\n\
    \    elseif b == 7 \n        a * 1000000\n    elseif b == 8 \n        a * 10000000\n\
    \    elseif b == 9 \n        a * 100000000\n    elseif b == 10 \n        a * 1000000000\n\
    \    elseif b == 11 \n        a * 10000000000\n    elseif b == 12 \n        a\
    \ * 100000000000\n    elseif b == 13 \n        a * 1000000000000\n    elseif b\
    \ == 14 \n        a * 10000000000000\n    elseif b == 15 \n        a * 100000000000000\n\
    \    elseif b == 16 \n        a * 1000000000000000\n    elseif b == 17 \n    \
    \    a * 10000000000000000\n    elseif b == 18 \n        a * 100000000000000000\n\
    \    elseif b == 19 \n        a * 1000000000000000000\n    elseif b == 20 \n \
    \       a * 10000000000000000000\n    elseif b == 21 \n        a * 100000000000000000000\n\
    \    elseif b == 22 \n        a * 1000000000000000000000\n    elseif b == 23 \n\
    \        a * 10000000000000000000000\n    elseif b == 24 \n        a * 100000000000000000000000\n\
    \    elseif b == 25 \n        a * 1000000000000000000000000\n    elseif b == 26\
    \ \n        a * 10000000000000000000000000\n    elseif b == 27 \n        a * 100000000000000000000000000\n\
    \    elseif b == 28 \n        a * 1000000000000000000000000000\n    elseif b ==\
    \ 29 \n        a * 10000000000000000000000000000\n    elseif b == 30 \n      \
    \  a * 100000000000000000000000000000\n    elseif b == 31 \n        a * 1000000000000000000000000000000\n\
    \    elseif b == 32 \n        a * 10000000000000000000000000000000\n    elseif\
    \ b == 33 \n        a * 100000000000000000000000000000000\n    elseif b == 34\
    \ \n        a * 1000000000000000000000000000000000\n    elseif b == 35 \n    \
    \    a * 10000000000000000000000000000000000\n    elseif b == 36\n        a *\
    \ 100000000000000000000000000000000000\n    elseif b == 37\n        a * 1000000000000000000000000000000000000\n\
    \    elseif b == 38\n        a * 10000000000000000000000000000000000000\n    elseif\
    \ b == 39\n        a * 100000000000000000000000000000000000000\n    elseif b ==\
    \ 40\n        a * 1000000000000000000000000000000000000000\n    elseif b == 41\n\
    \        a * 10000000000000000000000000000000000000000\n    elseif b == 42", " \
    \   if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product (modulo 10). Assume that the input\
    \ is always valid.", "    if b == 0\n        return 0\n    \n    if a < 0\n  \
    \      return -multiply(-a, b)\n    \n    if b < 0\n        return -multiply(a,\
    \ b*-1)\n    \n    if b == 0\n        return a\n    \n    if a == 0\n        return\
    \ 0\n    \n    if a < b\n        return multiply(a*10, b) + multiply(a*10-b*10,\
    \ 10)\n    \n    return multiply(a*10, b)*10 + multiply(a*10-b*10, 10)*10\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, 15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer and returns the sum of its unit digits.\nExamples:\n>>> sum(148)\n16\n\
    >>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(", "    if a < 0 or b < 0 \n        error(\"Invalid\
    \ input\")\n    else if a == 0 || b == 0\n        error(\"Invalid input\")\n \
    \   else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n  \
    \      0\n    elseif b < 10 \n        a * 10\n    elseif b < 100 \n        a *\
    \ 10 + b\n    elseif b < 1000 \n        a * 10 + b * 10\n    elseif b < 10000\
    \ \n        a * 10 + b * 100\n    elseif b < 100000 \n        a * 10 + b * 1000\n\
    \    elseif b < 1000000 \n        a * 10 + b * 10000\n    elseif b < 10000000\
    \ \n        a * 10 + b * 100000\n    elseif b < 100000000 \n        a * 10 + b\
    \ * 1000000\n    elseif b < 1000000000 \n        a * 10 + b * 10000000\n    elseif\
    \ b < 10000000000 \n        a * 10 + b * 100000000\n    elseif b < 100000000000\
    \ \n        a * 10 + b * 1000000000\n    elseif b < 1000000000000 \n        a\
    \ * 10 + b * 10000000000\n    elseif b < 10000000000000 \n        a * 10 + b *\
    \ 100000000000\n    elseif b < 100000000000000 \n        a * 10 + b * 1000000000000\n\
    \    elseif b < 1000000000000000 \n        a * 10 + b * 10000000000000\n    elseif\
    \ b < 10000000000000000 \n        a * 10 + b * 100000000000000\n    elseif b <\
    \ 100000000000000000 \n        a * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000\
    \ \n        a * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000\
    \ \n        a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n   \
    \ elseif b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n\
    \        multiply(a, b / 10)\n    else\n        multiply(b / 10, a)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return 0 \n\
    \    else \n        return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n\
    \        return a\n    elseif b == 1 \n        return a\n    elseif b > a \n \
    \       return 0\n    elseif b == a \n        return a\n    elseif b == 0 \n \
    \       return a\n    elseif b == 1 \n        return a\n    elseif b > a \n  \
    \      return 0\n    elseif b == a \n        return a\n    elseif b > a \n   \
    \     return 0\n    elseif b == a \n        return a\n    elseif b > a \n    \
    \    return 0\n    elseif b == a \n        return a\n    elseif b > a \n     \
    \   return 0\n    elseif b == a \n        return a\n    elseif b > a \n      \
    \  return 0\n    elseif b == a \n        return a\n    elseif b > a \n       \
    \ return 0\n    elseif b == a \n        return a\n    elseif b > a \n        return\
    \ 0\n    elseif b == a \n        return a\n    elseif b > a \n        return 0\n\
    \    elseif b == a \n        return a\n    elseif b > a \n        return 0\n \
    \   elseif b == a \n        return a\n    elseif b > a \n        return 0\n  \
    \  elseif b == a \n        return a\n    elseif b > a \n        return 0\n   \
    \ elseif b == a \n        return a\n    elseif b > a \n        return 0\n    elseif\
    \ b == a \n        return a\n    elseif b > a \n        return 0\n    elseif b\
    \ == a \n        return a\n    elseif b > a \n        return 0\n    elseif b ==\
    \ a \n        return a\n    elseif b > a \n        return 0\n    elseif b == a\
    \ \n        return a\n    elseif b > a \n        return 0\n    elseif b == a \n\
    \        return a\n    elseif b > a \n        return 0\n    elseif b == a \n \
    \       return a\n    elseif b > a \n        return 0\n    elseif b == a \n  \
    \      return a\n    elseif b > a \n        return 0\n    elseif b == a \n   \
    \     return a\n    elseif b > a \n        return 0\n    elseif b == a \n    \
    \    return a\n    elseif b > a \n        return 0\n    elseif b == a \n     \
    \   return a\n    elseif b > a \n        return 0\n    elseif b == a \n      \
    \  return a\n    elseif b > a \n        return 0\n    elseif b == a \n       \
    \ return a\n    elseif b > a \n        return 0\n    elseif b == a \n        return\
    \ a\n    elseif b > a \n        return 0\n    elseif b == a ", "    if b == 0\
    \ \n        return 0 \n    else \n        return (a * 10 + b) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of their unit digits.\n\
    Assume the input is always valid.\nExamples:\n>>> add(148, 412)\n168\n>>> add(19,\
    \ 28)\n72\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n20\n</text>\n<code language=julia-1.5>",
  "    if a < 0 || b < 0\n        error(\"The inputs must be non-negative\")\n   \
    \ elseif b == 0\n        return a\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        error(\"Invalid input\")\n    elseif\
    \ b == 1\n        return a\n    else\n        return a * b\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ the sum of the unit digits.\nAs a reminder, the unit digit is the last digit\
    \ of the integer divided by 10.\nExamples:\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n\"\"\"", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * 10 + b) \nend \n\"\
    \"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return a * b\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10 \n      \
    \  a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif b < 1000 \n   \
    \     a * 10 + b * 10\n    elseif b < 10000 \n        a * 10 + b * 100\n    elseif\
    \ b < 100000 \n        a * 10 + b * 1000\n    elseif b < 1000000 \n        a *\
    \ 10 + b * 10000\n    elseif b < 10000000 \n        a * 10 + b * 100000\n    elseif\
    \ b < 100000000 \n        a * 10 + b * 1000000\n    elseif b < 1000000000 \n \
    \       a * 10 + b * 10000000\n    elseif b < 10000000000 \n        a * 10 + b\
    \ * 100000000\n    elseif b < 100000000000 \n        a * 10 + b * 1000000000\n\
    \    elseif b < 1000000000000 \n        a * 10 + b * 10000000000\n    elseif b\
    \ < 10000000000000 \n        a * 10 + b * 100000000000\n    elseif b < 100000000000000\
    \ \n        a * 10 + b * 1000000000000\n    elseif b < 1000000000000000 \n   \
    \     a * 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n       \
    \ a * 10 + b * 100000000000000\n    elseif b < 100000000000000000 \n        a\
    \ * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000 \n        a\
    \ * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000 \n       \
    \ a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000 \n   \
    \     a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n   \
    \ elseif b > 9 \n        0\n    elseif b < 10 \n        10 * b\n    elseif b <\
    \ 100 \n        10 * b + 10\n    elseif b < 1000 \n        10 * b + 10 * b + b\n\
    \    elseif b < 10000 \n        10 * b + 10 * b + b + b\n    elseif b < 100000\
    \ \n        10 * b + 10 * b + b + b + b\n    elseif b < 1000000 \n        10 *\
    \ b + 10 * b + b + b + b + b\n    elseif b < 10000000 \n        10 * b + 10 *\
    \ b + b + b + b + b + b\n    elseif b < 100000000 \n        10 * b + 10 * b +\
    \ b + b + b + b + b + b\n    elseif b < 1000000000 \n        10 * b + 10 * b +\
    \ b + b + b + b + b + b + b\n    elseif b < 10000000000 \n        10 * b + 10\
    \ * b + b + b + b + b + b + b + b + b\n    elseif b < 100000000000 \n        10\
    \ * b + 10 * b + b + b + b + b + b + b + b + b + b + b\n    elseif b < 1000000000000\
    \ \n        10 * b + 10 * b + b + b + b + b + b + b + b + b + b + b + b\n    elseif\
    \ b < 10000000000000 \n        10 * b + 10 * b + b + b + b + b + b + b + b + b\
    \ + b + b + b + b\n    elseif b < 100000000000000 \n        10 * b + 10 * b +\
    \ b + b + b + b + b + b + b + b + b + b + b + b + b + b\n    elseif b < 1000000000000000\
    \ \n        10 * b + 10 * b + b + b + b + b + b + b + b + b + b + b + b + b +\
    \ b + b + b\n    elseif b < 10000000000000000 \n        10 * b + 10 * b + b +\
    \ b + b + b + b + b + b + b + b + b + b + b + b + b + b + b\n    elseif b < 100000000000000000\
    \ \n        10 * b + 10 * b", "    if a < 0 || b < 0\n        error(\"Invalid\
    \ input\")\n    elseif b == 0\n        return a\n    else\n        return a *\
    \ b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) % (10^9 + 7)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the digits of its input. \nExamples:\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>>\
    \ sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> sum(12345)\n6\n>>> ",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ digits of its input. \nAssume that the input is always valid.\nExamples:\n>>>\
    \ sum(12345)\n6\n>>> sum(19)\n2\n>>> sum(2020)\n0\n>>> sum(14)\n4\n>>> sum(-15)\n\
    -4\n>>> sum(0)\n0\n>>> sum(10)\n10\n>>> sum(100)\n10\n>>> sum(1000)\n100\n>>>\
    \ sum(10000)\n1000\n>>> sum(100000)\n10000\n>>> sum(1000000)\n100000\n>>> sum(10000000)\n\
    10000000\n>>> sum(100000000)\n100000000\n>>> sum(1000000000)\n1000000000\n>>>\
    \ sum(10000000000)\n10000000000\n>>> sum(100000000000)\n100000000000\n>>> sum(1000000000000)\n\
    1000000000000\n>>> sum(1000000000001)\n1000000000001\n>>> sum(10000000000010)\n\
    10000000000010\n>>> sum(100000000000100)\n100000000000100\n>>> sum(1000000000001000)\n\
    1000000000001000\n>>> sum(10000000000010000)\n10000000000010000\n>>> sum(100000000000100000)\n\
    100000000000100000\n>>> sum(1000000000001000000)\n1000000000001000000\n>>> sum(10000000000010000000)\n\
    10000000000010000000\n>>> sum(100000000000100000000)\n100000000000100000000\n\
    >>> sum(1000000000001000000000)\n1000000000001000000000\n>>> sum(10000000000010000000000)\n\
    10000000000010000000000\n>>> sum(100000000000100000000000)\n100000000000100000000000\n\
    >>> sum(1000000000001000000000000)\n1000000000001000000000000\n>>> sum(1000000000001000000000001)\n\
    1000000000001000000000001\n>>> sum(10000000000010000000000010)\n10000000000010000000000010\n\
    >>> sum(100000000000100000000000100)\n100000000000100000000000100\n>>> sum(1000000000001000000000001000)\n\
    1000000000001000000000001000\n>>> sum(10000000000010000000000010000)\n10000000000010000000000010000\n\
    >>> sum(100000000000100000000000100000)\n10000000000010000000000", "    if b ==\
    \ 0 \n        0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if a < 0 or b < 0 \n        error(\"Invalid input\"\
    )\n    else if a == 0 || b == 0\n        error(\"Invalid input\")\n    else \n\
    \        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ a < 0 || b < 0\n        error(\"The inputs must be positive\")\n    elseif b\
    \ == 0\n        return a\n    else\n        return a * b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) / b \nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of two integers.\
    \ \nAssume the input is always valid.\nExamples:\n>>> add(148, 412)\n168\n>>>\
    \ add(19, 28)\n72\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n20\n</text>\n<code\
    \ language=julia-1.5>", "    if b == 0 \n        return 0 \n    else \n      \
    \  return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns its factorial. \nExamples:\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(0)\n1\n>>> factorial(3)\n6\n>>>\
    \ factorial(4)\n24\n>>> factorial(7)\n5040\n>>> factorial(8)\n40320\n>>> factorial(10)\n\
    3628800\n>>> factorial(11)\n3628800\n>>> factorial(13)\n3628800\n>>> factorial(15)\n\
    3628800\n>>> factorial(17)\n3628800\n>>> factorial(19)\n3628800\n>>> factorial(21)\n\
    3628800\n>>> factorial(23)\n3628800\n>>> factorial(25)\n3628800\n>>> factorial(27)\n\
    3628800\n>>> factorial(29)\n3628800\n>>> factorial(31)\n3628800\n>>> factorial(33)\n\
    3628800\n>>> factorial(35)\n3628800\n>>> factorial(37)\n3628800\n>>> factorial(39)\n\
    3628800\n>>> factorial(41)\n3628800\n>>> factorial(43)\n3628800\n>>> factorial(45)\n\
    3628800\n>>> factorial(47)\n3628800\n>>> factorial(49)\n3628800\n>>> factorial(51)\n\
    3628800\n>>> factorial(53)\n3628800\n>>> factorial(55)\n3628800\n>>> factorial(57)\n\
    3628800\n>>> factorial(59)\n3628800\n>>> factorial(61)\n3628800\n>>> factorial(63)\n\
    3628800\n>>> factorial(65)\n3628800\n>>> factorial(67)\n3628800\n>>> factorial(69)\n\
    3628800\n>>> factorial(71)\n3628800\n>>> factorial(73)\n3628800\n>>> factorial(75)\n\
    3628800\n>>> factorial(77)\n3628800\n>>> factorial(79)\n3628800\n>>> factorial(81)\n\
    3628800\n>>> factorial(83)\n3628800\n>>> ", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10 \n      \
    \  (a * 10) + b\n    else\n        multiply(a, (b - 10))\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27859068)\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question. He asked how to implement the function `multiply`\
    \ which takes two integers and returns the product of their unit digits. I provided\
    \ a solution and also provided some test cases to show that it works.\n<|/ c |>\n\
    <| c |>\nI believe this does answer the question. He asked how to implement the\
    \ function `multiply` which takes two integers and returns the product of their\
    \ unit digits. I provided a solution and also provided some test cases to show\
    \ that it works.\n<|/ c |>\n<| c |>\nI believe this does answer the question.\
    \ He asked how to implement the function `multiply` which takes two integers and\
    \ returns the product of their unit digits. I provided a solution and also provided\
    \ some test cases to show that it works.\n<|/ c |>\n<| c |>\nI believe this does\
    \ answer the question. He asked how to implement the function `multiply` which\
    \ takes two integers and returns the product of their unit digits. I provided\
    \ a solution and also provided some test cases to show that it works.\n<|/ c |>\n\
    <| a tags=recursion,julia |>\n<code>", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif b == 0 \n      \
    \  a\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif b\
    \ == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n\
    \    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 0\
    \ \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n \
    \   elseif b > 0 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0\
    \ \n        0\n    elseif b > 0 \n        0\n    elseif b == 0 \n        a\n \
    \   elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif b == 0\
    \ \n        a\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n  \
    \  elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 0 \n\
    \        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif\
    \ b > 0 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n      \
    \  0\n    elseif b > 0 \n        0\n    elseif b == 0 \n        a\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif b == 0 \n      \
    \  a\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif b\
    \ == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n\
    \    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 0\
    \ \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n \
    \   elseif b > 0 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0\
    \ \n        0\n    elseif b > 0 \n        0\n    elseif b == 0 \n        a\n \
    \   elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif b == 0\
    \ \n        a\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n  \
    \  elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    else", "    if\
    \ b == 0\n        return 0\n    \n    mult_digits = zeros(10)\n    \n    mult_digits[1]\
    \ = a%10\n    mult_digits[2] = (a/10)%10\n    mult_digits[3] = (a/100)%10\n  \
    \  mult_digits[4] = (a/1000)%10\n    mult_digits[5] = (a/10000)%10\n    mult_digits[6]\
    \ = (a/100000)%10\n    mult_digits[7] = (a/1000000)%10\n    mult_digits[8] = (a/10000000)%10\n\
    \    mult_digits[9] = (a/100000000)%10\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    return mult_digits[1] * mult_digits[2] * mult_digits[3] * mult_digits[4]\
    \ * mult_digits[5] * mult_digits[6] * mult_digits[7] * mult_digits[8] * mult_digits[9]\n\
    end\n</cell>\n<code language=julia-1.5>", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    else\n        return a*b\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nExamples:\n>>> count_characters(\"hello\")\n5\n>>> count_characters(\"\
    hello world\")\n10\n>>> count_characters(\"hello world!\")\n5\n>>> count_characters(\"\
    \")\n0\n>>> count_characters(\" \")\n0\n>>> count_characters(\"   \")\n3\n>>>\
    \ count_characters(\"abc\")\n3\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"\
    abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\"\
    )\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n\
    >>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"\
    abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\"\
    )\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n\
    >>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"\
    abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\"\
    )\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n\
    >>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"\
    abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\"\
    )\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n\
    >>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"\
    abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\"\
    )\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n\
    >>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"\
    abcde\")\n5\n>>> count_characters(\"abcde\")\n5\n>>> count_characters(\"abcde\"\
    )\n5\n>>> count_characters(\"abcde\")\n5\n>>> ", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in it.\nExamples:\n>>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!!\")\n14\n>>> count_characters(\"\
    Hello World!!!!!\")\n15\n>>> count_characters(\"Hello World!!!!!!\")\n16\n>>>\
    \ count_characters(\"Hello World!!!!!!!\")\n17\n>>> count_characters(\"Hello World!!!!!!!\"\
    ) \n18\n>>> count_characters(\"Hello World!!!!!!!\") \n19\n>>> count_characters(\"\
    Hello World!!!!!!!\") \n20\n>>> count_characters(\"Hello World!!!!!!!\") \n21\n\
    >>> count_characters(\"Hello World!!!!!!!\") \n22\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n23\n>>> count_characters(\"Hello World!!!!!!!\") \n24\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n25\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n26\n>>> count_characters(\"Hello World!!!!!!!\") \n27\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n28\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n29\n>>> count_characters(\"Hello World!!!!!!!\") \n30\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n31\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n32\n>>> count_characters(\"Hello World!!!!!!!\") \n33\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n34\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n35\n>>> count_characters(\"Hello World!!!!!!!\") \n36\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n37\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n38\n>>> count_characters(\"Hello World!!!!!!!\") \n39\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n40\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n41\n>>> count_characters(\"Hello World!!!!!!!\") \n42\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n43\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n44\n>>> count_characters(\"Hello World!!!!!!!\") \n45\n>>>\
    \ count_characters(\"Hello World!!!!!!!\") \n46\n>>> count_characters(\"Hello\
    \ World!!!!!!!\") \n47\n>>> count_characters(\"Hello World!!!!!!!\") \n48\n>>>\
    \ count_characters(\"Hello World", "    if b == 0 \n        0\n    elseif b <\
    \ 0 \n        0\n    elseif b > 0 \n        0\n    elseif b == 0 \n        a\n\
    \    elseif b == 1 \n        a\n    elseif b == 2 \n        a * 10\n    elseif\
    \ b == 3 \n        a * 100\n    elseif b == 4 \n        a * 1000\n    elseif b\
    \ == 5 \n        a * 10000\n    elseif b == 6 \n        a * 100000\n    elseif\
    \ b == 7 \n        a * 1000000\n    elseif b == 8 \n        a * 10000000\n   \
    \ elseif b == 9 \n        a * 100000000\n    elseif b == 10 \n        a * 1000000000\n\
    \    elseif b == 11 \n        a * 10000000000\n    elseif b == 12 \n        a\
    \ * 100000000000\n    elseif b == 13 \n        a * 1000000000000\n    elseif b\
    \ == 14 \n        a * 10000000000000\n    elseif b == 15 \n        a * 100000000000000\n\
    \    elseif b == 16 \n        a * 1000000000000000\n    elseif b == 17 \n    \
    \    a * 10000000000000000\n    elseif b == 18 \n        a * 100000000000000000\n\
    \    elseif b == 19 \n        a * 1000000000000000000\n    elseif b == 20 \n \
    \       a * 10000000000000000000\n    elseif b == 21 \n        a * 100000000000000000000\n\
    \    elseif b == 22 \n        a * 1000000000000000000000\n    elseif b == 23 \n\
    \        a * 10000000000000000000000\n    elseif b == 24 \n        a * 100000000000000000000000\n\
    \    elseif b == 25 \n        a * 1000000000000000000000000\n    elseif b == 26\
    \ \n        a * 10000000000000000000000000\n    elseif b == 27 \n        a * 100000000000000000000000000\n\
    \    elseif b == 28 \n        a * 1000000000000000000000000000\n    elseif b ==\
    \ 29 \n        a * 10000000000000000000000000000\n    elseif b == 30 \n      \
    \  a * 100000000000000000000000000000\n    elseif b == 31 \n        a * 1000000000000000000000000000000\n\
    \    elseif b == 32 \n        a * 10000000000000000000000000000000\n    elseif\
    \ b == 33 \n        a * 100000000000000000000000000000000\n    elseif b == 34\
    \ \n        a * 1000000000000000000000000000000000\n    elseif b == 35\n     \
    \   a * 10000000000000000000000000000000000\n    elseif b == 36\n        a * 100000000000000000000000000000000000\n\
    \    elseif b == 37\n        a * 1000000000000000000000000000000000000\n    elseif\
    \ b == 38\n        a * 10000000000000000000000000000000000000\n    elseif b ==\
    \ 39\n        a * 100000000000000000000000000000000000000\n    elseif b == 40\n\
    \        a * 1000000000000000000000000000000000000000\n    elseif b == 41\n  \
    \      a * 10000000000000000000000000000000000", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    else\n      \
    \  (a * 10^(b-1)) * 10^(b-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that takes two integers and returns the sum of the squares of the\
    \ \n    unit digits of their inputs. \n    Assume the input is always valid.\n\
    \    Examples:\n    >>> square_sum(148, 412)\n    16\n    >>> square_sum(19, 28)\n\
    \    72\n    >>> square_sum(2020, 1851)\n    0\n    >>> square_sum(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ a * b \nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the digits of its input. \nAssume that the input is\
    \ always valid.\nExamples:\n>>> sum(148)\n8\n>>> sum(19)\n9\n>>> sum(2020)\n0\n\
    >>> sum(14)\n4\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n", "    if a < 0 || b < 0\n        error(\"Invalid\
    \ input\")\n    elseif b == 0\n        a\n    else\n        multiply(a % 10, (b\
    \ / 10) * 10) + a / 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    else\n        return a * b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (that is, the sum of the digits of the product of the two numbers).\
    \ Assume the input is always valid.\nExamples:\n>>> multiply(148, 412)\n16\n>>>\
    \ multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n\
    </text>\n<code language=julia-1.5>", "    if b == 0 \n        0\n    else \n \
    \       multiply(b, a%b)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (e.g. (148, 412) -> (148,\
    \ 412, 0)).\n    Examples:\n    >>> sumUnitDigits(148, 412)\n    (148, 412, 0)\n\
    \    >>> sumUnitDigits(19, 28)\n    (19, 28, 0)\n    >>> sumUnitDigits(2020, 1851)\n\
    \    (2020, 1851, 0)\n    >>> sumUnitDigits(14, -15)\n    (14, -15, 0)\n    \"\
    \"\"", "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the sum of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> add(148, 412)\n    168\n\
    \    >>> add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n    >>> add(14,\
    \ -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n    else \n        multiply(b,\
    \ a%b)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (as in Exercise 1).\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n \
    \   >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    )\n    elseif b == 0 \n        return a\n    elseif b == 1 \n        return a\
    \ * b\n    elseif b > a \n        error(\"Invalid input\")\n    else\n       \
    \ return a * b / b\n    end\nend\n</cell>\n<code language=julia-1.0>", "    if\
    \ a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n      \
    \  return a\n    elseif b == 1\n        return a * b\n    else\n        return\
    \ a * b * 10 + digit(a) * digit(b - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n  \
    \      0\n    elseif b == a \n        a\n    else\n        multiply(b, a % b)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nI like the idea\
    \ of using modulo to avoid the recursive call, but this doesn't seem to work.\
    \ `multiply(148, 412)` returns `16`, but `multiply(19, 28)` returns `72`.\n<|/\
    \ c |>\n<| c |>\nI see what you mean. I've edited my answer to include a solution\
    \ that works.\n<|/ c |>\n<| c |>\nThe `if` statement is redundant. `b == a ? a\
    \ : multiply(b, a % b)` will do the same thing.\n<|/ c |>\n<| c |>\nYes, I agree.\
    \ I've edited my answer to reflect this.\n<|/ c |>\n<| a dscore=2 |>\nThe accepted\
    \ answer doesn't work for negative numbers. Here's a version that does:\n<code>",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (that is, the sum of the digits of \n    the product of the\
    \ unit digits). \n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ sum(multiply(148, 412))\n    16\n    >>> sum(multiply(19, 28))\n    72\n   \
    \ >>> sum(multiply(2020, 1851))\n    0\n    >>> sum(multiply(14, -15))\n    20\n\
    \    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return a\
    \ * b \nend \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n   \
    \ \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n", "    if b\
    \ == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n\
    <code language=julia-1.5>", "    if b == 0 \n        return 0 \n    else \n  \
    \      return (a * b) mod 10 \n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n        return\
    \ a*b\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ two integers and returns the sum of the \n    unit digits of their product (without\
    \ using multiplication).\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif\
    \ b == 1 \n        a\n    elseif b == -1 \n        a\n    elseif b == -2 \n  \
    \      a * 10\n    elseif b == -3 \n        a * 100\n    elseif b == -4 \n   \
    \     a * 1000\n    elseif b == -5 \n        a * 10000\n    elseif b == -6 \n\
    \        a * 100000\n    elseif b == -7 \n        a * 1000000\n    elseif b ==\
    \ -8 \n        a * 10000000\n    elseif b == -9 \n        a * 100000000\n    elseif\
    \ b == -10 \n        a * 1000000000\n    elseif b == -11 \n        a * 10000000000\n\
    \    elseif b == -12 \n        a * 100000000000\n    elseif b == -13 \n      \
    \  a * 1000000000000\n    elseif b == -14 \n        a * 10000000000000\n    elseif\
    \ b == -15 \n        a * 100000000000000\n    elseif b == -16 \n        a * 1000000000000000\n\
    \    elseif b == -17 \n        a * 10000000000000000\n    elseif b == -18 \n \
    \       a * 100000000000000000\n    elseif b == -19 \n        a * 1000000000000000000\n\
    \    elseif b == -20 \n        a * 10000000000000000000\n    elseif b == -21 \n\
    \        a * 100000000000000000000\n    elseif b == -22 \n        a * 1000000000000000000000\n\
    \    elseif b == -23 \n        a * 10000000000000000000000\n    elseif b == -24\
    \ \n        a * 100000000000000000000000\n    elseif b == -25 \n        a * 1000000000000000000000000\n\
    \    elseif b == -26 \n        a * 10000000000000000000000000\n    elseif b ==\
    \ -27 \n        a * 100000000000000000000000000\n    elseif b == -28 \n      \
    \  a * 1000000000000000000000000000\n    elseif b == -29 \n        a * 10000000000000000000000000000\n\
    \    elseif b == -30 \n        a * 100000000000000000000000000000\n    elseif\
    \ b == -31 \n        a * 1000000000000000000000000000000\n    elseif b == -32\
    \ \n        a * 10000000000000000000000000000000\n    elseif b == -33 \n     \
    \   a * 100000000000000000000000000000000\n    elseif b == -34 \n        a * 1000000000000000000000000000000000\n\
    \    elseif b == -35 \n        a * 10000000000000000000000000000000000\n    elseif\
    \ b == -36 \n        a * 100000000000000000000000000000000000\n    elseif b ==\
    \ -37 \n        a * 1000000000000000000000000000000000000\n    elseif b == -38",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (modulo 10). \n    Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n        return a\n\
    \    elseif b == 1 \n        return a\n    else\n        return a * b \n    end\n\
    end\n\"\"\"\nComplete the function that takes two integers and returns \n    the\
    \ sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> add(148, 412)\n    168\n    >>> add(19, 28)\n    72\n    >>> add(2020,\
    \ 1851)\n    2020\n    >>> add(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n\
    \        return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the sum of the squares\
    \ of the unit digits. \nAssume the input is always valid.\nExamples:\n>>> sum([148,\
    \ 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n\
    25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28,\
    \ 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148,\
    \ 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n\
    25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28,\
    \ 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148,\
    \ 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n\
    25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28,\
    \ 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148,\
    \ 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n\
    25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28,\
    \ 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148,\
    \ 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n\
    25\n>>> sum([148, 412, 19, 28, 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28,\
    \ 2020, 1851, 14])\n25\n>>> sum([148, 412, 19, 28, 2020, 1851, ", "    if b ==\
    \ 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n    else\n       \
    \ multiply(a, -b)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the digits of its input. \nAssume that the input is\
    \ always valid.\nExamples:\n>>> sum(148)\n8\n>>> sum(19)\n7\n>>> sum(2020)\n0\n\
    >>> sum(14)\n4\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)", "    if b == 0 \n        0\n    elseif b < 0\
    \ \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n    else\n        0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer. \nThe function should work for negative\
    \ integers as well.\nExamples:\n>>> digits(-14)\n2\n>>> digits(-15)\n3\n>>> digits(-16)\n\
    4\n>>> digits(-20)\n1\n>>> digits(-24)\n2\n>>> digits(-28)\n3\n>>> digits(-30)\n\
    4\n>>> digits(-32)\n5\n>>> digits(-36)\n6\n>>> digits(-39)\n7\n>>> digits(-42)\n\
    8\n>>> digits(-45)\n9\n>>> digits(-48)\n10\n>>> digits(-50)\n11\n>>> digits(-52)\n\
    12\n>>> digits(-55)\n13\n>>> digits(-58)\n14\n>>> digits(-60)\n15\n>>> digits(-62)\n\
    16\n>>> digits(-65)\n17\n>>> digits(-68)\n18\n>>> digits(-70)\n19\n>>> digits(-72)\n\
    20\n>>> digits(-75)\n21\n>>> digits(-78)\n22\n>>> digits(-80)\n23\n>>> digits(-82)\n\
    24\n>>> digits(-85)\n25\n>>> digits(-88)\n26\n>>> digits(-90)\n27\n>>> digits(-92)\n\
    28\n>>> digits(-95)\n29\n>>> digits(-98)\n30\n>>> digits(-100)\n31\n>>> digits(-102)\n\
    32\n>>> digits(-105)\n33\n>>> digits(-108)\n34\n>>> digits(-110)\n35\n>>> digits(-113)\n\
    36\n>>> digits(-115)\n37\n>>> digits(-117)\n38\n>>> digits(-119)\n39\n>>> digits(-121)\n\
    40\n>>> digits(-123)\n41\n>>> digits(-125)\n42\n>>> digits(-127)\n43\n>>> digits(-128)\n\
    44\n>>> digits(-130)\n45\n>>> ", "    if b == 0 \n        return 0 \n    else\
    \ \n        return a * b\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know how to use `@timeit` to measure the performance\
    \ of his code.\n<|/ c |>\n<| c |>\nI agree with you, my answer was more to show\
    \ how to use `@timeit` to measure the performance of his code. Thanks for your\
    \ comment\n<|/ c |>\n<| c |>\nI edited my answer to show how to use `@timeit`\
    \ to measure the performance of his code\n<|/ c |>\n<| c |>\nThank you for your\
    \ answer. I am still not able to understand how to use `@timeit` to measure the\
    \ performance of his code. Can you please help me with that?\n<|/ c |>\n<| c |>\n\
    I edited my answer to show how to use `@timeit` to measure the performance of\
    \ his code\n<|/ c |>\n<| a tags=julia,performance |>\nThe answer by is correct,\
    \ but I thought I'd add some explanation as to why it works.\nThe reason is that\
    \ the function multiply is defined as a function of 2 arguments. In Julia, functions\
    \ are first class objects. That means that you can pass them around and use them\
    \ in other functions. In your case, multiply is defined as a function of 2 arguments.\
    \ When you call multiply, you are actually calling the function multiply and passing\
    \ it 2 arguments. In Julia, functions are first class objects. That means that\
    \ you can pass them around and use them in other functions. In your case, multiply\
    \ is defined as a function of 2 arguments. When you call multiply, you are actually\
    \ calling the function multiply and passing it 2 arguments. In Julia, functions\
    \ are first class objects. That means that you can pass them around and use them\
    \ in other functions. In your case, multiply is defined as a function of 2 arguments.\
    \ When you call multiply, you are actually calling the function multiply and passing\
    \ it 2 arguments. In Julia, functions are first class objects. That means that\
    \ you can pass them around and use them in other functions. In your case, multiply\
    \ is defined as a function of 2 arguments. When you call multiply, you are actually\
    \ calling the function multiply and passing it 2 arguments. In Julia, functions\
    \ are first class objects. That means that you can pass them around and use them\
    \ in other functions. In your case, multiply is defined as a function of 2 arguments.\
    \ When you call multiply, you are actually calling the function multi", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \nend\n\
    </cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits. \n\
    Assume the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19,\
    \ 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if a <\
    \ 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return\
    \ a\n    else\n        return a * b\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `multiply(148, 412)`.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it yourself. It returns 16. Try it yourself.\
    \ It returns 72. Try it yourself. It returns 0.\n<|/ c |>\n<| c |>\nIt returns\
    \ 0 because `multiply(148, 412)` returns `0` because `b` is `0`.\n<|/ c |>\n<|\
    \ c |>\nIt returns 0 because `multiply(148, 412)` returns `0` because `b` is `0`.\n\
    <|/ c |>\n<| c |>\nIt returns 0 because `multiply(148, 412)` returns `0` because\
    \ `b` is `0`.\n<|/ c |>\n<| a tags=haskell,functional-programming |>\n<code>\n\
    module Main where", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of digits in an integer.\nExamples:\n>>>\
    \ digits(1234)\n4\n>>> digits(-1234)\n4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n\
    >>> digits(123456789)\n9\n>>> digits(-123456789)\n9\n>>> digits(1234567890)\n\
    10\n>>> digits(-1234567890)\n10\n>>> digits(12345678901)\n11\n>>> digits(-12345678901)\n\
    11\n>>> digits(1234567890123)\n12\n>>> digits(-1234567890123)\n12\n>>> digits(12345678901234)\n\
    13\n>>> digits(-12345678901234)\n13\n>>> digits(12345678901234567)\n14\n>>> digits(-12345678901234567)\n\
    14\n>>> digits(1234567890123456789)\n15\n>>> digits(-1234567890123456789)\n15\n\
    >>> digits(12345678901234567890)\n16\n>>> digits(-12345678901234567890)\n16\n\
    >>> digits(123456789012345678901)\n17\n>>> digits(-123456789012345678901)\n17\n\
    >>> digits(12345678901234567890123)\n18\n>>> digits(-12345678901234567890123)\n\
    18\n>>> digits(123456789012345678901234)\n19\n>>> digits(-123456789012345678901234)\n\
    19\n>>> digits(123456789012345678901234567)\n20\n>>> digits(-123456789012345678901234567)\n\
    20\n>>> digits(12345678901234567890123456789)\n21\n>>> digits(-12345678901234567890123456789)\n\
    21\n>>> digits(123456789012345678901234567890)\n22\n>>> digits(-123456789012345678901234567890)\n\
    22\n>>> digits(1234567890123456789012345678901)\n23\n>>> digits(-1234567890123456789012345678901)\n\
    23\n>>> digits(123456789012345678901234567890123)\n24\n>>> digits(-123456789012345678901234567890123)\n\
    24\n>>> digits(1234567890123456789012345678901234)\n25\n>>> digits(-1234567890123456789012345678901234)\n\
    25\n>>> digits(1234567890123456789012345678901234567)", "    if b == 0 \n    \
    \    return 0 \n    else \n        return (a * b) \nend \n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n12\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns the sum of the unit digits\
    \ of their product \n    (i.e., if the product is 148, the function should return\
    \ 1 + 8).\n    For example, add(148, 412) should return 16.\n    \n    Use @assert\
    \ to test your function.\n    Examples:\n    >>> add(148, 412)\n    16\n    >>>\
    \ add(19, 28)\n    72\n    >>> add(2020, 1851)\n    0\n    >>> add(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a * b) %\
    \ 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ their sum.\nAs a reminder, Julia has a built-in function called sum that does\
    \ exactly this.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n<code language=julia-1.5>", "    if\
    \ a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b ==\
    \ 0\n        error(\"Invalid input\")\n    else\n        return a * b\nend\n</cell>\n\
    <code language=julia-1.5>", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    else\n        return a*b\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (modulo 10).\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b\
    \ < 0 \n        error(\"The input must be positive\")\n    else if a == 0 || b\
    \ == 0\n        error(\"The input must be positive\")\n    else \n        return\
    \ a * b\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\n4.3 Unit Tests\n\
    We have written a lot of code with unit tests. These tests help us make sure that\
    \ our code works as expected. Let's review some of them.", "    if a < 0 or b\
    \ < 0 \n        error(\"The input must be positive\")\n    else if a == 0 || b\
    \ == 0\n        error(\"The input must be positive\")\n    else \n        mult_result\
    \ = a * b\n        return mult_result\n    end\nend", "    if b == 0 \n      \
    \  0\n    else \n        (a * b) % 10\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive integer and returns the sum of its unit\
    \ digits.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n21\n>>> sum(2020)\n0\n>>>\
    \ sum(14)\n20\n>>> sum(15)\n15\n>>> sum(0)\n0\n>>> sum(10)\n10\n>>> sum(100)\n\
    100\n>>> sum(1000)\n1000\n>>> sum(10000)\n10000\n>>> sum(100000)\n100000\n>>>\
    \ sum(1000000)\n1000000\n>>> sum(10000000)\n10000000\n>>> sum(100000000)\n100000000\n\
    >>> sum(1000000000)\n1000000000\n>>> sum(10000000000)\n10000000000\n>>> sum(100000000000)\n\
    100000000000\n>>> sum(1000000000000)\n1000000000000\n>>> sum(1000000000001)\n\
    1000000000001\n>>> sum(1000000000002)\n1000000000002\n>>> sum(1000000000003)\n\
    1000000000003\n>>> sum(1000000000004)\n1000000000004\n>>> sum(1000000000005)\n\
    1000000000005\n>>> sum(1000000000006)\n1000000000006\n>>> sum(1000000000007)\n\
    1000000000007\n>>> sum(1000000000008)\n1000000000008\n>>> sum(1000000000009)\n\
    1000000000009\n>>> sum(1000000000010)\n1000000000010\n>>> sum(1000000000011)\n\
    1000000000011\n>>> sum(1000000000012)\n1000000000012\n>>> sum(1000000000013)\n\
    1000000000013\n>>> sum(1000000000014)\n1000000000014\n>>> sum(1000000000015)\n\
    1000000000015\n>>> sum(1000000000016)\n1000000000016\n>>> sum(1000000000017)\n\
    1000000000017\n>>> sum(1000000000018)\n1000000000018\n>>> sum(1000000000019)\n\
    1000000000019\n>>> sum(1000000000020)\n1000000000020\n>>> sum(1000000000021)\n\
    1000000000021\n>>> sum(1000000000022)\n1000000000022\n>>> sum(1000000000023)\n\
    1000000000023\n>>> sum(1000000000024)\n1000000000024\n>>> sum(1000000000025)\n\
    1000000000025\n>>> sum(1000000000026)\n1000000000026\n>>> sum(1000000000027)\n\
    1000000000027\n>>> sum(1000000000028)\n10000000000", "    if b == 0 \n       \
    \ 0\n    else\n        (a * 10 + b) mod 10\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis doesn't work for negative numbers. `multiply(-14, -15)` returns\
    \ `-20` instead of `0`.\n<|/ c |>\n<| c |>\nI didn't realize that negative numbers\
    \ would need to be handled differently. I've updated my answer to handle negative\
    \ numbers now.\n<|/ c |>\n<| a tags=julia |>\nThe function below will return the\
    \ product of its unit digits:\n<code>", "    if b == 0 \n        return 0 \n \
    \   else \n        return (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ sum of the unit digits of its input. \nAssume that the input is always valid.\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n</text>\n<code language=julia-1.5>", "    if b == 0 \n \
    \       0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns their sum.\nExamples:\n>>>\
    \ add(148, 412)\n16\n>>> add(19, 28)\n72\n>>> add(2020, 1851)\n2020\n>>> add(14,\
    \ -15)\n20\nExercise 4\nWrite a function that takes two integers and returns their\
    \ difference \n(a positive number).\nExamples:\n>>> subtract(148, 412)\n4\n>>>\
    \ subtract(19, 28)\n19\n>>> subtract(2020, 1851)\n-1851\n>>> subtract(14, -15)\n\
    -14\nExercise 5\nWrite a function that takes two integers and returns their quotient\
    \ \n(an integer).\nExamples:\n>>> quotient(148, 412)\n2\n>>> quotient(19, 28)\n\
    1\n>>> quotient(2020, 1851)\n2020\n>>> quotient(14, -15)\n-14\nExercise 6\nWrite\
    \ a function that takes two integers and returns their remainder \n(an integer).\n\
    Examples:\n>>> remainder(148, 412)\n4\n>>> remainder(19, 28)\n19\n>>> remainder(2020,\
    \ 1851)\n1851\n>>> remainder(14, -15)\n-14\nExercise 7\nWrite a function that\
    \ takes two integers and returns their absolute \nvalue (an integer).\nExamples:\n\
    >>> absolute_value(148, 412)\n148\n>>> absolute_value(19, 28)\n19\n>>> absolute_value(2020,\
    \ 1851)\n2020\n>>> absolute_value(14, -15)\n14\nExercise 8\nWrite a function that\
    \ takes two integers and returns their sign \n(an integer).\nExamples:\n>>> sign(148,\
    \ 412)\n-1\n>>> sign(19, 28)\n1\n>>> sign(2020, 1851)\n-1\n>>> sign(14, -15)\n\
    1\nExercise 9\nWrite a function that takes two integers and returns their absolute\
    \ \nvalue modulo (an integer).\nExamples:\n>>> absolute_value_modulo(148, 412)\n\
    2\n>>> absolute_value_modulo(19, 28)\n1\n>>> absolute_value_modulo(2020, 1851)\n\
    2020\n>>> absolute_value_modulo(14, -15)\n14\nExercise 10\nWrite a function that\
    \ takes two integers and returns their sign \nmodulo (an integer).\nExamples:\n\
    >>> sign_modulo(", "    if a < 0 || b < 0 \n        error(\"The inputs must be\
    \ positive\")\n    else if a == 0 || b == 0\n        error(\"The inputs must be\
    \ positive\")\n    else \n        mult_result = a * b\n        return mult_result\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if a < 0 || b < 0\n \
    \       error(\"Invalid input\")\n    elseif b == 0\n        return a\n    elseif\
    \ b < a\n        error(\"Invalid input\")\n    else\n        return a * b\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < a\
    \ \n        0\n    elseif b == a \n        1\n    elseif b > a \n        0\n \
    \   elseif b == 0 \n        0\n    elseif b == 1 \n        1\n    elseif b ==\
    \ 2 \n        2\n    elseif b == 3 \n        6\n    elseif b == 4 \n        24\n\
    \    elseif b == 5 \n        120\n    elseif b == 6 \n        720\n    elseif\
    \ b == 7 \n        5040\n    elseif b == 8 \n        40320\n    elseif b == 9\
    \ \n        362880\n    elseif b == 10 \n        3628800\n    elseif b == 11 \n\
    \        39916800\n    elseif b == 12 \n        479001600\n    elseif b == 13\
    \ \n        6227020800\n    elseif b == 14 \n        87178291200\n    elseif b\
    \ == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33",
  "    if b == 0 \n        0\n    else\n        if a < 0 \n            0\n       \
    \ else\n            a % b\n        end\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the sum of its unit digits.\n\
    Examples:\n>>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n\
    20\n>>> sum(-15)\n20\n</text>", "    if b == 0 \n        0\n    elseif b < 0 \n\
    \        0\n    elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif\
    \ b == 1 \n        10\n    elseif b == 2 \n        20\n    elseif b == 3 \n  \
    \      30\n    elseif b == 4 \n        40\n    elseif b == 5 \n        50\n  \
    \  elseif b == 6 \n        60\n    elseif b == 7 \n        70\n    elseif b ==\
    \ 8 \n        80\n    elseif b == 9 \n        90\n    elseif b == 10 \n      \
    \  100\n    elseif b == 11 \n        110\n    elseif b == 12 \n        120\n \
    \   elseif b == 13 \n        130\n    elseif b == 14 \n        140\n    elseif\
    \ b == 15 \n        150\n    elseif b == 16 \n        160\n    elseif b == 17\
    \ \n        170\n    elseif b == 18 \n        180\n    elseif b == 19 \n     \
    \   190\n    elseif b == 20 \n        200\n    elseif b == 21 \n        210\n\
    \    elseif b == 22 \n        220\n    elseif b == 23 \n        230\n    elseif\
    \ b == 24 \n        240\n    elseif b == 25 \n        250\n    elseif b == 26\
    \ \n        260\n    elseif b == 27 \n        270\n    elseif b == 28 \n     \
    \   280\n    elseif b == 29 \n        290\n    elseif b == 30 \n        300\n\
    \    elseif b == 31 \n        310\n    elseif b == 32 \n        320\n    elseif\
    \ b == 33 \n        330\n    elseif b == 34 \n        340\n    elseif b == 35\n\
    \        350\n    elseif b == 36\n        360\n    elseif b == 37\n        370\n\
    \    elseif b == 38\n        380\n    elseif b == 39\n        390\n    elseif\
    \ b == 40\n        400\n    elseif b == 41 \n        410\n    elseif b == 42 \n\
    \        420\n    elseif b == 43 \n        430\n    elseif b == 44 \n        440\n\
    \    elseif b == 45 \n        450\n    elseif b == 46 \n        460\n    elseif\
    \ b == 47 \n        470\n    elseif b == 48 \n        480\n    elseif b == 49\
    \ \n        490\n    elseif b == 50\n        500\n    elseif b == 51 \n      \
    \  510\n    elseif b == 52 \n        520\n    elseif b == 53 \n        530\n \
    \   elseif b == 54", "    if b == 0 \n        0\n    else \n        multiply(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits. \nAssume the input is always valid.\nExamples:\n\
    >>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14,\
    \ -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 0 \n        (a * 10 * b) \n    else\n        0\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (that is, the product of their\
    \ unit digits).\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n\
    \    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n\
    \    else\n        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of its unit digits. \nAssume the input is\
    \ always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b-1)) * 10^(b-2)\n  \
    \  else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    For example: \n    >>> multiply(148, 412)\n    16\n    >>>\
    \ multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14,\
    \ -15)\n    20\n    \"\"\"", "    if b == 0\n        return 0\n    \n    if a\
    \ < 0\n        return multiply(-a, -b)\n    \n    if b < 0\n        return multiply(a,\
    \ b * -1)\n    \n    if b == 0\n        return a\n    \n    if a < b\n       \
    \ return multiply(a, b / 10)\n    \n    return multiply(a / 10, b)\nend", "  \
    \  if a < 0 || b < 0\n        return 0 \n    else if a == 0 || b == 0\n      \
    \  return 0 \n    else \n        return (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 3\nWrite a function that takes two integers and\
    \ returns the sum of their unit digits.\nAssume the input is always valid.\nExamples:\n\
    >>> add(148, 412)\n168\n>>> add(19, 28)\n72\n>>> add(2020, 1851)\n2020\n>>> add(14,\
    \ -15)\n20\n</text>\n<code language=julia-1.3>", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b == 0\
    \ \n        0\n    elseif b == 1 \n        a\n    elseif b == 2 \n        a *\
    \ 10\n    elseif b == 3 \n        a * 100\n    elseif b == 4 \n        a * 1000\n\
    \    elseif b == 5 \n        a * 10000\n    elseif b == 6 \n        a * 100000\n\
    \    elseif b == 7 \n        a * 1000000\n    elseif b == 8 \n        a * 10000000\n\
    \    elseif b == 9 \n        a * 100000000\n    elseif b == 10 \n        a * 1000000000\n\
    \    elseif b == 11 \n        a * 10000000000\n    elseif b == 12 \n        a\
    \ * 100000000000\n    elseif b == 13 \n        a * 1000000000000\n    elseif b\
    \ == 14 \n        a * 10000000000000\n    elseif b == 15 \n        a * 100000000000000\n\
    \    elseif b == 16 \n        a * 1000000000000000\n    elseif b == 17 \n    \
    \    a * 10000000000000000\n    elseif b == 18 \n        a * 100000000000000000\n\
    \    elseif b == 19 \n        a * 1000000000000000000\n    elseif b == 20 \n \
    \       a * 10000000000000000000\n    elseif b == 21 \n        a * 100000000000000000000\n\
    \    elseif b == 22 \n        a * 1000000000000000000000\n    elseif b == 23 \n\
    \        a * 10000000000000000000000\n    elseif b == 24 \n        a * 100000000000000000000000\n\
    \    elseif b == 25 \n        a * 1000000000000000000000000\n    elseif b == 26\
    \ \n        a * 10000000000000000000000000\n    elseif b == 27 \n        a * 100000000000000000000000000\n\
    \    elseif b == 28 \n        a * 1000000000000000000000000000\n    elseif b ==\
    \ 29 \n        a * 10000000000000000000000000000\n    elseif b == 30 \n      \
    \  a * 100000000000000000000000000000\n    elseif b == 31 \n        a * 1000000000000000000000000000000\n\
    \    elseif b == 32 \n        a * 10000000000000000000000000000000\n    elseif\
    \ b == 33 \n        a * 100000000000000000000000000000000\n    elseif b == 34\
    \ \n        a * 1000000000000000000000000000000000\n    elseif b == 35\n     \
    \   a * 10000000000000000000000000000000000\n    elseif b == 36\n        a * 100000000000000000000000000000000000\n\
    \    elseif b == 37\n        a * 1000000000000000000000000000000000000\n    elseif\
    \ b == 38\n        a * 10000000000000000000000000000000000000\n    elseif b ==\
    \ 39\n        a * 100000000000000000000000000000000000000\n    elseif b == 40\n\
    \        a * 1000000000000000000000000000000000000000\n    elseif b == 41\n  \
    \      a * 100000000000000000000000000", "    if a < 0 or b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        return a\n    else\n        return\
    \ a * b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the\
    \ function that takes two integers and returns \n    the product of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148,\
    \ 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n\
    \    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n    \
    \    0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < a \n        0\n    elseif b == a \n        1\n    elseif b > a \n      \
    \  0\n    elseif b == 0 \n        0\n    elseif b == 1 \n        a\n    elseif\
    \ b == 2 \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b ==\
    \ 4 \n        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b ==\
    \ 6 \n        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif\
    \ b == 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n \
    \   elseif b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a *\
    \ 10000000000\n    elseif b == 12 \n        a * 100000000000\n    elseif b ==\
    \ 13 \n        a * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n\
    \    elseif b == 15 \n        a * 100000000000000\n    elseif b == 16 \n     \
    \   a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 1000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000\n    elseif b == 38\n\
    \        a * 1000000000000000000000000000000000\n    elseif b == 39\n        a\
    \ * 1000000000000000000000000000000000\n    elseif ", "    if b == 0 \n      \
    \  return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 4\nWrite a function that takes an integer $n$ and\
    \ returns the number of digits in $n$. \nExamples:\n$$\n\\begin{align}\n\\text{digits}(123)\
    \ = 2 \\\n\\text{digits}(1234) = 4 \\\n\\text{digits}(1234567) = 6\n\\end{align}\n\
    $$", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b ==\
    \ 0\n        return a\n    elseif b == 1\n        return a * b\n    else\n   \
    \     return a * b * 10\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n \
    \       0\n    elseif b < a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == 0 \n        0\n    elseif b == 1 \n     \
    \   1\n    elseif b == 2 \n        2\n    elseif b == 3 \n        6\n    elseif\
    \ b == 4 \n        24\n    elseif b == 5 \n        120\n    elseif b == 6 \n \
    \       720\n    elseif b == 7 \n        5040\n    elseif b == 8 \n        40320\n\
    \    elseif b == 9 \n        362880\n    elseif b == 10 \n        3628800\n  \
    \  elseif b == 11 \n        39916800\n    elseif b == 12 \n        479001600\n\
    \    elseif b == 13 \n        6227020800\n    elseif b == 14 \n        87178291200\n\
    \    elseif b == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33 ",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      0\n    elseif b == 1\n        a\n    else\n        (a * b).digits\n   \
    \ end\nend", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b < 10 \n        a * 10\n    elseif b < 100 \n\
    \        a * 10 + b\n    elseif b < 1000 \n        a * 10 + b * 10\n    elseif\
    \ b < 10000 \n        a * 10 + b * 100\n    elseif b < 100000 \n        a * 10\
    \ + b * 1000\n    elseif b < 1000000 \n        a * 10 + b * 10000\n    elseif\
    \ b < 10000000 \n        a * 10 + b * 100000\n    elseif b < 100000000 \n    \
    \    a * 10 + b * 1000000\n    elseif b < 1000000000 \n        a * 10 + b * 10000000\n\
    \    elseif b < 10000000000 \n        a * 10 + b * 100000000\n    elseif b < 100000000000\
    \ \n        a * 10 + b * 1000000000\n    elseif b < 1000000000000 \n        a\
    \ * 10 + b * 10000000000\n    elseif b < 10000000000000 \n        a * 10 + b *\
    \ 100000000000\n    elseif b < 100000000000000 \n        a * 10 + b * 1000000000000\n\
    \    elseif b < 1000000000000000 \n        a * 10 + b * 10000000000000\n    elseif\
    \ b < 10000000000000000 \n        a * 10 + b * 100000000000000\n    elseif b <\
    \ 100000000000000000 \n        a * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000\
    \ \n        a * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000\
    \ \n        a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        return 0 \n    else \n        return\
    \ a * b / gcd(a, b) \nend \n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the sum of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> add(148,\
    \ 412)\n    168\n    >>> add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n\
    \    >>> add(14, -15)\n    14\n    \"\"\"", "    if b == 0 \n        return 0\
    \ \n    else \n        return (a * 10 * b) \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer $n$ and returns the number of digits in\
    \ $n$. \nExamples:\n$n = 1$ returns 1\n$n = 10$ returns 2\n$n = 100$ returns 3\n\
    $n = 1000$ returns 4\n$n = 10000$ returns 5\n$n = 100000$ returns 6\n$n = 1000000$\
    \ returns 7\n$n = 10000000$ returns 8\n$n = 100000000$ returns 9\n$n = 1000000000$\
    \ returns 10\n$n = 10000000000$ returns 11\n$n = 100000000000$ returns 12\n$n\
    \ = 1000000000000$ returns 13\n$n = 10000000000000$ returns 14\n$n = 100000000000000$\
    \ returns 15\n$n = 1000000000000000$ returns 16\n$n = 10000000000000000$ returns\
    \ 17\n$n = 100000000000000000$ returns 18\n$n = 1000000000000000000$ returns 19\n\
    $n = 10000000000000000000$ returns 20\n$n = 100000000000000000000$ returns 21\n\
    $n = 1000000000000000000000$ returns 22\n$n = 10000000000000000000000$ returns\
    \ 23\n$n = 100000000000000000000000$ returns 24\n$n = 1000000000000000000000000$\
    \ returns 25\n$n = 10000000000000000000000000$ returns 26\n$n = 100000000000000000000000000$\
    \ returns 27\n$n = 1000000000000000000000000000$ returns 28\n$n = 10000000000000000000000000000$\
    \ returns 29\n$n = 100000000000000000000000000000$ returns 30\n$n = 1000000000000000000000000000000$\
    \ returns 31\n$n = 10000000000000000000000000000000$ returns 32\n$n = 100000000000000000000000000000000$\
    \ returns 33\n$n = 1000000000000000000000000000000000$ returns 34\n$n = 1000000000000000000000000000000000$\
    \ returns 35\n$n = 1000000000000000000000000000000000$ returns 36\n$n = 1000000000000000000000000000000000$\
    \ returns 37\n$n = 1000000000000000000000000000000000$ returns 38\n$n = 1000000000000000000000000000000000$\
    \ returns 39\n$n = 1000000000000000000000000000000000$ returns 40\n$n = 1000000000000000000000000000000000$\
    \ returns 41\n$n = 1000000000000000000000000000000000$ returns 42\n$n = 1000000000000000000000000000000000$\
    \ returns 43\n$n = 1000000000000000000000000000000000$ returns 44\n$n = 1000000000000000000000000000000000$\
    \ returns 45\n$n = 1000000000000000000000000000000000$ returns 46\n$n = 1000000000000000000",
  "    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of its input. \nFor example, add(123, 456) should return 7. \n\
    Assume that the input is always valid.\nExamples:\n>>> add(148, 412)\n7\n>>> add(19,\
    \ 28)\n7\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n7\n\"\"\"", "    if b == 0\
    \ \n        return 0 \n    else \n        return (a * b) mod 10 \nend \n\"\"\"\
    \nComplete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n  \
    \      0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it! But I still don't\
    \ understand why my code doesn't work. Could you please explain it to me?\n<|/\
    \ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your explanation! I still don't understand why my code\
    \ doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c |>\nI added\
    \ some explanation to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your explanation! I still don't understand why my code doesn't work. Could you\
    \ please explain it to me?\n<|/ c |>\n<| a tags=julia |>\nThe reason your code\
    \ doesn't work is that you are trying to use an operator that doesn't exist.\n\
    <code>\njulia> a * b\nERROR: MethodError: no method matching *(::Int64, ::Int64)\n\
    </code>\nThe * operator is defined for vectors and matrices, not for scalars.\
    \ You can use the dot function instead:\n<code>\njulia> dot(a, b)\n10\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I really appreciate it! But\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ it to me?\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it\
    \ helps.\n<|/ c |>\n<| a tags=julia |>\nThe reason your code doesn't work is that\
    \ you are trying to use an operator that doesn't exist.\n<code>\njulia> a * b\n\
    ERROR: MethodError: no method matching *(::Int64, ::Int64)\n</code>\nThe * operator\
    \ is defined for vectors and matrices, not for scalars. You can use the dot function\
    \ instead:\n<code>\njulia> dot(a, b)\n10\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! But I still don't understand why\
    \ my code doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c |>\n\
    I added some explanation to the answer. Hope it helps.\n<|/ c |>\n<|", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * 10 + b) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return 0 \n\
    \    else \n        return a * b / 10\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>", "    if b == 0\n        return 0\n    else\n        return (a*b)/b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string.\nExamples:\n\
    >>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"Hello World!\"\
    ) == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"\
    Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == 10\nTrue\n>>> count_characters(\"Hello\
    \ World!\") == 10\nTrue\n>>> count_characters(\"Hello World!\") == 10\nTrue\n\
    >>> count_characters(\"Hello World!\") == ", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < a \n       \
    \ 0\n    else\n        10 * b + a \n    end\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes two integers and returns the sum of the unit digits\
    \ of their product (a product of two numbers is their sum of the unit digits).\n\
    Examples:\nmultiply(148, 412)\n16\nmultiply(19, 28)\n72\nmultiply(2020, 1851)\n\
    0\nmultiply(14, -15)\n20\nHint: Remember that you can use the function multiply\
    \ to solve this exercise.", "    if a < 0 || b < 0\n        error(\"The input\
    \ must be positive\")\n    elseif b == 0\n        error(\"The input must be positive\"\
    )\n    elseif b == 1\n        return a\n    else\n        return a * b\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return 0 \n\
    \    else \n        return (a * b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(0)\n0\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n\
    4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n\
    >>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>> sum(12345)\n4\n>>>\
    \ sum(12345)\n4\n", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n\
    \    elseif b == 0\n        0\n    elseif b == 1\n        a\n    else\n      \
    \  multiply(a/10, b%10) * 10 + a%10\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if b == 0\n        return 0\n    \n    if a < 0\n        return -multiply(abs(a),\
    \ abs(b))\n    \n    if b < 0\n        return multiply(abs(a), abs(b))\n    \n\
    \    if a < b\n        return multiply(abs(a), abs(b))\n    \n    if a == 0\n\
    \        return b\n    \n    if b == 0\n        return a\n    \n    if a < b\n\
    \        return multiply(a, b)\n    \n    return multiply(b, a)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the sum of the digits\
    \ of its input. \nAssume that the input is always valid.\nExamples:\n>>> sum(1234)\n\
    4\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(0)\n0\n>>> sum(12345)\n4\n>>> sum(12345)\n\
    4\n>>> sum(1234567)\n8\n>>> sum(1234567)\n8\n>>> sum(12345678)\n10\n>>> sum(12345678)\n\
    10\n>>> sum(123456789)\n12\n>>> sum(123456789)\n12\n>>> sum(1234567890)\n13\n\
    >>> sum(1234567890)\n13\n>>> sum(12345678901)\n14\n>>> sum(12345678901)\n14\n\
    >>> sum(123456789012)\n15\n>>> sum(123456789012)\n15\n>>> sum(1234567890123)\n\
    16\n>>> sum(1234567890123)\n16\n>>> sum(12345678901234)\n17\n>>> sum(12345678901234)\n\
    17\n>>> sum(123456789012345)\n18\n>>> sum(123456789012345)\n18\n>>> sum(12345678901234567)\n\
    19\n>>> sum(12345678901234567)\n19\n>>> sum(123456789012345678)\n20\n>>> sum(123456789012345678)\n\
    20\n>>> sum(1234567890123456789)\n21\n>>> sum(1234567890123456789)\n21\n>>> sum(12345678901234567890)\n\
    22\n>>> sum(12345678901234567890)\n22\n>>> sum(123456789012345678901)\n23\n>>>\
    \ sum(123456789012345678901)\n23\n>>> sum(1234567890123456789012)\n24\n>>> sum(1234567890123456789012)\n\
    24\n>>> sum(12345678901234567890123)\n25\n>>> sum(12345678901234567890123)\n25\n\
    >>> sum(123456789012345678901234)\n26\n>>> sum(123456789012345678901234)\n26\n\
    >>> sum(1234567890123456789012345)\n27\n>>> sum(1234567890123456789", "    if\
    \ b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nExamples:\n>>> digits(148)\n3\n>>> digits(19)\n2\n>>> digits(2020)\n\
    4\n>>> digits(14)\n2\n>>> digits(-15)\n2\n>>> digits(0)\n1\n>>> digits(1)\n1\n\
    >>> digits(-1)\n1\n>>> digits(123456789)\n10\n>>> digits(-123456789)\n10\n>>>\
    \ digits(1234567890)\n10\n>>> digits(-1234567890)\n10\n>>> digits(12345678901)\n\
    10\n>>> digits(-12345678901)\n10\n>>> digits(123456789012)\n10\n>>> digits(-123456789012)\n\
    10\n>>> digits(1234567890123)\n10\n>>> digits(-1234567890123)\n10\n>>> digits(12345678901234)\n\
    10\n>>> digits(-12345678901234)\n10\n>>> digits(12345678901234567)\n10\n>>> digits(-12345678901234567)\n\
    10\n>>> digits(123456789012345678)\n10\n>>> digits(-123456789012345678)\n10\n\
    >>> digits(1234567890123456789)\n10\n>>> digits(-1234567890123456789)\n10\n>>>\
    \ digits(12345678901234567890)\n10\n>>> digits(-12345678901234567890)\n10\n>>>\
    \ digits(123456789012345678901)\n10\n>>> digits(-123456789012345678901)\n10\n\
    >>> digits(1234567890123456789012)\n10\n>>> digits(-1234567890123456789012)\n\
    10\n>>> digits(12345678901234567890123)\n10\n>>> digits(-12345678901234567890123)\n\
    10\n>>> digits(123456789012345678901234)\n10\n>>> digits(-123456789012345678901234)\n\
    10\n>>> digits(123456789012345678901234567)\n10\n>>> digits(-123456789012345678901234567)\n\
    10\n>>> digits(1234567890123456789012345678)\n10\n>>> digits(-1234567890123456789012345678)\n\
    10\n>>> digits(12345678901234567890123456789)\n10\n>>> ", "    if b == 0 \n  \
    \      0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    else\n        multiply(b, a % b)\n    end\nend\n</code>\n\
    <|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't work if `a` is negative or\
    \ if `b` is zero.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated\
    \ the answer to include a check for that case.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ other answers here are great, but I wanted to add that you can also use reduce\
    \ to solve this problem in one line:\n<code>\nreduce(*, map(digits, map(digits,\
    \ digits(a * b))))\n</code>\n<|/ a tags=julia,recursion |>\n<| a tags=julia,recursion\
    \ |>\n<code>", "    if b == 0\n        0\n    else\n        (a*b).digits()\n \
    \   end\nend", "    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in it.\nExamples:\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"\
    Hello World!\")\n10\n>>> count_characters(\"Hello World!\")\n10\n>>> count_",
  "    if a < 0 || b < 0\n        error(\"The inputs must be positive\")\n    elseif\
    \ b == 0\n        error(\"The second input cannot be zero\")\n    else\n     \
    \   return a*b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the unit digits of an integer.\nExamples:\n>>> sum(148)\n\
    16\n>>> sum(19)\n72\n>>> sum(2020)\n0\n>>> sum(14)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n\
    20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> sum(15)\n20\n>>> ", "    if b == 0 \n\
    \        0\n    else\n        (a*b).digits(10)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if a < 0 || b < 0\n        return 0 \n    else if a == 0 || b == 0\n      \
    \  return 0 \n    else\n        return (a * b) / gcd(a, b)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ the digits of its input. \nThe input will always be valid. \nThe function should\
    \ work for any number of digits.\nExamples:\n>>> multiply(148, 412)\n16\n>>> multiply(19,\
    \ 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n>>> multiply(148,\
    \ 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14,\
    \ -15)\n20\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020,\
    \ 1851)\n0\n>>> multiply(14, -15)\n20\n>>> multiply(148, 412)\n16\n>>> multiply(19,\
    \ 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n>>> multiply(148,\
    \ 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14,\
    \ -15)\n20\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020,\
    \ 1851)\n0\n>>> multiply(14, -15)\n20\n>>> multiply(148, 412)\n16\n>>> multiply(19,\
    \ 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n>>> multiply(148,\
    \ 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14,\
    \ -15)\n20\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020,\
    \ 1851)\n0\n>>> multiply(14, -15)\n20\n>>> multiply(148, 412)\n16\n>>> multiply(19,\
    \ 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n>>> multiply(148,\
    \ 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14,\
    \ -15)\n20\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020,\
    \ 1851)\n0\n>>> multiply(14, -15)\n", "    if b == 0 \n        0\n    elseif b\
    \ < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10 \n        a\
    \ * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif b < 1000 \n      \
    \  a * 10 + b / 100\n    elseif b < 10000 \n        a * 10 + b / 1000\n    elseif\
    \ b < 100000 \n        a * 10 + b / 10000\n    elseif b < 1000000 \n        a\
    \ * 10 + b / 100000\n    elseif b < 10000000 \n        a * 10 + b / 1000000\n\
    \    elseif b < 100000000 \n        a * 10 + b / 10000000\n    elseif b < 1000000000\
    \ \n        a * 10 + b / 100000000\n    elseif b < 10000000000 \n        a * 10\
    \ + b / 1000000000\n    elseif b < 100000000000 \n        a * 10 + b / 10000000000\n\
    \    elseif b < 1000000000000 \n        a * 10 + b / 100000000000\n    elseif\
    \ b < 10000000000000 \n        a * 10 + b / 1000000000000\n    elseif b < 100000000000000\
    \ \n        a * 10 + b / 10000000000000\n    elseif b < 1000000000000000 \n  \
    \      a * 10 + b / 100000000000000\n    elseif b < 10000000000000000 \n     \
    \   a * 10 + b / 1000000000000000\n    elseif b < 100000000000000000 \n      \
    \  a * 10 + b / 10000000000000000\n    elseif b < 1000000000000000000 \n     \
    \   a * 10 + b / 100000000000000000\n    elseif b < 10000000000000000000 \n  \
    \      a * 10 + b / 1000000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000000\n    elseif b < 100000000000000000000000000",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10 ** 9\
    \ + 7)\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ its factorial. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 =\
    \ 120.\nAssume that the input is always valid.\nExamples:\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(0)\n1\n>>> factorial(-1)\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty sequence\n\
    >>> factorial(-10)\nTraceback (most recent call last):\n  File \"<stdin>\", line\
    \ 1, in <module>\n  File \"<stdin>\", line 2, in factorial\nValueError: factorial()\
    \ arg is an empty sequence\n>>> factorial(-100)\nTraceback (most recent call last):\n\
    \  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    ValueError: factorial() arg is an empty sequence\n>>> factorial(-1000)\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty sequence\n\
    >>> factorial(-10000)\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\nValueError: factorial()\
    \ arg is an empty sequence\n>>> factorial(-100000)\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in factorial\nValueError: factorial() arg is an empty sequence\n>>> factorial(-1000000)\n\
    Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty\
    \ sequence\n>>> factorial(-10000000)\nTraceback (most recent call last):\n  File\
    \ \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in factorial\n\
    ValueError: factorial() arg is an empty sequence\n>>> factorial(-100000000)\n\
    Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in factorial\nValueError: factorial() arg is an empty\
    \ sequence\n>>> factori", "    if b == 0 \n        0\n    elseif b < 0 \n    \
    \    0\n    elseif b > 9 \n        0\n    elseif b < 10 \n        a * 10\n   \
    \ elseif b < 100 \n        a * 10 + b\n    elseif b < 1000 \n        a * 10 +\
    \ b * 10\n    elseif b < 10000 \n        a * 10 + b * 10 + b\n    elseif b < 100000\
    \ \n        a * 10 + b * 10 + b * 10\n    elseif b < 1000000 \n        a * 10\
    \ + b * 10 + b * 10 + b\n    elseif b < 10000000 \n        a * 10 + b * 10 + b\
    \ * 10 + b * 10 + b\n    elseif b < 100000000 \n        a * 10 + b * 10 + b *\
    \ 10 + b * 10 + b * 10 + b\n    elseif b < 1000000000 \n        a * 10 + b * 10\
    \ + b * 10 + b * 10 + b * 10 + b * 10 + b\n    elseif b < 10000000000 \n     \
    \   a * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b\n    elseif\
    \ b < 100000000000 \n        a * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b *\
    \ 10 + b * 10 + b * 10 + b * 10 + b\n    elseif b < 1000000000000 \n        a\
    \ * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10\
    \ + b * 10 + b * 10 + b\n    elseif b < 10000000000000 \n        a * 10 + b *\
    \ 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 +\
    \ b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b *\
    \ 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 +\
    \ b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b * 10 + b *\
    \ 10 + b * 10 + b * 10 + b * 10 + b * ", "    if b == 0 \n        return 0 \n\
    \    else \n        return (a * b) mod 10 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns the sum of the digits of its input. \nThe input will\
    \ always be valid. \nExamples:\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n\
    6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>>\
    \ sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n\
    10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>>\
    \ sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n\
    6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>>\
    \ sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n\
    10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>>\
    \ sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n\
    6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>>\
    \ sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n\
    10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>>\
    \ sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(123)\n\
    6\n>>> sum(1234)\n10\n>>> sum(123)\n6\n>>> sum(1234)", "    if b == 0 \n     \
    \   return 0 \n    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer\
    \ and returns the sum of its unit digits.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n\
    28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(15)\n20\n>>> sum(0)\n0\n>>>\
    \ sum(10)\n10\n>>> sum(100)\n100\n>>> sum(1000)\n1000\n>>> sum(10000)\n10000\n\
    >>> sum(100000)\n100000\n>>> sum(1000000)\n1000000\n>>> sum(10000000)\n10000000\n\
    >>> sum(100000000)\n100000000\n>>> sum(1000000000)\n1000000000\n>>> sum(10000000000)\n\
    10000000000\n>>> sum(100000000000)\n100000000000\n>>> sum(1000000000000)\n1000000000000\n\
    >>> sum(1000000000001)\n1000000000001\n>>> sum(1000000000002)\n1000000000002\n\
    >>> sum(1000000000003)\n1000000000003\n>>> sum(1000000000004)\n1000000000004\n\
    >>> sum(1000000000005)\n1000000000005\n>>> sum(1000000000006)\n1000000000006\n\
    >>> sum(1000000000007)\n1000000000007\n>>> sum(1000000000008)\n1000000000008\n\
    >>> sum(1000000000009)\n1000000000009\n>>> sum(1000000000010)\n1000000000010\n\
    >>> sum(1000000000011)\n1000000000011\n>>> sum(1000000000012)\n1000000000012\n\
    >>> sum(1000000000013)\n1000000000013\n>>> sum(1000000000014)\n1000000000014\n\
    >>> sum(1000000000015)\n1000000000015\n>>> sum(1000000000016)\n1000000000016\n\
    >>> sum(1000000000017)\n1000000000017\n>>> sum(1000000000018)\n1000000000018\n\
    >>> sum(1000000000019)\n1000000000019\n>>> sum(1000000000020)\n1000000000020\n\
    >>> sum(1000000000021)\n1000000000021\n>>> sum(1000000000022)\n1000000000022\n\
    >>> sum(1000000000023)\n1000000000023\n>>> sum(1000000000024)\n1000000000024\n\
    >>> sum(1000000000025)\n1000000000025\n>>> sum(1000000000026)\n1000000000026\n\
    >>> sum(1000000000027)\n1000000000027\n>>> sum(10000000000", "    if b == 0 \n\
    \        return 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits. \n\
    Assume the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19,\
    \ 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n<code language=julia-1.5>",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nExamples:\n    >>> count_characters(\"Hello\
    \ World\")\n    12\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World!\")\n    13\n    >>> count_characters(\"Hello World!\")\n    13\n    >>>\
    \ count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"Hello\
    \ World", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b < a \n        0\n    elseif b == a \n      \
    \  1\n    elseif b > a \n        0\n    elseif b == 0 \n        0\n    elseif\
    \ b == 1 \n        a\n    elseif b == 2 \n        a * 10\n    elseif b == 3 \n\
    \        a * 100\n    elseif b == 4 \n        a * 1000\n    elseif b == 5 \n \
    \       a * 10000\n    elseif b == 6 \n        a * 100000\n    elseif b == 7 \n\
    \        a * 1000000\n    elseif b == 8 \n        a * 10000000\n    elseif b ==\
    \ 9 \n        a * 100000000\n    elseif b == 10 \n        a * 1000000000\n   \
    \ elseif b == 11 \n        a * 10000000000\n    elseif b == 12 \n        a * 100000000000\n\
    \    elseif b == 13 \n        a * 1000000000000\n    elseif b == 14 \n       \
    \ a * 10000000000000\n    elseif b == 15 \n        a * 100000000000000\n    elseif\
    \ b == 16 \n        a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 1000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000\n    elseif b == 38\n\
    \        a * 1000000000000000000000000000000000\n    elseif b == 39\n        a\
    \ * 1000000000000000000000000000000000\n    elseif ", "    if b == 0 \n      \
    \  return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of characters in it.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n5\n>>> count_characters(\"Hello World!\")\n7\n>>> count_characters(\"\
    Hello World!!\")\n9\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n10\n>>> count_characters(\"\
    Hello World!!!\")\n10\n>>> count_character", "    if b == 0 \n        return 0\
    \ \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer and returns the sum of the digits of that integer.\nExamples:\n>>> sum(1234)\n\
    4\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.4>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.4>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product \n    For example:\
    \ multiply(148, 412) should return 16 and multiply(19, 28) should return 72.\n\
    \    Use a while loop to solve this problem.\n    Use a for loop to solve this\
    \ problem.\n    Use a for loop to solve this problem.\n    Use a while loop to\
    \ solve this problem.\n    Use a while loop to solve this problem.\n    Use a\
    \ while loop to solve this problem.\n    Use a while loop to solve this problem.\n\
    \    Use a while loop to solve this problem.\n    Use a while loop to solve this\
    \ problem.\n    Use a while loop to solve this problem.\n    Use a while loop\
    \ to solve this problem.\n    Use a while loop to solve this problem.\n    Use\
    \ a while loop to solve this problem.\n    Use a while loop to solve this problem.\n\
    \    Use a while loop to solve this problem.\n    Use a while loop to solve this\
    \ problem.\n    Use a while loop to solve this problem.\n    Use a while loop\
    \ to solve this problem.\n    Use a while loop to solve this problem.\n    Use\
    \ a while loop to solve this problem.\n    Use a while loop to solve this problem.\n\
    \    Use a while loop to solve this problem.\n    Use a while loop to solve this\
    \ problem.\n    Use a while loop to solve this problem.\n    Use a while loop\
    \ to solve this problem.\n    Use a while loop to solve this problem.\n    Use\
    \ a while loop to solve this problem.\n    Use a while loop to solve this problem.\n\
    \    Use a while loop to solve this problem.\n    Use a while loop to solve this\
    \ problem.\n    Use a while loop to solve this problem.\n    Use a while loop\
    \ to solve this problem.\n    Use a while loop to solve this problem.\n    Use\
    \ a while loop to solve this problem.\n    Use a while loop to solve this problem.\n\
    \    Use a while loop to solve this problem.\n    Use a while loop to solve this\
    \ problem.\n    Use a while loop to solve this problem.\n    Use a ", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns their sum.\nAssume the input\
    \ is always valid.\nExamples:\n>>> add(148, 412)\n164\n>>> add(19, 28)\n72\n>>>\
    \ add(2020, 1851)\n0\n>>> add(14, -15)\n20\n</text>\n<code language=julia-1.5>",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (modulo 10).\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>>\
    \ sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 0 \n        a * 10^(b-1)\n    else\n        0\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    The input must be positive\")\n    elseif b == 0\n        error(\"The input must\
    \ be positive\")\n    elseif b == 1\n        return a\n    else\n        return\
    \ a*b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ two integers and returns the sum of the \nunit digits of their product (that\
    \ is, the sum of the unit digits of the\nproduct of their unit digits). Assume\
    \ the input is always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n\
    72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n \
    \       0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b < 10 \n        a * 10\n    else\n        a * 10 + b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    elseif b == 1\n        return a *\
    \ b\n    else\n        mult_digits(a, b / 10)\n        return mult_digits(mult_digits(a,\
    \ b % 10), 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nExamples:\n    >>> count_characters(\"Hello\
    \ World\")\n    10\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"Hello\
    \ World!\")\n    11\n    >>> count_characters(\"Hello World!\")\n    11\n    >>>\
    \ count_characters(\"Hello World!\")\n    11\n    >>> count_characters(\"", " \
    \   if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 +\
    \ 7)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n   \
    \     return 0 \n    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 9 \n        0\n    elseif b < 10 \n        a * 10\n    elseif\
    \ b < 100 \n        a * 10 + b\n    elseif b < 1000 \n        a * 10 + b * 10\n\
    \    elseif b < 10000 \n        a * 10 + b * 100\n    elseif b < 100000 \n   \
    \     a * 10 + b * 1000\n    elseif b < 1000000 \n        a * 10 + b * 10000\n\
    \    elseif b < 10000000 \n        a * 10 + b * 100000\n    elseif b < 100000000\
    \ \n        a * 10 + b * 1000000\n    elseif b < 1000000000 \n        a * 10 +\
    \ b * 10000000\n    elseif b < 10000000000 \n        a * 10 + b * 100000000\n\
    \    elseif b < 100000000000 \n        a * 10 + b * 1000000000\n    elseif b <\
    \ 1000000000000 \n        a * 10 + b * 10000000000\n    elseif b < 10000000000000\
    \ \n        a * 10 + b * 100000000000\n    elseif b < 100000000000000 \n     \
    \   a * 10 + b * 1000000000000\n    elseif b < 1000000000000000 \n        a *\
    \ 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n        a * 10 +\
    \ b * 100000000000000\n    elseif b < 100000000000000000 \n        a * 10 + b\
    \ * 1000000000000000\n    elseif b < 1000000000000000000 \n        a * 10 + b\
    \ * 10000000000000000\n    elseif b < 10000000000000000000 \n        a * 10 +\
    \ b * 100000000000000000\n    elseif b < 100000000000000000000 \n        a * 10\
    \ + b * 1000000000000000000\n    elseif b < 1000000000000000000000 \n        a\
    \ * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000 \n \
    \       a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0\n        return 0\n    if a < 0\n        return\
    \ -multiply(abs(a), abs(b))\n    if b < 0\n        return -multiply(abs(a), abs(b))\n\
    \    if a < b\n        return multiply(abs(a), abs(b))\n    if a > b\n       \
    \ return multiply(abs(a), abs(b))\n    if a < 10\n        return a * b\n    if\
    \ a < 100\n        return a * b * 10\n    if a < 1000\n        return a * b *\
    \ 10 * 10\n    if a < 10000\n        return a * b * 10 * 10 * 10\n    if a < 100000\n\
    \        return a * b * 10 * 10 * 10 * 10\n    if a < 1000000\n        return\
    \ a * b * 10 * 10 * 10 * 10 * 10\n    if a < 10000000\n        return a * b *\
    \ 10 * 10 * 10 * 10 * 10 * 10\n    if a < 100000000\n        return a * b * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10\n    if a < 1000000000\n        return a * b *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    if a < 10000000000\n        return\
    \ a * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    if a < 100000000000\n\
    \        return a * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    if\
    \ a < 1000000000000\n        return a * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10\n    if a < 10000000000000\n        return a * b * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    if a < 100000000000000\n\
    \        return a * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10\n    if a < 1000000000000000\n        return a * b * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    if a < 10000000000000000\n\
    \        return a * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10\n    if a < 100000000000000000\n        return a * b * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n\
    \    if a < 1000000000000000000\n        return a * b", "    if b == 0 \n    \
    \    0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</code>\n<|/ a tags=julia,function\
    \ |>\n<| c |>\nThis doesn't work if you try to multiply a negative number with\
    \ a positive number. For example: `multiply(-14, -15)` returns `0` instead of\
    \ `-20`.\n<|/ c |>\n<| c |>\nI added a solution that works with negative numbers.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `multiply(-14, -15)` which returns `0` instead of `-20`.\n<|/ c |>\n<| c\
    \ |>\nI added a solution that works with negative numbers. I hope it helps.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `multiply(-14,\
    \ -15)` which returns `0` instead of `-20`.\n<|/ c |>\n<| a dscore=3 |>\nThe other\
    \ answers here are great, but they don't work for negative numbers. Here's a solution\
    \ that works for negative numbers:\n<code>", "    if b == 0 \n        return 0\
    \ \n    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nExamples:\n>>> digits(123)\n3\n>>> digits(1234)\n\
    4\n>>> digits(123456789)\n9\n>>> digits(1234567890)\n10\n>>> digits(12345678901234)\n\
    12\n>>> digits(12345678901234567)\n13\n>>> digits(123456789012345678)\n14\n>>>\
    \ digits(12345678901234567801)\n15\n>>> digits(1234567890123456780123)\n16\n>>>\
    \ digits(12345678901234567801234)\n17\n>>> digits(12345678901234567801234567)\n\
    18\n>>> digits(123456789012345678012345678)\n19\n>>> digits(12345678901234567801234567801)\n\
    20\n>>> digits(1234567890123456780123456780123)\n21\n>>> digits(12345678901234567801234567801234)\n\
    22\n>>> digits(12345678901234567801234567801234567)\n23\n>>> digits(123456789012345678012345678012345678)\n\
    24\n>>> digits(12345678901234567801234567801234567801)\n25\n>>> digits(1234567890123456780123456780123456780123)\n\
    26\n>>> digits(12345678901234567801234567801234567801234)\n27\n>>> digits(12345678901234567801234567801234567801234567)\n\
    28\n>>> digits(123456789012345678012345678012345678012345678)\n29\n>>> digits(12345678901234567801234567801234567801234567801)\n\
    30\n>>> digits(1234567890123456780123456780123456780123456780123)\n31\n>>> digits(12345678901234567801234567801234567801234567801234)\n\
    32\n>>> digits(12345678901234567801234567801234567801234567801234567)\n33\n>>>\
    \ digits(1234567890123456780123456780", "    if b == 0\n        return 0\n   \
    \ if a < 0\n        return -multiply(abs(a), abs(b))\n    if b < 0\n        return\
    \ -multiply(abs(a), abs(b))\n    if a < b\n        return multiply(abs(a), abs(b))\n\
    \    return a * b\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (that is, if the product is 148, return \n    16).\n    Assume the input\
    \ is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19,\
    \ 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n\
    \    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b == 1 \n     \
    \   10\n    elseif b == 2 \n        20\n    elseif b == 3 \n        30\n    elseif\
    \ b == 4 \n        40\n    elseif b == 5 \n        50\n    elseif b == 6 \n  \
    \      60\n    elseif b == 7 \n        70\n    elseif b == 8 \n        80\n  \
    \  elseif b == 9 \n        90\n    elseif b == 10 \n        100\n    elseif b\
    \ == 11 \n        110\n    elseif b == 12 \n        120\n    elseif b == 13 \n\
    \        130\n    elseif b == 14 \n        140\n    elseif b == 15 \n        150\n\
    \    elseif b == 16 \n        160\n    elseif b == 17 \n        170\n    elseif\
    \ b == 18 \n        180\n    elseif b == 19 \n        190\n    elseif b == 20\
    \ \n        200\n    elseif b == 21 \n        210\n    elseif b == 22 \n     \
    \   220\n    elseif b == 23 \n        230\n    elseif b == 24 \n        240\n\
    \    elseif b == 25 \n        250\n    elseif b == 26 \n        260\n    elseif\
    \ b == 27 \n        270\n    elseif b == 28 \n        280\n    elseif b == 29\
    \ \n        290\n    elseif b == 30 \n        300\n    elseif b == 31 \n     \
    \   310\n    elseif b == 32 \n        320\n    elseif b == 33 \n        330\n\
    \    elseif b == 34 \n        340\n    elseif b == 35\n        350\n    elseif\
    \ b == 36\n        360\n    elseif b == 37\n        370\n    elseif b == 38\n\
    \        380\n    elseif b == 39\n        390\n    elseif b == 40\n        400\n\
    \    elseif b == 41\n        410\n    elseif b == 42\n        420\n    elseif\
    \ b == 43\n        430\n    elseif b == 44\n        440\n    elseif b == 45\n\
    \        450\n    elseif b == 46\n        460\n    elseif b == 47\n        470\n\
    \    elseif b == 48\n        480\n    elseif b == 49\n        490\n    elseif\
    \ b == 50\n        500\n    elseif b == 51\n        510\n    elseif b == 52\n\
    \        520\n    elseif b == 53\n        530\n    elseif b == ", "    if a <\
    \ 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n\
    \    else\n        (a * b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(a::Int64)::Int64", "    if b == 0 \n        0\n    else \n\
    \        multiply(b, a % b)\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| c |>\nThis doesn't seem to work. `multiply(148, 412)` returns `16` instead\
    \ of `72`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `multiply(148, 412)` returns `16`\
    \ instead of `72`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `multiply(148, 412)` returns\
    \ `16` instead of `72`.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if b == 0 \n\
    \        return 0 \n    else \n        return (a * b) mod 10 \nend \n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (modulo 10). Assume the input is always\
    \ valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n\
    \    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\
    \"", "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a\
    \ == 0 || b == 0\n        0\n    else\n        digits(a) * digits(b)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if a < 0 || b < 0 \n        error(\"\
    The input must be positive\")\n    elseif b == 0 \n        error(\"The input must\
    \ be positive\")\n    elseif b == 1 \n        return a\n    else\n        return\
    \ a * b\n    end\nend", "    if b == 0 \n        return 0 \n    else \n      \
    \  return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits. \nAssume the input is always valid.\nExamples:\n\
    >>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14,\
    \ -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    else\n        if a < 0 \n\
    \            0\n        else\n            (a * b) mod 10\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (modulo 10).", "    if b == 0 \n        0\n    else\n        if\
    \ a < 0\n            0\n        else\n            a % b\n        end\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if `a` is negative\
    \ and `b` is positive.\n<|/ c |>\n<| c |>\nI added a solution that works with\
    \ negative numbers as well.\n<|/ c |>\n<| c |>\nThis doesn't work if `a` is negative\
    \ and `b` is positive.\n<|/ c |>\n<| c |>\nI added a solution that works with\
    \ negative numbers as well.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    if b\
    \ == 0 \n        0\n    else\n        (a*b).digits(2)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits. \nAssume the input is always valid.\nExamples:\n>>> sum(148,\
    \ 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\
    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return (a * b)\
    \ mod 10\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the sum of their unit digits.\n  \
    \  Assume the input is always valid.\n    Examples:\n    >>> add(148, 412)\n \
    \   168\n    >>> add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n    >>>\
    \ add(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the \n    unit digits of their product (without\
    \ using multiplication).\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>>\
    \ sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ a * b\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the digits of its input. \nAssume that the input is always\
    \ valid.\nExamples:\n>>> sum(12345)\n15\n>>> sum(10)\n10\n>>> sum(0)\n0\n>>> sum(123456789)\n\
    15\n>>> sum(1234567890)\n15\n>>> sum(12345678901)\n16\n>>> sum(123456789012)\n\
    16\n>>> sum(1234567890123)\n17\n>>> sum(12345678901234)\n17\n>>> sum(123456789012345)\n\
    17\n>>> sum(12345678901234567)\n18\n>>> sum(123456789012345678)\n18\n>>> sum(1234567890123456788)\n\
    19\n>>> sum(12345678901234567889)\n19\n>>> sum(123456789012345678899)\n19\n>>>\
    \ sum(1234567890123456788999)\n19\n>>> sum(12345678901234567889999)\n19\n>>> sum(123456789012345678899999)\n\
    19\n>>> sum(1234567890123456788999999)\n19\n>>> sum(12345678901234567889999999)\n\
    19\n>>> sum(1234567890123456788999999999)\n19\n>>> sum(123456789012345678899999999999)\n\
    19\n>>> sum(123456789012345678899999999989)\n19\n>>> sum(1234567890123456788999999999890)\n\
    19\n>>> sum(12345678901234567889999999998900)\n19\n>>> sum(1234567890123456788999999999890001)\n\
    19\n>>> sum(12345678901234567889999999998900012)\n19\n>>> sum(123456789012345678899999999989000123)\n\
    19\n>>> sum(1234567890123456788999999999890001234)\n19\n>>> sum(12345678901234567889999999998900012345)\n\
    19\n>>> sum(1234567890123456788999999999890001234567)\n19\n>>> sum(12345678901234567889999999998900012345678)\n\
    19\n>>> sum(123456789012345678899999999989000123456788)\n19\n>>> sum(1234567890123456788999999999890001234567889)\n\
    19\n>>> sum(1234567890123456788999999999890001234567", "    if b == 0 \n     \
    \   0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two integers and returns the sum of the unit digits of their product\
    \ \n    For example: \n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 9 \n        0\n    elseif b < a \n        0\n    elseif b == a\
    \ \n        1\n    elseif b > a \n        0\n    elseif b == 0 \n        0\n \
    \   elseif b == 1 \n        1\n    elseif b == 2 \n        2\n    elseif b ==\
    \ 3 \n        6\n    elseif b == 4 \n        24\n    elseif b == 5 \n        120\n\
    \    elseif b == 6 \n        720\n    elseif b == 7 \n        5040\n    elseif\
    \ b == 8 \n        40320\n    elseif b == 9 \n        362880\n    elseif b ==\
    \ 10 \n        3628800\n    elseif b == 11 \n        39916800\n    elseif b ==\
    \ 12 \n        479001600\n    elseif b == 13 \n        6227020800\n    elseif\
    \ b == 14 \n        87178291200\n    elseif b == 15 \n        1307674368000\n\
    \    elseif b == 16 \n        20922789888000\n    elseif b == 17 \n        355687428096000\n\
    \    elseif b == 18 \n        6402373705728000\n    elseif b == 19 \n        121645100408832000\n\
    \    elseif b == 20 \n        2432902008176640000\n    elseif b == 21 \n     \
    \   51090942171709440000\n    elseif b == 22 \n        1124000727777607680000\n\
    \    elseif b == 23 \n        25852016738884976640000\n    elseif b == 24 \n \
    \       620448401733239439360000\n    elseif b == 25 \n        15511210043330985984000000\n\
    \    elseif b == 26 \n        403291461126605635584000000\n    elseif b == 27\
    \ \n        10888869450418352160768000000\n    elseif b == 28 \n        304888344611713860501504000000\n\
    \    elseif b == 29 \n        8841761993739701954543616000000\n    elseif b ==\
    \ 30 \n        265252859812191058636308480000000\n    elseif b == 31 \n      \
    \  8222838654177922817725562880000000\n    elseif b == 32 \n        17592186044416862704291213372960000000\n\
    \    elseif b == 33", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n10\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n \
    \       a * 10^(b-1)\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns their sum.\nAs a reminder,\
    \ here are the rules:", "    if b == 0 \n        0\n    elseif b < 0 \n      \
    \  0\n    elseif b > 0 \n        a * 10^(b-1)\n    elseif b < 0 \n        0\n\
    \    elseif b == 0 \n        a\n    else\n        0\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 7: Unit Digit\nComplete the function that takes\
    \ two integers and returns the unit digit of their product \n    assuming the\
    \ input is valid.\n    Examples:\n    >>> unitDigit(148, 412)\n    8\n    >>>\
    \ unitDigit(19, 28)\n    7\n    >>> unitDigit(2020, 1851)\n    0\n    >>> unitDigit(14,\
    \ -15)\n    -1\n    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n \
    \       0\n    elseif b > a \n        0\n    else\n        (a * b) % 10\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10 \nend \n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the \n    unit digits of their product (mod\
    \ 10). \n    For example, multiply(148, 412) should return 16.\n    \n    Use\
    \ a while loop to repeatedly call the function until the product \n    of the\
    \ unit digits is 0.\n    \n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n    else\n\
    \        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \n    digits(a::Int64)", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    else\n        return a * b\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the sum of the \n    unit digits of all the integers in the array.\n\
    \    Examples:\n    >>> sum([148, 412, 19, 28])\n    16\n    >>> sum([2020, 1851])\n\
    \    0\n    >>> sum([14, -15])\n    20\n    \"\"\"", "    if b == 0 \n       \
    \ return 0 \n    else \n        return (a * b % 10) * 10 + a % 10\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        0\n    elseif b == 1\n        a\n\
    \    else\n        multiply(a/10, b%10)*10 + a*b%10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * 10 + b) \n    end\nend\n</cell>\n<code language=julia-1.3>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the digits of its input. \nAssume that the input is\
    \ always valid. \nExamples:\n>>> sum(123)\n6\n>>> sum(1234)\n10\n>>> sum(12345)\n\
    15\n>>> sum(123456)\n21\n>>> sum(1234567)\n28\n>>> sum(12345678)\n35\n>>> sum(123456789)\n\
    42\n>>> sum(1234567890)\n49\n>>> sum(12345678901)\n56\n>>> sum(123456789012)\n\
    63\n>>> sum(1234567890123)\n70\n>>> sum(12345678901234)\n78\n>>> sum(123456789012345)\n\
    86\n>>> sum(1234567890123456)\n94\n>>> sum(12345678901234567)\n103\n>>> sum(123456789012345678)\n\
    110\n>>> sum(1234567890123456789)\n117\n>>> sum(12345678901234567890)\n126\n>>>\
    \ sum(123456789012345678901)\n133\n>>> sum(1234567890123456789012)\n140\n>>> sum(12345678901234567890123)\n\
    147\n>>> sum(123456789012345678901234)\n154\n>>> sum(1234567890123456789012345)\n\
    163\n>>> sum(12345678901234567890123456)\n170\n>>> sum(123456789012345678901234567)\n\
    177\n>>> sum(1234567890123456789012345678)\n184\n>>> sum(12345678901234567890123456789)\n\
    192\n>>> sum(123456789012345678901234567890)\n198\n>>> sum(1234567890123456789012345678901)\n\
    204\n>>> sum(12345678901234567890123456789012)\n210\n>>> sum(123456789012345678901234567890123)\n\
    217\n>>> sum(1234567890123456789012345678901234)\n224\n>>> sum(12345678901234567890123456789012345)\n\
    230\n>>> sum(123456789012345678901234567890123456)\n237\n>>> sum(1234567890123456789012345678901234567)\n\
    244\n>>> sum(12345678901234567890123456789012345678)\n251\n>>> sum(123456789012345678901234567890123456789)\n\
    260\n>>> sum(1234567890123456789012345678901234567890)\n267\n>>> sum(12345678901234567890123456789012345678901)\n\
    274\n>>> sum(123456789012345678901234567890123456789012)\n282\n>>> sum(1234567890123456789012345678901234567890123)\n\
    289\n>>> sum(12345678901234567890123456789012345678901234)\n294\n>>> sum(123456789012345678901234567890123456789012345)\n\
    301\n>>> sum(", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n   \
    \ elseif b == 0\n        return a\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        (a * 10 + b) * 10\n    else\n\
    \        0\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of its unit digits. \nAssume that the input is always valid.\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        return 0 \n    else \n\
    \        return (a * b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the \n    unit digits of their product (modulo\
    \ 10^9 + 7).\n    Assume the input is always valid.\n    Examples:\n    >>> sum(148,\
    \ 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n\
    \    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        return a\n    else\n        return\
    \ a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0 \n   \
    \     error(\"Invalid input\")\n    else if a == 0 || b == 0\n        error(\"\
    Invalid input\")\n    else \n        mult_digits(a, b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    mult_digits(a::Int64, b::Int64)::Int64\n\
    \    \n    Multiply two integers represented as unit digits. \n    \n    Assumes\
    \ both inputs are valid.\n    \n    Examples:\n    >>> mult_digits(148, 412)\n\
    \    16\n    >>> mult_digits(19, 28)\n    72\n    >>> mult_digits(2020, 1851)\n\
    \    0\n    >>> mult_digits(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the sum of the \n    unit digits. \n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> sum([148, 412, 19, 28, 2020, 1851, 14])\n   \
    \ 16\n    >>> sum([19, 28, 2020, 1851, 14])\n    72\n    >>> sum([148, 412, 19,\
    \ 28, 2020, 1851, 14])\n    16\n    \"\"\"", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif b == 0 \n      \
    \  0\n    elseif b == 1 \n        a\n    elseif b == 2 \n        a * 10\n    elseif\
    \ b == 3 \n        a * 100\n    elseif b == 4 \n        a * 1000\n    elseif b\
    \ == 5 \n        a * 10000\n    elseif b == 6 \n        a * 100000\n    elseif\
    \ b == 7 \n        a * 1000000\n    elseif b == 8 \n        a * 10000000\n   \
    \ elseif b == 9 \n        a * 100000000\n    elseif b == 10 \n        a * 1000000000\n\
    \    elseif b == 11 \n        a * 10000000000\n    elseif b == 12 \n        a\
    \ * 100000000000\n    elseif b == 13 \n        a * 1000000000000\n    elseif b\
    \ == 14 \n        a * 10000000000000\n    elseif b == 15 \n        a * 100000000000000\n\
    \    elseif b == 16 \n        a * 1000000000000000\n    elseif b == 17 \n    \
    \    a * 10000000000000000\n    elseif b == 18 \n        a * 100000000000000000\n\
    \    elseif b == 19 \n        a * 1000000000000000000\n    elseif b == 20 \n \
    \       a * 10000000000000000000\n    elseif b == 21 \n        a * 100000000000000000000\n\
    \    elseif b == 22 \n        a * 1000000000000000000000\n    elseif b == 23 \n\
    \        a * 10000000000000000000000\n    elseif b == 24 \n        a * 100000000000000000000000\n\
    \    elseif b == 25 \n        a * 1000000000000000000000000\n    elseif b == 26\
    \ \n        a * 10000000000000000000000000\n    elseif b == 27 \n        a * 100000000000000000000000000\n\
    \    elseif b == 28 \n        a * 1000000000000000000000000000\n    elseif b ==\
    \ 29 \n        a * 10000000000000000000000000000\n    elseif b == 30 \n      \
    \  a * 100000000000000000000000000000\n    elseif b == 31 \n        a * 1000000000000000000000000000000\n\
    \    elseif b == 32 \n        a * 10000000000000000000000000000000\n    elseif\
    \ b == 33 \n        a * 100000000000000000000000000000000\n    elseif b == 34\
    \ \n        a * 1000000000000000000000000000000000\n    elseif b == 35 \n    \
    \    a * 10000000000000000000000000000000000\n    elseif b == 36\n        a *\
    \ 100000000000000000000000000000000000\n    elseif b == 37\n        a * 1000000000000000000000000000000000000\n\
    \    elseif b == 38\n        a * 10000000000000000000000000000000000000\n    elseif\
    \ b == 39\n        a * 100000000000000000000000000000000000000\n    elseif b ==\
    \ 40\n        a * 1000000000000000000000000000000000000000\n    elseif b == 41\n\
    \        a * 1000000000000000000", "    if b == 0 \n        0\n    else\n    \
    \    (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n", "    if b == 0 \n      \
    \  0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if b == 0\n  \
    \      return 0\n    \n    if a < 0\n        return multiply(-a, -b)\n    \n \
    \   if b < 0\n        return multiply(a, b * -1)\n    \n    if b == 0\n      \
    \  return a\n    \n    if a == 0\n        return b\n    \n    if a < b\n     \
    \   return multiply(a / 10, b / 10)\n    \n    return multiply(a / 10, b / 10)\
    \ * 10 + a % 10 * b / 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<code language=julia-1.5>", "    if b == 0 \n        0\n    else\n  \
    \      (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
