name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n\
    \        sum += i\n    \n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33", "    if n <= m \n        rounded_avg\
    \ = round(n / m) * m\n        return bin(rounded_avg)[2:]\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take an Int n and return a Vector of Ints.\nThe function\
    \ should return an empty Vector if n is less than 2.\nExample: \n>>> primes(10)\n\
    [2, 3, 5, 7, 11, 13, 17, 19]\n>>> primes(5)\n[]\n>>> primes(0)\n[]\n>>> primes(-1)\n\
    []\n>>> primes(-2)\n[]\n>>> primes(-3)\n[]\n>>> primes(-4)\n[]\n>>> primes(-5)\n\
    []\n>>> primes(-6)\n[]\n>>> primes(-7)\n[]\n>>> primes(-8)\n[]\n>>> primes(-9)\n\
    []\n>>> primes(-10)\n[]\n>>> primes(-11)\n[]\n>>> primes(-12)\n[]\n>>> primes(-13)\n\
    []\n>>> primes(-14)\n[]\n>>> primes(-15)\n[]\n>>> primes(-16)\n[]\n>>> primes(-17)\n\
    []\n>>> primes(-18)\n[]\n>>> primes(-19)\n[]\n>>> primes(-20)\n[]\n>>> primes(-21)\n\
    []\n>>> primes(-22)\n[]\n>>> primes(-23)\n[]\n>>> primes(-24)\n[]\n>>> primes(-25)\n\
    []\n>>> primes(-26)\n[]\n>>> primes(-27)\n[]\n>>> primes(-28)\n[]\n>>> primes(-29)\n\
    []\n>>> primes(-30)\n[]\n>>> primes(-31)\n[]\n>>> primes(-32)\n[]\n>>> primes(-33)\n\
    []\n>>> primes(-34)\n[]\n>>> primes(-35)\n[]\n>>> primes(-36)\n[]\n>>> primes(-37)\n\
    []\n>>> primes(-38)\n[]\n>>> primes(-39)\n[]\n>>> primes(-40)\n[]\n", "    if\
    \ n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as the product of all\
    \ the integers up to and including $n$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1\
    \ = 120. \nWrite a function that computes the factorial of a given number. \n\
    The factorial of a number $n$ is defined as the product of all the integers up\
    \ to and including $n$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nIf n is\
    \ 0, return 1.\nIf n is negative, return -1.\nIf n is greater than or equal to\
    \ 1, return 1.\nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(0)\n1\n>>> factorial(-1)\n-1\n>>> factorial(1)\n1\n>>> factorial(7)\n\
    5040\n>>> factorial(8)\n40320\n>>> factorial(9)\n362880\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n1209600\n>>> factorial(100)\n\
    36288008800\n>>> factorial(1000)\n36288008800186800640000\n>>> factorial(10000)\n\
    36288008800186800640000\n>>> factorial(100000)\n36288008800186800640000\n>>> factorial(1000000)\n\
    36288008800186800640000\n>>> factorial(10000000)\n36288008800186800640000\n>>>\
    \ factorial(100000000)\n36288008800186800640000\n>>> factorial(1000000000)\n36288008800186800640000\n\
    >>> factorial(10000000000)\n36288008800186800640000\n>>> factorial(100000000000)\n\
    36288008800186800640000\n>>> factorial(1000000000000)\n36288008800186800640000\n\
    >>> factorial(10000000000000)\n36288008800186800640000\n>>> factorial(100000000000000)\n\
    3628800880018680064", "    if n > m \n        return -1\n    else \n        return\
    \ round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.", "    if m > n\
    \ \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if m > n \n   \
    \     return -1\n    \n    sum = 0\n    for i in n:m\n        sum += i\n    \n\
    \    return sum / m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ number. \nThe factorial of a number $n$ is defined as:", "    if n <= m\n  \
    \      return -1\n    else\n        return round(Int64(n)/Int64(m))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given integer. \n\
    \    Round the answer to the nearest integer and convert that to binary.\n   \
    \ Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n\
    \    >>> factorial(20)\n    15511210043330985984000000\n    >>> factorial(33)\n\

  "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    >>> factorial(30)\n\
    \    1179642864000000000000\n    \"\"\"", "    if n <= m \n        return n\n\
    \    else \n        return -1\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.615941559566398e+29\n\
    >>> factorial(100)\n3.141592653589793\n>>> factorial(1000)\n6.283185307179586e+307\n\
    >>> factorial(10000)\n1.8446744073709552e+308\n>>> factorial(100000)\n2.345662e-11\n\
    >>> factorial(1000000)\n6.93889390e-18\n>>> factorial(10000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000)\n3.141592653589793e+307\n>>> factorial(1000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000000)\n3.141592653589793e+307\n>>> factorial(1000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000000000)\n3.141592653589793e+307\n>>> factorial(1000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000000000000)\n3.141592653589793e+307\n>>> factorial(1000000000000000000)\n\
    3.141592653589793e+307\n>>> factorial(10000000000000000000)\n6.283185307179586e+307\n\
    >>> factorial(100000000000000000000)\n1.8446744073709552e+308\n>>> factorial(1000000000000000000000)\n\
    3.141592653589793e+307\n>>> factorial(10000000000000000000000)\n6.283185307179586e+307\n\
    >>> factorial(100000000000000000000000)\n1.8446744073709552e+308\n>>> factorial(1000000000000000000000000)\n\
    3.141592653589793e", "    if n <= m\n        rounded_avg = round(n/m)\n      \
    \  return bin(rounded_avg)\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.", "    if n <= m\n\
    \        return -1\n    else\n        return round(Int64(n)/Int64(m))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if m\
    \ > n \n        return -1\n    \n    binary = \"\"\n    for i in n:n:\n      \
    \  binary += \"1\"\n    for i in m:\n        binary += \"0\"\n    return bin(Int64(binary))[2:]\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>", "    if m > n \n        return -1\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if n>m \n        rounded_avg=-1\n    else\n       \
    \ rounded_avg=ceil(Int64(n)/Int64(m))*Int64(m) + Int64(n-ceil(Int64(n)/Int64(m)))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20,33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if m > n \n        return -1\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if n>m \n        rounded_avg=-1\n    else\
    \ \n        rounded_avg=round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. \nExample: \n\
    >>> digits(1234)\n4\n>>> digits(123)\n3\n>>> digits(0)\n1\n>>> digits(-1234)\n\
    4\n>>> digits(-123)\n3\n>>> digits(-0)\n1\n>>> digits(1.234)\n4\n>>> digits(1.23)\n\
    3\n>>> digits(1.2)\n2\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n\
    1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n\
    >>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> ",
  "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if m > n\
    \ then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.882839E+19\n>>> factorial(40)\n\
    1.8446744073709552E+20\n>>> factorial(50)\n3.46628234663852886E+24\n>>> factorial(60)\n\

  "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
