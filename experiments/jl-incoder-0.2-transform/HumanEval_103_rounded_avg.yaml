name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n\
    \        sum += i\n    \n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 33", "    if n <= m \n        rounded_avg\
    \ = round(n / m) * m\n        return bin(rounded_avg)[2:]\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take an Int n and return a Vector of Ints.\nThe function\
    \ should return an empty Vector if n is less than 2.\nExample: \n>>> primes(10)\n\
    [2, 3, 5, 7, 11, 13, 17, 19]\n>>> primes(5)\n[]\n>>> primes(0)\n[]\n>>> primes(-1)\n\
    []\n>>> primes(-2)\n[]\n>>> primes(-3)\n[]\n>>> primes(-4)\n[]\n>>> primes(-5)\n\
    []\n>>> primes(-6)\n[]\n>>> primes(-7)\n[]\n>>> primes(-8)\n[]\n>>> primes(-9)\n\
    []\n>>> primes(-10)\n[]\n>>> primes(-11)\n[]\n>>> primes(-12)\n[]\n>>> primes(-13)\n\
    []\n>>> primes(-14)\n[]\n>>> primes(-15)\n[]\n>>> primes(-16)\n[]\n>>> primes(-17)\n\
    []\n>>> primes(-18)\n[]\n>>> primes(-19)\n[]\n>>> primes(-20)\n[]\n>>> primes(-21)\n\
    []\n>>> primes(-22)\n[]\n>>> primes(-23)\n[]\n>>> primes(-24)\n[]\n>>> primes(-25)\n\
    []\n>>> primes(-26)\n[]\n>>> primes(-27)\n[]\n>>> primes(-28)\n[]\n>>> primes(-29)\n\
    []\n>>> primes(-30)\n[]\n>>> primes(-31)\n[]\n>>> primes(-32)\n[]\n>>> primes(-33)\n\
    []\n>>> primes(-34)\n[]\n>>> primes(-35)\n[]\n>>> primes(-36)\n[]\n>>> primes(-37)\n\
    []\n>>> primes(-38)\n[]\n>>> primes(-39)\n[]\n>>> primes(-40)\n[]\n", "    if\
    \ n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as the product of all\
    \ the integers up to and including $n$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1\
    \ = 120. \nWrite a function that computes the factorial of a given number. \n\
    The factorial of a number $n$ is defined as the product of all the integers up\
    \ to and including $n$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nIf n is\
    \ 0, return 1.\nIf n is negative, return -1.\nIf n is greater than or equal to\
    \ 1, return 1.\nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(0)\n1\n>>> factorial(-1)\n-1\n>>> factorial(1)\n1\n>>> factorial(7)\n\
    5040\n>>> factorial(8)\n40320\n>>> factorial(9)\n362880\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n1209600\n>>> factorial(100)\n\
    36288008800\n>>> factorial(1000)\n36288008800186800640000\n>>> factorial(10000)\n\
    36288008800186800640000\n>>> factorial(100000)\n36288008800186800640000\n>>> factorial(1000000)\n\
    36288008800186800640000\n>>> factorial(10000000)\n36288008800186800640000\n>>>\
    \ factorial(100000000)\n36288008800186800640000\n>>> factorial(1000000000)\n36288008800186800640000\n\
    >>> factorial(10000000000)\n36288008800186800640000\n>>> factorial(100000000000)\n\
    36288008800186800640000\n>>> factorial(1000000000000)\n36288008800186800640000\n\
    >>> factorial(10000000000000)\n36288008800186800640000\n>>> factorial(100000000000000)\n\
    3628800880018680064", "    if n > m \n        return -1\n    else \n        return\
    \ round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.", "    if m > n\
    \ \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if m > n \n   \
    \     return -1\n    \n    sum = 0\n    for i in n:m\n        sum += i\n    \n\
    \    return sum / m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ number. \nThe factorial of a number $n$ is defined as:", "    if n <= m\n  \
    \      return -1\n    else\n        return round(Int64(n)/Int64(m))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given integer. \n\
    \    Round the answer to the nearest integer and convert that to binary.\n   \
    \ Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n\
    \    >>> factorial(20)\n    15511210043330985984000000\n    >>> factorial(33)\n\

  "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    >>> factorial(30)\n\
    \    1179642864000000000000\n    \"\"\"", "    if n <= m \n        return n\n\
    \    else \n        return -1\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.615941559566398e+29\n\
    >>> factorial(100)\n3.141592653589793\n>>> factorial(1000)\n6.283185307179586e+307\n\
    >>> factorial(10000)\n1.8446744073709552e+308\n>>> factorial(100000)\n2.345662e-11\n\
    >>> factorial(1000000)\n6.93889390e-18\n>>> factorial(10000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000)\n3.141592653589793e+307\n>>> factorial(1000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000000)\n3.141592653589793e+307\n>>> factorial(1000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000000000)\n3.141592653589793e+307\n>>> factorial(1000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000000)\n1.8446744073709552e+308\n\
    >>> factorial(100000000000000000)\n3.141592653589793e+307\n>>> factorial(1000000000000000000)\n\
    3.141592653589793e+307\n>>> factorial(10000000000000000000)\n6.283185307179586e+307\n\
    >>> factorial(100000000000000000000)\n1.8446744073709552e+308\n>>> factorial(1000000000000000000000)\n\
    3.141592653589793e+307\n>>> factorial(10000000000000000000000)\n6.283185307179586e+307\n\
    >>> factorial(100000000000000000000000)\n1.8446744073709552e+308\n>>> factorial(1000000000000000000000000)\n\
    3.141592653589793e", "    if n <= m\n        rounded_avg = round(n/m)\n      \
    \  return bin(rounded_avg)\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.", "    if n <= m\n\
    \        return -1\n    else\n        return round(Int64(n)/Int64(m))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if m\
    \ > n \n        return -1\n    \n    binary = \"\"\n    for i in n:n:\n      \
    \  binary += \"1\"\n    for i in m:\n        binary += \"0\"\n    return bin(Int64(binary))[2:]\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>", "    if m > n \n        return -1\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if n>m \n        rounded_avg=-1\n    else\n       \
    \ rounded_avg=ceil(Int64(n)/Int64(m))*Int64(m) + Int64(n-ceil(Int64(n)/Int64(m)))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20,33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if m > n \n        return -1\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if n>m \n        rounded_avg=-1\n    else\
    \ \n        rounded_avg=round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. \nExample: \n\
    >>> digits(1234)\n4\n>>> digits(123)\n3\n>>> digits(0)\n1\n>>> digits(-1234)\n\
    4\n>>> digits(-123)\n3\n>>> digits(-0)\n1\n>>> digits(1.234)\n4\n>>> digits(1.23)\n\
    3\n>>> digits(1.2)\n2\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n\
    1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n\
    >>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>>\
    \ digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> digits(1.)\n1\n>>> ",
  "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if m > n\
    \ then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.882839E+19\n>>> factorial(40)\n\
    1.8446744073709552E+20\n>>> factorial(50)\n3.46628234663852886E+24\n>>> factorial(60)\n\

  "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if n <= m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n15511210043330985984000000\n>>> factorial(30)\n628362305877000392965645773322636547874467167848944\n\
    >>> factorial(40)\n1030792150460684697629483820646484540072581100393019\n>>> factorial(50)\n\
    157783683599244424371670974735274215977609946784\n>>> factorial(60)\n248856688248912455048884776377537395739065748447\n\
    >>> factorial(70)\n1277731857416159687428249729590985859765771569\n>>> factorial(80)\n\
    2432902008176640000\n>>> factorial(90)\n2432902008176640000\n>>> factorial(100)\n\
    15511210043330985984000000\n>>> factorial(1000)\n15511210043330985984000000\n\
    >>> factorial(10000)\n15511210043330985984000000\n>>> factorial(100000)\n15511210043330985984000000\n\
    >>> factorial(1000000)\n15511210043330985984000000\n>>> factorial(10000000)\n\
    15511210043330985984000000\n>>> factorial(100000000)\n15511210043330985984000000\n\
    >>> factorial(1000000000)\n15511210043330985984000000\n>>> factorial(10000000000)\n\
    15511210043330985984000000\n>>> factorial(100000000000)\n15511210043330985984000000\n\
    >>> factorial(1000000000000)\n15511210043330985984000000\n>>> factori", "    if\
    \ m > n \n        return -1\n    \n    sum = 0\n    for i in n:n:\n        sum\
    \ += i\n    \n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    >>> factorial(30)\n\
    \    15778365984000000\n    \"\"\"", "    if n >= m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = ceil(n / m) * m\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(30)\n    117964286400000000000000\n\
    \    \"\"\"", "    if n > m \n        rounded_avg = -1\n    else \n        rounded_avg\
    \ = ceil(Int, (n + m) / 2)\n        rounded_avg = bin(rounded_avg)[2:]\n    return\
    \ rounded_avg\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef rounded_avg(n,m):\n\
    \    if n>m:\n        return -1\n    rounded_avg = (n+m)/2\n    rounded_avg =\
    \ str(bin(rounded_avg)[2:])\n    return rounded_avg\n</code>\n<|/ a tags=python,python-3.x\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| c |>\nPlease don't post only code as\
    \ an answer, but also provide an explanation what your code does and how it solves\
    \ the problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a tags=python,python-3.x |>\n<code>\n\
    def rounded_avg(n,m):\n    if n>m:\n        return -1\n    rounded_avg = (n+m)/2\n\
    \    rounded_avg = str(bin(rounded_avg)[2:])\n    return rounded_avg\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also\
    \ provide an explanation what your code does and how it solves the problem of\
    \ the question. Answers with an explanation are usually more helpful and of better\
    \ quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\ndef rounded_avg(n,m):\n    if n>m:\n        return -1\n    rounded_avg\
    \ = (n+m)/2\n    rounded_avg = str(bin(rounded_avg)[2:])\n    return rounded_avg\n\
    </code>\n<|/ a tags=python,python-3.x |>\n<|", "    if n <= m \n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n    else\n \
    \       return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n >= m \n        return -1\n    else \n        return\
    \ round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a list of integers and returns the number of elements in the list that are greater\
    \ than or equal to 5", "    if m > n \n        rounded_avg = -1\n    else \n \
    \       rounded_avg = round(n / m * 2::Int64) + 1::Int64\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n <= m \n        rounded_avg = round(n/m)\n       \
    \ return bin(rounded_avg)\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7,5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two integers n and m and returns their sum, rounded\
    \ to\nthe nearest integer.", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number. \n    Factorial\
    \ of 0 is 1, and factorial of 1 is 1. \n    Example:\n    >>> factorial(0)\n \
    \   1\n    >>> factorial(1)\n    1\n    >>> factorial(5)\n    120\n    \"\"\"",
  "    if n <= m\n        return n\n    \n    binary = \"\"\n    \n    for i in n:m\n\
    \        binary += i\n    \n    return Int64(binary)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given array.", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ <= m \n        rounded_avg = round(n/m)*m\n        rounded_avg = round(rounded_avg)\n\
    \        rounded_avg = bin(rounded_avg)[2:]\n        rounded_avg = rounded_avg.zfill(8)\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_", "    if m > n then return -1\n\
    \    else return round(Int64(n:m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers and returns the sum of the integers from n through m.", "    if\
    \ n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.4>\nrounded_avg(7,5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20,33)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n\
    2432902008176640000\n>>> factorial(30)\n6.615941559566398E+20\n>>> factorial(40)\n\
    1.7976931348623157e+308\n>>> factorial(50)\n5.007199254740992e+308\n>>> factorial(60)\n\
    1.7976931348623157e+308\n>>> factorial(70)\n1.7976931348623157e+308\n>>> factorial(80)\n\
    1.7976931348623157e+308\n>>> factorial(90)\n1.7976931348623157e+308\n>>> factorial(100)\n\
    5.007199254740992e+308\n>>> factorial(110)\n5.007199254740992e+308\n>>> factorial(120)\n\
    5.007199254740992e+308\n>>> factorial(130)\n5.007199254740992e+308\n>>> factorial(140)\n\
    5.007199254740992e+308\n>>> factorial(150)\n5.007199254740992e+308\n>>> factorial(160)\n\
    5.007199254740992e+308\n>>> factorial(170)\n5.007199254740992e+308\n>>> factorial(180)\n\
    5.007199254740992e+308\n>>> factorial(190)\n5.007199254740992e+308\n>>> factorial(200)\n\
    5.007199254740992e+308\n>>> factorial(210)\n5.007199254740992e+308\n>>> factorial(220)\n\
    5.007199254740992e+308\n>>> factorial(230)\n5.007199254740992e+308\n>>> factorial(240)\n\
    5.007199254740992e+308\n>>> factorial(250)\n5.007199", "    if n <= m \n     \
    \   rounded_avg = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n", "    if n>m \n     \
    \   return -1\n    else \n        return round(Int64(n)/Int64(m))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.615941559566398E+20\n\
    >>> factorial(40)\n1.8446744073709552E+24\n>>> factorial(50)\n5.2080602400912928E+25\n\
    >>> factorial(60)\n1.00000000000000000E+30\n>>> factorial(70)\n1.00000000000000000E+30\n\
    >>> factorial(80)\n1.00000000000000000E+30\n>>> factorial(90)\n1.00000000000000000E+30\n\
    >>> factorial(100)\n1.00000000000000000E+30\n>>> factorial(110)\n1.00000000000000000E+30\n\
    >>> factorial(120)\n1.00000000000000000E+30\n>>> factorial(130)\n1.00000000000000000E+30\n\
    >>> factorial(140)\n1.00000000000000000E+30\n>>> factorial(150)\n1.00000000000000000E+30\n\
    >>> factorial(160)\n1.00000000000000000E+30\n>>> factorial(170)\n1.00000000000000000E+30\n\
    >>> factorial(180)\n1.00000000000000000E+30\n>>> factorial(190)\n1.00000000000000000E+30\n\
    >>> factorial(200)\n1.00000000000000000E+30\n>>> factorial(210)\n1.00000000000000000E+30\n\
    >>> factorial(220)\n1.00000000000000000E+30\n>>> factorial(230)\n1.00000000000000000E+30\n\
    >>> factorial(240)\n1.00000000000000000E+30\n>>> factorial(250)\n1.00000000000000000E+30\n\
    >>> factorial(260)\n1.00000000000000000E+30\n>>> factorial(270)\n1.00000000000000000E+30\n\
    >>> factorial(280)\n1.00000000000000000E+30\n>>> factorial(290)\n1.00000000000000000E+30\n\
    >>> factorial(300)\n1.00000000000000000E+30\n>>> factorial(310)\n1.00000000000000000",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = ((n+m)/2)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number. \n    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120.", "    if\
    \ m > n \n        return -1\n    \n    avg = round(n/m)\n    binary = \"\"\n \
    \   for i in (2..m-1) do \n        binary += str((avg - i).abs)\n    end\n   \
    \ \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ characters in a string. \nThe function should take a string as input and return\
    \ the number of characters in the string.\nExample: \n>>> count_chars(\"Hello\
    \ World\")\n5\n>>> count_chars(\"Hello World!\")\n7\n>>> count_chars(\"Hello World!\"\
    )\n7\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\"\
    , 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"Hello\
    \ World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello World!\", 10)\n10\n>>> count_chars(\"Hello World!\", 10)\n10\n>>> count_chars(\"\
    Hello ", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n     \
    \   rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    \"\"\"", "    if n <= m \n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n    else\n \
    \       return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n > m \n        return -1\n    \n    sum = 0\n    for\
    \ i in n:m\n        sum += i\n    return sum.to_binary(round_digits=2)\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.", "   \
    \ if n <= m\n        return n\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n <= m\n\
    \        return n\n    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_", "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first n prime numbers. \n\
    The function should take an Int argument n and return a Vector of Ints.\nThe function\
    \ should return -1 if n is less than or equal to 0.\nThe function should return\
    \ an empty Vector if n is 0.\nThe function should return an error if n is not\
    \ a positive integer.\nThe function should return an error if n is negative.\n\
    The function should return an error if n is greater than 100.\nThe function should\
    \ return an error if n is not a multiple of 2.\nThe function should return an\
    \ error if n is not a multiple of 3.\nThe function should return an error if n\
    \ is not a multiple of 5.\nThe function should return an error if n is not a multiple\
    \ of 7.\nThe function should return an error if n is not a multiple of 11.\nThe\
    \ function should return an error if n is not a multiple of 13.\nThe function\
    \ should return an error if n is not a multiple of 17.\nThe function should return\
    \ an error if n is not a multiple of 19.\nThe function should return an error\
    \ if n is not a multiple of 23.\nThe function should return an error if n is not\
    \ a multiple of 29.\nThe function should return an error if n is not a multiple\
    \ of 31.\nThe function should return an error if n is not a multiple of 33.\n\
    The function should return an error if n is not a multiple of 35.\nThe function\
    \ should return an error if n is not a multiple of 41.\nThe function should return\
    \ an error if n is not a multiple of 43.\nThe function should return an error\
    \ if n is not a multiple of 47.\nThe function should return an error if n is not\
    \ a multiple of 53.\nThe function should return an error if n is not a multiple\
    \ of 59.\nThe function should return an error if n is not a multiple of 61.\n\
    The function should return an error if n is not a multiple of 67.\nThe function\
    \ should return an error if n is not a multiple of 73.\nThe function should return\
    \ an error if n is not a multiple of 79.\nThe function should return an error\
    \ if n is not a multiple of 83.\nThe function should return an error if n is not\
    \ a multiple of 89.\nThe function should return an error if n is not a multiple\
    \ of 97.\nThe function should return an error if n is not a multiple of 103.\n\
    The function should return an error if n is not a multiple of 109.\nThe function\
    \ should return an error if n is not a multiple of 115.\nThe function should return\
    \ an error if n is not a multiple of 121.\nThe function should return an error\
    \ if n is not a multiple of 127.\nThe function ", "    if n <= m \n        rounded_avg\
    \ = round(n / m) * m\n        return String(rounded_avg)\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(", "    if m == 0\n        return -1\n    if n == m\n        return\
    \ m\n    if n > m\n        return -1\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if n>m \n        rounded_avg = -1\n   \
    \ else \n        rounded_avg = round(n/m)*m \n    return rounded_avg\n</code>\n\
    <|/ a tags=julia,binary,decimal |>\n<| a tags=julia,binary,decimal |>\nI wanted\
    \ to add this as a comment to Martin's answer, but I don't have enough reputation\
    \ points to do so. \nThe code below is based on Martin's answer, but uses Julia's\
    \ built-in function round() instead of Python's round() function. The round()\
    \ function rounds a number to the nearest integer, and round() returns a Float64.\
    \ \n<code>", "    if n >= m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Use a while loop to compute the factorial\
    \ until you reach the number 1. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    2432902008176640000\n\
    \    >>> factorial(30)\n    1577836867071312480000\n    >>> factorial(40)\n  \
    \  147483648000\n    >>> factorial(50)\n    14748364800\n    >>> factorial(60)\n\
    \    14748364800\n    >>> factorial(70)\n    14748364800\n    >>> factorial(80)\n\
    \    14748364800\n    >>> factorial(90)\n    14748364800\n    >>> factorial(100)\n\
    \    14748364800\n    >>> factorial(110)\n    14748364800\n    >>> factorial(120)\n\
    \    14748364800\n    >>> factorial(130)\n    14748364800\n    >>> factorial(140)\n\
    \    14748364800\n    >>> factorial(150)\n    14748364800\n    >>> factorial(160)\n\
    \    14748364800\n    >>> factorial(170)\n    14748364800\n    >>> factorial(180)\n\
    \    14748364800\n    >>> factorial(190)\n    14748364800\n    >>> factorial(200)\n\
    \    14748364800\n    >>> factorial(210)\n    14748364800\n    >>> factorial(220)\n\
    \    14748364800\n    >>> factorial(230)\n    14748364800\n    >>> factorial(240)\n\
    \    14748364800\n    >>> factorial(250)\n    14748364800\n    >>> factorial(260)\n\
    \    14748364800\n    >>> factorial(270)\n    14748364800\n", "    if n <= m \n\
    \        rounded_avg = round(n/m)*m \n    else \n        rounded_avg = -1\n  \
    \  return rounded_avg\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27814847)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ round the average to nearest integer, and I provided a solution to that question.\
    \ He also asked how to convert that integer to a binary string, and I provided\
    \ a solution to that question. He also asked how to round the average to nearest\
    \ integer, and I provided a solution to that question. He also asked how to convert\
    \ that integer to a binary string, and I provided a solution to that question.\
    \ He also asked how to round the average to nearest integer, and I provided a\
    \ solution to that question. He also asked how to convert that integer to a binary\
    \ string, and I provided a solution to that question.\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27814847)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ round the average to nearest integer, and I provided a solution to that question.\
    \ He also asked how to convert that integer to a binary string, and I provided\
    \ a solution to that question. He also asked how to round the average to nearest\
    \ integer, and I provided a solution to that question. He also asked how to convert\
    \ that integer to a binary string, and I provided a solution to that question.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27814847)\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "    if n <= m \n        return n\n    else \n        return -1\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n > m \n        rounded_avg = -1\n    else\n      \
    \  rounded_avg = ceil(Int, (n + m) / 2)\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 34)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 35)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 36)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 37)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 38)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 39)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 40)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 41)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 42)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 43)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 44)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 45)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 46)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 47)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 48)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 49)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 50)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 51)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 52)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 53)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 54)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 55)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 56",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m:\n      \
    \  sum += i\n    \n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given integer. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    2432902008176640000\n\
    \    >>> factorial(33)\n    140737488355328\n    \"\"\"", "    if n > m \n   \
    \     return -1\n    else \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(20)\n    5040\n    >>> factorial(33)\n    130767436800\n   \
    \ \"\"\"", "    if n <= m\n        return n\n    else\n        return -1\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code\
    \ language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n > m \n        return -1\n  \
    \  else \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if n > m \n        return -1\n\
    \    else \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a number is even.", "    if n > m \n        then return -1\n    else \n    \
    \    avg = ((n+m)/2)\n        binary = format((avg), '0>7')\n        return binary\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of digits in an integer.\n\
    \    For example, a number like 12345 has 5 digits. \n    Write a function that\
    \ takes an integer and returns its number of digits.\n    For example, a number\
    \ like 12345 has 5 digits. \n    Write a function that takes an integer and returns\
    \ its number of digits.\n    For example, a number like 12345 has 5 digits. \n\
    \    Write a function that takes an integer and returns its number of digits.\n\
    \    For example, a number like 12345 has 5 digits. \n    Write a function that\
    \ takes an integer and returns its number of digits.\n    For example, a number\
    \ like 12345 has 5 digits. \n    Write a function that takes an integer and returns\
    \ its number of digits.\n    For example, a number like 12345 has 5 digits. \n\
    \    Write a function that takes an integer and returns its number of digits.\n\
    \    For example, a number like 12345 has 5 digits. \n    Write a function that\
    \ takes an integer and returns its number of digits.\n    For example, a number\
    \ like 12345 has 5 digits. \n    Write a function that takes an integer and returns\
    \ its number of digits.\n    For example, a number like 12345 has 5 digits. \n\
    \    Write a function that takes an integer and returns its number of digits.\n\
    \    For example, a number like 12345 has 5 digits. \n    Write a function that\
    \ takes an integer and returns its number of digits.\n    For example, a number\
    \ like 12345 has 5 digits. \n    Write a function that takes an integer and returns\
    \ its number of digits.\n    For example, a number like 12345 has 5 digits. \n\
    \    Write a function that takes an integer and returns its number of digits.\n\
    \    For example, a number like 12345 has 5 digits. \n    Write a function that\
    \ takes an integer and returns its number of digits.\n    For example, a number\
    \ like 12345 has 5 digits. \n    Write a function that takes an integer and returns\
    \ its number of digits.\n    For example, a number like 12345 has 5 digits. \n\
    \    Write a function that takes an integer and returns its number of digits.\n\
    \    For example, a number like 12345 has 5 digits. \n    Write a function that\
    \ takes an integer and returns its number of digits.\n    For example, a number\
    \ like 12345 has 5 digits. \n    Write a function that takes an integer and returns\
    \ its number of digits.\n    For example, a number like 12345 has 5 digits. \n\
    \    Write a function that takes an integer and returns its number of digits.\n\
    \    For example, a number like ", "    if n <= m \n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the number of times\
    \ it appears in the Fibonacci sequence up to and including n.", "    if m > n\
    \ then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n  \
    \      rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(", "    if\
    \ n <= m \n        rounded_avg = round(n/m)\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33", "    if m > n \n        return -1\n    \n    sum = 0\n  \
    \  \n    for i in n:m\n        sum += i\n    \n    return sum / m\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.", "    if m > n \n        return -1\n    \n    sum = 0\n    for\
    \ i in n:m:\n        sum += i\n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of times a given value appears in a given array.", "    if n <= m\
    \ \n        rounded_avg = round(n/m)*m\n        rounded_avg = Int64(bin(rounded_avg)[2:])\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    For example,\
    \ factorial(5) = 5 * 4 * 3 * 2 * 1 = 120. \n    Round the answer to the nearest\
    \ integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n  \
    \  120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    >>> factorial(33)\n
  "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that computes the average of all the\
    \ numbers between 1 and n (inclusive).", "    if n < m \n        rounded_avg(n+1,\
    \ m) \n    else \n        rounded_avg(n, m-1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of times a given integer appears in a given\
    \ string.", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n  \
    \      rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.", "    if n > m\
    \ \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ a given value appears in a given vector.", "    if m > n then return -1\n  \
    \  else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of digits in an integer.", "    if n <= m \n        return n\n  \
    \  else \n        return -1\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime\
    \ numbers. \nThe function should take in a positive integer n and return the prime\
    \ numbers from 2 to n.\nIf n is less than or equal to 0, return an empty array.\n\
    If n is greater than or equal to 1, return an empty array.\nThe function should\
    \ return an array of integers representing the prime numbers from 2 to n.\nThe\
    \ function should return an empty array if n is less than or equal to 0.\nThe\
    \ function should return an empty array if n is greater than or equal to 1.\n\
    The function should return an empty array if n is less than 2.\nThe function should\
    \ return an empty array if n is greater than 2.\nThe function should return an\
    \ empty array if n is less than or equal to 2.\nThe function should return an\
    \ empty array if n is greater than or equal to 2.\nThe function should return\
    \ an empty array if n is less than 3.\nThe function should return an empty array\
    \ if n is greater than or equal to 3.\nThe function should return an empty array\
    \ if n is less than 4.\nThe function should return an empty array if n is greater\
    \ than or equal to 4.\nThe function should return an empty array if n is less\
    \ than 5.\nThe function should return an empty array if n is greater than or equal\
    \ to 5.\nThe function should return an empty array if n is less than 6.\nThe function\
    \ should return an empty array if n is greater than or equal to 6.\nThe function\
    \ should return an empty array if n is less than 7.\nThe function should return\
    \ an empty array if n is greater than or equal to 7.\nThe function should return\
    \ an empty array if n is less than 8.\nThe function should return an empty array\
    \ if n is greater than or equal to 8.\nThe function should return an empty array\
    \ if n is less than 9.\nThe function should return an empty array if n is greater\
    \ than or equal to 9.\nThe function should return an empty array if n is less\
    \ than 10.\nThe function should return an empty array if n is greater than or\
    \ equal to 10.\nThe function should return an empty array if n is less than 11.\n\
    The function should return an empty array if n is greater than or equal to 11.\n\
    The function should return an empty array if n is less than 12.\nThe function\
    \ should return an empty array if n is greater than or equal to 12.\nThe function\
    \ should return an empty array if n is less than 13.\nThe function should return\
    \ an empty array if n is greater than or equal to 13.\nThe function should return\
    \ an empty array if n is less than 14.\nThe function should return an empty array\
    \ if n is greater than or equal to 14.\nThe function should return an empty array\
    \ if n is less than 15.\nThe ", "    if n > m \n        rounded_avg = -1\n   \
    \ else\n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer n is the product of all positive integers less than\
    \ or equal to n.\nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.88644100761464e+43\n\
    >>> factorial(40)\n1.8446744073709552e+19\n>>> factorial(50)\n5.20132743362832e+21\n\
    >>> factorial(60)\n1.7976931348623157e+30\n>>> factorial(70)\n5.54975581388867e+35\n\
    >>> factorial(80)\n1.2621456739413093e+42\n>>> factorial(90)\n6.20921766283936e+49\n\
    >>> factorial(100)\n1.7976931348623157e+50\n>>> factorial(110)\n5.96046447753906e+68\n\
    >>> factorial(120)\n2.1474836472236e+77\n>>> factorial(130)\n1.073741824e+94\n\
    >>> factorial(140)\n5.96046447753906e+68\n>>> factorial(150)\n1.073741824e+94\n\
    >>> factorial(160)\n4.503599627370496e+91\n>>> factorial(170)\n2.64575131106459e+99\n\
    >>> factorial(180)\n1.189731495e+101\n>>> factorial(190)\n6.09494701772928e+114\n\
    >>> factorial(200)\n1.7976931348623157e+50\n>>> factorial(210)\n5.96046447753906e+68\n\
    >>> factorial(220)\n1.189731495e+101\n>>> factorial(230)\n6.0949470", "    if\
    \ n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=juli", "    if n <= m \n        return n\n    else \n\
    \        return -1\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given integer appears in a given string.", "    if m > n then return -1\n\
    \    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nIf n is negative,\
    \ return -1.\nIf n is 0, return 1.\nIf n is positive, return n * factorial(n-1).\n\
    Example: \n>>> factorial(5)\n120\n>>> factorial(-1)\n-1\n>>> factorial(0)\n1\n\
    >>> factorial(1)\n1\n>>> factorial(2)\n2\n>>> factorial(3)\n6\n>>> factorial(4)\n\
    24\n>>> factorial(5)\n120\n>>> factorial(6)\n720\n>>> factorial(7)\n5040\n>>>\
    \ factorial(8)\n40320\n>>> factorial(9)\n362880\n>>> factorial(10)\n3628800\n\
    >>> factorial(11)\n39916800\n>>> factorial(12)\n479001600\n>>> factorial(13)\n\
    6227020800\n>>> factorial(14)\n87178291200\n>>> factorial(15)\n1307674368000\n\
    >>> factorial(16)\n20922789888000\n>>> factorial(17)\n355687428096000\n>>> factorial(18)\n\
    6402373705728000\n>>> factorial(19)\n121645100408832000\n>>> factorial(20)\n2432902008176640000\n\
    >>> factorial(21)\n51090942171709440000\n>>> factorial(22)\n1124000727777607680000\n\
    >>> factorial(23)\n25852016738884976640000\n>>> factorial(24)\n620448401733239439360000\n\
    >>> factorial(25)\n15511210043330985984000000\n>>> factorial(26)\n403291461126605635584000000\n\
    >>> factorial(27)\n10888869450418352160768000000\n>>> factorial(28)\n304888344611713860501504000000\n\
    >>> factorial(29)\n8841761993739701954543616000000\n>>> factorial(30)\n265252859812191058636308480000000\n\
    >>> factorial(31)\n", "    if n <= m \n        return -1\n    else \n        return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of digits\
    \ in n. \nExample: \n>>> count_digits(12345)\n4", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of characters in a string.", "    if\
    \ n <= m \n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m and returns the number of digits in n and m.", "    if\
    \ n >= m \n        rounded_avg = -1\n    else \n        rounded_avg = ((m*(n+1)+(n-1))/(n+m))\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>", "    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\
    \ - Int64(m) \n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)",
  "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers and returns their sum.", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = ceil(Int, (n+m)/2)\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Factorials are defined as $n! = n * (n-1) * ... * 1$. \n\
    \    For example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \n    Round the answer to the\
    \ nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    >>> factorial(33)\n    117964847259803486773948864\n    \"\"\"", "    if\
    \ n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nThe first n prime numbers\
    \ are 2, 3, 5, 7, 11, ...\nThe function should return an Array{Int64, 1} where\
    \ each element is the number \nof prime numbers less than or equal to n.\nExample:\n\
    >>> primes(10)\n[2, 3, 5, 7, 11, 13, 17, 19, 23]\n>>> primes(100)\n[2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n>>> primes(1000)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 9",
  "    if n > m \n        rounded_avg = -1\n    else \n        rounded_avg = round(n/m)*m\n\
    \    rounded_avg = Int64(bin(rounded_avg)[2:])\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns their sum.", " \
    \   if n <= m \n        return n\n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \n    Factorials are defined as the product\
    \ of all the integers up to and including a given number.\n    Example:\n    >>>\
    \ factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    \"\"\"", "    if n == m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n  \
    \  return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.", "    if n <= m \n        rounded_avg = Int64((n+m)/2)\n   \
    \     rounded_bin = Int64((n+m)/2) % 2\n        return String(rounded_bin, rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two positive integers n and m and returns the number of integers from n through\
    \ m (including n and m).", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m, and returns the sum of the\
    \ integers from n through m. \nRound the answer to the nearest integer and convert\
    \ that to binary.\nIf n is greater than m, return -1.\nExample: \n>>> sum_of_nums(1,\
    \ 5)\n\"0b11\"\n>>> sum_of_nums(7, 5)\n-1\n>>> sum_of_nums(10, 20)\n\"0b1111\"\
    \n>>> sum_of_nums(20, 33)\n\"0b11010\"\n\"\"\"", "    if n > m \n        return\
    \ -1\n    else \n        return round(Int64(n)/Int64(m))*Int64(m) + Int64(n) -\
    \ Int64(m) \nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise: Write a function that returns the first n prime numbers. \n\
    \    You may want to use the sieve of Eratosthenes algorithm to speed up the computation.\
    \ \n    You may want to use the following functions:", "    if n > m \n      \
    \  rounded_avg = -1\n    else \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        rounded_avg = Int64(bin(rounded_avg)[2:])\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nThe first n prime numbers\
    \ are 2, 3, 5, 7, 11, and 13, \nso the first 10 prime numbers are 2, 3, 5, 7,\
    \ 11, 13, 17, \nand 19, respectively.\nThe function should return an array. \n\
    The function should return an empty array if n is less than 2.\nThe function should\
    \ return an array of integers if n is greater than 10.\nThe function should return\
    \ an array of integers if n is greater than 10.\nThe function should return an\
    \ array of integers if n is greater than 10.\nThe function should return an array\
    \ of integers if n is greater than 10.\nThe function should return an array of\
    \ integers if n is greater than 10.\nThe function should return an array of integers\
    \ if n is greater than 10.\nThe function should return an array of integers if\
    \ n is greater than 10.\nThe function should return an array of integers if n\
    \ is greater than 10.\nThe function should return an array of integers if n is\
    \ greater than 10.\nThe function should return an array of integers if n is greater\
    \ than 10.\nThe function should return an array of integers if n is greater than\
    \ 10.\nThe function should return an array of integers if n is greater than 10.\n\
    The function should return an array of integers if n is greater than 10.\nThe\
    \ function should return an array of integers if n is greater than 10.\nThe function\
    \ should return an array of integers if n is greater than 10.\nThe function should\
    \ return an array of integers if n is greater than 10.\nThe function should return\
    \ an array of integers if n is greater than 10.\nThe function should return an\
    \ array of integers if n is greater than 10.\nThe function should return an array\
    \ of integers if n is greater than 10.\nThe function should return an array of\
    \ integers if n is greater than 10.\nThe function should return an array of integers\
    \ if n is greater than 10.\nThe function should return an array of integers if\
    \ n is greater than 10.\nThe function should return an array of integers if n\
    \ is greater than 10.\nThe function should return an array of integers if n is\
    \ greater than 10.\nThe function should return an array of integers if n is greater\
    \ than 10.\nThe function should return an array of integers if n is greater than\
    \ 10.\nThe function should return an array of integers if n is greater than 10.",
  "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if m == 0 \n        rounded_avg = -1\n    elseif n ==\
    \ m \n        rounded_avg = 0\n    elseif n < m \n        rounded_avg = -1\n \
    \   else\n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given element appears in a given vector.", "    if m > n \n        -1\n  \
    \  else\n        round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    130767436800\n\
    \    >>> factorial(33)\n    130767436800\n    \"\"\"", "    if n > m \n      \
    \  rounded_avg = -1\n    else \n        rounded_avg = round(n/m)*m\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:", "    if m > n\
    \ then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in a given\
    \ array.", "    if m == 0 \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = ((n+m)/2::Int64).round()\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns true if n is divisible\
    \ by m and false otherwise.", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. \nExample: \n\
    >>> digits(1234)\n4\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n5\n>>> digits(12345)\n\
    5\n>>> digits(", "    if m > n \n        return -1\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n    \
    \    rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(", "    if m > n \n        return\
    \ -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if n <= m \n        rounded_avg =\
    \ round(Int64(n)/Int64(m))\n        rounded_avg = Int64(rounded_avg)\n       \
    \ rounded_avg = bin(rounded_avg)[2:]\n        rounded_avg = rounded_avg.zfill(Int64(m)-Int64(n))\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns their sum.", "    if n > m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.1>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in the binary representation\
    \ of an integer.", "    if m > n \n        return -1\n    \n    sum = 0\n    for\
    \ i in n:m:\n        sum += i\n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    \"0b120\"\n    >>> factorial(10)\n    \"0b3628800\"\n    >>> factorial(20)\n\
    \    \"0b2432902008176640000\"\n    \"\"\"", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in a given\
    \ array.", "    if m > n \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = ((n+m)/2)\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of times a given value appears in a given array.", "    if n > m\
    \ \n        rounded_avg = -1\n    else \n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n)\n    return rounded_avg.to_string()\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nThe function should take in a positive integer\
    \ n and return the prime numbers from 2 to n.\nThe function should return -1 if\
    \ n is less than 2.\nExample: \n>>> primes(10)\n[2, 3, 5, 7, 11, 13, 17, 19, 23]\n\
    >>> primes(5)\n[2, 3, 5]\n>>> primes(0)\n-1\n\"\"\"", "    if n >= m \n      \
    \  rounded_avg = -1\n    else\n        rounded_avg = round(n/m)*m\n    end\n \
    \   return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers and returns\
    \ the sum of the integers from 1 to n.", "    if n <= m\n        return -1\n \
    \   \n    avg = round(n/m)\n    binary = formatInt(avg, \"b\")\n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if n > m \n        return -1\n    \n    sum = 0\n    for i in n:m:\n      \
    \  sum += i\n    \n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string. \n    For example, \n    count_chars(\"\
    Hello World\") should return 5.\n    \n    Use a for loop to solve this problem.\
    \ \n    \n    Use a while loop to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a tail recursive function to\
    \ solve this problem.\n    \n    Use a tail recursive function to solve this problem.\n\
    \    \n    Use a tail recursive function to solve this problem.\n    \n    Use\
    \ a tail recursive function to solve this problem.\n    \n    Use a tail recursive\
    \ function to solve this problem.\n    \n    Use a tail recursive function to\
    \ solve this problem.\n    \n    Use a tail recursive function to solve this problem.\n\
    \    \n    Use a tail recursive function to solve this problem.\n    \n    Use\
    \ a tail recursive function to solve this problem.\n    \n    Use a tail recursive\
    \ function to solve this problem.\n    \n    Use a tail recursive function to\
    \ solve this problem.\n    \n    Use a tail recursive function to solve this problem.\n\
    \    \n    Use a tail recursive function to solve this problem.\n    \n    Use\
    \ a tail recursive function to solve this problem.\n    \n    Use a tail recursive\
    \ function to solve this problem.\n    \n    Use a tail recursive function to\
    \ solve this problem.\n    \n    Use a tail recursive function to solve this problem.\n\
    \    \n    Use a tail recursive function to solve this problem.\n    \n    Use\
    \ a tail recursive function to solve this problem.\n    \n    Use a tail recursive\
    \ function to solve this problem.\n    \n    Use a tail recursive function to\
    \ solve this problem.\n    \n    Use a tail recursive function to solve this problem.\n\
    \    \n    Use a tail recursive function to solve this problem.\n    \n    Use\
    \ a tail recursive function to solve this problem.\n    \n    Use a tail recursive\
    \ function to solve this problem.\n    \n    Use a tail recursive function to\
    \ solve this problem.\n    \n    Use a tail recursive function to solve this problem.\n\
    \    \n    Use a tail recursive function to solve this problem.\n    \n    Use\
    \ a tail recursive function to solve this problem.\n    \n    Use a tail recursive\
    \ function to solve this problem.\n    \n    Use a ", "    if n < m \n       \
    \ rounded_avg = -1\n    else\n        rounded_avg = (n + (m-1))/2\n    end\n \
    \   return rounded_avg\nend\n</cell>\n<code language=julia-1.1>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.1>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.1>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n > m \n        rounded_avg = -1\n    else\n      \
    \  rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two integers n and m and returns the number of digits\n\
    of the number n up to and including m.\nExample: \n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n", "    if\
    \ m > n then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ == m \n        then return \"0b0\"\n    else if n < m \n        then return\
    \ \"0b\" + bin(n:bits() - m:bits())\n    else \n        then return \"0b\" + bin(m:bits()\
    \ - n:bits())\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of bits\
    \ needed to represent an integer.", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        return string(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if n <= m\n        return n\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if m > n\
    \ \n        return -1\n    \n    binary = \"\"\n    for i in n:n:\n        binary\
    \ += str((i >> 1) & 1)\n    \n    for i in m:\n        binary += str((i >> 1)\
    \ & 1)\n    \n    return binary\n</code>\n<|/ a tags=python,bit-manipulation,bitwise-operators\
    \ |>\n<| c |>\nThis doesn't work if n is greater than m.\n<|/ c |>\n<| c |>\n\
    It works, I tested it before posting it. I tested it on python 3.8.5\n<|/ c |>\n\
    <| c |>\nI tested it on python 3.8.5 and it works. I edited my answer to include\
    \ a test case where it fails.\n<|/ c |>\n<| c |>\nI tested it on python 3.8.5\
    \ and it works. I edited my answer to include a test case where it fails.\n<|/\
    \ c |>\n<| c |>\nI tested it on python 3.8.5 and it works. I edited my answer\
    \ to include a test case where it fails.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    def avg(n,m):\n    if m>n:\n        return -1\n    \n    binary = \"\"\n    \n\
    \    for i in range(n):\n        binary += str(int(i>>1)&1)\n    \n    for i in\
    \ range(m):\n        binary += str(int(i>>1)&1)\n    \n    return binary\n</code>\n\
    <|/ a tags=python,bit-manipulation,bitwise-operators |>\n<| c |>\nThis doesn't\
    \ work if n is greater than m.\n<|/ c |>\n<| c |>\nI tested it on python 3.8.5\
    \ and it works. I edited my answer to include a test case where it fails.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\ndef avg(n,m):\n    if m>n:\n        return -1\n\
    \    \n    binary = \"\"\n    \n    for i in range(n):\n        binary += str(int(i>>1)&1)\n\
    \    \n    for i in range(m):\n        binary += str(int(i>>1)&1)\n    \n    return\
    \ binary\n</code>\n<|/ a tags=python,bit-manipulation,bitwise-operators |>\n<|\
    \ c |>\nThis doesn't work if n is greater than m.\n<|/ c |>\n<| c |>\nI tested\
    \ it on python 3.8.5 and it works. I edited my answer to include a test case where\
    \ it fails.\n<|/ c |>\n", "    if m > n \n        return -1\n    else \n     \
    \   return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7,5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a non-negative integer n\
    \ is defined as the product of \nthe positive integers 1 through n. \nFor example,\
    \ the factorial of 5 is 5*4*3*2*1 = 120. \nWrite a function that computes the\
    \ factorial of a given number. \nThe factorial of a non-negative integer n is\
    \ defined as the product of \nthe positive integers 1 through n. \nFor example,\
    \ the factorial of 5 is 5*4*3*2*1 = 120. \nIf n is negative, return -1.\nExample:\
    \ \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(-1)\n-1\n\
    >>> factorial(-5)\n-1\n\"\"\"", "    if m > n \n        rounded_avg = -1\n   \
    \ else\n        rounded_avg = ceil(Int, (n + m) / 2)\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(n/m)*m\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        return String(rounded_avg)\n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.1>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.1>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in a given\
    \ array.", "    if n <= m \n        return n\n    else \n        return -1\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the factorial of a given number. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    130767436800\n    \"\"\"", "    if m > n \n        return -1\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        rounded_avg = Int64(rounded_avg)\n        rounded_avg = bin(rounded_avg)[2:]\n\
    \        rounded_avg = rounded_avg.zfill(Int64(ceil(Int64(m)/Int64(n))))\n   \
    \     rounded_avg = Int64(rounded_avg)\n        rounded_avg = rounded_avg.to_s(2)\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.", "    if n > m\
    \ \n        rounded_avg = -1\n    else\n        rounded_avg = ceil(Int, (n + m)\
    \ / 2)\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n <= m \n        rounded_avg =\
    \ round(n/m)\n        rounded_avg = bin(rounded_avg)[2:]\n        rounded_avg\
    \ = rounded_avg[:len(rounded_avg)-1]\n        rounded_avg = Int64(rounded_avg)\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of characters in a string. \nExample: \n\
    >>> count_chars(\"Hello World\")\n5\n>>> count_chars(\"Hello World!\")\n4\n>>>\
    \ count_chars(\"Hello World!!\")\n5\n>>> count_chars(\"Hello World!!!\")\n6\n\
    >>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\")\n\
    6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!!\")\n6\n>>> count_chars(\"Hello World!!!\"\
    )\n6\n>>> count_chars(\"Hello World!!", "    if n <= m\n        rounded_avg =\
    \ round(n/m)\n        rounded_avg = string(rounded_avg)\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns the number of integers from n through m\
    \ (including n and m).", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        return string(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in two integers n and m and returns true if n\
    \ is divisible by m. \nIf n is divisible by m, return true; otherwise, return\
    \ false.\nExample: \n>>> is_divisible(7, 5)\nTrue\n>>> is_divisible(10, 5)\nFalse\n\
    >>> is_divisible(15, 5)\nFalse\n>>> is_divisible(20, 5)\nTrue\n>>> is_divisible(25,\
    \ 5)\nFalse\n>>> is_divisible(30, 5)\nFalse\n>>> is_divisible(35, 5)\nTrue\n>>>\
    \ is_divisible(40, 5)\nFalse\n>>> is_divisible(45, 5)\nTrue\n>>> is_divisible(50,\
    \ 5)\nFalse\n>>> is_divisible(55, 5)\nTrue\n>>> is_divisible(60, 5)\nFalse\n>>>\
    \ is_divisible(65, 5)\nTrue\n>>> is_divisible(70, 5)\nFalse\n>>> is_divisible(75,\
    \ 5)\nTrue\n>>> is_divisible(80, 5)\nFalse\n>>> is_divisible(85, 5)\nTrue\n>>>\
    \ is_divisible(90, 5)\nFalse\n>>> is_divisible(95, 5)\nTrue\n>>> is_divisible(100,\
    \ 5)\nFalse\n>>> is_divisible(105, 5)\nTrue\n>>> is_divisible(110, 5)\nFalse\n\
    >>> is_divisible(115, 5)\nTrue\n>>> is_divisible(120, 5)\nFalse\n>>> is_divisible(125,\
    \ 5)\nTrue\n>>> is_divisible(130, 5)\nFalse\n>>> is_divisible(135, 5)\nTrue\n\
    >>> is_divisible(140, 5)\nFalse\n>>> is_divisible(145, 5)\nTrue\n>>> is_divisible(150,\
    \ 5)\nFalse\n>>> is_divisible(155, 5)\nTrue\n>>> is_divisible(160, 5)\nFalse\n\
    >>> is_divisible(165, 5)\nTrue\n>>> is_divisible(170, 5)\nFalse\n>>> is_divisible(175,\
    \ 5)\nTrue\n>>> is_divisible(180, 5)\nFalse\n>>> is_divisible(185, 5)\nTrue\n\
    >>> is_divisible(190, 5)\nFalse\n>>> is_divisible(195, 5)\nTrue\n>>> is_divisible(200,\
    \ 5)\nFalse\n>>> is_divisible(205, 5)\nTrue\n>>> is_divisible(210, 5)\nFalse\n\
    >>> is_divisible(215, 5)\nTrue\n>>> is_divisible(220, 5)", "    if n <= m \n \
    \       rounded_avg = round(Int64(n)/Int64(m))\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \n    Factorials are defined as $n! = n * (n-1)\
    \ * ... * 1$. \n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        rounded_avg = rounded_avg % m\n        return rounded_avg\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if m > n \n        return -1\n\
    \    \n    sum = 0\n    for i in n:m\n        sum += i\n    \n    return sum /\
    \ m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that takes in two integers n and m,\
    \ and returns their sum and average.", "    if n > m \n        return -1\n   \
    \ else \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the first n integers of a given list. \n    For example,\
    \ first_n_ints([1, 2, 3, 4, 5], 2) should return [1, 2]. \n    Use a while loop\
    \ to solve this problem.", "    if n <= m \n        rounded_avg = round(n/m)\n\
    \        return string(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in a given\
    \ array.", "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    \    Factorials are defined as $n! = n * (n - 1)!$. \n    Example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    \"\"\"", "    if n > m \n  \
    \      rounded_avg = -1\n    else\n        rounded_avg = round(n/m)*m\n    end\n\
    \    return rounded_avg\nend", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of digits in an integer.",
  "    if n > m \n        then return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a non-negative integer n, denoted by n!, is the product of\
    \ all positive integers less than or equal to n. \nFor example, 5! = 5 x 4 x 3\
    \ x 2 x 1 = 120. \nWrite a recursive function factorial(n) that computes the factorial\
    \ of n. \nThe function should return -1 if n is less than or equal to 0.\nExamples:\n\
    factorial(5) == 120\nfactorial(4) == 24\nfactorial(3) == 6\nfactorial(0) == -1\n\
    factorial(-1) == -1\nfactorial(10) == 3628800\nHint: use factorial(n) = if n <\
    \ 0 then -1 else n * factorial(n-1)\nExercise 3\nWrite a function that computes\
    \ the sum of all numbers in a given array. \nThe sum of an array is the sum of\
    \ the numbers in the array. \nFor example, sum([1, 2, 3]) == 6\nWrite a recursive\
    \ function sum(a) that computes the sum of all numbers in a given array. \nThe\
    \ function should return -1 if any element of the array is less than 0.\nExamples:\n\
    sum([1, 2, 3]) == 6\nsum([-1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1,\
    \ -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2,\
    \ -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3])\
    \ == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\n\
    sum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1,\
    \ -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2,\
    \ -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3])\
    \ == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\n\
    sum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1,\
    \ -2, -3]) == -1\nsum([1, -2, -3]) == -1\nsum([1, -2, -3]) == -1", "    if n <=\
    \ m \n        rounded_avg = round(Int64(n)/Int64(m))\n        rounded_avg = Int64(rounded_avg)\n\
    \        rounded_avg = bin(rounded_avg)[2:]\n        rounded_avg = string(rounded_avg)\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns true if n is divisible\
    \ by m.", "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of times a given value appears in a given array.", "    if m > n\
    \ then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n>m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in two integers n and m and returns\
    \ their sum, rounded to\nthe nearest integer. Round the answer to the nearest\
    \ integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\
    \ \n>>> sum_of_two(5, 10)\n15\n>>> sum_of_two(7, 5)\n-1\n>>> sum_of_two(10, 20)\n\
    25\n>>> sum_of_two(20, 33)\n-1\n</text>\n<code language=julia-1.5>", "    if n\
    \ <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.", "    if n <= m \n        rounded_avg = round(n/m)*m\n     \
    \   rounded_avg = round(rounded_avg)\n        rounded_avg = bin(rounded_avg)[2:]\n\
    \        rounded_avg = rounded_avg.zfill(64)\n        return rounded_avg\n   \
    \ else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns their sum.\nExample: \n>>> sum_of_nums(1,\
    \ 5)\n5\n>>> sum_of_nums(7, 5)\n15\n>>> sum_of_nums(10, 20)\n25\n>>> sum_of_nums(20,\
    \ 33)\n33", "    if m > n \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = ceil(n / m) * m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if n <= m\
    \ \n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n   \
    \ else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if n > m\
    \ \n        rounded_avg = -1\n    else \n        rounded_avg = round(n/m)*m\n\
    \    return rounded_avg\n</code>\n<|/ a tags=julia,rounding |>\n<| a tags=julia,rounding\
    \ |>\n<code>", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nroun", "    if n == m \n        rounded_avg\
    \ = -1\n    else \n        rounded_avg = round(n / m) * m\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nExamples:\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(-1)\n-1\n>>> factorial(0)\n1\n>>> factorial(1)\n1\n>>> factorial(2)\n\
    2\n>>> factorial(3)\n6\n>>> factorial(4)\n24\n>>> factorial(5)\n120\n>>> factorial(6)\n\
    720\n>>> factorial(7)\n5040\n>>> factorial(8)\n40320\n>>> factorial(9)\n362880\n\
    >>> factorial(10)\n3628800\n>>> factorial(11)\n39916800\n>>> factorial(12)\n479001600\n\
    >>> factorial(13)\n6227020800\n>>> factorial(14)\n87178291200\n>>> factorial(15)\n\
    1307674368000\n>>> factorial(16)\n20922789888000\n>>> factorial(17)\n355687428096000\n\
    >>> factorial(18)\n6402373705728000\n>>> factorial(19)\n121645100408832000\n>>>\
    \ factorial(20)\n2432902008176640000\n>>> factorial(21)\n51090942171709440000\n\
    >>> factorial(22)\n1124000727777607680000\n>>> factorial(23)\n25852016738884976640000\n\
    >>> factorial(24)\n620448401733239439360000\n>>> factorial(25)\n15511210043330985984000000\n\
    >>> factorial(26)\n403291461126605635584000000\n>>> factorial(27)\n10888869450418352160768000000\n\
    >>> factorial(28)\n304888344611713860501504000000\n>>> factorial(29)\n8841761993739701954543616000000\n\
    >>> factorial(30)\n26525285981219105863630848", "    if m > n \n        return\
    \ -1\n    \n    binary = \"\"\n    \n    for i in n:m:\n        binary += str(i)\n\
    \    \n    binary = binary[::-1]\n    \n    return Int64(binary)\n</code>\n<|/\
    \ a tags=python,python-3.x |>\n<| a dscore=0 |>\n<code>\ndef avg(start, end):\n\
    \    sum = 0\n    count = 0\n    for i in range(start, end):\n        sum += i\n\
    \        count += 1\n    return sum / count", "    if n > m \n        return -1\n\
    \    \n    sum = 0\n    for i in n:m:\n        sum += i\n    \n    return sum\
    \ // m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n\
    \    >>> factorial(20)\n    15511210043330985984000000\n    >>> factorial(33)\n\

  "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the first n prime numbers.\
    \ \n    You may use any function you like, but make sure you return an Int64 \n\
    \    and not a String. \n    You may assume that n \u2264 10^5.", "    if m >\
    \ n \n        return -1\n    \n    sum = 0\n    for i in n:m\n        sum += i\n\
    \    \n    return sum//m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a\
    \ function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    130767436800\n\
    \    >>> factorial(30)\n    265252859812191058636308480000000\n    \"\"\"", " \
    \   if n < m \n        rounded_avg = -1\n    else\n        rounded_avg = (n+m)/2\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33", "    if n <= m \n        rounded_avg = round(n/m)\n     \
    \   return bin(rounded_avg)[2:]\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns their sum.", " \
    \   if m > n \n        -1\n    else if n == m \n        0\n    else \n       \
    \ ((n+m)/2)\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a non-negative integer n, denoted by n!, is the product of\
    \ all integers less than or equal to n. \nFor example, 5! = 5 x 4 x 3 x 2 x 1\
    \ = 120. \nWrite a recursive function that computes the factorial of a given number.\n\
    The function should take one argument, the number to compute the factorial of.\
    \ \nThe function should return the factorial of the given number as a string.\n\
    The function should raise an error if the given number is not positive.\nThe function\
    \ should raise an error if the given number is not an integer.\nThe function should\
    \ raise an error if the given number is negative.\nThe function should raise an\
    \ error if the given number is 0.\nThe function should raise an error if the given\
    \ number is negative.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.\nThe function should raise an error if the given number\
    \ is greater than or equal to 0.\nThe function should raise an error if the given\
    \ number is less than 0.", "    if n > m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = ceil(Int, n/m) * m\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if m > n \n        return -1\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if n>m \n        rounded_avg = -1\n   \
    \ else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if m\
    \ > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n        sum +=\
    \ i\n    \n    return sum // 2\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers and returns\
    \ the sum of the squares of the first n positive integers less than or equal to\
    \ n.", "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise\nWrite a function that computes the factorial of a given\
    \ number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>>\
    \ factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.615941559566398E+19\n\
    >>> factorial(100)\n5.007199254740991E+20\n>>> factorial(1000)\n1.7976931348623157e+308",
  "    if n == m \n        then return \"0b0\"\n    else if n < m \n        then return\
    \ \"0b\" + bin(n).lstrip(\"0b\")\n    else \n        rounded_avg(m, n-1)\nend\n\
    </code>\n<|/ a tags=julia,binary,string |>\n<| a tags=julia,binary,string |>\n\
    I came up with this:\n<code>", "    if n > m \n        return -1\n    \n    sum\
    \ = 0\n    for i in n:m:\n        sum += i\n    \n    return sum.to_binary(digits=len(sum))\n\
    end", "    if n <= m\n        return n\n    else\n        return -1\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ <= m \n        rounded_avg = round(n/m)*m \n        rounded_avg = Int64(bin(rounded_avg)[2:])\n\
    \        return rounded_avg \n    else \n        return -1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    2432902008176640000\n    >>> factorial(33)\n    140737488355328000000\n \
    \   \"\"\"", "    if n < m \n        rounded_avg(n, m-1) + 1 \n    else \n   \
    \     rounded_avg(m-1, n-1) + 1 \nend\n</cell>\n<code language=julia-1.1>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of digits in the binary representation of n.", "  \
    \  if n>m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))*Int64(m)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in two integers n and m and returns the\
    \ number of digits in n and m.", "    if m > n \n        return -1\n    \n   \
    \ sum = 0\n    for i in n:m\n        sum += i\n    return sum.to_binary(round_to=len(sum))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise\nWrite a function that computes the average of a list of numbers. \n\
    The function should take a list of numbers as an argument and return the average\
    \ of the numbers. \nThe function should return -1 if the list is empty.\nExample:\n\
    >>> average([1,2,3,4,5])\n2.5\n>>> average([])\n-1\n>>> average([1,2,3])\n-1\n\
    >>> average([1,2,3])\n-1\n>>> average([1,2])\n-1\n>>> average([1,2])\n-1\n>>>\
    \ average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n5.5\n>>> average([1,2,3,4,5,6,7,8,9,10])\n\
    5.5\n>>> average([1,2,3,4,", "    if n <= m \n        rounded_avg = Int64(round(Int64(n)/Int64(m)))\n\
    \        rounded_bin = Int64(bin(rounded_avg)[2:])\n        return rounded_bin\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.", "    if m\
    \ > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\n", "    if m > n \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = ceil(m/n) * n\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n) \nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given array.", "    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ > m \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if n\
    \ <= m \n        rounded_avg = round(n/m)\n        return String(bin(rounded_avg))\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    >>> factorial(30)\n    15778366920938463463374607431768211455\n    \"\"\"",
  "    if n <= m\n        return -1\n    \n    sum = 0\n    \n    for i in n:m\n \
    \       sum += i\n    \n    return sum / 2\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n\
    <text>\nExercise: Write a function that takes in two integers and returns their\
    \ sum.", "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = ((n+m)/2)\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nThe first n prime numbers are 2, 3, 5, 7, 11, and\
    \ 13.\nThe function should return an Array{Int64,1}.\nExample: \n>>> primes(10)\n\
    [2, 3, 5, 7, 11, 13]\n>>> primes(100)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n>>> primes(1000)\n\
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 94", "    if n <= m \n   \
    \     rounded_avg = round(n/m)*m \n        rounded_avg = Int64(rounded_avg)\n\
    \        return rounded_avg \n    else \n        return -1 \nend\n</cell>\n<code\
    \ language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=juli", "    if n <= m \n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n    else \n\
    \        return -1\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if n <= m \n        rounded_avg = round(n/m)*m\n        return String(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    \"\"\"", "    if m > n \n        -1\n    else\n        round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n) - Int64(m) \n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if n <= m \n        rounded_avg = round(n/m)*m\n        return String(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string.", "    if m == 0\n        return -1\n\
    \    else if n == m\n        return n\n    else\n        return round(n / m) *\
    \ m\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=", "    if n > m \n        then return -1\n    else \n        avg\
    \ = ((n+1)::Int64)/2\n        binary = bin(avg)[2:]\n        binary = binary[2:]\n\
    \        binary = binary[1:end]\n        binary = binary[1:end]\n        return\
    \ binary\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a string. \n    For example, for the string \"hello\", the function should\
    \ return 5.", "    if m > n \n        return -1\n    \n    sum = 0\n    for i\
    \ in n:m\n        sum += i\n    \n    return sum//(m - n)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of characters in a string. \n    For\
    \ example, \n    count(\"hello\") should return 5.\n    count(\"hello \") should\
    \ return 5.\n    count(\"hello  \") should return 5.\n    count(\"hello  world\"\
    ) should return 6.\n    count(\"hello  world  \") should return 6.\n    count(\"\
    hello  world  hello\") should return 7.\n    count(\"hello  world  hello \") should\
    \ return 7.\n    count(\"hello  world  hello  \") should return 7.\n    count(\"\
    hello  world  hello  hello\") should return 8.\n    count(\"hello  world  hello\
    \  hello \") should return 8.\n    count(\"hello  world  hello  hello  \") should\
    \ return 8.\n    count(\"hello  world  hello  hello  hello\") should return 9.\n\
    \    count(\"hello  world  hello  hello  hello \") should return 9.\n    count(\"\
    hello  world  hello  hello  hello  \") should return 9.\n    count(\"hello  world\
    \  hello  hello  hello  hello\") should return 10.\n    count(\"hello  world \
    \ hello  hello  hello  hello \") should return 10.\n    count(\"hello  world \
    \ hello  hello  hello  hello  \") should return 10.\n    count(\"hello  world\
    \  hello  hello  hello  hello  hello\") should return 11.\n    count(\"hello \
    \ world  hello  hello  hello  hello  hello \") should return 11.\n    count(\"\
    hello  world  hello  hello  hello  hello  hello  \") should return 11.\n    count(\"\
    hello  world  hello  hello  hello  hello  hello  hello\") should return 12.\n\
    \    count(\"hello  world  hello  hello  hello  hello  hello  hello \") should\
    \ return 12.\n    count(\"hello  world  hello  hello  hello  hello  hello  hello\
    \  \") should return 12.\n    ", "    if m > n then return -1\n    else return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nExample: \n>>> digits(12345)\n5\n>>> digits(-12345)\n4\n>>>\
    \ digits(0)\n0\n>>> digits(1)\n1\n>>> digits(-0)\n0\n>>> digits(-1)\n1\n>>> digits(123456789)\n\
    9\n>>> digits(-123456789)\n8\n>>> digits(1234567890)\n9\n>>> digits(-1234567890)\n\
    8\n>>> digits(12345678901)\n9\n>>> digits(-12345678901)\n8\n>>> digits(1234567890123)\n\
    9\n>>> digits(-1234567890123)\n8\n>>> digits(12345678901234)\n9\n>>> digits(-12345678901234)\n\
    8\n>>> digits(12345678901234567)\n9\n>>> digits(-12345678901234567)\n8\n>>> digits(1234567890123456789)\n\
    9\n>>> digits(-1234567890123456789)\n8\n>>> digits(12345678901234567890)\n9\n\
    >>> digits(-12345678901234567890)\n8\n>>> digits(123456789012345678901)\n9\n>>>\
    \ digits(-123456789012345678901)\n8\n>>> digits(12345678901234567890123)\n9\n\
    >>> digits(-12345678901234567890123)\n8\n>>> digits(123456789012345678901234)\n\
    9\n>>> digits(-123456789012345678901234)\n8\n>>> digits(123456789012345678901234567)\n\
    9\n>>> digits(-123456789012345678901234567)\n8\n>>> digits(12345678901234567890123456789)\n\
    9\n>>> digits(-12345678901234567890123456789)\n8\n>>> digits(123456789012345678901234567890)\n\
    9\n>>> digits(-123456789012345678901234567890)\n8\n>>> digits(1234567890123456789012345678901)\n\
    9\n>>> digits(-1234567890123456789012345678901)\n8\n>>> digits(123456789012345678901234567890123)\n\
    9\n>>> digits(-123456789012345678901234567890123)\n8", "    if n <= m \n     \
    \   rounded_avg = round(n/m)*m\n        rounded_avg = round(rounded_avg)\n   \
    \     rounded_avg = string(rounded_avg)\n        return rounded_avg\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a string.", "    if n == m \n        then return \"0b0\"\n    else if n <\
    \ m \n        then return \"0b\" + bin(n:bits() - m:bits())\n    else return \"\
    0b\" + bin(m:bits() - n:bits())\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ bits in an Int64 number. \nExample: \n>>> bits(10)\n    64\n>>> bits(100)\n\
    \    64\n>>> bits(1000)\n    64\n>>> bits(10000)\n    64\n>>> bits(100000)\n \
    \   64\n>>> bits(1000000)\n    64\n>>> bits(10000000)\n    64\n>>> bits(100000000)\n\
    \    64\n>>> bits(1000000000)\n    64\n>>> bits(10000000000)\n    64\n>>> bits(100000000000)\n\
    \    64\n>>> bits(1000000000000)\n    64\n>>> bits(1000000000001)\n    64\n>>>\
    \ bits(1000000000002)\n    64\n>>> bits(1000000000003)\n    64\n>>> bits(1000000000004)\n\
    \    64\n>>> bits(1000000000005)\n    64\n>>> bits(1000000000006)\n    64\n>>>\
    \ bits(1000000000007)\n    64\n>>> bits(1000000000008)\n    64\n>>> bits(1000000000009)\n\
    \    64\n>>> bits(1000000000010)\n    64\n>>> bits(1000000000011)\n    64\n>>>\
    \ bits(1000000000012)\n    64\n>>> bits(1000000000013)\n    64\n>>> bits(1000000000014)\n\
    \    64\n>>> bits(1000000000015)\n    64\n>>> bits(1000000000016)\n    64\n>>>\
    \ bits(1000000000017)\n    64\n>>> bits(1000000000018)\n    64\n>>> bits(1000000000019)\n\
    \    64\n>>> bits(1000000000020)\n    64\n>>> bits(1000000000021)\n    64\n>>>\
    \ bits(1000000000022)\n    64\n>>> bits(1000000000023)\n    64\n>>> bits(1000000000024)\n\
    \    64\n>>> bits(1000000000025)\n    64\n>>> bits(1000000000026)\n    64\n>>>\
    \ bits(1000000000027)\n    64\n>>> bits(1000000000028)\n    64\n>>> bits(1000000000029)\n\
    \    64\n>>> bits(", "    if n < m \n        return -1\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number. \n    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
    \ than m, return -1.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    -1\n    \"\"\"", "    if m > n \n   \
    \     return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if m > n \n        rounded_avg\
    \ = -1\n    else \n        rounded_avg = round(Int64(n)/Int64(m))\n    end\n \
    \   return rounded_avg\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of digits in n. \n    For example, \n    digits(1234)\
    \ = 4.\n    digits(123) = 2.\n    digits(12) = 1.\n    digits(1) = 0.\n    digits(0)\
    \ = 1.\n    digits(-1234) = 4.\n    digits(-123) = 2.\n    digits(-12) = 1.\n\
    \    digits(-1) = 0.\n    digits(-0) = 1.\n    digits(-1234) = 4.\n    digits(-123)\
    \ = 2.\n    digits(-12) = 1.\n    digits(-1) = 0.\n    digits(-0) = 1.\n    digits(-1234)\
    \ = 4.\n    digits(-123) = 2.\n    digits(-12) = 1.\n    digits(-1) = 0.\n   \
    \ digits(-0) = 1.\n    digits(-1234) = 4.\n    digits(-123) = 2.\n    digits(-12)\
    \ = 1.\n    digits(-1) = 0.\n    digits(-0) = 1.\n    digits(-1234) = 4.\n   \
    \ digits(-123) = 2.\n    digits(-12) = 1.\n    digits(-1) = 0.\n    digits(-0)\
    \ = 1.\n    digits(-1234) = 4.\n    digits(-123) = 2.\n    digits(-12) = 1.\n\
    \    digits(-1) = 0.\n    digits(-0) = 1.\n    digits(-1234) = 4.\n    digits(-123)\
    \ = 2.\n    digits(-12) = 1.\n    digits(-1) = 0.\n    digits(-0) = 1.\n    digits(-1234)\
    \ = 4.\n    digits(-123) = 2.\n    digits(-12) = 1.\n    digits(-1) = 0.\n   \
    \ digits(-0) = 1.\n    digits(-1234) = 4.\n    digits(-123) = 2.\n    digits(-12)\
    \ = 1.\n    digits(-1) = 0.\n    digits(-0) = 1.\n    digits(-1234) = 4.\n   \
    \ digit", "    if m == 0 \n        rounded_avg = -1\n    elseif n == m \n    \
    \    rounded_avg = 0\n    elseif n < m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of characters in a string.", "    if\
    \ n < m \n        rounded_avg = -1\n    else\n        rounded_avg = ceil(m / n)\
    \ * n\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array. \nFor example, given\
    \ [1, 1, 2, 3, 4, 4], return 3.", "    if n <= m\n        return -1\n    else\n\
    \        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes in two integers n and m and returns the number of digits\
    \ in m that are not a multiple of 5", "    if n > m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = ceil(Int, (n + m) / 2)\n        rounded_avg\
    \ = bin(rounded_avg)[2:]\n    return rounded_avg\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\ndef rounded_avg(n,m):\n    avg = ((n+m)/2)\n    binary\
    \ = bin(avg)\n    binary = binary[2:]\n    binary = binary[0:len(binary)-1]\n\
    \    return binary\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26859089)\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26859089)\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do",
  "    if n > m \n        then return -1\n    else \n        avg = (n+m)/2\n     \
    \   binary = convert(avg, Int64)\n        return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary string to a decimal integer. \nThe function\
    \ should take in a binary string and return the decimal integer.\nThe input string\
    \ may contain leading zeros; for example, if the input string is \"0100\", the\
    \ function should return 8.\nThe input string may contain leading spaces or other\
    \ whitespace characters; for example, if the input string is \"   100\", the function\
    \ should return 8.\nThe input string may contain leading or trailing whitespace;\
    \ for example, if the input string is \"   100\", the function should return 8.\n\
    The input string may contain leading or trailing whitespace; for example, if the\
    \ input string is \"   100\", the function should return 8.\nThe input string\
    \ may contain leading or trailing whitespace; for example, if the input string\
    \ is \"   100\", the function should return 8.\nThe input string may contain leading\
    \ or trailing whitespace; for example, if the input string is \"   100\", the\
    \ function should return 8.\nThe input string may contain leading or trailing\
    \ whitespace; for example, if the input string is \"   100\", the function should\
    \ return 8.\nThe input string may contain leading or trailing whitespace; for\
    \ example, if the input string is \"   100\", the function should return 8.\n\
    The input string may contain leading or trailing whitespace; for example, if the\
    \ input string is \"   100\", the function should return 8.\nThe input string\
    \ may contain leading or trailing whitespace; for example, if the input string\
    \ is \"   100\", the function should return 8.\nThe input string may contain leading\
    \ or trailing whitespace; for example, if the input string is \"   100\", the\
    \ function should return 8.\nThe input string may contain leading or trailing\
    \ whitespace; for example, if the input string is \"   100\", the function should\
    \ return 8.\nThe input string may contain leading or trailing whitespace; for\
    \ example, if the input string is \"   100\", the function should return 8.\n\
    The input string may contain leading or trailing whitespace; for example, if the\
    \ input string is \"   100\", the function should return 8.\nThe input string\
    \ may contain leading or trailing whitespace; for example, if the input string\
    \ is \"   100\", the function should return 8.\nThe input string may contain leading\
    \ or trailing whitespace; for example, if the input string is \"   ", "    if\
    \ m > n \n        return -1\n    \n    binary = \"\"\n    \n    for i in n:m\n\
    \        binary += string(i)\n    \n    return bin(Int64(binary))[2:]\nend\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7,5)\n</cell>\n<text>\nExercise: Write\
    \ a function that computes the average of n through m (including n and m), rounded\
    \ to\n    an integer, and converts the result to binary. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    If n is greater than\
    \ m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n    >>>\
    \ rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n   \
    \ >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"", "    if n > m \n    \
    \    rounded_avg = -1\n    else\n        rounded_avg = ceil(Int, (n + m) / 2)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n <= m \n        rounded_avg = round(n/m)*m\n     \
    \   rounded_avg = bin(rounded_avg)[2:]\n        rounded_avg = rounded_avg.zfill(m)\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:\n$$\nn! = n \\times n-1 \\times n-2 \\times ...\\\
    times 2 \\times 1\n$$\nFor example, 5! = 5 \\times 4 \\times 3 \\times 2 \\times\
    \ 1 = 120\nWrite a function that computes the factorial of a given number. \n\
    The factorial of a number $n$ is defined as:\n$$\nn! = n \\times n-1 \\times n-2\
    \ \\times ...\\times 2 \\times 1\n$$\nFor example, 5! = 5 \\times 4 \\times 3\
    \ \\times 2 \\times 1 = 120\nHint: use while loop to compute the factorial"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
