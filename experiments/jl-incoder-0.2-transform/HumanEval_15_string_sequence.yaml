name: HumanEval_15_string_sequence
language: jl
prompt: "\"\"\" Return a string containing space-delimited numbers starting from 0\
  \ upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
  \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
  \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0\
  \ 1 2 3 4 5 6 7 8 9 10\")\nend\n"
completions: ["    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings as an input and returns\
    \ a vector of integers representing the number of times each string appears in\
    \ the input vector.\nFor example, if the input vector is [\"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"a\"], then the output vector should be [1, 1, 2, 1, 1, 1].\n\
    Hint: Use a for loop to iterate over the input vector.", "    string_seq = String[]\n\
    \    for i in 0 .. n\n        string_seq += String(i)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive. \"\n    \n    string\
    \ = \"\"\n    for i = 1 to n do\n        string = string + \" \" + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    string = \"\"\n    for i = 1 to n\
    \ do\n        string = string + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers.\
    \ \nThe function should work for both vectors of numbers and vectors of strings.\n\
    The function should work for vectors of any length.", "    \n    string = \"\"\
    \n    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n is even\" if the number is even, and \"n is odd\" if the number\
    \ is odd.", "    \n    string = \"\"\n    for i = 1 to n do\n        string =\
    \ string + \" \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 10\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use a for loop to iterate over the string.", "    string_seq = \"\"\n  \
    \  for i = 1 to n do\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the string with all the letters capitalized.\n\
    Hint: Use a for loop to iterate over the characters in the string.", "    string_seq\
    \ = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n    return\
    \ string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of numbers and\
    \ returns the sum of the numbers. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the array. \nThe function should return\
    \ an error if the number of elements is less than or equal to 0.", "    string\
    \ = \"\"\n    for i = 1:n\n        string = string + i\n    end\n    return string\n\
    end", "    string_seq = String[]()\n    for n in 0..n\n        string_seq.append(string(n))\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n is even\" if the number is even, and \"\
    n is odd\" if the number is odd.", "    string_seq = \"\"\n    for i = n\n   \
    \     string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nHint:\
    \ Use length()", "    if n < 0\n        error(\"n must be positive\")\n    else\n\
    \        string_sequence(n-1).\" \".(0:n)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a number n and returns the string \"n is a power of\
    \ two\" if n is a power of two, otherwise \"n is not a power of two\".", "   \
    \ string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    string = \"\"\n    for i = 1:n\n\
    \        string = string + i\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the letters capitalized.", " \
    \   string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nFor example,\
    \ if the input vector is [1,2,3,4,5], the output should be 15.\nHint: Use a for\
    \ loop to iterate over the elements of the vector.", "    string_sequence = \"\
    \"\n    for i = 1 to n do\n        string_sequence = string_sequence + \" \" +\
    \ to_string(i)\n    end\n    return string_sequence\nend", "    string_seq = String[]\n\
    \    for n in 0 .. n\n        string_seq += String(n)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<text>\nThe function string_sequence is now available in\
    \ the Julia REPL.", "    string_seq = String[]\n    for i = 1 to n do\n      \
    \  string_seq.append(i.toString())\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>", "    string = \"\"\n\
    \    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case. \nThe function should\
    \ ignore all non-alphabetic characters.\nThe function should ignore all empty\
    \ strings.\nThe function should ignore all strings consisting of only whitespace.\n\
    The function should ignore all strings consisting of only digits.\nThe function\
    \ should ignore all strings consisting of only letters.\nThe function should ignore\
    \ all strings consisting of only special characters.\nThe function should ignore\
    \ all strings consisting of only letters and digits.\nThe function should ignore\
    \ all strings consisting of only letters and special characters.\nThe function\
    \ should ignore all strings consisting of only letters, digits and special characters.\n\
    The function should ignore all strings consisting of only letters, digits and\
    \ whitespace.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace and special characters.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters and empty\
    \ strings.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings ", "    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Initialize a string\
    \ variable with an empty string.\"\n    \" Initialize a variable i to 0.\"\n \
    \   \" Initialize a variable j to n.\"\n    \" Initialize a variable k to 0.\"\
    \n    \" Initialize a variable l to 0.\"\n    \" Initialize a variable m to 0.\"\
    \n    \" Initialize a variable n to n.\"\n    \" Initialize a variable o to 0.\"\
    \n    \" Initialize a variable p to 0.\"\n    \" Initialize a variable q to 0.\"\
    \n    \" Initialize a variable r to 0.\"\n    \" Initialize a variable s to 0.\"\
    \n    \" Initialize a variable t to 0.\"\n    \" Initialize a variable u to 0.\"\
    \n    \" Initialize a variable v to 0.\"\n    \" Initialize a variable w to 0.\"\
    \n    \" Initialize a variable x to 0.\"\n    \" Initialize a variable y to 0.\"\
    \n    \" Initialize a variable z to 0.\"\n    \" Initialize a variable a to 0.\"\
    \n    \" Initialize a variable b to 0.\"\n    \" Initialize a variable c to 0.\"\
    \n    \" Initialize a variable d to 0.\"\n    \" Initialize a variable e to 0.\"\
    \n    \" Initialize a variable f to 0.\"\n    \" Initialize a variable g to 0.\"\
    \n    \" Initialize a variable h to 0.\"\n    \" Initialize a variable i to n.\"\
    \n    \" Initialize a variable j to n.\"\n    \" Initialize a variable k to n.\"\
    \n    \" Initialize a variable l to n.\"\n    \" Initialize a variable m to n.\"\
    \n    \" Initialize a variable n to n.\"\n    \" Initialize a variable o to n.\"\
    \n    \" Initialize a variable p to n.\"\n    \" Initialize a variable q to n.\"\
    \n    \" Initialize a variable r to n.\"\n    \" Initialize a variable s to n.\"\
    \n    \" Initialize a variable t to n.\"\n    \" Initialize a variable u to n.\"\
    \n    \" Initialize a variable v to n.\"\n    \" Initialize a variable w to n.\"\
    \n    \" Initialize a variable x to n.\"\n    \" Initialize a variable y to n.\"\
    \n    \" Initialize a variable z to n.\"\n    \" Initialize a variable a to n.\"\
    \n    \" Initialize a variable b to n.\"\n    \" Initialize a variable c to n.\"\
    \n    \" Initialize a variable d to n.\"\n    \" Initialize a variable e to n.\"\
    \n    \" ", "    \n    string = \"\"\n    for i = 1 to n do\n        string =\
    \ string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector. For example,\
    \ if the vector is [1,2,3,4,5], the function should return 15.", "    string_seq\
    \ = String[]\n    for i = n-1, 0, -1 do\n        string_seq.append(i%10^6)\n \
    \       i /= 10^6\n    end\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_", "    \n    if n == 0\n        return\
    \ \"0\"\n    \n    string = \"\"\n    \n    for i = 1 to n\n        string = string\
    \ + \" \" + string_sequence(i)\n    \n    return string\n</code>\n<|/ a tags=recursion,haskell\
    \ |>\n<| c |>\nThank you very much for your answer! I understand it now. :)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport Data.List", "    if n == 0 \n     \
    \   then return \"0\"\n    else \n        string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the string with all\
    \ the letters in lower case. For example, \"Hello World\" becomes \"hello world\"\
    .", "    \" Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive. \"\n    \" The numbers are separated by spaces.\"\n    \"\
    \ The numbers are separated by spaces.\"\n    \" The numbers are separated by\
    \ spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The number",
  "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a number n and returns the string \"n is even\".\nWrite\
    \ a function that takes a number n and returns the string \"n is odd\".\nWrite\
    \ a function that takes a number n and returns the string \"n is positive\".\n\
    Write a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is odd\"\
    .\nWrite a function that takes a number n and returns the string \"n is even\"\
    .\nWrite a function that takes a number n and returns the string \"n is positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is odd\"\
    .\nWrite a function that takes a number n and returns the string \"n is even\"\
    .\nWrite a function that takes a number n and returns the string \"n is positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is odd\"\
    .\nWrite a function that takes a number n and returns the string \"n is even\"\
    .\nWrite a function that takes a number n and returns the string \"n is positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\n", "    string_sequence = String[]\n    for n in 0 .. n\n        string_sequence\
    \ += String(n)\n    return string_sequence\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThanks for your answer! I edited my question to make it more clear what\
    \ I'm looking for. Your answer doesn't seem to work for me though.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that should work for you\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! I edited my question to make it more\
    \ clear what I'm looking for. Your answer doesn't seem to work for me though.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that should work for\
    \ you\n<|/ c |>\n<| a tags=julia |>\nThe easiest way is to use join:\n<code>\n\
    julia> join(\" \", 0:5)\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    Thanks for your answer! I edited my question to make it more clear what I'm looking\
    \ for. Your answer doesn't seem to work for me though.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that should work for you\n<|/ c |>\n<| a dscore=2\
    \ |>\nI believe that this is what you are looking for:\n<code>", "    string_seq\
    \ = \"\"\n    for i = n-1 downto 1 do\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string as input and\
    \ returns the string with all the characters in lower case.\nHint: Use lowercase()",
  "    string_seq = \"\"\n    for i = n\n        do\n            string_seq = string_seq\
    \ + i\n        end\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a number n and returns the string\
    \ \"n!\".\nWrite a function that takes a number n and returns the string \"n-n!\"\
    .\nWrite a function that takes a number n and returns the string \"n-n-n!\".\n\
    Write a function that takes a number n and returns the string \"n-n-n-n!\".",
  "    \n    string_sequence = String[]\n    \n    for i in 0 .. n\n        string_sequence\
    \ += String(i)\n    \n    return string_sequence\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThanks for the answer! I didn't know that you can define functions in\
    \ Julia. I'm still a beginner at Julia, so I didn't know that you could define\
    \ functions like that. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I added some\
    \ more information to my answer about defining functions in Julia. Hope it helps!\n\
    <|/ c |>\n<| c |>\nThanks for the additional info! I really appreciate it!\n<|/\
    \ c |>\n<| a dscore=1 |>\nI wrote a package called Strings.jl that does exactly\
    \ this. It has many useful string manipulation functions, including join, split,\
    \ and replace. \n<code>\njulia> using Strings", "    \n    string_sequence = \"\
    \"\n    for i = 1 to n do\n        string_sequence = string_sequence + \" \" +\
    \ to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case.\
    \ \nFor example if the input string is \"Hello World\" the output should be \"\
    hello world\".", "    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers containing the number of\
    \ times each string appears in the vector.", "    if n == 0 \n        then return\
    \ \"0\"\n    else \n        string_sequence(n - 1) ++ \" \" ++ string_sequence(n\
    \ - 1)\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nHere is a recursive\
    \ solution:\n<code>", "    string_seq = \"\"\n    for i = n\n        string_seq\
    \ = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the string\
    \ with all the letters capitalized. \nFor example: \n\"hello\" => \"Hello\"\n\"\
    hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n", " \
    \   string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number ", "    str = String[Int64]()\n    for i = 1:n\n        str = str +\
    \ i\n    end\n    str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first n prime numbers. \nHint: Use a for\
    \ loop and a prime number generator function.", "    string_seq = String[]\n \
    \   for i in 0 .. n\n        string_seq.append(string(i))\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nThe function should ignore punctuation and only count\
    \ the words. \nThe function should ignore numbers and only count the words.\n\
    The function should ignore capitalization and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic characters and only count the words.\nThe function\
    \ should ignore non-alphabetic character", "    str = String[Int64]()\n    for\
    \ i = 1:n\n        str = str + i\n    end\n    return str\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nThe function string_sequence\
    \ is now a Julia function, which can be called from Julia code using the function\
    \ call syntax:", "    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    string_sequence = \"\"\n    for i = 1 to\
    \ n do\n        string_sequence = string_sequence + \" \" + to_string(i)\n   \
    \ end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number generator to generate prime numbers.",
  "    if n <= 0 \n        error(\"n must be positive\")\n    else if n == 1\n   \
    \     return \"0\"\n    else \n        string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns a string with all the characters in the string capitalized. \nFor\
    \ example, string_sequence(\"Hello World\") should return \"Hello World\".\nHint:\
    \ Use a for loop.", "    string_sequence = \"\"\n    for i = 1 to n do\n     \
    \   string_sequence = string_sequence + \" \" + string(i)\n    end\n    return\
    \ string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the string \"Hello\
    \ World!\" if the argument n is greater than or equal to 10 and less than or equal\
    \ to 100. Otherwise return the string \"Goodbye World!\".", "    \n    string\
    \ = \"\"\n    \n    for i = n\n    do\n        string += i\n        string +=\
    \ \" \"\n    done\n    \n    return string\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\nI like to use string interpolation for this.\n<code>",
  "    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \" \"\
    \ + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nHint: Use a recursive function.", "    string = \"\"\n    for i =\
    \ 1 to n do\n        string = string + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string containing all\
    \ the characters of the string in alphabetical order.\nFor example if the input\
    \ string is \"hello\" then the output string should be \"hbeol\"", "    string_seq\
    \ = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n    return\
    \ join(string_seq,\" \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    string_seq = String[]\n    for\
    \ i in 0:n\n        string_seq.append(i::Int64)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.", "    string_sequence = \"\"\n    for\
    \ i in 0:n-1\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.0>",
  "    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()", "    string_seq\
    \ = \"\"\n    for i = 1 to n do\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(10)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(100)\n</cell>\n<text>\nExercise: Write a function that takes a\
    \ string as input and returns the string with all the letters capitalized.", " \
    \   \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"", "    \n    string_sequence = \"\"\n    for\
    \ i = 1:n\n        string_sequence = string_sequence + \" \" + string(i)\n   \
    \ end\n    \n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers in that vector. \nFor example,\
    \ if the input vector is [1,2,3,4,5], the output should be 15.", "    string_sequence\
    \ = \"\"\n    for i = 1 to n do\n        string_sequence = string_sequence + \"\
    \ \" + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.\n\
    Hint: Use tolower function.", "    string = \"\"\n    for i = n\n    do\n    \
    \    string = string + \" \" + string(i)\n    done\n    return string\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\n<code>", "    str = \" \"\n    for i =\
    \ 1:n\n        str = str + i\n    end\n    return str\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a while loop to iterate over all numbers from\
    \ 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\n", "    \"\"\"\" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \"\"\"", "    if n ==\
    \ 0 \n        then return \"0\"\n    else \n        string_sequence(n-1) + \"\
    , \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n is a power of two\" if n is a power of two, and \"n is not a\
    \ power of two\" if n is not a power of two.", "    \n    string = \"\"\n    for\
    \ i = 1 to n do\n        string = string + \" \" + to_string(i)\n    end\n   \
    \ return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer n and returns\
    \ the string \"n is a multiple of 4\" if the integer is divisible by 4, otherwise\
    \ return \"n is not a multiple of 4\".", "    \n    string = \"\"\n    for i =\
    \ n\n    do\n        string += i\n        i += 1\n    done\n    return string\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>", "   \
    \ string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = \"%d \"\
    \ \n        string_seq[i+1] = i\n    end\n    string_seq[n] = \"\"\n    return\
    \ join(string_seq)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.5>", "    string_seq = String[]()\n    for i =\
    \ 1:n\n        string_seq.append(i::Int64)\n    return string_seq.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of Int64s.\nThe function should convert each string in the vector to its corresponding\
    \ Int64 value.\nThe function should ignore any non-numeric characters in the string.\n\
    The function should ignore any empty strings.\nThe function should ignore any\
    \ strings that are not of the form \"x\".\nThe function should ignore any strings\
    \ that are not of the form \"x\" or \"y\".\nThe function should ignore any strings\
    \ that are not of the form \"x\" or \"y\" or \"z\".\nThe function should ignore\
    \ any strings that are not of the form \"x\" or \"y\" or \"z\" or \"w\".\nThe\
    \ function should ignore any strings that are not of the form \"x\" or \"y\" or\
    \ \"z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\" or \"e\" or \"f\" or \"g\"\
    \ or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"n\" or \"o\" or \"\
    p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or \"w\" or \"x\" or\
    \ \"y\" or \"z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\" or \"e\" or \"f\"\
    \ or \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"n\" or \"\
    o\" or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or \"w\" or\
    \ \"x\" or \"y\" or \"z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\" or \"e\"\
    \ or \"f\" or \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"\
    n\" or \"o\" or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or\
    \ \"w\" or \"x\" or \"y\" or \"z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\"\
    \ or \"e\" or \"f\" or \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"\
    m\" or \"n\" or \"o\" or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or\
    \ \"v\" or \"w\" or \"x\" or \"y\" or \"z\" or \"w\" or \"a\" or \"b\" or \"c\"\
    \ or \"d\" or \"e\" or \"f\" or \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"\
    l\" or \"m\" or \"n\" or \"o\" or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or\
    \ \"u\" or \"v\" or \"w\" or \"x\" or \"y\" or \"z\" or \"w\" or \"a\" or \"b\"\
    \ or \"c\" or \"d\" or \"e\" or \"f\" or \"g\" or \"h\" or \"i\" or \"j\" or \"\
    k\" or \"l\" or \"m\" or \"n\" or \"o\" or \"p\" or \"q\" or \"r\" or \"s\" or\
    \ \"t\" or \"u\" or \"v\" or \"w\" or \"x\" or \"y\" or \"z\" or \"w\" or \"a",
  "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers as an argument and returns the sum\
    \ of the numbers. \nThe function should also return the number of elements in\
    \ the vector.\nThe function should also return a string containing the sum of\
    \ the numbers and the length of the vector.\nThe function should also return a\
    \ string containing the number of elements in the vector.", "    string_seq =\
    \ \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in that string.\nHint: Use length()", "    \n    string = \"\"\
    \n    for i = 1:n\n        string = string + string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function which takes an integer n and returns the string \"\
    n!\".\nHint: Use a for loop.", "    string = \"\"\n    for i = 1 to n do\n   \
    \     string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in lower case.\nFor example, string_lowercase(\"Hello World!\") should return\
    \ \"hello world!\".", "    string_seq = String[]\n    for i = 1 to n do\n    \
    \    string_seq.append(i.toString())\n    return string_seq.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ numbers. \nThe function should work for both vectors of numbers and vectors\
    \ of strings. \nThe function should work for vectors of any length.", "    string_seq\
    \ = \"\"\n    for i = 1 to n do\n        string_seq = string_seq + i\n    end\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"nth term\" where n is given as an input to the function.", "  \
    \  string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = i\n   \
    \ return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a string and returns\
    \ the string with all the letters capitalized. \nFor example, \"hello\" => \"\
    Hello\"", "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of integers containing the number of times each string appears in the vector.\n\
    For example, string_sequence(\"hello\", \"world\", \"hello\") should return a\
    \ vector [1, 1, 2].", "    string_seq = \"\"\n    for i = n-1, 0, -1 do\n    \
    \    string_seq = string_seq + string(i)\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all spaces\
    \ replaced by '%20'", "    \n    string = \"\"\n    for i = 1 to n do\n      \
    \  string = string + string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(0)\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all the characters in lower case and all\
    \ the characters in upper case.", "    \n    string_sequence = String()\n    \n\
    \    for i = 1:n\n        string_sequence = string_sequence + i\n    end\n   \
    \ \n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns a vector of the same length with each element being the square of the\
    \ corresponding element in the input vector.", "    string = \"\"\n    for i =\
    \ 1:n\n        string = string + \" \" + to_string(i)\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a number n and returns the string \"n\"\n\
    \    e.g. string_sequence(5) returns \"5\"\n    e.g. string_sequence(0) returns\
    \ \"0\"\n    e.g. string_sequence(1) returns \"1\"\n    e.g. string_sequence(2)\
    \ returns \"1 2\"\n    e.g. string_sequence(3) returns \"1 2 3\"\n    e.g. string_sequence(4)\
    \ returns \"1 2 3 4\"\n    e.g. string_sequence(5) returns \"1 2 3 4 5\"\n   \
    \ e.g. string_sequence(6) returns \"1 2 3 4 5 6\"\n    e.g. string_sequence(7)\
    \ returns \"1 2 3 4 5 6 7\"\n    e.g. string_sequence(8) returns \"1 2 3 4 5 6\
    \ 7 8\"\n    e.g. string_sequence(9) returns \"1 2 3 4 5 6 7 8 9\"\n    e.g. string_sequence(10)\
    \ returns \"1 2 3 4 5 6 7 8 9 10\"\n    e.g. string_sequence(11) returns \"1 2\
    \ 3 4 5 6 7 8 9 10 11\"\n    e.g. string_sequence(12) returns \"1 2 3 4 5 6 7\
    \ 8 9 10 11 12\"\n    e.g. string_sequence(13) returns \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13\"\n    e.g. string_sequence(14) returns \"1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14\"\n    e.g. string_sequence(15) returns \"1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15\"\n    e.g. string_sequence(16) returns \"1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16\"\n    e.g. string_sequence(17) returns \"1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17\"\n    e.g. string_sequence(18) returns \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18\"\n    e.g. string_sequence(19) returns \"1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    e.g. string_sequence(20) returns\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    e.g. string_sequence(21)\
    \ returns \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    e.g.\
    \ string_sequence(22) returns ", "    string_sequence = \"\"\n    for i = 1 to\
    \ n do\n        string_sequence = string_sequence + \" \" + i\n    end\n    return\
    \ string_sequence\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a ", "    string_sequence = String[]\n    for i in 0:n\n\
    \        string_sequence += i\n    return string_sequence\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,string |>\n<code>", "    string_sequence = String[]()\n\
    \    for i = 1:n\n        string_sequence += String(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nFor example, string_length(\"Hello World\") should return 11.",
  "    string_seq = String[]\n    for x in 0:n\n        string_seq <- string_seq +\
    \ String(x)\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe function should take two arguments:\
    \ the first is the number to be converted, and the second is the base of the number\
    \ to be converted.\nThe function should return a string containing the number\
    \ in base 16 represented as a string.\nThe function should return an error if\
    \ the base is not 10 or 16.\nThe function should return an error if the number\
    \ is negative.\nThe function should return an error if the number is too large.\n\
    The function should return an error if the number is too small.", "    string_seq\
    \ = String[]\n    for k in 0..n-1\n        string_seq[k] = \"$(k+1)\"\n    end\n\
    \    string_seq[n] = \"$(k+1)\"\n    return join(string_seq,\" \")\nend\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the string with all the letters capitalized.\n\
    For example, string_upper(\"hello\") should return \"HELLO\".", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n    end\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function", "   \
    \ string_seq = String[]\n    for i::Int64 in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.", "    str = \" \"\
    \n    for i = 1 to n do\n        str = str + i\n    end\n    return str\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a number n and returns the string \"n\"\nWrite\
    \ a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"", " \
    \   string_seq = String[]\n    for i = n-1, 0, -1 do\n        string_seq.append(i%10)\n\
    \        i/=10\n    end\n    return string_seq.join(\" \")\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ the characters in reverse order.\nHint: Use reverse() function", "    string_seq\
    \ = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n    return\
    \ string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not.", "    if n == 0 \n        then return \"0\"\n    else\
    \ \n        string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length() function", "    string_seq = \"\"\n    for i = 1:n\n      \
    \  string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers.",
  "    string_seq = String[]\n    for k in 0..n\n        string_seq[k] = str(k)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that converts a string to a vector of integers. Each element of the\
    \ vector should be the integer represented by the corresponding character in the\
    \ string. For example, if the string \"123\" were to be converted, the vector\
    \ [1,2,3] would be returned.", "    string_seq = \"\"\n    for i = 1 to n do\n\
    \        string_seq = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the first n prime numbers. \nThe function should take\
    \ one argument, n::Int64. \nThe function should return one number, the first n\
    \ prime numbers. \nThe function should return nothing if n is less than or equal\
    \ to 0. \nThe function should return nothing if n is less than or equal to 1.\
    \ \nThe function should return nothing if n is less than or equal to 2. \nThe\
    \ function should return nothing if n is less than or equal to 3. \nThe function\
    \ should return nothing if n is less than or equal to 4. \nThe function should\
    \ return nothing if n is less than or equal to 5. \nThe function should return\
    \ nothing if n is less than or equal to 6. \nThe function should return nothing\
    \ if n is less than or equal to 7. \nThe function should return nothing if n is\
    \ less than or equal to 8. \nThe function should return nothing if n is less than\
    \ or equal to 9. \nThe function should return nothing if n is less than or equal\
    \ to 10. \nThe function should return nothing if n is less than or equal to 11.\
    \ \nThe function should return nothing if n is less than or equal to 12. \nThe\
    \ function should return nothing if n is less than or equal to 13. \nThe function\
    \ should return nothing if n is less than or equal to 14. \nThe function should\
    \ return nothing if n is less than or equal to 15. \nThe function should return\
    \ nothing if n is less than or equal to 16. \nThe function should return nothing\
    \ if n is less than or equal to 17. \nThe function should return nothing if n\
    \ is less than or equal to 18. \nThe function should return nothing if n is less\
    \ than or equal to 19. \nThe function should return nothing if n is less than\
    \ or equal to 20. \nThe function should return nothing if n is less than or equal\
    \ to 21. \nThe function should return nothing if n is less than or equal to 22.\
    \ \nThe function should return nothing if n is less than or equal to 23. \nThe\
    \ function should return nothing if n is less than or equal to 24. \nThe function\
    \ should return nothing if n is less than or equal to 25. \nThe function should\
    \ return nothing if n is less than or equal to 26. \nThe function should return\
    \ nothing if n is less than or equal to 27. \nThe function should return nothing\
    \ if n is less than or equal to 28. \nThe function should return nothing if n\
    \ is less than or equal to 29. \nThe function should return nothing if n is less\
    \ than or equal to 30. ", "    \n    string = \"\"\n    for i = 1 to n do\n  \
    \      string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000003)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000007)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000011)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000012)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000013)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000014)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000015)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000016)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000017)\n</cell>\n\
    <code language=julia-1.5>", "    \n    string = \"\"\n    for i = n\n    do\n\
    \        string += i\n    done\n    \n    return string\n</code>\n<|/ a tags=julia,for-loop\
    \ |>\n<| a dscore=1 |>\nFor a more general solution, one can use mapslices:\n\
    <code>\njulia> mapslices(x -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n\
    \ \"0\"\n \"1\"\n \"2\"\n \"3\"\n \"4\"\n</code>\n<|/ a tags=julia,for-loop |>\n\
    <| a tags=julia,for-loop |>\nAnother solution:\n<code>", "    \n    string = \"\
    \"\n    for i = 1:n\n        string = string + \" \" + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the numbers in the vector.\nThe function should take an argument\
    \ of the type Vector{Int64}.\nThe function should return the sum of the numbers\
    \ in the vector.\nThe function should return a value of type Int64.\nThe function\
    \ should use an accumulator of type Int64.\nThe function should use an accumulator\
    \ of type Int64 to store the sum of the numbers in the vector.\nThe function should\
    \ return the accumulator at the end of the function.\nThe function should use\
    \ an accumulator of type Int64 to store the sum of the numbers in the vector.\n\
    The function should return the accumulator at the end of the function.\nThe function\
    \ should use an accumulator of type Int64 to store the sum of the numbers in the\
    \ vector.\nThe function should return the accumulator at the end of the function.\n\
    The function should use an accumulator of type Int64 to store the sum of the numbers\
    \ in the vector.\nThe function should return the accumulator at the end of the\
    \ function.\nThe function should use an accumulator of type Int64 to store the\
    \ sum of the numbers in the vector.\nThe function should return the accumulator\
    \ at the end of the function.\nThe function should use an accumulator of type\
    \ Int64 to store the sum of the numbers in the vector.\nThe function should return\
    \ the accumulator at the end of the function.\nThe function should use an accumulator\
    \ of type Int64 to store the sum of the numbers in the vector.\nThe function should\
    \ return the accumulator at the end of the function.\nThe function should use\
    \ an accumulator of type Int64 to store the sum of the numbers in the vector.\n\
    The function should return the accumulator at the end of the function.\nThe function\
    \ should use an accumulator of type Int64 to store the sum of the numbers in the\
    \ vector.\nThe function should return the accumulator at the end of the function.\n\
    The function should use an accumulator of type Int64 to store the sum of the numbers\
    \ in the vector.\nThe function should return the accumulator at the end of the\
    \ function.\nThe function should use an accumulator of type Int64 to store the\
    \ sum of the numbers in the vector.\nThe function should return the accumulator\
    \ at the end of the function.\nThe function should use an accumulator of type\
    \ Int64 to store the sum of the numbers in the vector.\nThe function should return\
    \ the accumulator at the end of the function.\nThe function should use an accumulator\
    \ of type Int64 to store the sum of the numbers in the vector.\nThe function should\
    \ return the accumulator at the end of the function.\nThe function should use\
    \ an accumulator of type Int64 to store the sum of the numbers in the vector.\n\
    The function should return the accumulator at the end of the function.\nThe function\
    \ should use an accumulator of type Int64 to store the sum of the numbers in the\
    \ vector.\nThe function should return the accumulator at the end of the function.\n",
  "    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should also work for vectors\
    \ of different lengths.", "    string_seq = String[]\n    for x in 0:n\n     \
    \   string_seq <- append(string_seq,x)\n    return string_seq\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length() function", "    string_seq = String[]\n    for i in 0:n-1\n\
    \        string_seq[i] = i\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers containing\
    \ the number of occurrences of each string.\nFor example, if the input vector\
    \ is [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"] then the output vector should\
    \ be [2, 2, 1, 1, 2, 1].\nHint: Use a dictionary to store the counts and then\
    \ iterate over the input vector and increment the count for each element.", " \
    \   string = \"\"\n    for i = 1 to n do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a string to a vector\
    \ of integers. For example,", "    if n == 0 \n        return \"0\" \n    else\
    \ \n        string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the first n prime numbers. \nHint: Use a while loop\
    \ and a prime number test.", "    \n    string = \"\"\n    for i = 1:n\n     \
    \   string = string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers in the vector.\nFor example,\
    \ if the vector is [1,2,3,4,5], the function should return 15.\nHint: use the\
    \ sum function.", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    \n    string = \"\"\n    for i = 1:n\n \
    \       string = string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case\
    \ and spaces removed.", "    if n == 0 \n        then return \"0\"\n    else \n\
    \        string_sequence(n-1)\n        + \" \" + to_string(n) \n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use the function\
    \ repeat:\n<code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nIn Julia 1.5 you\
    \ can use the function repeat:\n<code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia\
    \ 1.5 you can use the function repeat:\n<code>\njulia> repeat(1:5, 3)\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nIn Julia 1.5 you can use the function repeat:\n<code>\njulia> repeat(1:5,\
    \ 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\nIn Julia 1.5 you can use the function repeat:\n<code>\njulia> repeat(1:5,\
    \ 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 tags=julia\
    \ |>\n<| a tags=julia |>\nIn Julia 1.5 you can use the function repeat:\n<code>\n\
    julia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function repeat:\n\
    <code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function\
    \ repeat:\n<code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    else if n == 1\n        return \"0\"\n    else\n        string_sequence(n\
    \ - 1) + \" \" + to_string(n)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of words in it.", "    \n    string = \"\"\n    \n    for i = 1 to n\
    \ do\n        string = string + \" \" + i\n    \n    return string\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", "    \n    string_seq = String[]\n\
    \    \n    for i in 0 .. n\n        string_seq.append(i.toString())\n    \n  \
    \  return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers containing the number of times each string appears\
    \ in the vector.\nFor example, if the vector is [\"a\", \"a\", \"b\", \"c\", \"\
    c\", \"c\"] then the function should return [1, 1, 2, 1, 1, 1].\nHint: Use a for\
    \ loop to iterate over the strings in the vector and increment a counter variable\
    \ for each time the string appears in the vector.", "    if n == 0 \n        return\
    \ \"0\" \n    else \n        string_sequence(n-1) + \", \" + string_sequence(n)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    if n == 0 \n        then return \"0\"\n    else \n   \
    \     string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nFor example, given [1,2,3,4,5], the function\
    \ should return 25.\nHint: use the reduce function.", "    if n == 0 \n      \
    \  then return \"0\"\n    else \n        string_sequence(n - 1)\n        +\" \"\
    \n        +string_sequence(n - 1)\nend\n</code>\n<|/ a tags=julia,recursion |>\n\
    <| a tags=julia,recursion |>\nHere's a recursive solution that uses no loops:\n\
    <code>", "    if n == 0 \n        return \"0\" \n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise: Write a function that takes a number n and returns\
    \ the string \"n!\".\nHint: Use recursion.", "    string_sequence = \"\"\n   \
    \ for i = 1 to n do\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop and a prime number test.",
  "    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1) + \" \" ++ string_sequence(n)\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in that string.", "    string_seq\
    \ = String[]\n    for i in 0 .. n-1 do\n        string_seq[i] = i\n    end\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    string_seq = \"\"\n    for i\
    \ = 1:n\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    if n == 0 \n        then return \"0\"\n    else \n   \
    \     string_sequence(n - 1) ++ \" \" ++ string_sequence(n)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of words in the\
    \ string.\nThe input string can contain spaces.\nThe function should ignore leading\
    \ and trailing spaces.\nThe function should ignore punctuation.\nThe function\
    \ should ignore numbers.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore special characters.\nThe function should ignore empty\
    \ strings.\nThe function should ignore strings with only spaces.\nThe function\
    \ should ignore strings with only punctuation.\nThe function should ignore strings\
    \ with only numbers.\nThe function should ignore strings with only uppercase and\
    \ lowercase letters.\nThe function should ignore strings with only special characters.\n\
    The function should ignore strings with only empty strings.\nThe function should\
    \ ignore strings with only spaces.\nThe function should ignore strings with only\
    \ punctuation.\nThe function should ignore strings with only numbers.\nThe function\
    \ should ignore strings with only uppercase and lowercase letters.\nThe function\
    \ should ignore strings with only special characters.\nThe function should ignore\
    \ strings with only empty strings.\nThe function should ignore strings with only\
    \ spaces.\nThe function should ignore strings with only punctuation.\nThe function\
    \ should ignore strings with only numbers.\nThe function should ignore strings\
    \ with only uppercase and lowercase letters.\nThe function should ignore strings\
    \ with only special characters.\nThe function should ignore strings with only\
    \ empty strings.\nThe function should ignore strings with only spaces.\nThe function\
    \ should ignore strings with only punctuation.\nThe function should ignore strings\
    \ with only numbers.\nThe function should ignore strings with only uppercase and\
    \ lowercase letters.\nThe function should ignore strings with only special characters.\n\
    The function should ignore strings with only empty strings.\nThe function should\
    \ ignore strings with only spaces.\nThe function should ignore strings with only\
    \ punctuation.\nThe function should ignore strings with only numbers.\nThe function\
    \ should ignore strings with only uppercase and lowercase letters.\nThe function\
    \ should ignore strings with only special characters.\nThe function should ignore\
    \ strings with only empty strings.\nThe function should ignore strings with only\
    \ spaces.\nThe function should ignore strings with only punctuation.\nThe function\
    \ should ignore strings with only numbers.\nThe function should ignore strings\
    \ with only uppercase and lowercase letters.\nThe function should ignore strings\
    \ with only special characters.\nThe function should ignore strings with only\
    \ empty strings.\nThe function should ignore strings with ", "    string_seq =\
    \ String[]\n    for i in 0..n-1\n        string_seq[i] = i\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of characters in the string.", "    string_seq = String[]\n    for x in 0..n\n\
    \        string_seq <- string_seq + String(x)\n    return string_seq\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", "    \n    string = \"\"\n   \
    \ for i = 1 to n do\n        string = string + \" \" + i\n    end\n    return\
    \ string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 5\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    string = \"\"\n    for i = 1 to n do\n      \
    \  string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nWrite a function that\
    \ takes a string and returns the number of words in the string.", "    \"\"\"\"\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1\
    \ 2 3 4 5\"\n    \"\"\"", "    \"\"\"\" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \"\"\"", "    if n==0\
    \ then return \"0\"\n    else return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nFor example, string_sequence(\"The quick brown fox jumps over\
    \ the lazy dog\") should return 5.", "    string_seq = String[]\n    for n in\
    \ 0 .. n\n        string_seq += string(n)\n    return string_seq\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia,string |>\n<code>", "    \n    string_seq = \"\
    \"\n    \n    for i = n\n    do\n        string_seq = string_seq + i\n    done\n\
    \    \n    return string_seq\nend\n</cell>\n<text>\nThe function string_sequence\
    \ is now defined. Let's test it.", "    string_seq = \"\"\n    for i = 1 to n\
    \ do\n        string_seq = string_seq + i\n    end\n    return string_seq\nend\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.", "    if n <= 0\n        error(\"n must be positive\"\
    )\n    else if n == 1\n        return \"0\"\n    else\n        str = string_sequence(n-1)\n\
    \        str = str + \" \"\n        str = str + string_sequence(n-1)\n       \
    \ return str\nend\n</cell>\n<code language=julia-1.4>", "    string_sequence =\
    \ \"\"\n    for i = 1:n\n        string_sequence = string_sequence + \" \" + string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ number n and returns the string \"n!\".\nHint: Use a for loop.", "    if n <=\
    \ 0\n        error(\"n must be positive\")\n    else if n == 1\n        return\
    \ \"0\"\n    else\n        str = string_sequence(n-1)\n        str = str + \"\
    \ \"\n        str = str + string_sequence(n)\n        return str\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.", "    string_sequence\
    \ = \"\"\n    for i = 1 to n do\n        string_sequence = string_sequence + \"\
    \ \" + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers containing the number of\
    \ times each string appears in the vector.\nFor example, if the input vector is\
    \ [\"a\", \"b\", \"c\", \"a\"], the output vector should be [1, 1, 2, 1].\nHint:\
    \ Use a for loop to iterate through the input vector.", "    string_sequence =\
    \ \"\"\n    for i = 1:n\n        string_sequence = string_sequence + \" \" + to_string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the product of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the maximum of the integers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns the minimum of the integers in the vector.\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nWrite a function that takes a vector of integers\
    \ and returns the product of the squares of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the maximum of the squares\
    \ of the integers in the vector.\nWrite a function that takes a vector of integers\
    \ and returns the minimum of the squares of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the sum of the cubes\
    \ of the integers in the vector.\nWrite a function that takes a vector of integers\
    \ and returns the product of the cubes of the integers in the vector.\nWrite a\
    \ function that takes a vector of integers and returns the maximum of the cubes\
    \ of the integers in the vector.\nWrite a function that takes a vector of integers\
    \ and returns the minimum of the cubes of the integers in the vector.\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the cubes of the integers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns the product of the squares of the cubes of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the maximum of the squares of the cubes of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the minimum of the squares\
    \ of the cubes of the integers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns the sum of the cubes of the squares of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the product of the cubes of the squares of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the maximum of the cubes\
    \ of the squares of the integers in the vector.\nWrite a function that takes a\
    \ vector of integers and returns the minimum of the cubes of the squares of the\
    \ integers in the vector.\nWrite a function that takes a vector of integers and\
    \ returns the sum of the cubes of the cubes of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the product of the cubes\
    \ of the cubes of the integers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns the maximum of the cubes of the cubes of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the minimum of the cubes of the cubes of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the cubes of the squares of the integers in the vector.\nWrite a function\
    \ that takes a vector of integers and returns the product of the squares of the\
    \ cubes of the squares of the integers in the vector.\nWrite a function that takes\
    \ a vector of integers and returns the maximum of the squares of the cubes of\
    \ the squares of the integers in the vector.\n", "    if n == 0 \n        return\
    \ \"0\" \n    else \n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the string\
    \ \"The first $n numbers in the Fibonacci sequence are \"", "    \n    string\
    \ = \"\"\n    \n    for i = 1:n\n        string = string + i\n    end\n    \n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should only take one argument.\
    \ \nThe function should return a number.", "    string_seq = \"\"\n    for i =\
    \ 1:n\n        string_seq = string_seq + string(i)\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in that string in reverse order.\nFor example, string_sequence(\"\
    hello\") should return \"olleh\"\nHint: Use reverse() function", "    string_seq\
    \ = String[]\n    for i in 0 .. n-1 do\n        string_seq[i] = i\n    return\
    \ string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()", "    string =\
    \ \"\"\n    for i = 1:n\n        string = string + i\n    end\n    return string\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a string\
    \ where each character is repeated n times. For example, if the input string is\
    \ \"hello\", the output string should be \"hehehehehehehe\".", "    string_seq\
    \ = String[]\n    for i = 1:n\n        string_seq += String(i)\n    end\n    return\
    \ string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nHint: Use length() function", "    string_seq\
    \ = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n    end\n\
    \    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes an integer $n$ and returns the string \"0 1 2 3 4 5\" up\
    \ to $n$.", "    \n    string = \"\"\n    for i = 1 to n do\n        string =\
    \ string + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>",
  "    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited ", "    string_seq = \"\"\n    for i = n\n    do\n        string_seq\
    \ = string_seq + string(i)\n    done\n    return string_seq\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    string_seq = \"\"\n    for i in 0 .. n\n\
    \        string_seq = string_seq + string(i)\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a number to a string with leading zeros\
    \ up to a specified length. For example, converting the number 12 to \"0012\".",
  "    if n<0\n        error(\"n must be positive\")\n    elseif n==0\n        return\
    \ \"0\"\n    else\n        string_sequence(n-1)+\", \"+string_sequence(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function called string_sequence\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should raise an error if n is not positive.\nThe\
    \ function should raise an error if n is 0.\nThe function should raise an error\
    \ if n is greater than the length of the string.", "    if n < 0\n        error(\"\
    n must be positive\")\n    else if n == 0\n        return \"0\"\n    else\n  \
    \      return string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that takes a number n and returns the string \"n is a power of two\"\
    \ if n is a power of two. Otherwise, return \"n is not a power of two\".", " \
    \   if n==0\n        return \"0\"\n    else if n==1\n        return \"1\"\n  \
    \  else\n        return string_sequence(n-1) + \", \" + string_sequence(n-2) +\
    \ \", \" + string_sequence(n-3) + \", \" + string_sequence(n-4) + \", \" + string_sequence(n-5)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of integers containing the number of times each string appears in the vector.\n\
    For example, given [\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"], your function should\
    \ return [1, 1, 2, 1, 1, 1].\nHint: You can use the function count from StatsBase.",
  "    \n    string_sequence = \" \"\n    for n in 1:n\n        string_sequence =\
    \ string_sequence + \" \" + string(n)\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which takes a number n and returns the string \"n!\".\n\
    Hint: use the factorial function.", "    string_seq = String[]\n    for i = 1:n\n\
    \        string_seq[i] = \"0\"\n    end\n    return string_seq.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    string = \"\"\n    for i = 1 to n do\n        string =\
    \ string + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a number n and returns the string \"0 1 2 3 4 5\" up to\
    \ and including n.\nWrite a function that takes a number n and returns the string\
    \ \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes a number\
    \ n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function\
    \ that takes a number n and returns the string \"0 1 2 3 4 5\" up to and including\
    \ n.\nWrite a function that takes a number n and returns the string \"0 1 2 3\
    \ 4 5\" up to and including n.\nWrite a function that takes a number n and returns\
    \ the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes\
    \ a number n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite\
    \ a function that takes a number n and returns the string \"0 1 2 3 4 5\" up to\
    \ and including n.\nWrite a function that takes a number n and returns the string\
    \ \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes a number\
    \ n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function\
    \ that takes a number n and returns the string \"0 1 2 3 4 5\" up to and including\
    \ n.\nWrite a function that takes a number n and returns the string \"0 1 2 3\
    \ 4 5\" up to and including n.\nWrite a function that takes a number n and returns\
    \ the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes\
    \ a number n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite\
    \ a function that takes a number n and returns the string \"0 1 2 3 4 5\" up to\
    \ and including n.\nWrite a function that takes a number n and returns the string\
    \ \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes a number\
    \ n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function\
    \ that takes a number n and returns the string \"0 1 2 3 4 5\" up to and including\
    \ n.\nWrite a function that takes a number n and returns the string \"0 1 2 3\
    \ 4 5\" up to and including n.\nWrite a function that takes a number n and returns\
    \ the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes\
    \ a number n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite ",
  "    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if n == 0 \n        return \"0\" \n    else \n    \
    \    return string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.",
  "    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use length() function",
  "    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of characters in the string.\nHint: Use length()", "    string_sequence\
    \ = \" \"\n    for i = 1:n\n        string_sequence = string_sequence + i\n  \
    \  end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite a function that returns\
    \ the first n Fibonacci numbers. \nHint: Use a while loop and a recursive function.",
  "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings. Each string in the returned\
    \ vector is the string representation of each integer in the input vector. For\
    \ example, if the input vector is [1,2,3] the returned vector should be [\"1\"\
    ,\"2\",\"3\"].", "    if n < 0\n        error(\"n must be positive\")\n    else\
    \ if n == 0\n        return \"0\"\n    else\n        str = string_sequence(n-1)\n\
    \        str = str + \" \"\n        str = str + str\n        return str\nend\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns a vector of strings\
    \ containing the first n numbers in the vector in space-delimited form.", "  \
    \  if n==0 then return \"0\"\n    else return string_sequence(n-1) + \", \" +\
    \ string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the string with all the letters in upper case. \nFor example if the\
    \ input is \"Hello World\" the output should be \"HELLO WORLD\".", "    if n ==\
    \ 0 \n        then return \"0\"\n    else \n        string_sequence(n - 1)\n \
    \       ++ \" \" ++ (string_sequence(n - 1))\nend\n</code>\n<|/ a tags=julia,recursion,string\
    \ |>\n<| c |>\nThis doesn't seem to work. `string_sequence(5)` returns `\"0 1\
    \ 2 3 4 5\"` instead of `\"0 1 2 3 4 5 0 1 2 3 4 5\"`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug in the code. Thanks for pointing it out.\n<|/ c |>\n<| a tags=julia,recursion,string\
    \ |>\n<code>", "    string = \"\"\n    for i = 1 to n do\n        string = string\
    \ + \" \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.4>", "    if n == 0\n        return \"0\"\n    else if\
    \ n == 1\n        return \"1\"\n    else\n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-2) \nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a number n and returns the nth Fibonacci number.", "    string_seq = String[]\n\
    \    for x in 0:n-1\n        string_seq.append(x)\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<text>\nThe function string_sequence is now defined. Let's\
    \ try it out on a few examples:", "    string_seq = String[]()\n    for i = 1:n\n\
    \        string_seq.append(i::Int64)\n    return string_seq.join(\" \")\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. \nFor example, if the vector is [1,2,3,4,5], the function\
    \ should return 15.", "    if n < 0\n        error(\"n must be positive\")\n \
    \   else if n == 0\n        return \"0\"\n    else\n        string_sequence(n\
    \ - 1) + \" \" ++ string_sequence(n)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    \" Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\"\n   \
    \ \n    if n == 0 \n        \" Return an empty string.\"\n        return \"\"\n\
    \    \n    \" Initialize a variable called result to an empty string.\"\n    result\
    \ = \"\"\n    \n    \" Initialize a variable called i to 1.\"\n    i = 1\n   \
    \ \n    \" While i is less than or equal to n, append a space to the result string\
    \ and increment i.\"\n    while i <= n \n        result = result + \" \" + i\n\
    \        i = i + 1\n    \n    \" Return the result string.\"\n    return result\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a number n and returns\
    \ the string \"0 1 2 3 4 5\".", "    if n < 0\n        error(\"n must be positive\"\
    )\n    else if n == 0\n        return \"0\"\n    else if n == 1\n        return\
    \ \"1\"\n    else\n        return string_sequence(n - 1) + \" \" + string_sequence(n)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nThe function should raise an error if n is not positive.\n\
    Hint: Use recursion.", "    string_sequence = \"\"\n    for i = 1:n\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nHint: Use length() function.", "    if n<0\n \
    \       error(\"n must be positive\")\n    else if n==0\n        return \"0\"\n\
    \    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a number n and returns the string \"n!\"\
    .\nFor example, string_sequence(5) returns \"5!\".\nHint: Use recursion.", " \
    \   \n    string = \"\"\n    for i = 1 to n do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a string containing\
    \ all the numbers from 0 to n inclusive.\nHint: Use a for loop.", "    string_seq\
    \ = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n    end\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n",
  "    string_seq = String[]\n    for i = n-1, 0, -1 do\n        string_seq[(i-1)%n]\
    \ = i\n    end\n    return join(string_seq,\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    @time string_sequence(10)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of words in that string.", "    \"\"\"\" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1\
    \ 2 3 4 5\"\n    \"\"\"", "    string_seq = \"\"\n    for i = 1:n\n        string_seq\
    \ = string_seq + string(i)\n    end\n    return string_seq\nend", "    if n ==\
    \ 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\n    else\n\
    \        return string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of times the\
    \ string \"hello\" appears in the string.", "    string_seq = String[]\n    for\
    \ i in 0:n\n        push!(string_seq,i)\n    end\n    return join(\" \",string_seq)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nWrite a function that takes a number n and returns the string\
    \ \"n!!\".\nWrite a function that takes a number n and returns the string \"n!!!!\"\
    .\nWrite a function that takes a number n and returns the string \"n!!!!!\".\n\
    Write a function that takes a number n and returns the string \"n!!!!!!\".\nWrite\
    \ a function that takes a number n and returns the string \"n!!!!!!!\".", "  \
    \  string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + string(i)\n\
    \    return string\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", " \
    \   string = \"\"\n    for i = n\n    do\n        string += i\n        string\
    \ += \" \"\n    done\n    return string\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\nI like using mapslices for these kinds of problems:\n<code>\nmapslices(x->string(x),\
    \ 0:5, dims=2)\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", "   \
    \ \" Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\"\n    \n    \" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 ", "    \n    string = \"\"\n    for i = 1 to n do\n\
    \        string = string + \" \" + i\n    end\n    return string\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(0)\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    string_sequence\
    \ = \" \"\n    for n in 0 .. n\n        string_sequence = string_sequence + \"\
    \ \" + string(n)\n    return string_sequence\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"\
    0 1 2 3 4\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn Julia 1.5\
    \ you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=1 |>\n<| a |>\nIn Julia 1.5 you can do:\n\
    <code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a tags=julia,string dscore=1\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"\
    0 1 2 3 4\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.5\
    \ you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>", "    \n    string = \"\"\n    for i = 1:n\n        string\
    \ = string + \" \" + string(i)\n    end\n    return string\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in lower case. \nFor example, string_lower(\"Hello World\") should return \"\
    hello world\".", "    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nThe function string_sequence is now available\
    \ in the namespace JuliaStrings.", "    if n == 0 \n        return \"0\" \n  \
    \  else \n        string_sequence(n - 1) + \" \" + to_string(n)\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nThe function string_sequence\
    \ is now available in the Julia REPL.", "    if n < 0\n        error(\"n must\
    \ be positive\")\n    else if n == 0\n        return \"0\"\n    else\n       \
    \ return string_sequence(n-1) + \", \" + string_sequence(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n Fibonacci numbers. \nThe Fibonacci numbers\
    \ are defined as:", "    string_seq = String[]\n    for i = 1:n\n        string_seq\
    \ += String(i)\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all the characters in lower case. For example, \"\
    Hello World\" becomes \"hello world\".", "    \n    string = \"\"\n    for i =\
    \ 1:n\n        string = string + \" \" + i\n    end\n    return string\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a vector of strings containing the integers separated\
    \ by spaces.", "    string_seq = \"\"\n    for i = 1 to n do\n        string_seq\
    \ = string_seq + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers containing the number of\
    \ times each string appears in the vector.", "    if n == 0\n        return \"\
    0\"\n    else\n        string_sequence(n-1) + \", \" + to_string(n-1)\nend\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in it.",
  "    string = \"\"\n    for i = n-1 downto 1 do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number generator function.", "    \"\"\"\"\
    \ Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1\
    \ 2 3 4 5\"\n    \"\"\"", "    \"\"\"\" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \"\"\"", "    if n <\
    \ 0\n        error(\"n must be positive\")\n    else if n == 0\n        return\
    \ \"0\"\n    else if n == 1\n        return \"1\"\n    else\n        return string_sequence(n\
    \ - 1) + \" \" + (string_sequence(n - 1))\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop to iterate over all numbers\
    \ from 2 to n and check whether they are prime or not. \nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n and check whether they are prime or\
    \ not. \nHint: Use a recursive function to solve this problem. \nHint: Use a while\
    \ loop to iterate over all numbers from 2 to n and check whether they are prime\
    \ or not. \nHint: Use a recursive function to solve this problem. \nHint: Use\
    \ a while loop to iterate over all numbers from 2 to n and check whether they\
    \ are prime or not. \nHint: Use a recursive function to solve this problem. \n\
    Hint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: ", "    string_seq = String[]\n    for i = 1:n\n        string_seq[i]\
    \ = i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nFor example, string_length(\"\
    Hello World\") should return 11.", "    if n == 0\n        \"\"\n    else\n  \
    \      string_sequence(n-1) + \", \" + to_string(n)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nThe function string_sequence\
    \ is now available in the Julia REPL.", "    string_seq = \"\"\n    for i = 1\
    \ to n do\n        string_seq = string_seq + i\n    end\n    return string_seq\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in lower case.\nFor example \"Hello World\" -> \"hello\
    \ world\"", "    string_sequence = \"\"\n    for i = n\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    return string_sequence\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn Julia 1.5.0 you can use the following\
    \ code:\n<code>", "    \n    string = \"\"\n    for i = 1:n\n        string =\
    \ string + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ array of numbers and returns the sum of the numbers in the array.\nHint: Use\
    \ a for loop to iterate through the array.", "    string_sequence = \"\"\n   \
    \ for i = 1 to n do\n        string_sequence = string_sequence + \" \" + string(i)\n\
    \    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>", "    \n    string = \"\
    \"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ take two arguments: n and m. n and m should be integers greater than 0.\nThe\
    \ function should return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should return an empty string if n is\
    \ less than or equal to 0.\nThe function should return an empty string if m is\
    \ less than or equal to 0.\nThe function should return an empty string if n and\
    \ m are both less than or equal to 0.\nThe function should return an empty string\
    \ if n and m are both greater than 0.\nThe function should return an empty string\
    \ if n and m are both equal to 0.\nThe function should return an empty string\
    \ if n is greater than 0 and m is greater than 0.\nThe function should return\
    \ an empty string if n is equal to 0 and m is equal to 0.\nThe function should\
    \ return an empty string if n is greater than 0 and m is equal to 0.\nThe function\
    \ should return an empty string if n is equal to 0 and m is greater than 0.\n\
    The function should return an empty string if n is greater than 0 and m is less\
    \ than 0.\nThe function should return an empty string if n is less than 0 and\
    \ m is greater than 0.\nThe function should return an empty string if n is less\
    \ than 0 and m is less than 0.\nThe function should return an empty string if\
    \ n is less than 0 and m is equal to 0.\nThe function should return an empty string\
    \ if n is less than 0 and m is less than 0.\nThe function should return an empty\
    \ string if n is equal to 0 and m is less than 0.\nThe function should return\
    \ an empty string if n is equal to 0 and m is equal to 0.\nThe function should\
    \ return an empty string if n is equal to 0 and m is less than 0.\nThe function\
    \ should return an empty string if n is equal to 0 and m is equal to 0.\nThe function\
    \ should return an empty string if n is greater than 0 and m is greater than 0.\n\
    The function should return an empty string if n is greater than 0 and m is less\
    \ than 0.\nThe function should return an empty string if n is greater than 0 and\
    \ m is equal to 0.\nThe function should return an empty string if n is greater\
    \ than 0 and m is less than 0.\nThe function should return an empty string if\
    \ n is less than 0 and m is greater than 0.\nThe function should return an empty\
    \ string if n is less than 0 and m is less than 0.\nThe function should return\
    \ an empty string if n is less than 0 and m is equal to 0.\nThe function should\
    \ return an empty string if n is ", "    if n == 0 \n        return \"0\" \n \
    \   else \n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a number n and returns the string \"n!\"\
    .\nHint: You can use the factorial function from the math package.", "    \"\"\
    \"\" Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"", "    string_sequence = \"\"\n    for i = n\n\
    \    do\n        string_sequence = string_sequence + \" \" + to_string(i)\n  \
    \  done\n    return string_sequence\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>", "    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string.\nFor example, string_length(\"hello\") should return 5.", "    \n  \
    \  string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use length() function",
  "    string_seq = String[]\n    for i in 0 .. n\n        string_seq[i] = i\n   \
    \ return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.", "    string_seq = String[]\n    for\
    \ i = 1 to n do\n        string_seq.append(i.toString())\n    return string_seq.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the first n prime numbers. \nHint: Use a for loop and\
    \ a prime number test."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
