language: jl
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp11jcu4ss.jl:17\nin expression starting at /tmp/tmp11jcu4ss.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 2: Write a function that checks if a dictionary\
    \ is empty or not. \nThe function should return true if the dictionary is empty,\
    \ and false if it is not.\nExamples:\n>>> check_dict_empty(Dict())\ntrue\n>>>\
    \ check_dict_empty(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nfalse\n>>>\
    \ check_dict_empty(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\ntrue\n>>> check_dict_empty(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_dict_empty(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\ntrue\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe5xpas_0.jl:17\nin expression starting at /tmp/tmpe5xpas_0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict_empty(dict)\n        \n        for key in dict\n   \
    \         if !is_str_lower(key) || !is_str_upper(key)\n                return\
    \ false\n        end\n        \n        return true\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary\
    \ as an argument and returns the number of keys that are strings in lower case\
    \ or upper case.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr0cn9d7c.jl:17\nin expression starting at /tmp/tmpr0cn9d7c.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzamgj360.jl:17\nin expression starting at /tmp/tmpzamgj360.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values in upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty. \nThe function should return a new dictionary\
    \ if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqxy2y0n_.jl:17\nin expression starting at /tmp/tmpqxy2y0n_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    true_keys = Set()\n\
    \    false_keys = Set()\n    for key in dict\n        if islower(key)\n      \
    \      true_keys.add(key)\n        else\n            false_keys.add(key)\n   \
    \ end\n    \n    return true_keys == false_keys\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a new string where all \n\
    occurrences of \"A\" have been replaced with \"B\" and \"B\" have been replaced\
    \ \nwith \"A\". \nExamples:\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\
    \"BBBB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ replace_all(String(\"AABB\"), \"B\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"\
    AABB\"), \"A\", \"A\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"B\", \"\
    B\")\n\"AABB\"\n>>> replace_all(String(\"AABB\"), \"A\", \"B\")\n\"BBBB\"\n>>>\
    \ \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiz6bcuuk.jl:17\nin expression starting at /tmp/tmpiz6bcuuk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if !is_string(k)\n\
    \                return false\n            if !is_string(v)\n                return\
    \ false\n        end\n        return true\n    else\n        return false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph2xzn59e.jl:17\nin expression starting at /tmp/tmph2xzn59e.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            if isupper(key)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as input and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty. \nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \" => \" \")\nDict()\n>>> Dict(\"\
    \ \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" =>\
    \ \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"\
    a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>>\
    \ Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"\
    a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \"\
    \ => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"\
    a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\"\
    )\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\"\
    \ \" => \"a\")\nDict(\"a\" => \"a\")\n>>> Dict(\" \" => \"a\")\nDict(\"a\" =>\
    \ \"a\")\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprupu97gz.jl:17\nin expression starting at /tmp/tmprupu97gz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ converted to lower case and all values are converted to upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is not empty. \nThe function\
    \ should return a new dictionary if the given dictionary is empty.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptl1uwdm8.jl:17\nin expression starting at /tmp/tmptl1uwdm8.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            elseif isupper(key)\n\
    \                return false\n            else\n                return true\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns a new string with all the characters\
    \ in lower case and all the characters in upper case. \nExamples:\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n>>> capitalize(\"\
    apple\")\n\"Apple\"\n>>> \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaa0kl4fe.jl:17\nin expression starting at /tmp/tmpaa0kl4fe.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are converted\
    \ to upper case.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp14l1b7du.jl:17\nin expression starting at /tmp/tmp14l1b7du.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a dictionary, return True if all keys are strings in lower \n    case or all\
    \ keys are strings in upper case, else return False.\n    The function should\
    \ return False is the given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj30061m3.jl:17\nin expression starting at /tmp/tmpj30061m3.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary where all keys are converted to upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is not empty. \nThe function\
    \ should return an empty dictionary if the given dictionary is empty.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"A\" => \"apple\", \"\
    B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"\
    apple\")\nDict(\"A\" => \"apple\", 8 => \"banana\", \"A\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"NAME\"\
    \ => \"John\", \"AGE\" => \"36\", \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkk1uk_eb.jl:17\nin expression starting at /tmp/tmpkk1uk_eb.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcpl1mon9.jl:17\nin expression starting at /tmp/tmpcpl1mon9.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        elseif isupper(k)\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in that string. \nThe function should\
    \ return 0 if the given string is empty.\nExamples:\n>>> count_words(\"Hello World\"\
    )\n2\n>>> count_words(\"Hello World!\")\n0\n>>> count_words(\"Hello World!\")\n\
    0\n>>> count_words(\"Hello World! How are you?\")\n5\n>>> count_words(\"Hello\
    \ World! How are you? I am fine.\")\n5\n>>> count_words(\"Hello World! How are\
    \ you? I am fine. I am fine. I am fine. I am fine.\")\n10\n>>> count_words(\"\
    Hello World! How are you? I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\
    \ I am fine. I am fine. I am fine. I am fine. I am fine\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ghrs5ps.jl:17\nin expression starting at /tmp/tmp8ghrs5ps.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        elseif\
    \ isupper(k)\n            return true\n        else\n            return false\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnclrua5g.jl:17\nin expression starting at /tmp/tmpnclrua5g.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_j453j2p.jl:17\nin expression starting at /tmp/tmp_j453j2p.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3sh477hs.jl:17\nin expression starting at /tmp/tmp3sh477hs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp11jcu4ss.jl:17\nin expression starting at /tmp/tmp11jcu4ss.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ converted to upper case.\nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the given dictionary is not of type Dict.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\", \"a\" =>\
    \ \"apple\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8tlkh1cv.jl:17\nin expression starting at /tmp/tmp8tlkh1cv.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptcecm8g1.jl:17\nin expression starting at /tmp/tmptcecm8g1.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is not empty. \nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu4eti3w5.jl:17\nin expression starting at /tmp/tmpu4eti3w5.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptcecm8g1.jl:17\nin expression starting at /tmp/tmptcecm8g1.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2kmd3tbs.jl:17\nin expression starting at /tmp/tmp2kmd3tbs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        elseif\
    \ isupper(k)\n            return true\n        else\n            return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp93qw_zcd.jl:17\nin expression starting at /tmp/tmp93qw_zcd.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if islower(k)\
    \ || isupper(k)\n                return true\n            else\n             \
    \   return false\n        end\n    end\n    return false\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgnrjukdd.jl:17\nin expression starting at /tmp/tmpgnrjukdd.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ with the keys in lower case and the values in upper case.\nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\"\
    , \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n</text>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp5rmlm23.jl:17\nin expression starting at /tmp/tmpp5rmlm23.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        elseif\
    \ isupper(k)\n            return true\n        else\n            return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ where all keys are strings in lower case and all values are strings in upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n</text>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphbdbeswk.jl:17\nin expression starting at /tmp/tmphbdbeswk.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv8beo2gz.jl:17\nin expression starting at /tmp/tmpv8beo2gz.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3sh477hs.jl:17\nin expression starting at /tmp/tmp3sh477hs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        elseif isupper(k)\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwygc76p6.jl:17\nin expression starting at /tmp/tmpwygc76p6.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv8beo2gz.jl:17\nin expression starting at /tmp/tmpv8beo2gz.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n\
    \    case or all keys are strings in upper case, else return False.\n    The function\
    \ should return False is the given dictionary is empty.\n    Examples:\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n \
    \   >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67ro5np_.jl:17\nin expression starting at /tmp/tmp67ro5np_.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty\n        return false\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary with the keys in lower case and\
    \ the keys in upper case.\nThe function should return a new dictionary if the\
    \ given dictionary is empty, or if the given dictionary is not empty, the function\
    \ should return a new dictionary with the keys in lower case and the keys in upper\
    \ case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpofkflplq.jl:17\nin expression starting at /tmp/tmpofkflplq.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp11jcu4ss.jl:17\nin expression starting at /tmp/tmp11jcu4ss.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppj4r40_k.jl:17\nin expression starting at /tmp/tmppj4r40_k.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ where the keys are all strings in lower case and the values are all strings\
    \ in upper case. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"APPLE\", \"A\" =>\
    \ \"BANANA\", \"B\" => \"BANANA\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\" => \"APPLE\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n</text>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4r03ewpg.jl:17\nin expression starting at /tmp/tmp4r03ewpg.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2kmd3tbs.jl:17\nin expression starting at /tmp/tmp2kmd3tbs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case and all values are converted to lower case.\nThe function should return\
    \ a new dictionary if the given dictionary is not empty, or return an empty dictionary\
    \ if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzj48cvy1.jl:17\nin expression starting at /tmp/tmpzj48cvy1.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return true\n\
    \        elseif isupper(k)\n            return true\n        else\n          \
    \  return false\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1s48n_88.jl:17\nin expression starting at /tmp/tmp1s48n_88.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string. \nExamples:\n>>> count_chars(\"Hello World\")\n12\n>>> count_chars(\"\
    Hello World!\")\n11\n>>> count_chars(\"Hello World!!\")\n10\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n>>> count_chars(\"Hello World!!!\")\n9\n>>> count_chars(\"\
    Hello World!!!\")\n9\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdd3fxi2s.jl:17\nin expression starting at /tmp/tmpdd3fxi2s.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3sh477hs.jl:17\nin expression starting at /tmp/tmp3sh477hs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        true\n    else\n        false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo2bg1d_8.jl:17\nin expression starting at /tmp/tmpo2bg1d_8.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3sh477hs.jl:17\nin expression starting at /tmp/tmp3sh477hs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times the\
    \ string appears in the string. \nExamples:\n>>> count_string(\"The quick brown\
    \ fox jumps over the lazy dog\")\n3\n>>> count_string(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n>>> count_string(\"The quick brown fox jumps over the\
    \ lazy dog\")\n1\n>>> count_string(\"The quick brown fox jumps over the lazy dog\"\
    )\n2\n>>> count_string(\"The quick brown fox jumps over the lazy dog\")\n1\n>>>\
    \ count_string(\"The quick brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n>>> count_string(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n>>> count_string(\"The quick brown fox jumps over the\
    \ lazy dog\")\n0\n>>> count_string(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n>>> count_string(\"The quick brown fox jumps over the lazy dog\")\n0\n>>>\
    \ count_string(\"The quick brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n>>> count_string(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n>>> count_string(\"The quick brown fox jumps over the\
    \ lazy dog\")\n0\n>>> count_string(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n>>> count_string(\"The quick brown fox jumps over the lazy dog\")\n0\n>>>\
    \ count_string(\"The quick brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n>>> count_string(\"The \nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoqt1qiu8.jl:17\nin expression starting at /tmp/tmpoqt1qiu8.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nThe function should return a new dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict()\nDict()\n>>> Dict(1 => \"apple\"\
    , 2 => \"banana\")\nDict(1 => \"apple\", 2 => \"banana\")\n>>> Dict(1 => \"apple\"\
    , 2 => \"banana\", 3 => \"apple\")\nDict(1 => \"apple\", 2 => \"banana\", 3 =>\
    \ \"apple\")\n>>> Dict(1 => \"apple\", 2 => \"banana\", 3 => \"apple\", 4 => \"\
    banana\")\nDict(1 => \"apple\", 2 => \"banana\", 3 => \"apple\", 4 => \"banana\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6s91fmyg.jl:17\nin expression starting at /tmp/tmp6s91fmyg.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values in upper case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcqz3ebf2.jl:17\nin expression starting at /tmp/tmpcqz3ebf2.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty\n        return false\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times the string occurs in the string. \nExamples:\n\
    >>> count_string(\"The quick brown fox jumps over the lazy dog\")\n4\n>>> count_string(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The quick brown fox jumps over\
    \ the lazy dog\"\n>>> count_string(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The quick brown fox jumps over the lazy dog\"\n>>> count_string(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The quick brown fox jumps over the lazy\
    \ dog\"\n>>> count_string(\"The quick brown fox jumps over the lazy dog\")\n\"\
    The quick brown fox jumps over the lazy dog\"\n>>> count_string(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The quick brown fox jumps over the lazy dog\"\
    \n>>> count_string(\"The quick brown fox jumps over the lazy dog\")\n\"The quick\
    \ brown fox jumps over the lazy dog\"\n>>> count_string(\"The quick brown fox\
    \ jumps over the lazy dog\")\n\"The quick brown fox jumps over the lazy dog\"\n\
    >>> count_string(\"The quick brown fox jumps over the lazy dog\")\n\"The quick\
    \ brown fox jumps over the lazy dog\"\n>>> count_string(\"The quick brown fox\
    \ jumps over the lazy dog\")\n\"The quick brown fox jumps over the lazy dog\"\n\
    >>> count_string(\"The quick brown fox jumps over the lazy dog\")\n\"The quick\
    \ brown fox jumps over the lazy dog\"\n>>> count_string(\"The quick brown fox\
    \ jumps over the lazy dog\")\n\"The quick brown fox jumps over the lazy dog\"\n\
    >>> count_string(\"The quick brown fox jumps over the lazy dog\")\n\"The quick\
    \ brown fox jumps over the lazy dog\"\n>>> count_string(\"The quick brown fox\
    \ jumps over the lazy dog\")\n\"The quick brown fox jumps over the lazy dog\"\n\
    >>> count_string(\"The quick brown fox jumps over the lazy dog\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd4kbap3u.jl:17\nin expression starting at /tmp/tmpd4kbap3u.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the dictionary\
    \ is not of type Dict.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9sxxc5ry.jl:17\nin expression starting at /tmp/tmp9sxxc5ry.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb1r2arad.jl:17\nin expression starting at /tmp/tmpb1r2arad.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the keys in upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty. \nThe function should return a new dictionary\
    \ if the given dictionary has keys that are not strings. \nThe function should\
    \ return a new dictionary if the given dictionary has keys that are not strings\
    \ in lower case or not in upper case. \nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprbgdc2vm.jl:17\nin expression starting at /tmp/tmprbgdc2vm.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg50dd24c.jl:17\nin expression starting at /tmp/tmpg50dd24c.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3sh477hs.jl:17\nin expression starting at /tmp/tmp3sh477hs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\n    \n    for\
    \ key in keys(dict)\n        if is_string(key) || is_string(string(key))\n   \
    \         return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 5\nWrite a function that takes a dictionary as an argument and\
    \ returns a new dictionary where all keys are strings in lower case and all values\
    \ are strings in upper case. \nThe function should return a new dictionary if\
    \ the given dictionary is empty or if the keys or values are strings.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy84u664_.jl:17\nin expression starting at /tmp/tmpy84u664_.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the keys in upper case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpro5bn_p9.jl:17\nin expression starting at /tmp/tmpro5bn_p9.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            if isupper(key)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower case or all keys are strings in\
    \ upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmb6olp__.jl:17\nin expression starting at /tmp/tmpmb6olp__.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbbjdzsaw.jl:17\nin expression starting at /tmp/tmpbbjdzsaw.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return true\n\
    \        elseif isupper(k)\n            return true\n        end\n    end\n  \
    \  return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary and returns a new dictionary with the keys in lower case and the\
    \ values as upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"APPLE\"\
    , \"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"\
    a\" => \"APPLE\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"JOHN\", \"age\" => \"36\", \"city\" => \"\
    HOUSTON\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4ej073sq.jl:17\nin expression starting at /tmp/tmp4ej073sq.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case.\nThe function should return a new dictionary if the given dictionary is\
    \ not empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplwge09_e.jl:17\nin expression starting at /tmp/tmplwge09_e.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            if isupper(key)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1qk6_84o.jl:17\nin expression starting at /tmp/tmp1qk6_84o.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty\n        return false\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_dict_keys(dict::Dict{String,\
    \ String})\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsm_tl4m4.jl:17\nin expression starting at /tmp/tmpsm_tl4m4.jl:17\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(value) || !is_string(key)\n                return false\n  \
    \      end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary with the keys in lower case and the values in upper case. \n\
    The function should return a new dictionary if the given dictionary is not empty.\
    \ \nThe function should return a new dictionary if the given dictionary is empty.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\"\
    \ => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb99272yi.jl:17\nin expression starting at /tmp/tmpb99272yi.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of times a character appears in the string. \n\
    Examples:\n>>> count_char(\"abracadabra\")\n5\n>>> count_char(\"abracadabra\"\
    )\n2\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n\
    >>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"\
    abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\"\
    )\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n\
    >>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"\
    abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\"\
    )\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n\
    >>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"\
    abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\"\
    )\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n\
    >>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"\
    abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\"\
    )\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n\
    >>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"\
    abracadabra\")\n0\n>>> count_char(\"abracadabra\")\n0\n>>> count_char(\"abracadabra\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp85kqonae.jl:17\nin expression starting at /tmp/tmp85kqonae.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 5\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values as upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty. \nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\" \" => \" \")\nDict()\n>>> Dict(\" \" => \" \", \"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    \ \" => \" \", \"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n\
    Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"\
    \ \" => \" \", \"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\" \" => \" \"\
    , \"name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\nDict(\"name\"\
    \ => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\" \" =>\
    \ \" \", \"state\" => \"NC\", \"zip\" => \"12345\")\nDict(\"state\" => \"NC\"\
    , \"zip\" => \"12345\")\n>>> Dict(\" \" => \" \")\nDict()\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp985bzh6k.jl:17\nin expression starting at /tmp/tmp985bzh6k.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    count_dict_case(dict::Dict{String, String})\n    Count the number\
    \ of keys in dict that are in lower case or upper case.\n    Examples:\n    >>>\
    \ count_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>>\
    \ count_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n    2\n    >>> count_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\"))\n    1\n    >>> count_dict_case(Dict(\"Name\" => \"John\",\
    \ \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>> count_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcbzvdt0l.jl:17\nin expression starting at /tmp/tmpcbzvdt0l.jl:17\n"
  stdout: ''
  timestamp: 1659823000
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return true\n        else if isupper(k)\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    dict_to_str(dict::Dict{String, String})\n\
    \    Given a dictionary, return a string that represents the keys and \n    values\
    \ of the dictionary in alphabetical order.\n    Examples:\n    >>> dict_to_str(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    \"a apple\\nb banana\"\n    >>> dict_to_str(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    \"A banana\\\
    na apple\\nB banana\"\n    >>> dict_to_str(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\n    \"a apple\\n8 banana\\na apple\"\n    >>> dict_to_str(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    \"Name John\\\
    nAge 36\\nCity Houston\"\n    >>> dict_to_str(Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\"))\n    \"STATE NC\\nZIP 12345\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn8rp1ipn.jl:17\nin expression starting at /tmp/tmpn8rp1ipn.jl:17\n"
  stdout: ''
  timestamp: 1659823001
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary with the keys in lower case and the values in upper case. \n\
    The function should return a new dictionary if the given dictionary is not empty.\
    \ \nThe function should return a new dictionary if the given dictionary is empty.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\"\
    \ => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp51e6lan5.jl:17\nin expression starting at /tmp/tmp51e6lan5.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptcecm8g1.jl:17\nin expression starting at /tmp/tmptcecm8g1.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    Examples:\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  \")\n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  The\")\n5\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox \nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptvx88z68.jl:17\nin expression starting at /tmp/tmptvx88z68.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty. \nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkvk642ff.jl:17\nin expression starting at /tmp/tmpkvk642ff.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in that string. \nExamples:\n\
    >>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello world\")\n10\n>>> count_chars(\"\
    hello world!\")\n11\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\")\n0\n\
    >>> count_chars(\" \")\n1\n>>> count_chars(\" \")\n1\n>>> count_chars(\"  \")\n\
    2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"  \")\n2\n>>> count_chars(\"\
    \  \")\n2\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps8vz3s43.jl:17\nin expression starting at /tmp/tmps8vz3s43.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(key) || !is_string(value)\n                return false\n  \
    \      end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n</text>\n<cell>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx0jp4op9.jl:17\nin expression starting at /tmp/tmpx0jp4op9.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptcecm8g1.jl:17\nin expression starting at /tmp/tmptcecm8g1.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty. \nThe function should\
    \ return an empty dictionary if the given dictionary is empty.\nExamples:\n>>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\n>>> check_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfspnybke.jl:17\nin expression starting at /tmp/tmpfspnybke.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a dictionary and returns a new dictionary with\
    \ the keys in lower case and the values in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the keys are not in\
    \ lower case or upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n</text>\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxi8fhbon.jl:17\nin expression starting at /tmp/tmpxi8fhbon.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a\
    \ string and returns the number of characters in that string.\nExamples:\n>>>\
    \ count_chars(\"Hello World\")\n12\n>>> count_chars(\"Hello World!\")\n11\n>>>\
    \ count_chars(\"Hello World!!\")\n12\n>>> count_chars(\"Hello World!!!\")\n13\n\
    >>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n\
    13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\"\
    )\n13\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp91_z9zij.jl:17\nin expression starting at /tmp/tmp91_z9zij.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzamgj360.jl:17\nin expression starting at /tmp/tmpzamgj360.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a new string with all the characters in lower case and\
    \ all the characters in upper case.\nExamples:\n>>> to_lower_case(\"Hello World\"\
    )\n\"hello world\"\n>>> to_lower_case(\"Hello World\")\n\"HELLO WORLD\"\n>>> to_lower_case(\"\
    Hello World\")\n\"hello world\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\
    \n>>> to_lower_case(\"Hello World\")\n\"Hello World\"\n>>> to_lower_case(\"Hello\
    \ World\")\n\"Hello World\"\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8xghm7f_.jl:17\nin expression starting at /tmp/tmp8xghm7f_.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return true\n        else if isupper(k)\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a new string\
    \ with each letter replaced by its position in the alphabet (starting with A=1,\
    \ B=2, C=3, etc.). For example, if the input string is \"apple\", the output should\
    \ be \"A3B2A1\".\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpagi_j1g_.jl:17\nin expression starting at /tmp/tmpagi_j1g_.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is not empty. \nExamples:\n\
    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\n>>> check_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph3q4th7x.jl:17\nin expression starting at /tmp/tmph3q4th7x.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if islower(k)\n\
    \                return false\n            if isupper(k)\n                return\
    \ false\n        end\n        return true\n    else\n        return false\n  \
    \  end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a new string with the first letter of each word capitalized.\nExamples:\n\
    >>> capitalize(\"Hello World\")\n\"Hello World\"\n>>> capitalize(\"Hello World!\"\
    )\n\"Hello World!\"\n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"\
    Hello World!\", false)\n\"Hello World!\"\n>>> capitalize(\"Hello World!\", true)\n\
    \"Hello World!\"\n>>> capitalize(\"Hello World!\", false)\n\"Hello World!\"\n\
    >>> capitalize(\"Hello World!\", true)\n\"Hello World!\"\n>>> capitalize(\"Hello\
    \ World!\", false)\n\"Hello World!\"\n>>> capitalize(\"Hello World!\", true)\n\
    \"Hello World!\"\n>>> capitalize(\"Hello World!\", false)\n\"Hello World!\"\n\
    >>> capitalize(\"Hello World!\", true)\n\"Hello World!\"\n>>> capitalize(\"Hello\
    \ World!\", false)\n\"Hello World!\"\n>>> capitalize(\"Hello World!\", true)\n\
    \"Hello World!\"\n>>> capitalize(\"Hello World!\", false)\n\"Hello World!\"\n\
    >>> capitalize(\"Hello World!\", true)\n\"Hello World!\"\n>>> capitalize(\"Hello\
    \ World!\", false)\n\"Hello World!\"\n>>> capitalize(\"Hello World!\", true)\n\
    \"Hello World!\"\n>>> capitalize(\"Hello World!\", false)\n\"Hello World!\"\n\
    >>> capitalize(\"Hello World!\", true)\n\"Hello World!\"\n>>> capitalize(\"Hello\
    \ World!\", false)\n\"Hello World!\"\n>>> capitalize(\"Hello World!\", true)\n\
    \"Hello World!\"\n>>> capitalize(\"Hello World!\", false)\n\"Hello World!\"\n\
    >>> capitalize(\"Hello World!\", true)\n\"Hello World!\"\n>>> capitalize(\"Hello\
    \ World!\", false)\n\"Hello World!\"\n>>> capitalize(\"Hello World!\", true)\n\
    \"Hello World!\"\n>>> capitalize(\"Hello World!\", false)\n\"Hello World!\"\n\
    >>> capitalize(\"Hello World!\", true)\n\"Hello World!\"\n>>> capitalize(\"Hello\
    \ World!\", false)\n\"Hello World!\"\n>>> capitalize(\"Hello World!\", true)\n\
    \"Hello World!\"\n>>> capitalize(\"Hello World!\", false)\n\"Hello World!\"\n\
    >>> capitalize(\"Hello World!\", true)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpodls57lq.jl:17\nin expression starting at /tmp/tmpodls57lq.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return true\n\
    \        elseif isupper(k)\n            return true\n        end\n    end\n  \
    \  return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary and returns a new dictionary with the keys in lower case and the\
    \ keys in upper case.\nThe function should return a new dictionary if the given\
    \ dictionary is empty or if the given dictionary has keys that are not strings\
    \ in lower case or upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(8 => \"banana\"\
    )\nDict(\"8\" => \"banana\")\n>>> Dict(8 => \"banana\", \"a\" => \"apple\")\n\
    Dict(\"8\" => \"banana\", \"a\" => \"apple\")\n>>> Dict(8 => \"banana\", \"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"8\" => \"banana\"\
    , \"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv_0jtlgi.jl:17\nin expression starting at /tmp/tmpv_0jtlgi.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values in upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty.\nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph7ut2c63.jl:17\nin expression starting at /tmp/tmph7ut2c63.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the given dictionary\
    \ has keys that are not strings or values that are not strings.\nExamples:\n>>>\
    \ Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n\
    >>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", 8 => \"banana\", \"a\" => \"apple\")\n\
    Dict(\"a\" => \"apple\", \"b\" => \"banana\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\", \"A\" => \"banana\", \"B\" => \"banana\", 8\
    \ => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"A\" => \"banana\", \"B\" => \"banana\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"b\" => \"banana\", \"a\"\
    \ => \"apple\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"b\" => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"A\"\
    \ => \"banana\", \"b\" => \"banana\", \"a\" => \"apple\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0oj2qu2k.jl:17\nin expression starting at /tmp/tmp0oj2qu2k.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        if isupper(k)\n            return false\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi4sodeon.jl:17\nin expression starting at /tmp/tmpi4sodeon.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        elseif isupper(k)\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in that string.\nExamples:\n>>>\
    \ count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"\
    apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>>\
    \ count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"\
    banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n\
    >>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"\
    apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>>\
    \ count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"\
    banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n\
    >>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"\
    apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>>\
    \ count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"\
    banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n\
    >>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"\
    apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>>\
    \ count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"\
    banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n\
    >>> count_chars(\"apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"\
    apple\")\n3\n>>> count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>>\
    \ count_chars(\"banana\")\n4\n>>> count_chars(\"apple\")\n3\n>>> count_chars(\"\
    banana\")\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx5macfnh.jl:17\nin expression starting at /tmp/tmpx5macfnh.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pfuk5v6.jl:17\nin expression starting at /tmp/tmp_pfuk5v6.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3sh477hs.jl:17\nin expression starting at /tmp/tmp3sh477hs.jl:17\n"
  stdout: ''
  timestamp: 1659822999
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values are already in upper case.\nExamples:\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"\
    B\" => \"banana\"))\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\"))\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\n>>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    ))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf4vtvre7.jl:17\nin expression starting at /tmp/tmpf4vtvre7.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if !is_string(k)\
    \ || !is_string(v)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary and returns a new dictionary where all keys are converted\
    \ to upper case.\nThe function should return a new dictionary if the given dictionary\
    \ is not empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n\
    Dict(\"A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"apple\", \"B\" => \"\
    banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    Dict(\"A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"Name\" => \"John\",\
    \ \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"NAME\" => \"John\", \"AGE\"\
    \ => \"36\", \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smut72e.jl:17\nin expression starting at /tmp/tmp4smut72e.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are converted\
    \ to upper case. \nThe function should return a dictionary where all keys are\
    \ converted to upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"apple\", \"\
    B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"\
    apple\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"NAME\" => \"John\"\
    , \"AGE\" => \"36\", \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n</text>\n\
    <cell>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjyg95e5t.jl:17\nin expression starting at /tmp/tmpjyg95e5t.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        error(\"check_dict_case: input is not\
    \ a dictionary\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkg02_27o.jl:17\nin expression starting at /tmp/tmpkg02_27o.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_keys(dict::Dict{String,\
    \ String})\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ilst5q5.jl:17\nin expression starting at /tmp/tmp7ilst5q5.jl:17\n"
  stdout: ''
  timestamp: 1659823002
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return false\n    \n    true_keys = Set()\n\
    \    false_keys = Set()\n    \n    for key in dict\n        if islower(key)\n\
    \            true_keys.add(key)\n        else\n            false_keys.add(key)\n\
    \    end\n    \n    return true_keys == false_keys\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a new string with all the\
    \ characters in lower case and all the characters in upper case. \nExamples:\n\
    >>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\
    \"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\
    \n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\
    \"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\
    \n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\
    \"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\
    \n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\
    \"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\
    \n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\
    \"hELLO wORLD\"\n>>> lowercase_and_uppercase(\"Hello World\")\n\"hELLO wORLD\"\
    \n>>> lowercase_and_uppercase(\"Hello World\")\n\"h\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpun7_6z4f.jl:17\nin expression starting at /tmp/tmpun7_6z4f.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgo8g33yi.jl:17\nin expression starting at /tmp/tmpgo8g33yi.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in that string.\n\
    Examples:\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n\
    5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  \")\n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  The\")\n5\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fo\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2qnzi50k.jl:17\nin expression starting at /tmp/tmp2qnzi50k.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return true\n\
    \        elseif isupper(k)\n            return true\n        else\n          \
    \  return false\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8rwfk_fr.jl:17\nin expression starting at /tmp/tmp8rwfk_fr.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2zls75za.jl:17\nin expression starting at /tmp/tmp2zls75za.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    count_dict_keys(dict::Dict{String,\
    \ String})\n    \n    Count the number of keys in a dictionary.\n    Examples:\n\
    \    >>> count_dict_keys(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    2\n\
    \    >>> count_dict_keys(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    2\n    >>> count_dict_keys(Dict(\"a\" => \"apple\", 8 => \"\
    banana\", \"a\" => \"apple\"))\n    2\n    >>> count_dict_keys(Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>> count_dict_keys(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprc8zgaqg.jl:17\nin expression starting at /tmp/tmprc8zgaqg.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                true\n            elseif isupper(key)\n \
    \               true\n            else\n                false\n            end\n\
    \        end\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary with the keys in lower case and the values in upper case.\nThe function\
    \ should return an empty dictionary if the given dictionary is empty.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8mazcxw0.jl:17\nin expression starting at /tmp/tmp8mazcxw0.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzamgj360.jl:17\nin expression starting at /tmp/tmpzamgj360.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        elseif isupper(k)\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the dictionary\
    \ is not of type Dict{String, String}.\nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsh8fr54w.jl:17\nin expression starting at /tmp/tmpsh8fr54w.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprm6vpo8z.jl:17\nin expression starting at /tmp/tmprm6vpo8z.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_dict_case(dict::Dict{String,\
    \ String})\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpetpvwawq.jl:17\nin expression starting at /tmp/tmpetpvwawq.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                true\n            elseif isupper(key)\n \
    \               true\n            else\n                false\n            end\n\
    \        end\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary where the keys are all strings in lower case and the values are all\
    \ strings in upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the keys or values are already in upper case.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgz3h3h_u.jl:17\nin expression starting at /tmp/tmpgz3h3h_u.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return true\n\
    \        elseif isupper(k)\n            return true\n        end\n    end\n  \
    \  return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ converted to upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the given dictionary is not of type Dict{String,\
    \ String}.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptecpadbr.jl:17\nin expression starting at /tmp/tmptecpadbr.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return true\n        else if isupper(k)\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7fb78vgh.jl:17\nin expression starting at /tmp/tmp7fb78vgh.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a string with all the characters in lower case and all the\
    \ characters in upper case. \nExamples:\n>>> lowercase(\"apple\")\n\"apple\"\n\
    >>> uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"apple\")\n\"APPLE\"\n>>> lowercase(\"banana\")\n\"banana\"\n>>>\
    \ uppercase(\"banana\")\n\"BANANA\"\n>>> lowercase(\"apple\")\n\"apple\"\n>>>\
    \ uppercase(\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpucsy90c2.jl:17\nin expression starting at /tmp/tmpucsy90c2.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a new string with\
    \ all the characters in lower case and all the characters in upper case removed.\
    \ \nExamples:\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO\
    \ wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO\
    \ wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO\
    \ wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO\
    \ wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO\
    \ wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO\
    \ wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO\
    \ wORLD\"\n>>> remove_all_case(\"Hello World\")\n\"hELLO wORLD\"\n>>> remove_all_case(\"\
    Hello World\")\n\"hELLO \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa4uzrffo.jl:17\nin expression starting at /tmp/tmpa4uzrffo.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3: Write a function that checks if\
    \ a dictionary is valid JSON\nWrite a function that checks if a dictionary is\
    \ valid JSON. Valid JSON consists of only strings, numbers, booleans, and null\
    \ values. A valid JSON dictionary is one that does not have any keys that are\
    \ not strings or numbers or booleans or null.\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoy5z_h3u.jl:17\nin expression starting at /tmp/tmpoy5z_h3u.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    for key in keys(dict)\n\
    \        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that checks if a dictionary is empty or not. \nThe function\
    \ should return true if the given dictionary is empty and false otherwise.\nExamples:\n\
    >>> check_dict_empty(Dict())\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\nfalse\n>>> check_dict_empty(Dict(\"a\" => \"apple\",\
    \ \"A\" => \"banana\", \"B\" => \"banana\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxl_ts5_d.jl:17\nin expression starting at /tmp/tmpxl_ts5_d.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n        return false\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a dictionary, return True if all keys\
    \ are strings in lower \n    case or all keys are strings in upper case, else\
    \ return False.\n    The function should return False is the given dictionary\
    \ is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzeg0dlsq.jl:17\nin expression starting at /tmp/tmpzeg0dlsq.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    count_dict_case(dict::Dict{String, String})\n    Count the number\
    \ of keys in dict that are in lower case or upper case.\n    Examples:\n    >>>\
    \ count_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>>\
    \ count_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n    2\n    >>> count_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\"))\n    1\n    >>> count_dict_case(Dict(\"Name\" => \"John\",\
    \ \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>> count_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpep6l14ox.jl:17\nin expression starting at /tmp/tmpep6l14ox.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    true_keys = Set()\n\
    \    false_keys = Set()\n    for key in dict\n        if islower(key)\n      \
    \      true_keys.add(key)\n        else\n            false_keys.add(key)\n   \
    \ end\n    \n    return true_keys == false_keys\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary where all keys are strings in lower case and all values are strings\
    \ in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"APPLE\", \"A\" =>\
    \ \"BANANA\", \"B\" => \"BANANA\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\" => \"APPLE\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n</text>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3dq9p5ew.jl:17\nin expression starting at /tmp/tmp3dq9p5ew.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 7: Write\
    \ a function that takes a dictionary and returns a new dictionary where all keys\
    \ are converted to lower case and all values are converted to upper case.\nThe\
    \ function should return an empty dictionary if the given dictionary is empty.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\"\
    \ => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\" \" => \" \")\nDict()\n\
    >>> Dict(\" \" => \" \", \"a\" => \" \")\nDict(\"a\" => \" \")\n>>> Dict(\" \"\
    \ => \" \", \"a\" => \" \", \"b\" => \" \")\nDict(\"a\" => \" \", \"b\" => \"\
    \ \")\n>>> Dict(\" \" => \" \", \"a\" => \" \", \"b\" => \" \", \"c\" => \" \"\
    )\nDict(\"a\" => \" \", \"b\" => \" \", \"c\" => \" \")\n>>> Dict(\" \" => \"\
    \ \", \"a\" => \" \", \"b\" => \" \", \"c\" => \" \", \"d\" => \" \")\nDict(\"\
    a\" => \" \", \"b\" => \" \", \"c\" => \" \", \"d\" => \" \")\n>>> Dict(\" \"\
    \ => \" \", \"a\" => \" \", \"b\" => \" \", \"c\" => \" \", \"d\" => \" \", \"\
    e\" => \" \")\nDict(\"a\" => \" \", \"b\" => \" \", \"c\" => \" \", \"d\" => \"\
    \ \", \"e\" => \" \")\n>>> Dict(\" \" => \" \", \"a\" => \" \", \"b\" => \" \"\
    , \"c\" => \" \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy5uplxwg.jl:17\nin expression starting at /tmp/tmpy5uplxwg.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a dictionary,\
    \ return True if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return False.\n    The function should return False is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6q3yflef.jl:17\nin expression starting at /tmp/tmp6q3yflef.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(key) || !is_string(value)\n                return false\n  \
    \      end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as input and returns a new\
    \ dictionary where all keys are strings in lower case and all values are strings\
    \ in upper case. \nThe function should return an empty dictionary if the given\
    \ dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"APPLE\"\
    , 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> check_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"JOHN\"\
    , \"Age\" => \"36\", \"City\" => \"HOUSTON\")\n>>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqz1h4qs5.jl:17\nin expression starting at /tmp/tmpqz1h4qs5.jl:17\n"
  stdout: ''
  timestamp: 1659823004
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                true\n            else\n                false\n\
    \        end\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n\
    \    case or all keys are strings in upper case, else return False.\n    The function\
    \ should return False is the given dictionary is empty.\n    Examples:\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n \
    \   >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1d668ob3.jl:17\nin expression starting at /tmp/tmp1d668ob3.jl:17\n"
  stdout: ''
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty. \nThe function should\
    \ return a new dictionary if the given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"\
    B\" => \"banana\"))\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\"))\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\n>>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    ))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcqlzezjq.jl:17\nin expression starting at /tmp/tmpcqlzezjq.jl:17\n"
  stdout: ''
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2i95vopg.jl:17\nin expression starting at /tmp/tmp2i95vopg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    true_keys = Set{String}(keys(dict))\n    false_keys = Set{String}(keys(Dict{String,\
    \ String}()))\n    \n    true_keys.issubset(true_keys) && false_keys.issubset(true_keys)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqky0ziwp.jl:17\nin expression starting at /tmp/tmpqky0ziwp.jl:17\n"
  stdout: ''
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty\n        return false\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxjb679k0.jl:17\nin expression starting at /tmp/tmpxjb679k0.jl:17\n"
  stdout: ''
  timestamp: 1659823005
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1jhdpnmy.jl:17\nin expression starting at /tmp/tmp1jhdpnmy.jl:17\n"
  stdout: ''
