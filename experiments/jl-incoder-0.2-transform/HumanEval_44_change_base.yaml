name: HumanEval_44_change_base
language: jl
prompt: "\"\"\"Change numerical base of input number x to base.\n    return string\
  \ representation after the conversion.\n    base numbers are less than 10.\n   \
  \ >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n \
  \   >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
  \ base::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
  \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
  \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
  \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
  \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\"\
  )\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7,\
  \ 8) == \"7\")\nend\n"
completions: ["    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    else\n        if base == 10\n            return\
    \ toString(x)\n        else\n            digits = digits(x)\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base", "    if base < 2 || base > 36\n        error(\"\
    Invalid base\")\n    end\n    \n    if base == 10\n        return string(x)\n\
    \    end\n    \n    if base == 2\n        return string(x * 2)\n    end\n    \n\
    \    if base == 3\n        return string(x * 3)\n    end\n    \n    if base ==\
    \ 4\n        return string(x * 4)\n    end\n    \n    if base == 5\n        return\
    \ string(x * 5)\n    end\n    \n    if base == 6\n        return string(x * 6)\n\
    \    end\n    \n    if base == 7\n        return string(x * 7)\n    end\n    \n\
    \    if base == 8\n        return string(x * 8)\n    end\n    \n    if base ==\
    \ 9\n        return string(x * 9)\n    end\n    \n    if base == 10\n        return\
    \ string(x * 10)\n    end\n    \n    if base == 11\n        return string(x *\
    \ 11)\n    end\n    \n    if base == 12\n        return string(x * 12)\n    end\n\
    \    \n    if base == 13\n        return string(x * 13)\n    end\n    \n    if\
    \ base == 14\n        return string(x * 14)\n    end\n    \n    if base == 15\n\
    \        return string(x * 15)\n    end\n    \n    if base == 16\n        return\
    \ string(x * 16)\n    end\n    \n    if base == 17\n        return string(x *\
    \ 17)\n    end\n    \n    if base == 18\n        return string(x * 18)\n    end\n\
    \    \n    if base == 19\n        return string(x * 19)\n    end\n    \n    if\
    \ base == 20\n        return string(x * 20)\n    end\n    \n    if base == 21\n\
    \        return string(x * 21)\n    end\n    \n    if base == 22\n        return\
    \ string(x * 22)\n    end\n    \n    if base == 23\n        return string(x *\
    \ 23)\n    end\n    \n    if base == 24\n        return string(x * 24)\n    end\n\
    \    \n    if base == 25\n        return string(x * 25)\n    end\n    \n    if\
    \ base == 26\n        return string(x * 26)\n    end\n    \n    if base == 27\n\
    \        return string(x * 27)\n    end\n    \n    if base == 28\n        return\
    \ string(x * 28)\n    end\n    \n    if base == 29\n        return string(x *\
    \ 29)\n    end\n    \n    if base == 30\n        return string(x * 30)\n    end\n\
    \    \n    if base == 31\n        return string(x * 31)\n    end\n    \n    if\
    \ base == 32\n        return string(x * 32)\n    end\n    \n    if base == 33\n\
    \        return string(x", "    if base < 10\n        return show(base * x)\n\
    \    else\n        return show(base * x / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a number to a string with leading zeros.\nIf the number is negative, leading\
    \ zeros should be suppressed.\nIf the number is zero, return an empty string.\n\
    If the number is positive, convert it to its string representation with leading\
    \ zeros.\nFor example, a number 123 should be converted to \"000123\".\nWrite\
    \ a function that converts a number to a string with leading zeros.\nIf the number\
    \ is negative, leading zeros should be suppressed.\nIf the number is zero, return\
    \ an empty string.\nIf the number is positive, convert it to its string representation\
    \ with leading zeros.\nFor example, a number 123 should be converted to \"123\"\
    .\nWrite a function that converts a number to a string with leading zeros.\nIf\
    \ the number is negative, leading zeros should be suppressed.\nIf the number is\
    \ zero, return an empty string.\nIf the number is positive, convert it to its\
    \ string representation with leading zeros.\nFor example, a number 123 should\
    \ be converted to \"00123\".\nWrite a function that converts a number to a string\
    \ with leading zeros.\nIf the number is negative, leading zeros should be suppressed.\n\
    If the number is zero, return an empty string.\nIf the number is positive, convert\
    \ it to its string representation with leading zeros.\nFor example, a number 123\
    \ should be converted to \"0123\".\nWrite a function that converts a number to\
    \ a string with leading zeros.\nIf the number is negative, leading zeros should\
    \ be suppressed.\nIf the number is zero, return an empty string.\nIf the number\
    \ is positive, convert it to its string representation with leading zeros.\nFor\
    \ example, a number 123 should be converted to \"123\".\nWrite a function that\
    \ converts a number to a string with leading zeros.\nIf the number is negative,\
    \ leading zeros should be suppressed.\nIf the number is zero, return an empty\
    \ string.\nIf the number is positive, convert it to its string representation\
    \ with leading zeros.\nFor example, a number 123 should be converted to \"00123\"\
    .\nWrite a function that converts a number to a string with leading zeros.\nIf\
    \ the number is negative, leading zeros should be suppressed.\nIf the number is\
    \ zero, return an empty string.\nIf the number is positive, convert it to its\
    \ string representation with leading zeros.\nFor example, a number 123 should\
    \ be converted to \"0123\".\nWrite a function that converts a number to a string\
    \ with leading zeros.\nIf the number is negative, leading zeros should be suppressed.\n\
    If the number is zero, return an empty string.\nIf the number is positive, convert\
    \ it to its string representation with leading zeros.\nFor example, a number 123\
    \ should be converted to \"123\".\nWrite a function that converts a number to\
    \ a string with leading zeros.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.4>",
  "    if base < 10 \n        error(\"base must be less than 10\")\n    else if base\
    \ == 10 \n        return toString(x)\n    else \n        digits = toString(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = toString(digits)\n\
    \        return digits[digits.length - digits.length % base]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 0)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -1)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -4)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -5)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -6)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -7)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -8)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -9)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length", "    if\
    \ base < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2\
    \ and 36\"))\n    else\n        if base == 10\n            return toString(x)\n\
    \        else\n            digits = digits(x)\n            digits = digits[digits.length\
    \ - base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base", "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.4>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    else\n        str = toString(x)\n        str = str[str.length\
    \ div base]\n        return str\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base\
    \ > 36\n        error(\"Base must be between 2 and 36\")\n    elseif base == 2\n\
    \        return string(x)\n    elseif base == 3\n        return string(x*3)\n\
    \    elseif base == 4\n        return string(x*4)\n    elseif base == 5\n    \
    \    return string(x*5)\n    elseif base == 6\n        return string(x*6)\n  \
    \  elseif base == 7\n        return string(x*7)\n    elseif base == 8\n      \
    \  return string(x*8)\n    elseif base == 9\n        return string(x*9)\n    elseif\
    \ base == 10\n        return string(x*10)\n    elseif base == 11\n        return\
    \ string(x*11)\n    elseif base == 12\n        return string(x*12)\n    elseif\
    \ base == 13\n        return string(x*13)\n    elseif base == 14\n        return\
    \ string(x*14)\n    elseif base == 15\n        return string(x*15)\n    elseif\
    \ base == 16\n        return string(x*16)\n    elseif base == 17\n        return\
    \ string(x*17)\n    elseif base == 18\n        return string(x*18)\n    elseif\
    \ base == 19\n        return string(x*19)\n    elseif base == 20\n        return\
    \ string(x*20)\n    elseif base == 21\n        return string(x*21)\n    elseif\
    \ base == 22\n        return string(x*22)\n    elseif base == 23\n        return\
    \ string(x*23)\n    elseif base == 24\n        return string(x*24)\n    elseif\
    \ base == 25\n        return string(x*25)\n    elseif base == 26\n        return\
    \ string(x*26)\n    elseif base == 27\n        return string(x*27)\n    elseif\
    \ base == 28\n        return string(x*28)\n    elseif base == 29\n        return\
    \ string(x*29)\n    elseif base == 30\n        return string(x*30)\n    elseif\
    \ base == 31\n        return string(x*31)\n    elseif base == 32\n        return\
    \ string(x*32)\n    elseif base == 33\n        return string(x*33)\n    elseif\
    \ base == 34\n        return string(x*34)\n    elseif base == 35\n        return\
    \ string(x*35)\n    elseif base == 36\n        return string(x*36)\n    else\n\
    \        error(\"Base must be between 2 and 36\")\n    end\nend\n</code>\n<|/\
    \ a tags=julia,string |>\n<| c |>\nI believe that `string(x*base)` should be `string(x*base^-1)`\n\
    <|/ c |>\n<| a tags=julia,string |>\nI ", "    if base == 10 \n        return\
    \ toString(x)\n    else \n        return toString(x * base^digits(x))\nend", " \
    \   if base < 2 || base > 10\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x*base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a binary string. \nThe function should accept a number as an argument\
    \ and return a string.\nThe function should throw an error if the number is not\
    \ an integer.\nThe function should throw an error if the number is negative.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is greater than or equal to 32.\nThe function should\
    \ throw an error if the number is less than or equal to 0.\nThe function should\
    \ throw an error if the number is greater than or equal to 128.\nThe function\
    \ should throw an error if the number is less than or equal to 0.", "    if base\
    \ == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n       \
    \ digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        then\
    \ return String(x)\n        else return change_base(x / base, base) + String(x%base)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\nI wrote a package\
    \ for this:\nhttps://github.com/korakot/num2str\n<code>\njulia> using num2str",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Invalid base\"))\n\
    \    \n    if x == 0\n        return \"\"\n    \n    if base == 10\n        return\
    \ to_string(x)\n    \n    digits = digits(x)\n    digits = digits[2:end]\n   \
    \ \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n \
    \   digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digit", "    if\
    \ base < 10\n        return show(base*x)\n    else\n        return show(base*(x/base))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>", "    if base == 10 \n\
    \        digits = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    digits = digits[base-10:base]\n    return digits[x]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary number to a decimal\
    \ number.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base\
    \ must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe input is a\
    \ string containing only binary digits.\nThe output is a string containing the\
    \ decimal representation of the binary number.\nThe function should throw an error\
    \ if the input is not valid.\nThe function should throw an error if the input\
    \ contains more than 32 binary digits.\nThe function should throw an error if\
    \ the input contains more than 32 binary digits.\nThe function should throw an\
    \ error if the input contains more than 32 binary digits.\nThe function should\
    \ throw an error if the input contains more than 32 binary digits.\nThe function\
    \ should throw an error if the input contains more than 32 binary digits.\nThe\
    \ function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 ", "   \
    \ if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number from\
    \ base 10 to base 16. \nThe function should throw an error if the base is not\
    \ between 2 and 16.\nThe function should throw an error if the input number is\
    \ negative.\nThe function should throw an error if the input number is zero.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should ", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     digits = string(x)\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[", "  \
    \  if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x, base)\nend\n</cell>\n<code language=julia-1.3>", "    if\
    \ base < 2 || base > 10\n        error(\"Base must be between 2 and 10\")\n  \
    \  end\n    if x == 0\n        return \"\"\n    digits = digits(x)\n    digits\
    \ = digits[digits.length - digits.length % base:digits.length]\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)\n    digits = reverse(digits)\n\
    \    digits = reverse(digits)\n    digits = reverse(digits)", "    if base < 2\
    \ || base > 36\n        throw(ArgumentError(\"Invalid base\"))\n    elseif base\
    \ == 10\n        return toString(x)\n    else\n        digits = digits(x)\n  \
    \      digits = digits[digits.length - base]\n        digits = digits[0 : digits.length\
    \ - base]\n        return toString(digits)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a number to a binary string.\nThe function should\
    \ take one argument, x, and return a string.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not positive.\nThe function should throw an error if the argument\
    \ is not less than 2.\nThe function should throw an error if the argument is not\
    \ greater than 36.\nThe function should throw an error if the argument is not\
    \ in the range [2, 36].\nThe function should throw an error if the argument is\
    \ zero.\nThe function should throw an error if the argument is negative.\nThe\
    \ function should throw an error if the argument is greater than 36.\nThe function\
    \ should throw an error if the argument is less than 2.\nThe function should throw\
    \ an error if the argument is greater than 36.\nThe function should throw an error\
    \ if the argument is less than 2.\nThe function should throw an error if the argument\
    \ is greater than 36.\nThe function should throw an error if the argument is less\
    \ than 2.\nThe function should throw an error if the argument is greater than\
    \ 36.\nThe function should throw an error if the argument is less than 2.\nThe\
    \ function should throw an error if the argument is greater than 36.\nThe function\
    \ should throw an error if the argument is less than 2.\nThe function should throw\
    \ an error if the argument is greater than 36.\nThe function should throw an error\
    \ if the argument is less than 2.\nThe function should throw an error if the argument\
    \ is greater than 36.\nThe function should throw an error if the argument is less\
    \ than 2.\nThe function should throw an error if the argument is greater than\
    \ 36.\nThe function should throw an error if the argument is less than 2.\nThe\
    \ function should throw an error if the argument is greater than 36.\nThe function\
    \ should throw an error if the argument is less than 2.\nThe function should throw\
    \ an error if the argument is greater than 36.\nThe function should throw an error\
    \ if the argument is less than 2.\nThe function should throw an error if the argument\
    \ is greater than 36.\nThe function should throw an error if the argument is less\
    \ than 2.\nThe function should throw an error if the argument is greater than\
    \ 36.\nThe function should throw an error if the argument is less than 2.\nThe\
    \ function should throw an error if the argument is greater than 36.\nThe function\
    \ should throw an error if the argument is less than 2.\nThe function should throw\
    \ an error if the argument is greater than 36.\nThe function should throw an error\
    \ if the argument is less than 2.\nThe function should throw an error if the argument\
    \ is greater than 36.\nThe function should throw an error if the argument is less\
    \ than 2.\nThe function should throw an error if the argument is greater than\
    \ 36.\nThe function should throw an error if the argument is less than 2.\nThe\
    \ function should throw an error if the argument is greater than 36.\nThe function\
    \ should throw an error if the ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend", "    if base < 2 || base >\
    \ 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        digits = string(x)\n\
    \        digits = digits[2:end]\n        digits = digits[digits[1] == '0' ? 2\
    \ : 1 : end]\n        digits = digits[digits[1] == '0' ? 1 : 1 : end]\n      \
    \  digits = digits[digits[1] == '0' ? 2 : 2 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 1 : 2 : end]\n        digits = digits[digits[1] == '0' ? 2 : 3 : end]\n\
    \        digits = digits[digits[1] == '0' ? 1 : 3 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 2 : 4 : end]\n        digits = digits[digits[1] == '0' ? 1 : 4 : end]\n\
    \        digits = digits[digits[1] == '0' ? 2 : 5 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 1 : 5 : end]\n        digits = digits[digits[1] == '0' ? 2 : 6 : end]\n\
    \        digits = digits[digits[1] == '0' ? 1 : 6 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 2 : 7 : end]\n        digits = digits[digits[1] == '0' ? 1 : 7 : end]\n\
    \        digits = digits[digits[1] == '0' ? 2 : 8 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 1 : 8 : end]\n        digits = digits[digits[1] == '0' ? 2 : 9 : end]\n\
    \        digits = digits[digits[1] == '0' ? 1 : 9 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 2 : 10 : end]\n        digits = digits[digits[1] == '0' ? 1 : 10 :\
    \ end]\n        digits = digits[digits[1] == '0' ? 2 : 11 : end]\n        digits\
    \ = digits[digits[1] == '0' ? 1 : 11 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 2 : 12 : end]\n        digits = digits[digits[1] == '0' ? 1 : 12 :\
    \ end]\n        digits = digits[digits[1] == '0' ? 2 : 13 : end]\n        digits\
    \ = digits[digits[1] == '0' ? 1 : 13 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 2 : 14 : end]\n        digits = digits[digits[1] == '0' ? 1 : 14 :\
    \ end]\n        digits = digits[digits[1] == '0' ? 2 : 15 : end]\n        digits\
    \ = digits[digits[1] == '0' ? 1 : 15 : end]\n        digits = digits[digits[1]\
    \ == '0' ? 2 : 16 : end]\n        digits = digits[digit", "    if base < 2 ||\
    \ base > 10 \n        throw(ArgumentError(\"base must be between 2 and 10\"))\n\
    \    elseif base == 2 \n        return string(x)\n    else\n        return string(x/base^0,\
    \ base^0)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base\
    \ > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        digits = string(x)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        ", "    if base ==\
    \ 10 \n        return toString(x::Int64)\n    else if base == 2 \n        return\
    \ toString(x::Int64, base::Int64)\n    else if base == 8 \n        return toString(x::Int64,\
    \ base::Int64, base::Int64)\n    else if base == 16 \n        return toString(x::Int64,\
    \ base::Int64, base::Int64, base::Int64)\n    else if base == 32 \n        return\
    \ toString(x::Int64, base::Int64, base::Int64, base::Int64, base::Int64)\n   \
    \ else if base == 64 \n        return toString(x::Int64, base::Int64, base::Int64,\
    \ base::Int64, base::Int64, base::Int64)\n    else if base == -10 \n        return\
    \ toString(x::Int64, base::Int64, base::Int64, base::Int64, base::Int64, base::Int64,\
    \ base::Int64)\n    else if base == -2 \n        return toString(x::Int64, base::Int64,\
    \ base::Int64, base::Int64, base::Int64, base::Int64, base::Int64, base::Int64)\n\
    \    else if base == -8 \n        return toString(x::Int64, base::Int64, base::Int64,\
    \ base::Int64, base::Int64, base::Int64, base::Int64, base::Int64, base::Int64)\n\
    \    else if base == -16 \n        return toString(x::Int64, base::Int64, base::Int64,\
    \ base::Int64, base::Int64, base::Int64, base::Int64, base::Int64, base::Int64,\
    \ base::Int64)\n    else if base == -32 \n        return toString(x::Int64, base::Int64,\
    \ base::Int64, base::Int64, base::Int64, base::Int64, base::Int64, base::Int64,\
    \ base::Int64, base::Int64, base::Int64)\n    else if base == -64 \n        return\
    \ toString(x::Int64, base::Int64, base::Int64, base::Int64, base::Int64, base::Int64,\
    \ base::Int64, base::Int64, base::Int64, base::Int64, base::Int64, base::Int64)\n\
    \    else \n        return \"Error: Invalid base\"\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        error(\"base must be between 2 and 36\")\n\
    \    end\n    if base == 2\n        return string(x)\n    elseif base == 3\n \
    \       return string(x * 3)\n    elseif base == 4\n        return string(x *\
    \ 7)\n    elseif base == 5\n        return string(x * 11)\n    elseif base ==\
    \ 6\n        return string(x * 13)\n    elseif base == 7\n        return string(x\
    \ * 17)\n    elseif base == 8\n        return string(x * 19)\n    elseif base\
    \ == 9\n        return string(x * 23)\n    elseif base == 10\n        return string(x\
    \ * 29)\n    elseif base == 11\n        return string(x * 31)\n    elseif base\
    \ == 12\n        return string(x * 37)\n    elseif base == 13\n        return\
    \ string(x * 43)\n    elseif base == 14\n        return string(x * 49)\n    elseif\
    \ base == 15\n        return string(x * 55)\n    elseif base == 16\n        return\
    \ string(x * 61)\n    elseif base == 17\n        return string(x * 67)\n    elseif\
    \ base == 18\n        return string(x * 73)\n    elseif base == 19\n        return\
    \ string(x * 79)\n    elseif base == 20\n        return string(x * 85)\n    elseif\
    \ base == 21\n        return string(x * 91)\n    elseif base == 22\n        return\
    \ string(x * 97)\n    elseif base == 23\n        return string(x * 103)\n    elseif\
    \ base == 24\n        return string(x * 109)\n    elseif base == 25\n        return\
    \ string(x * 115)\n    elseif base == 26\n        return string(x * 121)\n   \
    \ elseif base == 27\n        return string(x * 127)\n    elseif base == 28\n \
    \       return string(x * 133)\n    elseif base == 29\n        return string(x\
    \ * 139)\n    elseif base == 30\n        return string(x * 145)\n    elseif base\
    \ == 31\n        return string(x * 151)\n    elseif base == 32\n        return\
    \ string(x * 157)\n    elseif base == 33\n        return string(x * 163)\n   \
    \ elseif base == 34\n        return string(x * 169)\n    elseif base == 35\n \
    \       return string(x * 175)\n    elseif base == 36\n        return string(x\
    \ * 181)\n    else\n        error(\"base must be between 2 and 36\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    convert_base(x::Int64, base::Int64)::Int64\n\
    \    convert x from ", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base*base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is a string containing the decimal representation\
    \ of the binary number.\nThe function should throw an error if the input string\
    \ contains non-binary digits.\nThe function should throw an error if the input\
    \ string contains more than 10 binary digits.\nThe function should throw an error\
    \ if the input string contains more than 10 binary digits.\nThe function should\
    \ throw an error if the input string contains more than 10 binary digits.\nThe\
    \ function should throw an error if the input string contains more than 10 binary\
    \ digits.\nThe function should throw an error if the input string contains more\
    \ than 10 binary digits.\nThe function should throw an error if the input string\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input string contains more than 10 binary digits.\nThe function should throw\
    \ an error if the input string contains more than 10 binary digits.\nThe function\
    \ should throw an error if the input string contains more than 10 binary digits.\n\
    The function should throw an error if the input string contains more than 10 binary\
    \ digits.\nThe function should throw an error if the input string contains more\
    \ than 10 binary digits.\nThe function should throw an error if the input string\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input string contains more than 10 binary digits.\nThe function should throw\
    \ an error if the input string contains more than 10 binary digits.\nThe function\
    \ should throw an error if the input string contains more than 10 binary digits.\n\
    The function should throw an error if the input string contains more than 10 binary\
    \ digits.\nThe function should throw an error if the input string contains more\
    \ than 10 binary digits.\nThe function should throw an error if the input string\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input string contains more than 10 binary digits.\nThe function should throw\
    \ an error if the input string contains more than 10 binary digits.\nThe function\
    \ should throw an error if the input string contains more than 10 binary digits.\n\
    The function should throw an error if the input string contains more than 10 binary\
    \ digits.\nThe function should throw an error if the input string contains more\
    \ than 10 binary digits.\nThe function should throw an error if the input string\
    \ contains more than 10 binary digits.\nThe function should throw an error if\
    \ the input string contains more than 10 binary digits.\nThe function should throw\
    \ an error if the input string contains more than 10 binary digits.\nThe function\
    \ should ", "    if base < 2 || base > 36\n        error(\"Base must be between\
    \ 2 and 36\")\n    elseif base == 2\n        return string(x)\n    else\n    \
    \    digits = digits(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  elseif base == 36\n        return string(x*x)\n    elseif base == 8\n     \
    \   return string(x*x*x)\n    elseif base == 10\n        return string(x*x*x*x)\n\
    \    elseif base == 16\n        return string(x*x*x*x*x)\n    elseif base == 20\n\
    \        return string(x*x*x*x*x*x*x)\n    elseif base == 24\n        return string(x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 30\n        return string(x*x*x*x*x*x*x*x*x*x)\n    elseif\
    \ base == 36\n        return string(x*x*x*x*x*x*x*x*x*x*x*x)\n    else\n     \
    \   throw(ArgumentError(\"base must be between 2 and 36\"))\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    convert_base(x::Int64, base::Int64)::Int64\n\
    \    convert x from base to base\n    return the converted number in base base\n\
    \    base numbers are less than 10.\n    >>> convert_base(8, 3)\n    22\n    >>>\
    \ convert_base(8, 2)\n    1000\n    >>> convert_base(7, 2)\n    111\n    \"\"\"",
  "    if base == 10 \n        return toString(x)\n    else if base == 2 \n      \
    \  return toString(x * 10)\n    else \n        error(\"Base must be either 2 or\
    \ 10\")\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI wrote a package\
    \ for this: \nhttps://github.com/nathanmarz/base\n<code>\nusing Base\nprintln(base2bin(10))\n\
    println(base2bin(16))\nprintln(base2bin(256))\nprintln(base2bin(65536))\nprintln(base2bin(65537))\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI wrote a package for this: \n\
    https://github.com/nathanmarz/base\n<code>\nusing Base\nprintln(base2bin(10))\n\
    println(base2bin(16))\nprintln(base2bin(256))\nprintln(base2bin(65536))\nprintln(base2bin(65537))\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wrote a package for this:\
    \ \nhttps://github.com/nathanmarz/base\n<code>\nusing Base\nprintln(base2bin(10))\n\
    println(base2bin(16))\nprintln(base2bin(256))\nprintln(base2bin(65536))\nprintln(base2bin(65537))\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a package for this: \nhttps://github.com/nathanmarz/base\n\
    <code>\nusing Base\nprintln(base2bin(10))\nprintln(base2bin(16))\nprintln(base2bin(256))\n\
    println(base2bin(65536))\nprintln(base2bin(65537))\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nI wrote a package for this: \nhttps://github.com/nathanmarz/base\n\
    <code>\nusing Base\nprintln(base2bin(10))\nprintln(base2bin(16))\nprintln(base2bin(256))\n\
    println(base2bin(65536))\nprintln(base2bin(65537))\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia |>\nI wrote a package for this: \nhttps://github.com/nathanmarz/base\n\
    <code>\nusing Base\nprintln(base2bin(10))\nprintln(base2", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 2\n        return string(x)\n    else\n        return string(x,\
    \ base)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    string(x::Int64,\
    \ base::Int64)::String\n    Convert number x to string representation in base\
    \ base.\n    base numbers are less than 10.\n    >>> string(8, 3)\n    \"22\"\n\
    \    >>> string(8, 2)\n    \"1000\"\n    >>> string(7, 2)\n    \"111\"\n    \"\
    \"\"", "    if base < 10\n        return string(x)\n    \n    digits = string(x)\n\
    \    digits = digits[digits.length - digits.length % base.length : digits.length]\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = digits.reverse\n    digits = digits.reverse\n\
    \    digits = digits.reverse\n    digits = ", "    if base < 2 || base > 10\n\
    \        throw(ArgumentError(\"base must be between 2 and 10\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x/base^base,\
    \ base*base)\nend\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.4>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. \nThe function should accept two arguments:\
    \ a string of binary numbers and a base between 2 and 16.\nThe function should\
    \ return the decimal number of the binary number represented by the string.\n\
    The function should throw an error if the base is out of range.\nThe function\
    \ should throw an error if the string contains more than 1 leading 0s.\nThe function\
    \ should throw an error if the string contains more than 1 trailing 0s.\nThe function\
    \ should throw an error if the string contains more than 2 leading 1s.\nThe function\
    \ should throw an error if the string contains more than 2 trailing 1s.\nThe function\
    \ should throw an error if the string contains more than 3 leading 0s or 1s.\n\
    The function should throw an error if the string contains more than 3 trailing\
    \ 0s or 1s.\nThe function should throw an error if the string contains more than\
    \ 4 leading 0s or 1s.\nThe function should throw an error if the string contains\
    \ more than 4 trailing 0s or 1s.\nThe function should throw an error if the string\
    \ contains more than 5 leading 0s or 1s.\nThe function should throw an error if\
    \ the string contains more than 5 trailing 0s or 1s.\nThe function should throw\
    \ an error if the string contains more than 6 leading 0s or 1s.\nThe function\
    \ should throw an error if the string contains more than 6 trailing 0s or 1s.\n\
    The function should throw an error if the string contains more than 7 leading\
    \ 0s or 1s.\nThe function should throw an error if the string contains more than\
    \ 7 trailing 0s or 1s.\nThe function should throw an error if the string contains\
    \ more than 8 leading 0s or 1s.\nThe function should throw an error if the string\
    \ contains more than 8 trailing 0s or 1s.\nThe function should throw an error\
    \ if the string contains more than 9 leading 0s or 1s.\nThe function should throw\
    \ an error if the string contains more than 9 trailing 0s or 1s.\nThe function\
    \ should throw an error if the string contains more than 10 leading 0s or 1s.\n\
    The function should throw an error if the string contains more than 10 trailing\
    \ 0s or 1s.\nThe function should throw an error if the string contains more than\
    \ 11 leading 0s or 1s.\nThe function should throw an error if the string contains\
    \ more than 11 trailing 0s or 1s.\nThe function should throw an error if the string\
    \ contains more than 12 leading 0s or ", "    if base < 2 || base > 36\n     \
    \   throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base ==\
    \ 2\n        return string(x)\n    else\n        digits = string(x)\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[", "    if base < 10\n\
    \        return str(x)\n    \n    digits = digits(x)\n    digits = digits[digits.length\
    \ - digits.length % base]\n    digits = digits[0 : digits.length % base]\n   \
    \ \n    digits = digits[0 : digits.length - digits.length % base]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    \n    digits = digits[0 : digits.length - digits.length % base]\n\
    \    \n    digits = digits[0 : digits.length - digits.length % base]\n    \n \
    \   digits = digits[0 : digits.length - digits.length % base]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    \n    digits = digits[0 : digits.length - digits.length % base]\n\
    \    \n    digits = digits[0 : digits.length - digits.length % base]\n    \n \
    \   digits = digits[0 : digits.length - digits.length % base]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    \n    digits = digits[0 : digits.length - digits.length % base]\n\
    \    \n    digits = digits[0 : digits.length - digits.length % base]\n    \n \
    \   digits = digits[0 : digits.length - digits.length % base]\n    \n    digits\
    \ = digits[0 : digits.length - digits.length % base]\n    \n    digits = digits[0\
    \ : digits.length - digits.length % base]\n    \n    digits = digits[0 : digits.length\
    \ - digits.length % base]\n    \n    digits = digits[0 : digits.length - digits.length\
    \ % base]\n    \n    digits = digits[0 : digits.length - digits.length % base]\n\
    \    \n    digits = digits[0 : digit", "    if base < 2 || base > 10\n       \
    \ throw(ArgumentError(\"base must be between 2 and 10\"))\n    else\n        str\
    \ = toString(x)\n        str = str[end - base]\n        str = str * base\n   \
    \     return str\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from one\
    \ base to another. \nThe function should throw an error if the base is not in\
    \ the range [2, 10].\nThe function should throw an error if the input is not an\
    \ integer.\nThe function should throw an error if the input is a negative number.\n\
    The function should throw an error if the input is a floating point number.\n\
    The function should throw an error if the input is a negative floating point number.\n\
    The function should throw an error if the input is a NaN.\nThe function should\
    \ throw an error if the input is a positive floating point number.\nThe function\
    \ should throw an error if the input is a positive integer.\nThe function should\
    \ throw an error if the input is a negative integer.\nThe function should throw\
    \ an error if the input is a non-integer number.\nThe function should throw an\
    \ error if the input is a non-integer or negative number.\nThe function should\
    \ throw an error if the input is a non-integer or negative floating point number.\n\
    The function should throw an error if the input is a non-integer or NaN.\nThe\
    \ function should throw an error if the input is a non-integer or positive floating\
    \ point number.\nThe function should throw an error if the input is a non-integer\
    \ or positive integer.\nThe function should throw an error if the input is a non-integer\
    \ or negative integer.\nThe function should throw an error if the input is a non-integer\
    \ or non-integer number.\nThe function should throw an error if the input is a\
    \ non-integer or non-integer or negative number.\nThe function should throw an\
    \ error if the input is a non-integer or non-integer or negative floating point\
    \ number.\nThe function should throw an error if the input is a non-integer or\
    \ non-integer or NaN.\nThe function should throw an error if the input is a non-integer\
    \ or non-integer or positive floating point number.\nThe function should throw\
    \ an error if the input is a non-integer or non-integer or positive integer.\n\
    The function should throw an error if the input is a non-integer or non-integer\
    \ or negative integer.\nThe function should throw an error if the input is a non-integer\
    \ or non-integer or non-integer number.\nThe function should throw an error if\
    \ the input is a non-integer or non-integer or non-integer or negative number.\n\
    The function should throw an error if the input is a non-integer or non-integer\
    \ or non-integer or negative floating point number.\nThe function should throw\
    \ an error if the input is a non-integer or non-integer or non-integer or NaN.\n\
    The function should throw an error if the input is a non-integer or non-integer\
    \ or non-integer or positive floating point number.\nThe function should throw\
    \ an error if the ", "    if base == 10 \n        return \"0\"\n    else \n  \
    \      return show(x % base) + show(x // base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 2.\nThe function should\
    \ take two arguments: x is the number to be converted, and b is the base of the\
    \ number.\nThe function should return the string representation of the number\
    \ in base 2.\nThe function should raise an error if the base is not 10 or 2.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is too large.\nThe function should raise an error if the number is\
    \ too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the ", "    if base < 2\
    \ || base > 10 \n        throw(ArgumentError(\"base must be between 2 and 10\"\
    ))\n    else \n        if x == 0 \n            throw(ArgumentError(\"cannot change\
    \ base of 0\"))\n        else \n            digits = digits(x)\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            ", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base^2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a number from base 10 to base 16. \nThe function should throw\
    \ an error if the base is not 10 or 16.\nThe function should throw an error if\
    \ the number is negative.\nThe function should throw an error if the number is\
    \ too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is ", "    if base == 10 \n        return toString(x)\n\
    \    else \n        return toString(change_base(x / base, base) * base)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    else\n        return string(x%base^(x/base))\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from one base to another.\
    \ \nThe function should throw an error if the base is invalid.\nThe function should\
    \ throw an error if the number is negative.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should ",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x/base^base*base)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        return show(base * x)\n    else\n        return show(base\
    \ * x)\nend\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    elseif base == 3\n        return string(x,\
    \ \"b\")\n    elseif base == 4\n        return string(x, \"o\")\n    elseif base\
    \ == 5\n        return string(x, \"x\")\n    elseif base == 6\n        return\
    \ string(x, \"h\")\n    elseif base == 7\n        return string(x, \"d\")\n  \
    \  elseif base == 8\n        return string(x, \"o\")\n    elseif base == 9\n \
    \       return string(x, \"x\")\n    elseif base == 10\n        return string(x,\
    \ \"l\")\n    elseif base == 11\n        return string(x, \"d\")\n    elseif base\
    \ == 12\n        return string(x, \"h\")\n    elseif base == 13\n        return\
    \ string(x, \"l\")\n    elseif base == 14\n        return string(x, \"o\")\n \
    \   elseif base == 15\n        return string(x, \"x\")\n    elseif base == 16\n\
    \        return string(x, \"h\")\n    elseif base == 17\n        return string(x,\
    \ \"l\")\n    elseif base == 18\n        return string(x, \"o\")\n    elseif base\
    \ == 19\n        return string(x, \"x\")\n    elseif base == 20\n        return\
    \ string(x, \"h\")\n    elseif base == 21\n        return string(x, \"l\")\n \
    \   elseif base == 22\n        return string(x, \"o\")\n    elseif base == 23\n\
    \        return string(x, \"x\")\n    elseif base == 24\n        return string(x,\
    \ \"h\")\n    elseif base == 25\n        return string(x, \"l\")\n    elseif base\
    \ == 26\n        return string(x, \"o\")\n    elseif base == 27\n        return\
    \ string(x, \"x\")\n    elseif base == 28\n        return string(x, \"h\")\n \
    \   elseif base == 29\n        return string(x, \"l\")\n    elseif base == 30\n\
    \        return string(x, \"o\")\n    elseif base == 31\n        return string(x,\
    \ \"x\")\n    elseif base == 32\n        return string(x, \"h\")\n    elseif base\
    \ == 33\n        return string(x, \"l\")\n    elseif base == 34\n        return\
    \ string(x, \"o\")\n    elseif base == 35\n        return string(x, \"x\")\n \
    \   elseif base == 36\n        return string(x, \"h\")\n    else\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI appreciate your efforts, but this ", "    if base < 2 || base > 36\n\
    \        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x * base^digits(x))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base > 36\n    \
    \    throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x * base^2)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a string to a number.\nThe\
    \ string can contain any characters, including spaces.\nThe function should throw\
    \ an error if the string does not contain a valid number.\nThe function should\
    \ throw an error if the string contains more than one valid number.\nThe function\
    \ should throw an error if the string contains characters that are not valid in\
    \ numbers.\nThe function should throw an error if the string contains characters\
    \ that are not valid in bases.\nThe function should throw an error if the string\
    \ contains characters that are not valid in bases.\nThe function should throw\
    \ an error if the string contains characters that are not valid in bases.\nThe\
    \ function should throw an error if the string contains characters that are not\
    \ valid in bases.\nThe function should throw an error if the string contains characters\
    \ that are not valid in bases.\nThe function should throw an error if the string\
    \ contains characters that are not valid in bases.\nThe function should throw\
    \ an error if the string contains characters that are not valid in bases.\nThe\
    \ function should throw an error if the string contains characters that are not\
    \ valid in bases.\nThe function should throw an error if the string contains characters\
    \ that are not valid in bases.\nThe function should throw an error if the string\
    \ contains characters that are not valid in bases.\nThe function should throw\
    \ an error if the string contains characters that are not valid in bases.\nThe\
    \ function should throw an error if the string contains characters that are not\
    \ valid in bases.\nThe function should throw an error if the string contains characters\
    \ that are not valid in bases.\nThe function should throw an error if the string\
    \ contains characters that are not valid in bases.\nThe function should throw\
    \ an error if the string contains characters that are not valid in bases.\nThe\
    \ function should throw an error if the string contains characters that are not\
    \ valid in bases.\nThe function should throw an error if the string contains characters\
    \ that are not valid in bases.\nThe function should throw an error if the string\
    \ contains characters that are not valid in bases.\nThe function should throw\
    \ an error if the string contains characters that are not valid in bases.\nThe\
    \ function should throw an error if the string contains characters that are not\
    \ valid in bases.\nThe function should throw an error if the string contains characters\
    \ that are not valid in bases.\nThe function should throw an error if the string\
    \ contains characters that are not valid in bases.\nThe function should ", " \
    \   if base < 10\n        return show(base * x)\n    else\n        return show(base\
    \ * x) + show(x % base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers.\nThe function should take two arguments:\
    \ a string representing a binary number and an integer representing a base (2\
    \ to 36).\nThe function should return the decimal number represented by the binary\
    \ number.\nThe function should raise an error if the base is not in the range\
    \ 2 to 36.\nThe function should raise an error if the input string is not in the\
    \ form of a binary number.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input string\
    \ contains leading zeros.\nThe function should raise an error if the input ",
  "    if base == 10 \n        return toString(x)\n    else if base == 2 \n      \
    \  return toString(base10_to_base2(x))\n    else \n        error(\"base must be\
    \ either 10 or 2.\")\nend\n</cell>\n<code language=julia-1.5>", "    if base <\
    \ 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        return string(x/base^base,\
    \ base = base)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise: Write a function that converts binary\
    \ numbers to decimal.\n    Input is a binary string with leading zeroes (ex. \"\
    01001\").\n    Output is the decimal number represented by the binary string.\n\
    \    >>> bin2dec(\"01001\")\n    8\n    >>> bin2dec(\"0101\")\n    7\n    >>>\
    \ bin2dec(\"011\")\n    6\n    >>> bin2dec(\"100\")\n    4\n    >>> bin2dec(\"\
    101\")\n    5\n    >>> bin2dec(\"110\")\n    3\n    >>> bin2dec(\"111\")\n   \
    \ 2\n    \"\"\"", "    if base < 2 || base > 36\n        error(\"Base must be\
    \ between 2 and 36\")\n    elseif base == 2\n        return string(x)\n    elseif\
    \ base == 36\n        return string(x*x)\n    else\n        digits = string(x%base)\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        return string(x%base^(x/base))\n\
    end\n</cell>\n<code language=julia-1.4>", "    if base == 10 \n        digits\
    \ = digits(x)\n        digits = digits[2:end]\n        digits = digits[digits[1]\
    \ == 0]\n        digits = digits[digits[2] == 0]\n        digits = digits[digits[3]\
    \ == 0]\n        digits = digits[digits[4] == 0]\n        digits = digits[digits[5]\
    \ == 0]\n        digits = digits[digits[6] == 0]\n        digits = digits[digits[7]\
    \ == 0]\n        digits = digits[digits[8] == 0]\n        digits = digits[digits[9]\
    \ == 0]\n        digits = digits[digits[10] == 0]\n        digits = digits[digits[11]\
    \ == 0]\n        digits = digits[digits[12] == 0]\n        digits = digits[digits[13]\
    \ == 0]\n        digits = digits[digits[14] == 0]\n        digits = digits[digits[15]\
    \ == 0]\n        digits = digits[digits[16] == 0]\n        digits = digits[digits[17]\
    \ == 0]\n        digits = digits[digits[18] == 0]\n        digits = digits[digits[19]\
    \ == 0]\n        digits = digits[digits[20] == 0]\n        digits = digits[digits[21]\
    \ == 0]\n        digits = digits[digits[22] == 0]\n        digits = digits[digits[23]\
    \ == 0]\n        digits = digits[digits[24] == 0]\n        digits = digits[digits[25]\
    \ == 0]\n        digits = digits[digits[26] == 0]\n        digits = digits[digits[27]\
    \ == 0]\n        digits = digits[digits[28] == 0]\n        digits = digits[digits[29]\
    \ == 0]\n        digits = digits[digits[30] == 0]\n        digits = digits[digits[31]\
    \ == 0]\n        digits = digits[digits[32] == 0]\n        digits = digits[digits[33]\
    \ == 0]\n        digits = digits[digits[34] == 0]\n        digits = digits[digits[35]\
    \ == 0]\n        digits = digits[digits[36] == 0]\n        digits = digits[digits[37]\
    \ == 0]\n        digits = digits[digits[38] == 0]\n        digits = digits[digits[39]\
    \ == 0]\n        digits = digits[digits[40] == 0]\n        digits = digits[digits[41]\
    \ == 0]\n        digits = digits[digits[42] == 0]\n        digits = digits[digits[43]\
    \ == 0]\n        digits = digits[digits[44] == 0]\n        digits = digits[digits[",
  "    if base < 10\n        return toString(x::Int64, base)\n    else\n        return\
    \ toString(x::Int64, base::Int64)\nend\n</code>\n<|/ a tags=julia,type-conversion\
    \ |>\n<| a dscore=2 |>\n<code>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*base)\n    else\n        digits\
    \ = string(x%base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    \n    if base == 10\n        return toString(x)\n    \n  \
    \  digits = digits(x)\n    \n    if base == 2\n        return digits[1]\n    \n\
    \    digits_base2 = digits_base2(digits)\n    \n    if base == 3\n        return\
    \ digits_base2[1]\n    \n    digits_base3 = digits_base3(digits)\n    \n    if\
    \ base == 4\n        return digits_base3[1]\n    \n    digits_base4 = digits_base4(digits)\n\
    \    \n    if base == 5\n        return digits_base4[1]\n    \n    digits_base5\
    \ = digits_base5(digits)\n    \n    if base == 6\n        return digits_base5[1]\n\
    \    \n    digits_base6 = digits_base6(digits)\n    \n    if base == 7\n     \
    \   return digits_base6[1]\n    \n    digits_base7 = digits_base7(digits)\n  \
    \  \n    if base == 8\n        return digits_base7[1]\n    \n    digits_base8\
    \ = digits_base8(digits)\n    \n    if base == 9\n        return digits_base8[1]\n\
    \    \n    digits_base9 = digits_base9(digits)\n    \n    if base == 10\n    \
    \    return digits_base9[1]\n    \n    digits_base10 = digits_base10(digits)\n\
    \    \n    if base == 11\n        return digits_base10[1]\n    \n    digits_base11\
    \ = digits_base11(digits)\n    \n    if base == 12\n        return digits_base11[1]\n\
    \    \n    digits_base12 = digits_base12(digits)\n    \n    if base == 13\n  \
    \      return digits_base12[1]\n    \n    digits_base13 = digits_base13(digits)\n\
    \    \n    if base == 14\n        return digits_base13[1]\n    \n    digits_base14\
    \ = digits_base14(digits)\n    \n    if base == 15\n        return digits_base14[1]\n\
    \    \n    digits_base15 = digits_base15(digits)\n    \n    if base == 16\n  \
    \      return digits_base15[1]\n    \n    digits_base16 = digits_base16(digits)\n\
    \    \n    if base == 17\n        return digits_base16[1]\n    \n    digits_base17\
    \ = digits_base17(digits)\n    \n    if base == 18\n        return digits_base",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 3\n        return string(x * 1000 + 100)\n    elseif base == 4\n        return\
    \ string(x * 10000 + 1000)\n    elseif base == 5\n        return string(x * 100000\
    \ + 10000)\n    elseif base == 6\n        return string(x * 1000000 + 100000)\n\
    \    elseif base == 7\n        return string(x * 10000000 + 1000000)\n    elseif\
    \ base == 8\n        return string(x * 100000000 + 10000000)\n    elseif base\
    \ == 9\n        return string(x * 1000000000 + 100000000)\n    elseif base ==\
    \ 10\n        return string(x * 10000000000 + 1000000000)\n    elseif base ==\
    \ 11\n        return string(x * 1000000000000 + 10000000000)\n    elseif base\
    \ == 12\n        return string(x * 10000000000000 + 1000000000000)\n    elseif\
    \ base == 13\n        return string(x * 100000000000000 + 10000000000000)\n  \
    \  elseif base == 14\n        return string(x * 1000000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 10000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 100000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 19\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 20\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 21\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 22\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 23\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 24\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 25\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 26\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 27\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 28\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 29\n        return string(x * 1000000000000000000000000000000\
    \ + 10000000000000000", "    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[digits[1] == 0]\n       \
    \ digits = digits[digits[2] == 0]\n        digits = digits[digits[3] == 0]\n \
    \       digits = digits[digits[4] == 0]\n        digits = digits[digits[5] ==\
    \ 0]\n        digits = digits[digits[6] == 0]\n        digits = digits[digits[7]\
    \ == 0]\n        digits = digits[digits[8] == 0]\n        digits = digits[digits[9]\
    \ == 0]\n        digits = digits[digits[10] == 0]\n        digits = digits[digits[11]\
    \ == 0]\n        digits = digits[digits[12] == 0]\n        digits = digits[digits[13]\
    \ == 0]\n        digits = digits[digits[14] == 0]\n        digits = digits[digits[15]\
    \ == 0]\n        digits = digits[digits[16] == 0]\n        digits = digits[digits[17]\
    \ == 0]\n        digits = digits[digits[18] == 0]\n        digits = digits[digits[19]\
    \ == 0]\n        digits = digits[digits[20] == 0]\n        digits = digits[digits[21]\
    \ == 0]\n        digits = digits[digits[22] == 0]\n        digits = digits[digits[23]\
    \ == 0]\n        digits = digits[digits[24] == 0]\n        digits = digits[digits[25]\
    \ == 0]\n        digits = digits[digits[26] == 0]\n        digits = digits[digits[27]\
    \ == 0]\n        digits = digits[digits[28] == 0]\n        digits = digits[digits[29]\
    \ == 0]\n        digits = digits[digits[30] == 0]\n        digits = digits[digits[31]\
    \ == 0]\n        digits = digits[digits[32] == 0]\n        digits = digits[digits[33]\
    \ == 0]\n        digits = digits[digits[34] == 0]\n        digits = digits[digits[35]\
    \ == 0]\n        digits = digits[digits[36] == 0]\n        digits = digits[digits[37]\
    \ == 0]\n        digits = digits[digits[38] == 0]\n        digits = digits[digits[39]\
    \ == 0]\n        digits = digits[digits[40] == 0]\n        digits = digits[digits[41]\
    \ == 0]\n        digits = digits[digits[42] == 0]\n        digits = digits[digits[43]\
    \ == 0]\n        digits = digits[digits[44] == 0]\n        digits = digits[digits[",
  "    if base == 10 \n        then return \"0\"\n    else \n        digits = digits(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits * base\n       \
    \ digits = digits[0 : digits.length]\n        return digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if base == 10 \n        return toString(x)\n    else\
    \ if base == 2 \n        return toString(x * 10)\n    else \n        return toString(x\
    \ * base) + toString(x%base)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts binary numbers to decimal.\nThe input is a string that consists\
    \ of only 0s and 1s.\nThe output is an integer that is the decimal equivalent\
    \ of the binary number.\nThe function should raise an error if the input is not\
    \ valid.\nThe function should raise an error if the input contains more than one\
    \ leading 0\nor more than one trailing 0.\nThe function should raise an error\
    \ if the input contains leading or trailing zeros.\nThe function should raise\
    \ an error if the input contains more than one leading 0.\nThe function should\
    \ raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains leading or trailing zeros.\nThe\
    \ function should raise an error if the input contains leading or trailing zeros.\n\
    The function should raise an error if the input contains more than one leading\
    \ 0.\nThe function should raise an error if the input contains more than one trailing\
    \ 0.\nThe function should raise an error if the input contains leading or trailing\
    \ zeros.\nThe function should raise an error if the input contains leading or\
    \ trailing zeros.\nThe function should raise an error if the input contains more\
    \ than one leading 0.\nThe function should raise an error if the input contains\
    \ more than one trailing 0.\nThe function should raise an error if the input contains\
    \ leading or trailing zeros.\nThe function should raise an error if the input\
    \ contains leading or trailing zeros.\nThe function should raise an error if the\
    \ input contains more than one leading 0.\nThe function should raise an error\
    \ if the input contains more than one trailing 0.\nThe function should raise an\
    \ error if the input contains leading or trailing zeros.\nThe function should\
    \ raise an error if the input contains leading or trailing zeros.\nThe function\
    \ should raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains leading or trailing zeros.\nThe\
    \ function should raise an error if the input contains leading or trailing zeros.\n\
    The function should raise an error if the input contains more than one leading\
    \ 0.\nThe function should raise an error if the input contains more than one trailing\
    \ 0.\nThe function should raise an error if the input contains leading or trailing\
    \ zeros.\nThe function should raise an error if the input contains leading or\
    \ trailing zeros.\nThe function should raise an error if the input contains more\
    \ than one leading 0.\nThe function should raise an error if the input contains\
    \ more than one trailing 0.\nThe function should raise an error if the input contains\
    \ leading or trailing ", "    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n\
    \    return digits[base*(x-1)::Int64]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe input is a\
    \ string containing only 0s and 1s.\nThe output is a string containing only decimal\
    \ numbers.\nThe function should ignore leading zeros.\nThe function should ignore\
    \ the sign of the input.\nThe function should ignore the base of the input.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\nThe function should ignore the length of the input.\n\
    The function should ignore the length of the output.\nThe function should ignore\
    \ the length of the input.\nThe function should ignore the length of the output.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\nThe function should ignore the length of the input.\n\
    The function should ignore the length of the output.\nThe function should ignore\
    \ the length of the input.\nThe function should ignore the length of the output.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\nThe function should ignore the length of the input.\n\
    The function should ignore the length of the output.\nThe function should ignore\
    \ the length of the input.\nThe function should ignore the length of the output.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\nThe function should ignore the length of the input.\n\
    The function should ignore the length of the output.\nThe function should ignore\
    \ the length of the input.\nThe function should ignore the length of the output.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\nThe function should ignore the length of the input.\n\
    The function should ignore the length of the output.\nThe function should ignore\
    \ the length of the input.\nThe function should ignore the length of the output.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\nThe function should ignore the length of the input.\n\
    The function should ignore the length of the output.\nThe function should ignore\
    \ the length of the input.\nThe function should ignore the length of the output.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\nThe function should ignore the length of the input.\n\
    The function should ignore the length of the output.\nThe function should ignore\
    \ the length of the input.\nThe function should ignore the length of the output.\n\
    The function should ignore the length of the input.\nThe function should ignore\
    \ the length of the output.\n", "    if base < 2 || base > 10 || base == 0\n \
    \       throw(ArgumentError(\"base must be between 2 and 10\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        return string(x * base)\n\
    end\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The function should take one argument, x, which must be an Int64.\nThe function\
    \ should return a string representation of the decimal number in base 10.\nThe\
    \ function should throw an error if the argument is not an Int64.\nThe function\
    \ should throw an error if the argument is not in the range 2 to 10.\nThe function\
    \ should throw an error if the argument is a binary number.\nThe function should\
    \ throw an error if the argument is a decimal number.\nThe function should throw\
    \ an error if the argument is a binary number with more than 10 digits (i.e. if\
    \ the number of digits is greater than 10).\nThe function should throw an error\
    \ if the argument is a decimal number with more than 10 digits (i.e. if the number\
    \ of digits is greater than 10).\nThe function should throw an error if the argument\
    \ is a binary number with more than 10 digits (i.e. if the number of digits is\
    \ greater than 10).\nThe function should throw an error if the argument is a decimal\
    \ number with more than 10 digits (i.e. if the number of digits is greater than\
    \ 10).\nThe function should throw an error if the argument is a binary number\
    \ with more than 10 digits (i.e. if the number of digits is greater than 10).\n\
    The function should throw an error if the argument is a decimal number with more\
    \ than 10 digits (i.e. if the number of digits is greater than 10).\nThe function\
    \ should throw an error if the argument is a binary number with more than 10 digits\
    \ (i.e. if the number of digits is greater than 10).\nThe function should throw\
    \ an error if the argument is a decimal number with more than 10 digits (i.e.\
    \ if the number of digits is greater than 10).\nThe function should throw an error\
    \ if the argument is a binary number with more than 10 digits (i.e. if the number\
    \ of digits is greater than 10).\nThe function should throw an error if the argument\
    \ is a decimal number with more than 10 digits (i.e. if the number of digits is\
    \ greater than 10).\nThe function should throw an error if the argument is a binary\
    \ number with more than 10 digits (i.e. if the number of digits is greater than\
    \ 10).\nThe function should throw an error if the argument is a decimal number\
    \ with more than 10 digits (i.e. if the number of digits is greater than 10).\n\
    The function should throw an error if the argument is a binary number with more\
    \ than 10 digits (i.e. if the number of digits is greater than 10).\nThe function\
    \ should throw an error if the argument is a decimal number with more than 10\
    \ digits (", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base\
    \ must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base^base)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a string to a number.\nThe function\
    \ should throw an error if the string cannot be converted to a number.\nThe function\
    \ should also throw an error if the string contains any character that is not\
    \ 0-9, a-z or A-Z.\nThe function should also throw an error if the string contains\
    \ any character that is neither a decimal point nor a minus sign.\nThe function\
    \ should also throw an error if the string contains any character that is neither\
    \ a decimal point nor a minus sign.\nThe function should also throw an error if\
    \ the string contains any character that is neither a decimal point nor a minus\
    \ sign.\nThe function should also throw an error if the string contains any character\
    \ that is neither a decimal point nor a minus sign.\nThe function should also\
    \ throw an error if the string contains any character that is neither a decimal\
    \ point nor a minus sign.\nThe function should also throw an error if the string\
    \ contains any character that is neither a decimal point nor a minus sign.\nThe\
    \ function should also throw an error if the string contains any character that\
    \ is neither a decimal point nor a minus sign.\nThe function should also throw\
    \ an error if the string contains any character that is neither a decimal point\
    \ nor a minus sign.\nThe function should also throw an error if the string contains\
    \ any character that is neither a decimal point nor a minus sign.\nThe function\
    \ should also throw an error if the string contains any character that is neither\
    \ a decimal point nor a minus sign.\nThe function should also throw an error if\
    \ the string contains any character that is neither a decimal point nor a minus\
    \ sign.\nThe function should also throw an error if the string contains any character\
    \ that is neither a decimal point nor a minus sign.\nThe function should also\
    \ throw an error if the string contains any character that is neither a decimal\
    \ point nor a minus sign.\nThe function should also throw an error if the string\
    \ contains any character that is neither a decimal point nor a minus sign.\nThe\
    \ function should also throw an error if the string contains any character that\
    \ is neither a decimal point nor a minus sign.\nThe function should also throw\
    \ an error if the string contains any character that is neither a decimal point\
    \ nor a minus sign.\nThe function should also throw an error if the string contains\
    \ any character that is neither a decimal point nor a minus sign.\nThe function\
    \ should also throw an error if the string contains any character that is neither\
    \ a decimal point nor a minus sign.\nThe function should also throw an error if\
    \ the string contains any character that is neither a decimal point nor a minus ",
  "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x/base^base, base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a string to a number.\nThe string can contain any characters,\
    \ including spaces.\nThe function should throw an error if the string does not\
    \ contain only digits.\nThe function should throw an error if the string contains\
    \ non-numeric characters.\nThe function should throw an error if the string contains\
    \ more than 10 digits.\nThe function should throw an error if the string contains\
    \ negative numbers.\nThe function should throw an error if the string contains\
    \ leading or trailing spaces.\nThe function should throw an error if the string\
    \ contains leading or trailing zeros.\nThe function should throw an error if the\
    \ string contains leading or trailing spaces or zeros.\nThe function should throw\
    \ an error if the string contains leading or trailing spaces or zeros.\nThe function\
    \ should throw an error if the string contains leading or trailing spaces or zeros.\n\
    The function should throw an error if the string contains leading or trailing\
    \ spaces or zeros.\nThe function should throw an error if the string contains\
    \ leading or trailing spaces or zeros.\nThe function should throw an error if\
    \ the string contains leading or trailing spaces or zeros.\nThe function should\
    \ throw an error if the string contains leading or trailing spaces or zeros.\n\
    The function should throw an error if the string contains leading or trailing\
    \ spaces or zeros.\nThe function should throw an error if the string contains\
    \ leading or trailing spaces or zeros.\nThe function should throw an error if\
    \ the string contains leading or trailing spaces or zeros.\nThe function should\
    \ throw an error if the string contains leading or trailing spaces or zeros.\n\
    The function should throw an error if the string contains leading or trailing\
    \ spaces or zeros.\nThe function should throw an error if the string contains\
    \ leading or trailing spaces or zeros.\nThe function should throw an error if\
    \ the string contains leading or trailing spaces or zeros.\nThe function should\
    \ throw an error if the string contains leading or trailing spaces or zeros.\n\
    The function should throw an error if the string contains leading or trailing\
    \ spaces or zeros.\nThe function should throw an error if the string contains\
    \ leading or trailing spaces or zeros.\nThe function should throw an error if\
    \ the string contains leading or trailing spaces or zeros.\nThe function should\
    \ throw an error if the string contains leading or trailing spaces or zeros.\n\
    The function should throw an error if the string contains leading or trailing\
    \ space", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts binary to decimal.\nThe function should accept\
    \ a binary string as an argument and return the decimal equivalent as an Int64.\n\
    The function should throw an error if the binary string is not of length 2.\n\
    The function should throw an error if the binary string is not of length 8.\n\
    The function should throw an error if the binary string is not of length 16.\n\
    The function should throw an error if the binary string is not of length 32.\n\
    The function should throw an error if the binary string is not of length 64.\n\
    The function should throw an error if the binary string is not of length 128.\n\
    The function should throw an error if the binary string is not of length 256.\n\
    The function should throw an error if the binary string is not of length 512.\n\
    The function should throw an error if the binary string is not of length 1024.\n\
    The function should throw an error if the binary string is not of length 2048.\n\
    The function should throw an error if the binary string is not of length 4096.\n\
    The function should throw an error if the binary string is not of length 8192.\n\
    The function should throw an error if the binary string is not of length 16384.\n\
    The function should throw an error if the binary string is not of length 32768.\n\
    The function should throw an error if the binary string is not of length 65536.\n\
    The function should throw an error if the binary string is not of length 131072.\n\
    The function should throw an error if the binary string is not of length 262144.\n\
    The function should throw an error if the binary string is not of length 524288.\n\
    The function should throw an error if the binary string is not of length 1048576.\n\
    The function should throw an error if the binary string is not of length 2097152.\n\
    The function should throw an error if the binary string is not of length 4194304.\n\
    The function should throw an error if the binary string is not of length 8388608.\n\
    The function should throw an error if the binary string is not of length 16777216.\n\
    The function should throw an error if the binary string is not of length 33554432.\n\
    The function should throw an error if the binary string is not of length 67108864.\n\
    The function should throw an error if the binary string is not of length 134217728.\n\
    The function should throw an error if the binary string is not of length 268435456.\n\
    The function should throw an error if the binary string is not of length 536870912.\n\
    The function should throw an error if the binary string is not of length 1073741824.\n\
    The function should ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*2)\n    else\n        return string(x*base)\n\
    end\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.4>", "    if base < 2 || base > 36\n        error(\"Base\
    \ must be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits.length - base:end]\n        return digits[end]\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should accept two arguments: \na number in base 10 and a\
    \ base between 2 and 16.\nThe function should return the converted number in base\
    \ 16.\nThe function should raise an error if the base is not between 2 and 16.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is zero.\nThe function should raise an error if the number is too large.\nThe\
    \ function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is negative.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is zero.\nThe\
    \ function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is negative.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is zero.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is negative.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is too large.\nThe function should raise an error if the number is\
    \ too small.\nThe function should raise an error if the number is negative.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is zero.\nThe function should raise an error if the number is\
    \ too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is too large.\nThe function ", "    if base < 2\
    \ || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        digits =\
    \ string(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        ", " \
    \   if base < 2 || base > 36\n        error(\"Invalid base\")\n    elseif base\
    \ == 10\n        return toString(x)\n    else\n        digits = digits(x)\n  \
    \      digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        return toString(digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 10\n        error(\"Base must be between 2 and 10\")\n\
    \    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number to a string with leading\
    \ zeros. For example, change_base(8, 3) should return \"0008\".", "    if base\
    \ < 10\n        return show(Int(x))\n    else\n        return show(Int(x)/Int(base))\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that converts binary numbers\
    \ to decimal numbers. Use show() function to print the result.", "    if base\
    \ == 10 \n        return toString(x)\n    if base == 2 \n        return toString(x\
    \ * 10)\n    if base == 8 \n        return toString(x * 100)\n    if base == 10\
    \ \n        return toString(x * 1000)\n    if base == 2 \n        return toString(x\
    \ * 10000)\n    if base == 8 \n        return toString(x * 100000)\n    if base\
    \ == 10 \n        return toString(x * 1000000)\n    if base == 2 \n        return\
    \ toString(x * 10000000)\n    if base == 8 \n        return toString(x * 10000000)\n\
    \    if base == 10 \n        return toString(x * 100000000)\n    if base == 2\
    \ \n        return toString(x * 1000000000)\n    if base == 8 \n        return\
    \ toString(x * 1000000000)\n    if base == 10 \n        return toString(x * 10000000000)\n\
    \    if base == 2 \n        return toString(x * 100000000000)\n    if base ==\
    \ 8 \n        return toString(x * 100000000000)\n    if base == 10 \n        return\
    \ toString(x * 1000000000000)\n    if base == 2 \n        return toString(x *\
    \ 1000000000000)\n    if base == 8 \n        return toString(x * 1000000000000)\n\
    \    if base == 10 \n        return toString(x * 10000000000000)\n    if base\
    \ == 2 \n        return toString(x * 10000000000000)\n    if base == 8 \n    \
    \    return toString(x * 10000000000000)\n    if base == 10 \n        return toString(x\
    \ * 100000000000000)\n    if base == 2 \n        return toString(x * 100000000000000)\n\
    \    if base == 8 \n        return toString(x * 100000000000000)\n    if base\
    \ == 10 \n        return toString(x * 1000000000000000)\n    if base == 2 \n \
    \       return toString(x * 1000000000000000)\n    if base == 8 \n        return\
    \ toString(x * 1000000000000000)\n    if base == 10 \n        return toString(x\
    \ * 10000000000000000)\n    if base == 2 \n        return toString(x * 10000000000000000)\n\
    \    if base == 8 \n        return toString(x * 10000000000000000)\n    if base\
    \ == 10 \n        return toString(x * 100000000000000000)\n    if base == 2 \n\
    \        return toString(x * 100000000000000000)\n    if base == 8 \n        return\
    \ toString(x * 100000000000000000)\n    if base == 10 \n        return toString(x\
    \ * 1000000000000000000)\n    if base == 2 \n        return toString(x * 1000000000000000000)\n\
    \    if base == 8 \n        return toString(x * 1000000000000000000)\n    if base\
    \ == 10 \n        return toString(x * 10000000000000000000)\n    if base == 2\
    \ \n        return toString(x * 10000000000000000000)\n    if base == 8 \n   \
    \     return toString(x * 10000000000000000000)\n    if base ", "    if base ==\
    \ 10 \n        return toString(x)\n    else if base == 2 \n        return toString(x\
    \ * 10)\n    else \n        error(\"base must be either 10 or 2\")\nend\n</cell>\n\
    <code language=julia-1.0>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.0>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.0>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts binary numbers to decimal numbers.\
    \ \nThe function should take a string as input and return a string as output.\n\
    The input string may contain only 0s and 1s.\nThe output string should contain\
    \ only decimal numbers.\nThe function should raise an error if the input string\
    \ contains characters other than 0s and 1s.\nThe function should raise an error\
    \ if the input string contains characters other than 0s and 1s.\nThe function\
    \ should raise an error if the input string contains characters other than 0s\
    \ and 1s.\nThe function should raise an error if the input string contains characters\
    \ other than 0s and 1s.\nThe function should raise an error if the input string\
    \ contains characters other than 0s and 1s.\nThe function should raise an error\
    \ if the input string contains characters other than 0s and 1s.\nThe function\
    \ should raise an error if the input string contains characters other than 0s\
    \ and 1s.\nThe function should raise an error if the input string contains characters\
    \ other than 0s and 1s.\nThe function should raise an error if the input string\
    \ contains characters other than 0s and 1s.\nThe function should raise an error\
    \ if the input string contains characters other than 0s and 1s.\nThe function\
    \ should raise an error if the input string contains characters other than 0s\
    \ and 1s.\nThe function should raise an error if the input string contains characters\
    \ other than 0s and 1s.\nThe function should raise an error if the input string\
    \ contains characters other than 0s and 1s.\nThe function should raise an error\
    \ if the input string contains characters other than 0s and 1s.\nThe function\
    \ should raise an error if the input string contains characters other than 0s\
    \ and 1s.\nThe function should raise an error if the input string contains characters\
    \ other than 0s and 1s.\nThe function should raise an error if the input string\
    \ contains characters other than 0s and 1s.\nThe function should raise an error\
    \ if the input string contains characters other than 0s and 1s.\nThe function\
    \ should raise an error if the input string contains characters other than 0s\
    \ and 1s.\nThe function should raise an error if the input string contains characters\
    \ other than 0s and 1s.\nThe function should raise an error if the input string\
    \ contains characters other than 0s and 1s.\nThe function should raise an error\
    \ if the input string contains characters other than 0s and 1s.\nThe function\
    \ should raise an error if the input string contains characters other than 0s\
    \ and 1s.\nThe function should raise an error if the input string contains characters ",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 3\n        return string(x * 1000 + 100)\n    elseif base == 4\n        return\
    \ string(x * 10000 + 1000)\n    elseif base == 5\n        return string(x * 100000\
    \ + 10000)\n    elseif base == 6\n        return string(x * 1000000 + 100000)\n\
    \    elseif base == 7\n        return string(x * 10000000 + 1000000)\n    elseif\
    \ base == 8\n        return string(x * 100000000 + 10000000)\n    elseif base\
    \ == 9\n        return string(x * 1000000000 + 100000000)\n    elseif base ==\
    \ 10\n        return string(x * 10000000000 + 1000000000)\n    elseif base ==\
    \ 11\n        return string(x * 100000000000 + 10000000000)\n    elseif base ==\
    \ 12\n        return string(x * 1000000000000 + 100000000000)\n    elseif base\
    \ == 13\n        return string(x * 10000000000000 + 10000000000000)\n    elseif\
    \ base == 14\n        return string(x * 100000000000000 + 100000000000000)\n \
    \   elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n", "    if base == 10 \n        digits = \"0123456789\"\
    \n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base-1] + digits[x-base]\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to its decimal representation. \nThe function should accept\
    \ a binary number as its only argument and return a string representation of the\
    \ decimal number.\nThe function should raise an error if the binary number is\
    \ too large.\nThe function should raise an error if the binary number is too small.\n\
    The function should raise an error if the binary number is invalid.\nThe function\
    \ should raise an error if the binary number is too long.\nThe function should\
    \ raise an error if the binary number is too short.\nThe function should raise\
    \ an error if the binary number is too long.\nThe function should raise an error\
    \ if the binary number is too short.\nThe function should raise an error if the\
    \ binary number is too long.\nThe function should raise an error if the binary\
    \ number is too short.\nThe function should raise an error if the binary number\
    \ is too long.\nThe function should raise an error if the binary number is too\
    \ short.\nThe function should raise an error if the binary number is too long.\n\
    The function should raise an error if the binary number is too short.\nThe function\
    \ should raise an error if the binary number is too long.\nThe function should\
    \ raise an error if the binary number is too short.\nThe function should raise\
    \ an error if the binary number is too long.\nThe function should raise an error\
    \ if the binary number is too short.\nThe function should raise an error if the\
    \ binary number is too long.\nThe function should raise an error if the binary\
    \ number is too short.\nThe function should raise an error if the binary number\
    \ is too long.\nThe function should raise an error if the binary number is too\
    \ short.\nThe function should raise an error if the binary number is too long.\n\
    The function should raise an error if the binary number is too short.\nThe function\
    \ should raise an error if the binary number is too long.\nThe function should\
    \ raise an error if the binary number is too short.\nThe function should raise\
    \ an error if the binary number is too long.\nThe function should raise an error\
    \ if the binary number is too short.\nThe function should raise an error if the\
    \ binary number is too long.\nThe function should raise an error if the binary\
    \ number is too short.\nThe function should raise an error if the binary number\
    \ is too long.\nThe function should raise an error if the binary number is too\
    \ short.\nThe function should raise an error if the binary number is too long.",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    else\n        if base == 10\n            return toString(x)\n\
    \        else\n            digits = digits(x)\n            digits = digits[digits.length\
    \ - base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base", "    if base < 2 || base > 10 \n        throw(ArgumentError(\"base must\
    \ be between 2 and 10\"))\n    elseif base == 2 \n        return string(x)\n \
    \   elseif base == 10 \n        return string(x*2)\n    elseif base == 3 \n  \
    \      return string(x*3)\n    elseif base == 4 \n        return string(x*4)\n\
    \    elseif base == 5 \n        return string(x*5)\n    elseif base == 6 \n  \
    \      return string(x*6)\n    elseif base == 7 \n        return string(x*7)\n\
    \    elseif base == 8 \n        return string(x*8)\n    elseif base == 9 \n  \
    \      return string(x*9)\n    else\n        throw(ArgumentError(\"base must be\
    \ between 2 and 10\"))\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! I ended up using your solution\
    \ and it worked perfectly. Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nI came up\
    \ with this solution:\n<code>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that converts binary to decimal.\nThe input string may contain\
    \ leading zeros.\nThe output number should be in decimal base (base 10).\nThe\
    \ input string may contain leading zeros.\nThe output number should be in decimal\
    \ base (base 10).\nThe input string may contain leading zeros.\nThe output number\
    \ should be in decimal base (base 10).\nThe input string may contain leading zeros.\n\
    The output number should be in decimal base (base 10).\nThe input string may contain\
    \ leading zeros.\nThe output number should be in decimal base (base 10).\nThe\
    \ input string may contain leading zeros.\nThe output number should be in decimal\
    \ base (base 10).\nThe input string may contain leading zeros.\nThe output number\
    \ should be in decimal base (base 10).\nThe input string may contain leading zeros.\n\
    The output number should be in decimal base (base 10).\nThe input string may contain\
    \ leading zeros.\nThe output number should be in decimal base (base 10).\nThe\
    \ input string may contain leading zeros.\nThe output number should be in decimal\
    \ base (base 10).\nThe input string may contain leading zeros.\nThe output number\
    \ should be in decimal base (base 10).\nThe input string may contain leading zeros.\n\
    The output number should be in decimal base (base 10).\nThe input string may contain\
    \ leading zeros.\nThe output number should be in decimal base (base 10).\nThe\
    \ input string may contain leading zeros.\nThe output number should be in decimal\
    \ base (base 10).\nThe input string may contain leading zeros.\nThe output number\
    \ should be in decimal base (base 10).\nThe input string may contain leading zeros.\n\
    The output number should be in decimal base (base 10).\nThe input string may contain\
    \ leading zeros.\nThe output number should be in decimal base (base 10).\nThe\
    \ input string may contain leading zeros.\nThe output number should be in decimal\
    \ base (base 10).\nThe input string may contain leading zeros.\nThe output number\
    \ should be in decimal base (base 10).\nThe input string may contain leading zeros.\n\
    The output number should be in decimal base (base 10).\nThe input string may contain\
    \ leading zeros.\nThe output number should be in decimal base (base 10).\nThe\
    \ input string may contain leading zeros.", "    if base < 10\n        error(\"\
    Base must be greater than or equal to 10\")\n    else\n        if base == 2\n\
    \            return string(x%10)\n        else\n            digits = string(x%base)\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digit", "    if base < 10\n        return\
    \ toString(x::Int64, base)\n    else\n        return toString(x::Int64, base::Int64)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string that consists of 0s and 1s.\nThe output is a string that\
    \ consists of decimal numbers.\nThe function should return nothing if the input\
    \ string is not valid.\nThe function should raise an error if the input string\
    \ contains invalid characters.\nThe function should raise an error if the input\
    \ string contains invalid characters.\nThe function should raise an error if the\
    \ input string contains invalid characters.\nThe function should raise an error\
    \ if the input string contains invalid characters.\nThe function should raise\
    \ an error if the input string contains invalid characters.\nThe function should\
    \ raise an error if the input string contains invalid characters.\nThe function\
    \ should raise an error if the input string contains invalid characters.\nThe\
    \ function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error ", "    if base < 10\n        error(\"base\
    \ must be less than 10\")\n    elseif base > 36\n        error(\"base must be\
    \ less than 36\")\n    else\n        str = String(\"\")\n        base = base\n\
    \        while x > base\n            str = String(str + String(x%base))\n    \
    \        x = floor(x/base)\n        end\n        str = String(str + String(x))\n\
    \        return str\n    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another.\nThe function should take two arguments:\
    \ the first is the number to be converted\nand the second is the base to convert\
    \ to.\nThe function should return the converted number as a string.\nThe function\
    \ should raise an error if the base is invalid.\nThe function should raise an\
    \ error if the number is negative.\nThe function should raise an error if the\
    \ number is too large.\nThe function should raise an error if the number is too\
    \ small.\nThe function should raise an error if the number is too large.\nThe\
    \ function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too ", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 2\n        return string(x)\n    else\n        digits = string(x)\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - base:end]\n\
    \        return digits[end]\n    end\nend", "    if base < 10\n        error(\"\
    base must be less than 10\")\n    elseif base > 36\n        error(\"base must\
    \ be less than 36\")\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(toBase(x, base))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal.\nWrite a function that converts\
    \ decimal numbers to binary.\nWrite a function that converts binary numbers to\
    \ hexadecimal.\nWrite a function that converts hexadecimal numbers to binary.\n\
    Write a function that converts binary numbers to octal.\nWrite a function that\
    \ converts octal numbers to binary.\nWrite a function that converts decimal numbers\
    \ to hexadecimal.\nWrite a function that converts hexadecimal numbers to decimal.\n\
    Write a function that converts decimal numbers to octal.\nWrite a function that\
    \ converts octal numbers to decimal.\nWrite a function that converts decimal numbers\
    \ to binary.\nWrite a function that converts binary numbers to hexadecimal.\n\
    Write a function that converts hexadecimal numbers to binary.\nWrite a function\
    \ that converts binary numbers to octal.\nWrite a function that converts octal\
    \ numbers to decimal.\nWrite a function that converts decimal numbers to binary.\n\
    Write a function that converts binary numbers to hexadecimal.\nWrite a function\
    \ that converts hexadecimal numbers to binary.\nWrite a function that converts\
    \ binary numbers to octal.\nWrite a function that converts octal numbers to decimal.\n\
    Write a function that converts decimal numbers to binary.\nWrite a function that\
    \ converts binary numbers to hexadecimal.\nWrite a function that converts hexadecimal\
    \ numbers to binary.\nWrite a function that converts binary numbers to octal.\n\
    Write a function that converts octal numbers to decimal.\nWrite a function that\
    \ converts decimal numbers to binary.\nWrite a function that converts binary numbers\
    \ to hexadecimal.\nWrite a function that converts hexadecimal numbers to binary.\n\
    Write a function that converts binary numbers to octal.\nWrite a function that\
    \ converts octal numbers to decimal.\nWrite a function that converts decimal numbers\
    \ to binary.\nWrite a function that converts binary numbers to hexadecimal.\n\
    Write a function that converts hexadecimal numbers to binary.\nWrite a function\
    \ that converts binary numbers to octal.\nWrite ", "    if base < 2 || base >\
    \ 10\n        throw(ArgumentError(\"base must be between 2 and 10\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        return string(x*base)\n\
    end\n</cell>\n<code language=julia-1.3>", "    if base < 2 || base > 36\n    \
    \    error(\"Invalid base\")\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        return toString(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe input is a\
    \ string containing only 0s and 1s.\nThe output is a string containing only decimal\
    \ numbers.\nThe function should raise an error if the input contains non-binary\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 binary digits.\nThe function should raise an error if the input contains\
    \ more than 32 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 32 binary digits.\nThe function should raise an error if\
    \ the input contains more than 32 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 32 binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 32 binary digits.\nThe\
    \ function should raise an error if the input contains more than 32 decimal digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 binary digits.\nThe function should raise an error if the input contains\
    \ more than 32 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 32 binary digits.\nThe function should raise an error if\
    \ the input contains more than 32 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 32 binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 32 binary digits.\nThe\
    \ function should raise an error if the input contains more than 32 decimal digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n\
    The function should raise an error if the input contains more than 32 decimal\
    \ digits.\nThe function should raise an error if the input contains more than\
    \ 32 binary digits.\nThe function should raise an error if the input contains\
    \ more than 32 decimal digits.\nThe function should raise an error if the input\
    \ contains more than 32 binary digits.\nThe function should raise an error if\
    \ the input contains more than 32 decimal digits.\nThe function should raise an\
    \ error if the input contains more than 32 binary digits.\nThe function should\
    \ raise an error if the input contains more than 32 decimal digits.\nThe function\
    \ should raise an error if the input contains more than 32 binary digits.\nThe\
    \ function should raise an error if the input contains more than 32 decimal digits.\n\
    The function should raise an error if the input contains more than 32 binary digits.\n",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers. Assume that the input is a binary string\
    \ with leading zeroes. Assume that the input string contains only 0s and 1s.\n\
    The function should throw an error if the input string contains anything other\
    \ than 0s and 1s.\nThe function should throw an error if the input string contains\
    \ leading zeroes.\nThe function should throw an error if the input string contains\
    \ leading zeros.\nThe function should throw an error if the input string contains\
    \ leading spaces.\nThe function should throw an error if the input string contains\
    \ trailing spaces.\nThe function should throw an error if the input string contains\
    \ leading or trailing spaces.\nThe function should throw an error if the input\
    \ string contains leading or trailing zeros.\nThe function should throw an error\
    \ if the input string contains leading or trailing spaces or zeros.\nThe function\
    \ should throw an error if the input string contains leading or trailing spaces\
    \ or zeros.\nThe function should throw an error if the input string contains leading\
    \ or trailing spaces or zeros.\nThe function should throw an error if the input\
    \ string contains leading or trailing spaces or zeros.\nThe function should throw\
    \ an error if the input string contains leading or trailing spaces or zeros.\n\
    The function should throw an error if the input string contains leading or trailing\
    \ spaces or zeros.\nThe function should throw an error if the input string contains\
    \ leading or trailing spaces or zeros.\nThe function should throw an error if\
    \ the input string contains leading or trailing spaces or zeros.\nThe function\
    \ should throw an error if the input string contains leading or trailing spaces\
    \ or zeros.\nThe function should throw an error if the input string contains leading\
    \ or trailing spaces or zeros.\nThe function should throw an error if the input\
    \ string contains leading or trailing spaces or zeros.\nThe function should throw\
    \ an error if the input string contains leading or trailing spaces or zeros.\n\
    The function should throw an error if the input string contains leading or trailing\
    \ spaces or zeros.\nThe function should throw an error if the input string contains\
    \ leading or trailing spaces or zeros.\nThe function should throw an error if\
    \ the input string contains leading or trailing spaces or zeros.\nThe function\
    \ should throw an error if the input string contains leading or trailing spaces\
    \ or zeros.\nThe function should throw an error if the input string contains leading\
    \ or ", "    if base < 10 \n        error(\"Base must be greater than 10\")\n\
    \    elseif base == 10 \n        return toString(x)\n    elseif base == 2 \n \
    \       return toString(x * 10)\n    elseif base == 3 \n        return toString(x\
    \ * 100)\n    elseif base == 4 \n        return toString(x * 1000)\n    elseif\
    \ base == 5 \n        return toString(x * 10000)\n    elseif base == 6 \n    \
    \    return toString(x * 100000)\n    elseif base == 7 \n        return toString(x\
    \ * 1000000)\n    elseif base == 8 \n        return toString(x * 10000000)\n \
    \   elseif base == 9 \n        return toString(x * 100000000)\n    else\n    \
    \    error(\"Base must be between 2 and 9\")\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nThe answer by is correct, but I wanted to add some additional\
    \ information that might help others who are new to Julia.\nThe first thing to\
    \ understand is that Julia is built on top of Julia itself. This means that you\
    \ can write Julia code in a way that looks similar to other languages. In fact,\
    \ this is one of the main reasons why Julia is so popular.\nThe second thing to\
    \ understand is that Julia is built on top of Julia itself. This means that you\
    \ can write Julia code in a way that looks similar to other languages. In fact,\
    \ this is one of the main reasons why Julia is so popular.\nThe third thing to\
    \ understand is that Julia is built on top of Julia itself. This means that you\
    \ can write Julia code in a way that looks similar to other languages. In fact,\
    \ this is one of the main reasons why Julia is so popular.\nThe fourth thing to\
    \ understand is that Julia is built on top of Julia itself. This means that you\
    \ can write Julia code in a way that looks similar to other languages. In fact,\
    \ this is one of the main reasons why Julia is so popular.\nThe fifth thing to\
    \ understand is that Julia is built on top of Julia itself. This means that you\
    \ can write Julia code in a way that looks similar to other languages. In fact,\
    \ this is one of the main reasons why Julia is so popular.\nThe sixth thing to\
    \ understand is that Julia is built on top of Julia itself. This means that you\
    \ can write Julia code in a way that looks similar to other languages. In fact,\
    \ this is one of the main reasons why Julia is so popular.\nThe seventh thing\
    \ to understand is that Julia is built on top of Julia itself. This means that\
    \ you can write Julia code in a way that looks similar to other languages. In\
    \ fact, this is one of the main reason", "    if base < 2 || base > 36\n     \
    \   throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base ==\
    \ 2\n        return string(x)\n    else\n        digits = string(x)\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ digits = digits[2:end]\n        return digits[2:end]\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        error(\"Base must be greater than or equal to 10\")\n\
    \    else if base > 64\n        error(\"Base must be less than or equal to 64\"\
    )\n    else\n        str = toString(x)\n        str = str[str.length div base]\n\
    \        str = str * base\n        return str\nend\n</cell>\n<code language=julia-1.0>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.0>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.0>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to its decimal equivalent.\nThe function\
    \ should take a single argument that is a binary number.\nThe function should\
    \ return the decimal equivalent of the binary number.\nThe function should raise\
    \ an error if the binary number is too large.\nThe function should raise an error\
    \ if the binary number is too small.\nThe function should raise an error if the\
    \ binary number is not exactly a binary number.\nThe function should raise an\
    \ error if the binary number is not exactly a binary number.\nThe function should\
    \ raise an error if the binary number is not exactly a binary number.\nThe function\
    \ should raise an error if the binary number is not exactly a binary number.\n\
    The function should raise an error if the binary number is not exactly a binary\
    \ number.\nThe function should raise an error if the binary number is not exactly\
    \ a binary number.\nThe function should raise an error if the binary number is\
    \ not exactly a binary number.\nThe function should raise an error if the binary\
    \ number is not exactly a binary number.\nThe function should raise an error if\
    \ the binary number is not exactly a binary number.\nThe function should raise\
    \ an error if the binary number is not exactly a binary number.\nThe function\
    \ should raise an error if the binary number is not exactly a binary number.\n\
    The function should raise an error if the binary number is not exactly a binary\
    \ number.\nThe function should raise an error if the binary number is not exactly\
    \ a binary number.\nThe function should raise an error if the binary number is\
    \ not exactly a binary number.\nThe function should raise an error if the binary\
    \ number is not exactly a binary number.\nThe function should raise an error if\
    \ the binary number is not exactly a binary number.\nThe function should raise\
    \ an error if the binary number is not exactly a binary number.\nThe function\
    \ should raise an error if the binary number is not exactly a binary number.\n\
    The function should raise an error if the binary number is not exactly a binary\
    \ number.\nThe function should raise an error if the binary number is not exactly\
    \ a binary number.\nThe function should raise an error if the binary number is\
    \ not exactly a binary number.\nThe function should raise an error if the binary\
    \ number is not exactly a binary number.\nThe function should raise an error if\
    \ the binary number is not exactly a binary number.\nThe function should raise\
    \ an error if the binary number is not exactly a binary number.\nThe function\
    \ should ", "    if base < 10 \n        error(\"base must be greater than or equal\
    \ to 10\")\n    else if base > 36 \n        error(\"base must be less than or\
    \ equal to 36\")\n    else if base == 10 \n        return \"0\"\n    else \n \
    \       digits = digits(x)\n        digits = digits[digits.length-1::]\n     \
    \   digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::]\n        digits = digits[digits.length-1::]\n\
    \        digits = digits[digits.length-1::", "    if base < 10\n        return\
    \ str((x % base) + base)\n    else\n        return change_base(x / base, base)\n\
    end\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16 (hexadecimal).\nThe function should take two arguments: the number to be\
    \ converted and the base of the number.\nThe function should return the converted\
    \ number as a string.\nThe function should raise an error if the base is not 10\
    \ or 16.\nThe function should raise an error if the number is not an integer.\n\
    The function should raise an error if the number is negative.", "    if base <\
    \ 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    \n    if base == 2\n        return string(x)\n    \n    digits = string(x)\n\
    \    digits = digits[2:end]\n    digits = digits[digits.length - digits.length\
    \ % base]\n    digits = digits[digits.length / base]\n    digits = digits[digits.length\
    \ % base]\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 4)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 5)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 6)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 7)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 9)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 11)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 12)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 13)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 14)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 15)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 16)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 17)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 18)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 19)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 20)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 21)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 22)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 23)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 24)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 25)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 26)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 27)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 28)\n</cell>\n<code language=julia-1.5>\n\
    change_", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    \n    if x == 0\n        return \"\"\n    \n  \
    \  digits = digits(x)\n    digits = digits[2:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits.length - base:end]\n\
    \    \n    digits = ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from one base to another.\nThe function should\
    \ throw an error if the base is not between 2 and 36.\nThe function should throw\
    \ an error if the input number is negative.\nThe function should throw an error\
    \ if the input number is zero.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is not\
    \ representable in the target base.\nThe function should throw an error if the\
    \ input number is not representable in the source base.\nThe function should throw\
    \ an error if the input number is too large.\nThe function should throw an error\
    \ if the input number is too small.\nThe function should throw an error if the\
    \ input number is not representable in the target base.\nThe function should throw\
    \ an error if the input number is not representable in the source base.\nThe function\
    \ should throw an error if the input number is too large.\nThe function should\
    \ throw an error if the input number is too small.\nThe function should throw\
    \ an error if the input number is not representable in the target base.\nThe function\
    \ should throw an error if the input number is not representable in the source\
    \ base.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is not representable in the target\
    \ base.\nThe function should throw an error if the input number is not representable\
    \ in the source base.\nThe function should throw an error if the input number\
    \ is too large.\nThe function should throw an error if the input number is too\
    \ small.\nThe function should throw an error if the input number is not representable\
    \ in the target base.\nThe function should throw an error if the input number\
    \ is not representable in the source base.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is not representable in the target base.\nThe function should throw an\
    \ error if the input number is not representable in the source base.\nThe function\
    \ should throw an error if the input number is too large.\nThe function should\
    \ throw an error if the input number is too small.\nThe function should throw\
    \ an error if the input number is not representable in the target base.\nThe function\
    \ should throw an error if the input number is not representable in the source\
    \ base.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is not representable in the target ",
  "    if base == 10 \n        digits = \"0123456789\"\n    else \n        digits\
    \ = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return digits[base*(x-1)::Int64]\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The function should accept a binary string as input and return a decimal number.\n\
    The function should raise an error if the input is not a binary string.\nThe function\
    \ should raise an error if the input contains more than 1 '1'.\nThe function should\
    \ raise an error if the input contains more than 1 '0'.\nThe function should raise\
    \ an error if the input contains more than 2 bits.\nThe function should raise\
    \ an error if the input contains more than 8 bits.\nThe function should raise\
    \ an error if the input contains more than 64 bits.\nThe function should raise\
    \ an error if the input contains more than 128 bits.\nThe function should raise\
    \ an error if the input contains more than 256 bits.\nThe function should raise\
    \ an error if the input contains more than 512 bits.\nThe function should raise\
    \ an error if the input contains more than 1024 bits.\nThe function should raise\
    \ an error if the input contains more than 2048 bits.\nThe function should raise\
    \ an error if the input contains more than 4096 bits.\nThe function should raise\
    \ an error if the input contains more than 8192 bits.\nThe function should raise\
    \ an error if the input contains more than 16384 bits.\nThe function should raise\
    \ an error if the input contains more than 32768 bits.\nThe function should raise\
    \ an error if the input contains more than 65536 bits.\nThe function should raise\
    \ an error if the input contains more than 131072 bits.\nThe function should raise\
    \ an error if the input contains more than 262144 bits.\nThe function should raise\
    \ an error if the input contains more than 524288 bits.\nThe function should raise\
    \ an error if the input contains more than 1048576 bits.\nThe function should\
    \ raise an error if the input contains more than 2097152 bits.\nThe function should\
    \ raise an error if the input contains more than 4194304 bits.\nThe function should\
    \ raise an error if the input contains more than 8388608 bits.\nThe function should\
    \ raise an error if the input contains more than 16777216 bits.\nThe function\
    \ should raise an error if the input contains more than 33554432 bits.\nThe function\
    \ should raise an error if the input contains more than 67108864 bits.\nThe function\
    \ should raise an error if the input contains more than 134217728 bit", "    if\
    \ base < 10\n        return string(x)\n    else\n        return change_base(x\
    \ % base, base * 10)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ converts binary numbers to decimal.\nThe input is a string that consists of\
    \ only 0s and 1s.\nThe output is a decimal number.\nThe input may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\nThe input\
    \ string may contain leading zeros.\nThe output will have the same number of digits\
    \ as the input.\nThe input string may contain leading zeros.\nThe output will\
    \ have the same number of digits as the input.\nThe input string may contain leading\
    \ zeros.\nThe output will have the same number of digits as the input.\n", " \
    \   if base < 2 || base > 10 \n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2 \n        return string(x)\n    elseif base\
    \ == 10 \n        return string(x*2)\n    elseif base == 3 \n        return string(x*3)\n\
    \    elseif base == 4 \n        return string(x*4)\n    elseif base == 5 \n  \
    \      return string(x*5)\n    elseif base == 6 \n        return string(x*6)\n\
    \    elseif base == 7 \n        return string(x*7)\n    elseif base == 8 \n  \
    \      return string(x*8)\n    elseif base == 9 \n        return string(x*9)\n\
    \    else\n        throw(ArgumentError(\"base must be between 2 and 10\"))\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base >\
    \ 36\n        error(\"Base must be between 2 and 36\")\n    elseif base == 2\n\
    \        return string(x)\n    elseif base == 3\n        return string(x*10^3)\n\
    \    elseif base == 4\n        return string(x*10^6)\n    elseif base == 5\n \
    \       return string(x*10^9)\n    elseif base == 6\n        return string(x*10^12)\n\
    \    elseif base == 7\n        return string(x*10^15)\n    elseif base == 8\n\
    \        return string(x*10^18)\n    elseif base == 9\n        return string(x*10^21)\n\
    \    elseif base == 10\n        return string(x*10^24)\n    elseif base == 11\n\
    \        return string(x*10^27)\n    elseif base == 12\n        return string(x*10^30)\n\
    \    elseif base == 13\n        return string(x*10^33)\n    elseif base == 14\n\
    \        return string(x*10^36)\n    elseif base == 15\n        return string(x*10^39)\n\
    \    elseif base == 16\n        return string(x*10^42)\n    elseif base == 17\n\
    \        return string(x*10^45)\n    elseif base == 18\n        return string(x*10^48)\n\
    \    elseif base == 19\n        return string(x*10^51)\n    elseif base == 20\n\
    \        return string(x*10^54)\n    elseif base == 21\n        return string(x*10^57)\n\
    \    elseif base == 22\n        return string(x*10^60)\n    elseif base == 23\n\
    \        return string(x*10^63)\n    elseif base == 24\n        return string(x*10^66)\n\
    \    elseif base == 25\n        return string(x*10^69)\n    elseif base == 26\n\
    \        return string(x*10^72)\n    elseif base == 27\n        return string(x*10^75)\n\
    \    elseif base == 28\n        return string(x*10^78)\n    elseif base == 29\n\
    \        return string(x*10^81)\n    elseif base == 30\n        return string(x*10^84)\n\
    \    elseif base == 31\n        return string(x*10^87)\n    elseif base == 32\n\
    \        return string(x*10^90)\n    elseif base == 33\n        return string(x*10^93)\n\
    \    elseif base == 34\n        return string(x*10^96)\n    elseif base == 35\n\
    \        return string(x*10^99)\n    elseif base ", "    if base < 2 || base >\
    \ 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        return string(x/base^base,\
    \ base^base)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another.", "    if base < 10\n        return show(base*x)\n\
    \    else\n        return show(base*(x/10) + x%10)\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal numbers. Use a while loop\
    \ to keep dividing the number by 2 until you get to 1 and then multiply that number\
    \ by 10 and add it to the decimal number. Return this decimal number.", "    if\
    \ base == 10 \n        digits = \"0123456789\"\n    else \n        digits = \"\
    0123456789abcdefghijklmnopqrstuvwxyz\"\n    digits = digits[base-1:end]\n    return\
    \ digits[(x%base)] + digits[(x/base)]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary to decimal.\nThe input is a string with only 0s and 1s.\nThe output is\
    \ an integer representing the binary number in decimal.\nThe function should work\
    \ for all bases from 2 to 36.\nThe function should raise an error if the input\
    \ is not valid.\nThe function should raise an error if the input contains more\
    \ than one '1'.\nThe function should raise an error if the input contains more\
    \ than one '0'.\nThe function should raise an error if the input contains '0',\
    \ but no other '1' or '0'.\nThe function should raise an error if the input contains\
    \ '1', but no other '0' or '1'.\nThe function should raise an error if the input\
    \ contains '0' and '1'.\nThe function should raise an error if the input contains\
    \ '0' and no other '1' or '0'.\nThe function should raise an error if the input\
    \ contains '1' and no other '0' or '1'.\nThe function should raise an error if\
    \ the input contains '0' and '1'.\nThe function should raise an error if the input\
    \ contains '0' and no other '1' or '0'.\nThe function should raise an error if\
    \ the input contains '1' and no other '0' or '1'.\nThe function should raise an\
    \ error if the input contains '0' and '1'.\nThe function should raise an error\
    \ if the input contains '0' and no other '1' or '0'.\nThe function should raise\
    \ an error if the input contains '1' and no other '0' or '1'.\nThe function should\
    \ raise an error if the input contains '0' and '1'.\nThe function should raise\
    \ an error if the input contains '0' and no other '1' or '0'.\nThe function should\
    \ raise an error if the input contains '1' and no other '0' or '1'.\nThe function\
    \ should raise an error if the input contains '0' and '1'.\nThe function should\
    \ raise an error if the input contains '0' and no other '1' or '0'.\nThe function\
    \ should raise an error if the input contains '1' and no other '0' or '1'.\nThe\
    \ function should raise an error if the input contains '0' and '1'.\nThe function\
    \ should raise an error if the input contains '0' and no other '1' or '0'.\nThe\
    \ function should raise an error if the input contains '1' and no other '0' or\
    \ '1'.\n", "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x/base^base, base^base)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    change_base(::Int64, ::Int64)", "    if base < 2 || base > 10\n  \
    \      throw(ArgumentError(\"Base must be between 2 and 10\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        digits = string(x)\n     \
    \   digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        ", "    if base < 2 || base > 36\n  \
    \      throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base\
    \ == 2\n        return string(x)\n    else\n        digits = string(x)\n     \
    \   digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digits.length\
    \ % base:end]\n        digits = digits[digits.length - digits.length % base:end]\n\
    \        digits = digits[2:end]\n        digits = digits[digits.length - digit",
  "    if base < 10\n        return show(base*x)\n    else\n        return show(base*(x/base))\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string containing only 0s and 1s.\nThe output is a decimal number.\n\
    The function should ignore leading zeros.\nThe function should ignore trailing\
    \ zeros.\nThe function should ignore extra leading zeros.\nThe function should\
    \ ignore extra trailing zeros.\nThe function should ignore leading zeros and trailing\
    \ zeros unless all digits are 0.\nThe function should ignore leading zeros and\
    \ trailing zeros unless all digits are 1.\nThe function should ignore leading\
    \ zeros, trailing zeros, and extra zeros unless all digits are 0.\nThe function\
    \ should ignore leading zeros, trailing zeros, and extra zeros unless all digits\
    \ are 1.\nThe function should ignore leading zeros, trailing zeros, and extra\
    \ zeros unless all digits are 0.\nThe function should ignore leading zeros, trailing\
    \ zeros, and extra zeros unless all digits are 1.\nThe function should ignore\
    \ leading zeros, trailing zeros, and extra zeros unless all digits are 0.\nThe\
    \ function should ignore leading zeros, trailing zeros, and extra zeros unless\
    \ all digits are 1.\nThe function should ignore leading zeros, trailing zeros,\
    \ and extra zeros unless all digits are 0.\nThe function should ignore leading\
    \ zeros, trailing zeros, and extra zeros unless all digits are 1.\nThe function\
    \ should ignore leading zeros, trailing zeros, and extra zeros unless all digits\
    \ are 0.\nThe function should ignore leading zeros, trailing zeros, and extra\
    \ zeros unless all digits are 1.\nThe function should ignore leading zeros, trailing\
    \ zeros, and extra zeros unless all digits are 0.\nThe function should ignore\
    \ leading zeros, trailing zeros, and extra zeros unless all digits are 1.\nThe\
    \ function should ignore leading zeros, trailing zeros, and extra zeros unless\
    \ all digits are 0.\nThe function should ignore leading zeros, trailing zeros,\
    \ and extra zeros unless all digits are 1.\nThe function should ignore leading\
    \ zeros, trailing zeros, and extra zeros unless all digits are 0.\nThe function\
    \ should ignore leading zeros, trailing zeros, and extra zeros unless all digits\
    \ are 1.\nThe function should ignore leading zeros, trailing zeros, and extra\
    \ zeros unless all digits are 0.\nThe function should ignore leading zeros, trailing\
    \ zeros, and extra zeros unless all digit", "    if base < 10\n        return\
    \ show(base * x)\n    else\n        return show(base * x) + show(x % base)\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 2.\nThe function should accept two arguments: x is the number to be converted\n\
    and base is the base of the number.\nThe function should return the string representation\
    \ of x after the\nconversion.\nThe function should raise an error if the base\
    \ is not 2 or 10.\nThe function should raise an error if the input number is negative.\n\
    The function should raise an error if the input number is zero.\nThe function\
    \ should raise an error if the input number is too large.\nThe function should\
    \ raise an error if the input number is too small.\nThe function should raise\
    \ an error if the input number is infinite.\nThe function should raise an error\
    \ if the input number is NaN.\nThe function should raise an error if the input\
    \ number is not convertible\nfrom base 10 to base 2.\nThe function should raise\
    \ an error if the input number is not convertible\nfrom base 10 to base 10.\n\
    The function should raise an error if the input number is not convertible\nfrom\
    \ base 2 to base 10.\nThe function should raise an error if the input number is\
    \ not convertible\nfrom base 2 to base 2.\nThe function should raise an error\
    \ if the input number is not convertible\nfrom base 10 to base 10.\nThe function\
    \ should raise an error if the input number is not convertible\nfrom base 2 to\
    \ base 10.\nThe function should raise an error if the input number is not convertible\n\
    from base 10 to base 2.\nThe function should raise an error if the input number\
    \ is not convertible\nfrom base 2 to base 2.\nThe function should raise an error\
    \ if the input number is not convertible\nfrom base 10 to base 10.\nThe function\
    \ should raise an error if the input number is not convertible\nfrom base 2 to\
    \ base 10.\nThe function should raise an error if the input number is not convertible\n\
    from base 10 to base 2.\nThe function should raise an error if the input number\
    \ is not convertible\nfrom base 2 to base 2.\nThe function should raise an error\
    \ if the input number is not convertible\nfrom base 10 to base 10.\nThe function\
    \ should raise an error if the input number is not convertible\nfrom base 2 to\
    \ base 10.\nThe function should raise an error if the input number is not convertible\n\
    from base 10 to base 2.\nThe function should raise an error if the ", "    if\
    \ base < 2 || base > 10 \n        throw(ArgumentError(\"base must be between 2\
    \ and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n     \
    \   digits = string(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        ", " \
    \   if base < 10\n        return toString(x::Int64, base)\n    else\n        return\
    \ toString(x::Int64, base::Int64)\nend\n</cell>\n<code language=julia-1.1>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers\
    \ to decimal numbers.\nThe function should take two arguments: a string of binary\
    \ digits and a base (2 to 36).\nThe function should return the decimal number\
    \ represented by the binary string.\nThe function should raise an error if the\
    \ base is out of range.\nThe function should raise an error if the string contains\
    \ invalid characters.\nThe function should raise an error if the string contains\
    \ leading zeros.\nThe function should raise an error if the string contains leading\
    \ zeros.\nThe function should raise an error if the string contains leading zeros.\n\
    The function should raise an error if the string contains leading zeros.\nThe\
    \ function should raise an error if the string contains leading zeros.\nThe function\
    \ should raise an error if the string contains leading zeros.\nThe function should\
    \ raise an error if the string contains leading zeros.\nThe function should raise\
    \ an error if the string contains leading zeros.\nThe function should raise an\
    \ error if the string contains leading zeros.\nThe function should raise an error\
    \ if the string contains leading zeros.\nThe function should raise an error if\
    \ the string contains leading zeros.\nThe function should raise an error if the\
    \ string contains leading zeros.\nThe function should raise an error if the string\
    \ contains leading zeros.\nThe function should raise an error if the string contains\
    \ leading zeros.\nThe function should raise an error if the string contains leading\
    \ zeros.\nThe function should raise an error if the string contains leading zeros.\n\
    The function should raise an error if the string contains leading zeros.\nThe\
    \ function should raise an error if the string contains leading zeros.\nThe function\
    \ should raise an error if the string contains leading zeros.\nThe function should\
    \ raise an error if the string contains leading zeros.\nThe function should raise\
    \ an error if the string contains leading zeros.\nThe function should raise an\
    \ error if the string contains leading zeros.\nThe function should raise an error\
    \ if the string contains leading zeros.\nThe function should raise an error if\
    \ the string contains leading zeros.\nThe function should raise an error if the\
    \ string contains leading zeros.\nThe function should raise an error if the string\
    \ contains leading zeros.\nThe function should raise an error if the string contains\
    \ leading zeros.\nThe function should raise an error if the string contains leading\
    \ zeros.\nThe function should raise an error if the string contains leading zeros.\n\
    The function should raise an error if the string contains leading zeros.\nThe\
    \ function should raise an error if the string contains leading zeros.\nThe function\
    \ should raise an error if the string contains leading zeros.\nThe function should\
    \ raise an error if the string contains leading zeros.", "    if base == 10 \n\
    \        digits = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    \n    digits = digits[base:end]\n    \n    return digits[x]\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from one base to another.",
  "    if base < 10\n        return str(x)\n    else\n        return change_base(x\
    \ / base, base) + str(x % base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number. \nThe input is a string that consists of\
    \ only 0s and 1s.\nThe output is a decimal number.\nThe function should raise\
    \ an error if the input is not valid.\nThe function should raise an error if the\
    \ input contains more than one leading 0.\nThe function should raise an error\
    \ if the input contains more than one trailing 0.\nThe function should raise an\
    \ error if the input contains more than one leading 1.\nThe function should raise\
    \ an error if the input contains more than one trailing 1.\nThe function should\
    \ raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains more than one leading 1.\nThe function\
    \ should raise an error if the input contains more than one trailing 1.\nThe function\
    \ should raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains more than one leading 1.\nThe function\
    \ should raise an error if the input contains more than one trailing 1.\nThe function\
    \ should raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains more than one leading 1.\nThe function\
    \ should raise an error if the input contains more than one trailing 1.\nThe function\
    \ should raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains more than one leading 1.\nThe function\
    \ should raise an error if the input contains more than one trailing 1.\nThe function\
    \ should raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains more than one leading 1.\nThe function\
    \ should raise an error if the input contains more than one trailing 1.\nThe function\
    \ should raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains more than one leading 1.\nThe function\
    \ should raise an error if the input contains more than one trailing 1.\nThe function\
    \ should raise an error if the input contains more than one leading 0.\nThe function\
    \ should raise an error if the input contains more than one trailing 0.\nThe function\
    \ should raise an error if the input contains more than one leading 1.\nThe function\
    \ should raise an error if the input contains more than one trailing 1.\nThe function\
    \ should raise an error if the input ", "    if base < 2 || base > 10\n      \
    \  throw(ArgumentError(\"Base must be between 2 and 10\"))\n    \n    if base\
    \ == 2\n        return string(x)\n    \n    digits = string(x)\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n    digits = digits[2:end]\n    digits = digits[2:end]\n\
    \    digits = digits[2:end]\n", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base^2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 10 \n        error(\"base must be between 2 and 10\"\
    )\n    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another.\nThe input number x and the base number base\
    \ are both integers.\nThe output number y is the converted number in base base\
    \ in string representation.\nThe input number x and the output number y are both\
    \ integers.\nThe input number x and the base number base are both positive integers.\n\
    The output number y is the converted number in base base in string representation.\n\
    The input number x and the output number y are both integers.\nThe input number\
    \ x and the base number base are both positive integers.\nThe output number y\
    \ is the converted number in base base in string representation.\nThe input number\
    \ x and the output number y are both integers.\nThe input number x and the base\
    \ number base are both positive integers.\nThe output number y is the converted\
    \ number in base base in string representation.\nThe input number x and the output\
    \ number y are both integers.\nThe input number x and the base number base are\
    \ both positive integers.\nThe output number y is the converted number in base\
    \ base in string representation.\nThe input number x and the output number y are\
    \ both integers.\nThe input number x and the base number base are both positive\
    \ integers.\nThe output number y is the converted number in base base in string\
    \ representation.\nThe input number x and the output number y are both integers.\n\
    The input number x and the base number base are both positive integers.\nThe output\
    \ number y is the converted number in base base in string representation.\nThe\
    \ input number x and the output number y are both integers.\nThe input number\
    \ x and the base number base are both positive integers.\nThe output number y\
    \ is the converted number in base base in string representation.\nThe input number\
    \ x and the output number y are both integers.\nThe input number x and the base\
    \ number base are both positive integers.\nThe output number y is the converted\
    \ number in base base in string representation.\nThe input number x and the output\
    \ number y are both integers.\nThe input number x and the base number base are\
    \ both positive integers.\nThe output number y is the converted number in base\
    \ base in string representation.\nThe input number x and the output number y are\
    \ both ", "    if base == 10 \n        digits = digits(x)\n        return digits[digits.length-1]\n\
    \    digits = digits(x)\n    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n",
  "    if base < 10\n        return show(base * x)\n    else\n        return show(base\
    \ * x)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a string to a number.\nThe function should take a string as input and return\
    \ the number as a Float64.\nThe function should raise an error if the string cannot\
    \ be converted to a number.\nThe function should raise an error if the string\
    \ contains non-numeric characters.\nThe function should raise an error if the\
    \ string contains any non-numeric characters.\nThe function should raise an error\
    \ if the string contains any non-numeric characters.\nThe function should raise\
    \ an error if the string contains any non-numeric characters.\nThe function should\
    \ raise an error if the string contains any non-numeric characters.\nThe function\
    \ should raise an error if the string contains any non-numeric characters.\nThe\
    \ function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any non-numeric characters.\n",
  "    if base < 2 || base > 10 \n        error(\"Base must be between 2 and 10\"\
    )\n    elseif base == 2\n        return string(x)\n    else\n        return string(x\
    \ * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. \nThe function should take two arguments:\
    \ a string representing a binary number and a base between 2 and 16. \nThe function\
    \ should return a string representing the decimal number in base 10. \nThe function\
    \ should raise an error if the base is not between 2 and 16. \nThe function should\
    \ raise an error if the input string does not represent a binary number. \nThe\
    \ function should raise an error if the input string does not represent a binary\
    \ number in base 2 to base 16. \nThe function should raise an error if the input\
    \ string does not represent a binary number in base 2 to base 16. \nThe function\
    \ should raise an error if the input string does not represent a binary number\
    \ in base 2 to base 16. \nThe function should raise an error if the input string\
    \ does not represent a binary number in base 2 to base 16. \nThe function should\
    \ raise an error if the input string does not represent a binary number in base\
    \ 2 to base 16. \nThe function should raise an error if the input string does\
    \ not represent a binary number in base 2 to base 16. \nThe function should raise\
    \ an error if the input string does not represent a binary number in base 2 to\
    \ base 16. \nThe function should raise an error if the input string does not represent\
    \ a binary number in base 2 to base 16. \nThe function should raise an error if\
    \ the input string does not represent a binary number in base 2 to base 16. \n\
    The function should raise an error if the input string does not represent a binary\
    \ number in base 2 to base 16. \nThe function should raise an error if the input\
    \ string does not represent a binary number in base 2 to base 16. \nThe function\
    \ should raise an error if the input string does not represent a binary number\
    \ in base 2 to base 16. \nThe function should raise an error if the input string\
    \ does not represent a binary number in base 2 to base 16. \nThe function should\
    \ raise an error if the input string does not represent a binary number in base\
    \ 2 to base 16. \nThe function should raise an error if the input string does\
    \ not represent a binary number in base 2 to base 16. \nThe function should raise\
    \ an error if the input string does not represent a binary number in base 2 to\
    \ base 16. \nThe function should raise an error if the input string does not represent\
    \ a ", "    if base < 10\n        return show(Int(x))\n    else\n        digits\
    \ = digits(x)\n        digits = digits[digits.length - base]\n        digits =\
    \ reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)", "    if base < 10\n        error(\"base must\
    \ be greater than or equal to 10\")\n    elseif base > 64\n        error(\"base\
    \ must be less than or equal to 64\")\n    elseif base == 10\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]", "    if base < 2 || base >\
    \ 36\n        error(\"Base must be between 2 and 36.\")\n    end\n    if base\
    \ == 2\n        return string(x)\n    elseif base == 3\n        return string(x\
    \ * 3)\n    elseif base == 4\n        return string(x * 7)\n    elseif base ==\
    \ 5\n        return string(x * 11)\n    elseif base == 6\n        return string(x\
    \ * 13)\n    elseif base == 7\n        return string(x * 17)\n    elseif base\
    \ == 8\n        return string(x * 19)\n    elseif base == 9\n        return string(x\
    \ * 23)\n    elseif base == 10\n        return string(x * 29)\n    elseif base\
    \ == 11\n        return string(x * 37)\n    elseif base == 12\n        return\
    \ string(x * 41)\n    elseif base == 13\n        return string(x * 43)\n    elseif\
    \ base == 14\n        return string(x * 47)\n    elseif base == 15\n        return\
    \ string(x * 51)\n    elseif base == 16\n        return string(x * 55)\n    elseif\
    \ base == 17\n        return string(x * 59)\n    elseif base == 18\n        return\
    \ string(x * 63)\n    elseif base == 19\n        return string(x * 67)\n    elseif\
    \ base == 20\n        return string(x * 71)\n    elseif base == 21\n        return\
    \ string(x * 75)\n    elseif base == 22\n        return string(x * 79)\n    elseif\
    \ base == 23\n        return string(x * 83)\n    elseif base == 24\n        return\
    \ string(x * 87)\n    elseif base == 25\n        return string(x * 91)\n    elseif\
    \ base == 26\n        return string(x * 95)\n    elseif base == 27\n        return\
    \ string(x * 99)\n    elseif base == 28\n        return string(x * 103)\n    elseif\
    \ base == 29\n        return string(x * 107)\n    elseif base == 30\n        return\
    \ string(x * 111)\n    elseif base == 31\n        return string(x * 115)\n   \
    \ elseif base == 32\n        return string(x * 119)\n    elseif base == 33\n \
    \       return string(x * 123)\n    elseif base == 34\n        return string(x\
    \ * 127)\n    elseif base == 35\n        return string(x * 131)\n    elseif base\
    \ == 36\n        return string(x * 135)\n    elseif base == 37\n        return\
    \ string(x * 139)\n    elseif base == 38\n        return string(x * 143)\n   \
    \ elseif base == 39\n        return string(x * 147)\n    elseif base == 40\n \
    \       return string(x * ", "    if base < 10\n        return show(base * x)\n\
    \    else\n        return show(base * x) + show(base - 10)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a number to a binary string.\n\
    The function should take one argument, x, and return a string.\nThe function should\
    \ convert x to a binary string and return a string.\nThe function should convert\
    \ x to a binary string and return a string.\nThe function should convert x to\
    \ a binary string and return a string.\nThe function should convert x to a binary\
    \ string and return a string.\nThe function should convert x to a binary string\
    \ and return a string.\nThe function should convert x to a binary string and return\
    \ a string.\nThe function should convert x to a binary string and return a string.\n\
    The function should convert x to a binary string and return a string.\nThe function\
    \ should convert x to a binary string and return a string.\nThe function should\
    \ convert x to a binary string and return a string.\nThe function should convert\
    \ x to a binary string and return a string.\nThe function should convert x to\
    \ a binary string and return a string.\nThe function should convert x to a binary\
    \ string and return a string.\nThe function should convert x to a binary string\
    \ and return a string.\nThe function should convert x to a binary string and return\
    \ a string.\nThe function should convert x to a binary string and return a string.\n\
    The function should convert x to a binary string and return a string.\nThe function\
    \ should convert x to a binary string and return a string.\nThe function should\
    \ convert x to a binary string and return a string.\nThe function should convert\
    \ x to a binary string and return a string.\nThe function should convert x to\
    \ a binary string and return a string.\nThe function should convert x to a binary\
    \ string and return a string.\nThe function should convert x to a binary string\
    \ and return a string.\nThe function should convert x to a binary string and return\
    \ a string.\nThe function should convert x to a binary string and return a string.\n\
    The function should convert x to a binary string and return a string.\nThe function\
    \ should convert x to a binary string and return a string.\nThe function should\
    \ convert x to a binary string and return a string.\nThe function should convert\
    \ x to a binary string and return a string.\nThe function should convert x to\
    \ a binary string and return a string.\nThe function should convert x to a binary\
    \ string and return a string.\nThe function should convert x to a binary string\
    \ and return a string.\nThe function should convert x to a binary string and return\
    \ a string.\nThe function should convert x to a binary string and return a string.\n\
    The ", "    if base == 10 \n        return \"0\"\n    if base == 2 \n        return\
    \ str(x)\n    if base == 8 \n        return str(x)\n    if base == 3 \n      \
    \  return str(x)\n    if base == 6 \n        return str(x)\n    if base == 9 \n\
    \        return str(x)\n    if base == 5 \n        return str(x)\n    if base\
    \ == 1 \n        return str(x)\n    if base == 4 \n        return str(x)\n   \
    \ if base == 7 \n        return str(x)\n    if base == 0 \n        return str(x)\n\
    \    if base == -1 \n        return str(x)\n    if base == -2 \n        return\
    \ str(x)\n    if base == -3 \n        return str(x)\n    if base == -4 \n    \
    \    return str(x)\n    if base == -5 \n        return str(x)\n    if base ==\
    \ -6 \n        return str(x)\n    if base == -7 \n        return str(x)\n    if\
    \ base == -8 \n        return str(x)\n    if base == -9 \n        return str(x)\n\
    \    if base == -10 \n        return str(x)\n    if base == -11 \n        return\
    \ str(x)\n    if base == -12 \n        return str(x)\n    if base == -13 \n  \
    \      return str(x)\n    if base == -14 \n        return str(x)\n    if base\
    \ == -15 \n        return str(x)\n    if base == -16 \n        return str(x)\n\
    \    if base == -17 \n        return str(x)\n    if base == -18 \n        return\
    \ str(x)\n    if base == -19 \n        return str(x)\n    if base == -20 \n  \
    \      return str(x)\n    if base == -21 \n        return str(x)\n    if base\
    \ == -22 \n        return str(x)\n    if base == -23 \n        return str(x)\n\
    \    if base == -24 \n        return str(x)\n    if base == -25 \n        return\
    \ str(x)\n    if base == -26 \n        return str(x)\n    if base == -27 \n  \
    \      return str(x)\n    if base == -28 \n        return str(x)\n    if base\
    \ == -29 \n        return str(x)\n    if base == -30 \n        return str(x)\n\
    \    if base == -31 \n        return str(x)\n    if base == -32 \n        return\
    \ str(x)\n    if base == -33 \n        return str(x)\n    if base == -34 \n  \
    \      return str(x)\n    if base == -35 \n        return str(x)\n    if base\
    \ == -36 \n        return str(x)\n    if base == -37 \n        return str(x)\n\
    \    if base == -38 \n        return str(x)\n    if base == -39 \n        return\
    \ str(x)\n    if base == -40 \n        return str(x)\n    if base == -41 \n  \
    \      return str(x)\n    if base ", "    if base < 2 || base > 36\n        error(\"\
    Base must be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base + 1:digits.length]\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digit", "    if\
    \ base < 10 \n        error(\"base must be less than 10\")\n    else if base ==\
    \ 10 \n        return toString(x)\n    else \n        return toString(change_base(x,\
    \ base-1))\nend\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.4>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a number to a string in base 10.\nThe function should take two arguments: x\
    \ and the base (a positive integer). \nThe function should return a string representation\
    \ of x in base 10.\nThe function should raise an error if the base is less than\
    \ 10.\nThe function should raise an error if the base is 10.\nThe function should\
    \ raise an error if the base is greater than 10.\nThe function should raise an\
    \ error if the base is 0.\nThe function should raise an error if the base is negative.\n\
    The function should raise an error if the base is NaN.\nThe function should raise\
    \ an error if the base is infinite.\nThe function should raise an error if the\
    \ base is non-numeric.\nThe function should raise an error if the base is non-numeric.\n\
    The function should raise an error if the base is non-numeric.\nThe function should\
    \ raise an error if the base is non-numeric.\nThe function should raise an error\
    \ if the base is non-numeric.\nThe function should raise an error if the base\
    \ is non-numeric.\nThe function should raise an error if the base is non-numeric.\n\
    The function should raise an error if the base is non-numeric.\nThe function should\
    \ raise an error if the base is non-numeric.\nThe function should raise an error\
    \ if the base is non-numeric.\nThe function should raise an error if the base\
    \ is non-numeric.\nThe function should raise an error if the base is non-numeric.\n\
    The function should raise an error if the base is non-numeric.\nThe function should\
    \ raise an error if the base is non-numeric.\nThe function should raise an error\
    \ if the base is non-numeric.\nThe function should raise an error if the base\
    \ is non-numeric.\nThe function should raise an error if the base is non-numeric.\n\
    The function should raise an error if the base is non-numeric.\nThe function should\
    \ raise an error if the base is non-numeric.\nThe function should raise an error\
    \ if the base is non-numeric.\nThe function should raise an error if the base\
    \ is non-numeric.\nThe function should raise an error if the base is non-numeric.\n\
    The function should raise an error if the base is non-numeric.\nThe function should\
    \ raise an error if the base is non-numeric.\nThe function should raise an error\
    \ if the base is non-numeric.\nThe function should raise an error if the ", " \
    \   if base < 2 || base > 10 \n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2 \n        return string(x)\n    else\n  \
    \      return string(x * base)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a number from one base to another.\nThe function should throw\
    \ an error if the base is not between 2 and 10.\nThe function should throw an\
    \ error if the number is negative.\nThe function should throw an error if the\
    \ number is too large.\nThe function should throw an error if the number is too\
    \ small.\nThe function should throw an error if the number is zero.\nThe function\
    \ should throw an error if the number is infinity.\nThe function should throw\
    \ an error if the number is NaN.\nThe function should throw an error if the number\
    \ is infinite.\nThe function should throw an error if the number is NaN.\nThe\
    \ function should throw an error if the number is infinite.\nThe function should\
    \ throw an error if the number is NaN.\nThe function should throw an error if\
    \ the number is infinite.\nThe function should throw an error if the number is\
    \ NaN.\nThe function should throw an error if the number is infinite.\nThe function\
    \ should throw an error if the number is NaN.\nThe function should throw an error\
    \ if the number is infinite.\nThe function should throw an error if the number\
    \ is NaN.\nThe function should throw an error if the number is infinite.\nThe\
    \ function should throw an error if the number is NaN.\nThe function should throw\
    \ an error if the number is infinite.\nThe function should throw an error if the\
    \ number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw an error\
    \ if the number is NaN.\nThe function should throw an error if the number is infinite.\n\
    The function should throw an error if the number is NaN.\nThe function should\
    \ throw an error if the number is infinite.\nThe function should throw ", "  \
    \  if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    \n    if base == 10\n        return toString(x)\n    \n  \
    \  digits = digits(x)\n    \n    if base == 2\n        return digits[1] + digits[2]\n\
    \    \n    if base == 3\n        return digits[1] + digits[2] + digits[3]\n  \
    \  \n    if base == 4\n        return digits[1] + digits[2] + digits[3] + digits[4]\n\
    \    \n    if base == 5\n        return digits[1] + digits[2] + digits[3] + digits[4]\
    \ + digits[5]\n    \n    if base == 6\n        return digits[1] + digits[2] +\
    \ digits[3] + digits[4] + digits[5] + digits[6]\n    \n    if base == 7\n    \
    \    return digits[1] + digits[2] + digits[3] + digits[4] + digits[5] + digits[6]\
    \ + digits[7]\n    \n    if base == 8\n        return digits[1] + digits[2] +\
    \ digits[3] + digits[4] + digits[5] + digits[6] + digits[7] + digits[8]\n    \n\
    \    if base == 9\n        return digits[1] + digits[2] + digits[3] + digits[4]\
    \ + digits[5] + digits[6] + digits[7] + digits[8] + digits[9]\n    \n    if base\
    \ == 10\n        return digits[1] + digits[2] + digits[3] + digits[4] + digits[5]\
    \ + digits[6] + digits[7] + digits[8] + digits[9] + digits[10]\n    \n    if base\
    \ == 11\n        return digits[1] + digits[2] + digits[3] + digits[4] + digits[5]\
    \ + digits[6] + digits[7] + digits[8] + digits[9] + digits[10] + digits[11]\n\
    \    \n    if base == 12\n        return digits[1] + digits[2] + digits[3] + digits[4]\
    \ + digits[5] + digits[6] + digits[7] + digits[8] + digits[9] + digits[10] + digits[11]\
    \ + digits[12]\n    \n    if base == 13\n        return digits[1] + digits[2]\
    \ + digits[3] + digits[4] + digits[5] + digits[6] + digits[7] + digits[8] + digits[9]\
    \ + digits[10] + digits[11] + digits[12] + digits[13]\n    \n    if base == 14\n\
    \        return digits[1] + digits[2] + digits[3] + digits[4] + digits[5] + digits[6]\
    \ + digits[7] + digits[8] + digits[9] + digits[10] + digits[", "    if base <\
    \ 10\n        return toString(x::Int64, base)\n    else\n        return toString(x::Int64,\
    \ base::Int64)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe input is a string containing only 0s and 1s.\n\
    The output is an integer representing the decimal equivalent of the binary number.\n\
    The binary number represented as a string may have leading zeros.\nThe string\
    \ may contain leading spaces.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input\
    \ string may contain leading or trailing spaces.\nThe input string may contain\
    \ leading or trailing zeros.\nThe input string may contain leading or trailing\
    \ spaces.\nThe input string may contain leading or trailing zeros.\nThe input ",
  "    if base == 10 \n        return toString(x)\n    else \n        return toString(x/base)*base+toString(x%base)\n\
    end\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string of 0s and 1s.\nThe output is a decimal number.\nThe function\
    \ should ignore leading zeros.\nThe function should ignore trailing zeros.\nThe\
    \ function should ignore extra leading zeros.\nThe function should ignore extra\
    \ trailing zeros.\nThe function should ignore extra leading or trailing zeros.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing spaces.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing spaces.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing spaces.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing spaces.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing spaces.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing spaces.", "    if base < 10\n \
    \       error(\"Base must be greater than or equal to 10\")\n    else\n      \
    \  return toString(convert(x, base))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ take two arguments: \nthe number to be converted\nand the base of the number\
    \ to be converted.\nThe function should return a string containing the number\
    \ in base 16.\nThe function should raise an error if the base is not 10 or 16.\n\
    The function should raise an error if the number is not convertible.\nThe function\
    \ should raise an error if the number is negative.\nThe function should raise\
    \ an error if the number is too large.\nThe function should raise an error if\
    \ the number is too small.\nThe function should raise an error if the number is\
    \ zero.\nThe function should raise an error if the number is infinite.\nThe function\
    \ should raise an error if the number is NaN.\nThe function should raise an error\
    \ if the number is infinite.\nThe function should raise an error if the number\
    \ is NaN.\nThe function should raise an error if the number is infinite.\nThe\
    \ function should raise an error if the number is NaN.\nThe function should raise\
    \ an error if the number is infinite.\nThe function should raise an error if the\
    \ number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is NaN.\nThe function should raise an error if the number is infinite.\n\
    The function should raise an error if the number is NaN.\nThe function should\
    \ raise an error if the number is infinite.\nThe function should raise an error\
    \ if the number is Na", "    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base == 10 \n        digits = \"0123456789\"\n        return digits[x]\n\
    \    else \n        digits = \"0123456789ABCDEF\"\n        return digits[base*(x-1)\
    \ + x]\nend\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.4>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another.", "    if base < 2 || base > 36\n       \
    \ throw(ArgumentError(\"Base must be between 2 and 36\"))\n    elseif base ==\
    \ 2\n        return string(x)\n    elseif base == 3\n        return string(x,\
    \ \"b\")\n    elseif base == 4\n        return string(x, \"o\")\n    elseif base\
    \ == 5\n        return string(x, \"x\")\n    elseif base == 6\n        return\
    \ string(x, \"i\")\n    elseif base == 7\n        return string(x, \"u\")\n  \
    \  elseif base == 8\n        return string(x, \"f\")\n    elseif base == 9\n \
    \       return string(x, \"p\")\n    elseif base == 10\n        return string(x,\
    \ \"d\")\n    elseif base == 11\n        return string(x, \"x\")\n    elseif base\
    \ == 12\n        return string(x, \"o\")\n    elseif base == 13\n        return\
    \ string(x, \"b\")\n    elseif base == 14\n        return string(x, \"p\")\n \
    \   elseif base == 15\n        return string(x, \"d\")\n    elseif base == 16\n\
    \        return string(x, \"x\")\n    elseif base == 17\n        return string(x,\
    \ \"o\")\n    elseif base == 18\n        return string(x, \"b\")\n    elseif base\
    \ == 19\n        return string(x, \"p\")\n    elseif base == 20\n        return\
    \ string(x, \"d\")\n    elseif base == 21\n        return string(x, \"x\")\n \
    \   elseif base == 22\n        return string(x, \"o\")\n    elseif base == 23\n\
    \        return string(x, \"b\")\n    elseif base == 24\n        return string(x,\
    \ \"p\")\n    elseif base == 25\n        return string(x, \"d\")\n    elseif base\
    \ == 26\n        return string(x, \"x\")\n    elseif base == 27\n        return\
    \ string(x, \"o\")\n    elseif base == 28\n        return string(x, \"b\")\n \
    \   elseif base == 29\n        return string(x, \"p\")\n    elseif base == 30\n\
    \        return string(x, \"d\")\n    elseif base == 31\n        return string(x,\
    \ \"x\")\n    elseif base == 32\n        return string(x, \"o\")\n    elseif base\
    \ == 33\n        return string(x, \"b\")\n    elseif base == 34\n        return\
    \ string(x, \"p\")\n    elseif base == 35\n        return string(x, \"d\")\n \
    \   elseif base == 36\n        return string(x, \"x\")\n    else\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base^2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a string to a number.\nThe function should throw an error if the\
    \ string cannot be converted to a number.\nThe function should also throw an error\
    \ if the string contains any non-numeric characters.\nThe function should also\
    \ throw an error if the string contains any characters that are not in the base\
    \ 10 alphabet.\nThe function should also throw an error if the string contains\
    \ any characters that are not in the base 10 alphabet or are outside the range\
    \ 0-9.\nThe function should also throw an error if the string contains any characters\
    \ that are not in the base 10 alphabet or are outside the range 0-9.\nThe function\
    \ should also throw an error if the string contains any characters that are not\
    \ in the base 10 alphabet or are outside the range 0-9.\nThe function should also\
    \ throw an error if the string contains any characters that are not in the base\
    \ 10 alphabet or are outside the range 0-9.\nThe function should also throw an\
    \ error if the string contains any characters that are not in the base 10 alphabet\
    \ or are outside the range 0-9.\nThe function should also throw an error if the\
    \ string contains any characters that are not in the base 10 alphabet or are outside\
    \ the range 0-9.\nThe function should also throw an error if the string contains\
    \ any characters that are not in the base 10 alphabet or are outside the range\
    \ 0-9.\nThe function should also throw an error if the string contains any characters\
    \ that are not in the base 10 alphabet or are outside the range 0-9.\nThe function\
    \ should also throw an error if the string contains any characters that are not\
    \ in the base 10 alphabet or are outside the range 0-9.\nThe function should also\
    \ throw an error if the string contains any characters that are not in the base\
    \ 10 alphabet or are outside the range 0-9.\nThe function should also throw an\
    \ error if the string contains any characters that are not in the base 10 alphabet\
    \ or are outside the range 0-9.\nThe function should also throw an error if the\
    \ string contains any characters that are not in the base 10 alphabet or are outside\
    \ the range 0-9.\nThe function should also throw an error if the string contains\
    \ any characters that are not in the base 10 alphabet or are outside the range\
    \ 0-9.\nThe function should also throw an error if the string contains any characters\
    \ that are not in the base 10 alphabet or are outside the range 0-9.\nThe function\
    \ should also throw an error if the string contains any characters that are not\
    \ in the base 10 alphabet or are outside the range 0-9.\nThe function should also\
    \ throw an error if the string contains any characters that are not in the base\
    \ 10 alphabet or are outside the range 0-9.\nThe function should also throw ",
  "    if base < 10\n        return toString(x::Int64, base)\n    else\n        return\
    \ toString(x::Int64, base::Int64)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a string to a number.\nThe string can contain any characters, including spaces.\n\
    The function should return 0 if the string cannot be converted to a number.\n\
    The function should raise an error if the string cannot be converted to a number.\n\
    The function should raise an error if the string contains any non-numeric characters.\n\
    The function should raise an error if the string contains any alphabetic characters.\n\
    The function should raise an error if the string contains any non-alphabetic characters.\n\
    The function should raise an error if the string contains any character that is\
    \ not a digit.\nThe function should raise an error if the string contains any\
    \ character that is not a letter.\nThe function should raise an error if the string\
    \ contains any character that is not a space.\nThe function should raise an error\
    \ if the string contains any character that is not a punctuation mark.\nThe function\
    \ should raise an error if the string contains any character that is not a symbol.\n\
    The function should raise an error if the string contains any character that is\
    \ not a whitespace character.\nThe function should raise an error if the string\
    \ contains any character that is not a hexadecimal digit.\nThe function should\
    \ raise an error if the string contains any character that is not a binary digit.\n\
    The function should raise an error if the string contains any character that is\
    \ not a octal digit.\nThe function should raise an error if the string contains\
    \ any character that is not a decimal digit.\nThe function should raise an error\
    \ if the string contains any character that is not a hexadecimal digit.\nThe function\
    \ should raise an error if the string contains any character that is not a binary\
    \ digit.\nThe function should raise an error if the string contains any character\
    \ that is not a octal digit.\nThe function should raise an error if the string\
    \ contains any character that is not a decimal digit.\nThe function should raise\
    \ an error if the string contains any character that is not a hexadecimal digit.\n\
    The function should raise an error if the string contains any character that is\
    \ not a binary digit.\nThe function should raise an error if the string contains\
    \ any character that is not a octal digit.\nThe function should raise an error\
    \ if the string contains any character that is not a decimal digit.\nThe function\
    \ should raise an error if the string contains any character that is not a hexadecimal\
    \ digit.\nThe function should raise an error if the string contains any character\
    \ that is not a binary digit.\nThe function should raise an error if the string\
    \ contains any character that is not a octal digit.\nThe function should raise\
    \ an error if the string contains any character that is not a decimal digit.\n\
    The function should raise an error if the string contains any character that is\
    \ not a hexa", "    if base < 10\n        error(\"base must be less than 10\"\
    )\n    elseif base > 36\n        error(\"base must be less than 36\")\n    elseif\
    \ base == 10\n        return toString(x)\n    else\n        digits = digits(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits + toString(base)\n\
    \        return digits\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise\nWrite a function that converts a\
    \ number to a string in base 36 (a-z, A-Z, 0-9).", "    if base < 2 || base >\
    \ 10\n        error(\"Base must be between 2 and 10\")\n    elseif base == 2\n\
    \        return string(x)\n    else\n        return string(x, base)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a number to a binary string.\
    \ \nThe function should accept a number as input and return a string as output.\n\
    The function should raise an error if the input is not a number.\nThe function\
    \ should raise an error if the input is a number less than 0.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 0.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function should\
    \ raise an error if the input is a number greater than 2.\nThe function should\
    \ raise an error if the input is a number greater than 10.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 10.\nThe function\
    \ should raise an error if the input is a negative number.\nThe function ", " \
    \   if base < 10\n        return str((x % base) + base)\n    else\n        return\
    \ change_base(x / base, base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers.", "    if base < 10\n        return show(base\
    \ * x)\n    else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe function should\
    \ take two arguments: a string of binary digits and a base. \nThe function should\
    \ return an Int with the decimal number represented by the binary number. \nThe\
    \ function should raise an error if the base is not 2 or 10. \nThe function should\
    \ raise an error if the number of digits in the binary string is not even. \n\
    The function should raise an error if the binary string contains non-binary digits.\
    \ \nThe function should raise an error if the binary string contains more than\
    \ 10 binary digits. \nThe function should raise an error if the binary string\
    \ contains leading zeroes. \nThe function should raise an error if the binary\
    \ string contains negative numbers. \nThe function should raise an error if the\
    \ binary string contains non-decimal digits. \nThe function should raise an error\
    \ if the binary string contains more than 10 decimal digits. \nThe function should\
    \ raise an error if the binary string contains leading zeroes. \nThe function\
    \ should raise an error if the binary string contains negative numbers. \nThe\
    \ function should raise an error if the binary string contains non-decimal digits.\
    \ \nThe function should raise an error if the binary string contains more than\
    \ 10 decimal digits. \nThe function should raise an error if the binary string\
    \ contains leading zeroes. \nThe function should raise an error if the binary\
    \ string contains negative numbers. \nThe function should raise an error if the\
    \ binary string contains non-decimal digits. \nThe function should raise an error\
    \ if the binary string contains more than 10 decimal digits. \nThe function should\
    \ raise an error if the binary string contains leading zeroes. \nThe function\
    \ should raise an error if the binary string contains negative numbers. \nThe\
    \ function should raise an error if the binary string contains non-decimal digits.\
    \ \nThe function should raise an error if the binary string contains more than\
    \ 10 decimal digits. \nThe function should raise an error if the binary string\
    \ contains leading zeroes. \nThe function should raise an error if the binary\
    \ string contains negative numbers. \nThe function should raise an error if the\
    \ binary string contains non-decimal digits. \nThe function should raise an error\
    \ if the binary string contains more than 10 decimal digits. \nThe function should\
    \ raise an error if the binary string contains leading zeroes. \nThe function\
    \ should raise an error if the binary string contains negative numbers. \nThe\
    \ function should raise an error if the binary string contains non-decimal digits.\
    \ \nThe function should raise an error if the binary string contains more than\
    \ 10 decimal digits. \n", "    if base == 10 \n        digits = \"0123456789\"\
    \n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n\
    \    digits = digits[base:end]\n    \n    return digits[x]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a number from base 10 to base\
    \ 16 (hexadecimal).", "    if base < 10\n        return show(base * x)\n    else\n\
    \        return show(base * x) + show(x % base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ accept two arguments: a string representing the number in base 10, and an integer\
    \ representing the base of the number in base 10.\nThe function should return\
    \ the string representing the number in base 16.\nThe function should raise an\
    \ error if the base is not 10 or 16.\nThe function should raise an error if the\
    \ input string is not convertible to a number.\nThe function should raise an error\
    \ if the input string contains non-numeric characters.\nThe function should raise\
    \ an error if the input string contains non-numeric characters or is empty.\n\
    The function should raise an error if the input string contains non-numeric characters\
    \ or is empty.\nThe function should raise an error if the input string contains\
    \ non-numeric characters or is empty.\nThe function should raise an error if the\
    \ input string contains non-numeric characters or is empty.\nThe function should\
    \ raise an error if the input string contains non-numeric characters or is empty.\n\
    The function should raise an error if the input string contains non-numeric characters\
    \ or is empty.\nThe function should raise an error if the input string contains\
    \ non-numeric characters or is empty.\nThe function should raise an error if the\
    \ input string contains non-numeric characters or is empty.\nThe function should\
    \ raise an error if the input string contains non-numeric characters or is empty.\n\
    The function should raise an error if the input string contains non-numeric characters\
    \ or is empty.\nThe function should raise an error if the input string contains\
    \ non-numeric characters or is empty.\nThe function should raise an error if the\
    \ input string contains non-numeric characters or is empty.\nThe function should\
    \ raise an error if the input string contains non-numeric characters or is empty.\n\
    The function should raise an error if the input string contains non-numeric characters\
    \ or is empty.\nThe function should raise an error if the input string contains\
    \ non-numeric characters or is empty.\nThe function should raise an error if the\
    \ input string contains non-numeric characters or is empty.\nThe function should\
    \ raise an error if the input string contains non-numeric characters or is empty.\n\
    The function should raise an error if the input string contains non-numeric characters\
    \ or is empty.\nThe function should raise an error if the input string contains\
    \ non-numeric characters or is empty.\nThe function should raise an error if the\
    \ input string contains non-numeric characters or is empty.\nThe function should\
    \ raise an error if the input string contains non-numeric characters or is empty.\n\
    The function should raise an error if the input ", "    if base < 2 || base >\
    \ 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif\
    \ base == 2\n        return string(x)\n    else\n        return string(x * base^2)\n\
    end\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.3>", "    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^0, base^0)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a string to a number.\nThe string can contain any characters,\
    \ including spaces.\nThe function should throw an error if the string cannot be\
    \ converted to a number.\nThe function should accept a maximum of 10 characters\
    \ for the string.\nThe function should accept a maximum of 10 characters for the\
    \ number.\nThe function should accept a maximum of 10 characters for the number.\n\
    The function should accept a maximum of 10 characters for the number.\nThe function\
    \ should accept a maximum of 10 characters for the number.\nThe function should\
    \ accept a maximum of 10 characters for the number.\nThe function should accept\
    \ a maximum of 10 characters for the number.\nThe function should accept a maximum\
    \ of 10 characters for the number.\nThe function should accept a maximum of 10\
    \ characters for the number.\nThe function should accept a maximum of 10 characters\
    \ for the number.\nThe function should accept a maximum of 10 characters for the\
    \ number.\nThe function should accept a maximum of 10 characters for the number.\n\
    The function should accept a maximum of 10 characters for the number.\nThe function\
    \ should accept a maximum of 10 characters for the number.\nThe function should\
    \ accept a maximum of 10 characters for the number.\nThe function should accept\
    \ a maximum of 10 characters for the number.\nThe function should accept a maximum\
    \ of 10 characters for the number.\nThe function should accept a maximum of 10\
    \ characters for the number.\nThe function should accept a maximum of 10 characters\
    \ for the number.\nThe function should accept a maximum of 10 characters for the\
    \ number.\nThe function should accept a maximum of 10 characters for the number.\n\
    The function should accept a maximum of 10 characters for the number.\nThe function\
    \ should accept a maximum of 10 characters for the number.\nThe function should\
    \ accept a maximum of 10 characters for the number.\nThe function should accept\
    \ a maximum of 10 characters for the number.\nThe function should accept a maximum\
    \ of 10 characters for the number.\nThe function should accept a maximum of 10\
    \ characters for the number.\nThe function should accept a maximum of 10 characters\
    \ for the number.\nThe function should accept a maximum of 10 characters for the\
    \ number.\nThe function should accept a maximum of 10 characters for the number.\n\
    The function should accept a maximum of 10 characters for the number.\nThe function\
    \ should accept a maximum of ", "    if base == 10 \n        digits = digits(x)\n\
    \        return digits[digits.length-1]\n    else \n        digits = digits(x)\n\
    \        digits[digits.length-1] = digits[digits.length-1] * base\n        return\
    \ digits[digits.length-1]\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>",
  "    if base < 10\n        error(\"Base must be less than 10\")\n    elseif base\
    \ > 36\n        error(\"Base must be less than 36\")\n    elseif base == 10\n\
    \        return toString(x)\n    else\n        digits = digits(x)\n        digits\
    \ = digits[digits.length - digits.length % base + base]\n        digits = digits[0\
    \ : digits.length % base]\n        return toString(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        return str((x % base) + base)\n    else\n        return\
    \ str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nWrite a\
    \ function that takes a string and returns the number of lines in the string.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not spaces.\nWrite a function that takes a string and returns\
    \ the number of words in the string that are not spaces.\nWrite a function that\
    \ takes a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not spaces and words in the string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are not spaces and characters in the string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of lines in the string\
    \ that are not spaces and characters in the string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces and words in the string that are not spaces and characters\
    \ in the string that are not spaces.\nWrite a function that takes a string and\
    \ returns the number of words in the string that are not spaces and characters\
    \ in the string that are not spaces and lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of lines in the string\
    \ that are not spaces and characters in the string that are not spaces and words\
    \ in the string that are not spaces.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not spaces and words\
    \ in the string that are not spaces and lines in the string that are not spaces\
    \ and characters in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of words in the string that are not spaces and\
    \ characters in the string that are not spaces and lines in the string that are\
    \ not spaces and characters in the string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of lines in the string that are not\
    \ spaces and characters in the string that are not spaces and words in the string\
    \ that are not spaces and characters in the string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces and words in the string that are not spaces and lines in\
    \ the string that are not spaces and characters in the string that are not spaces\
    \ and words in the string that are not spaces.\nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces and\
    \ characters in the string that are not spaces and lines in the string that are\
    \ not spaces and characters in the string ", "    if base == 10 \n        return\
    \ \"0\"\n    else if base == 2 \n        return string(x)\n    else \n       \
    \ digits = digits(x)\n        digits = digits[digits.length - digits.length %\
    \ base.length : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n        digits = digits[0 : digits.length - digits.length %\
    \ base.length]\n        digits = digits[0 : digits.length - digits.length % base.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base.length]\n  \
    \      digits = digits[0 : digits.length - digits.length % base.length]\n    \
    \    digits = digits[0 : digits.length - digits.length % base.length]\n      \
    \  digits = digits[0 : digits.length - digits.length % base.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base.length]\n        digits =\
    \ digits[0 : digits.length - digits.length % base.length]\n        digits = digits[0\
    \ : digits.length - digits.length % base.length]\n        digits = digits[0 :\
    \ digits.length - digits.length % base.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n        digits = digits[0 : digits.length -\
    \ digits.length % base.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n        digits = digits[0 : digits.length - digits.length %\
    \ base.length]\n        digits = digits[0 : digits.length - digits.length % base.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base.length]\n  \
    \      digits = digits[0 : digits.length - digits.length % base.length]\n    \
    \    digits = digits[0 : digits.length - digits.length % base.length]\n      \
    \  digits = digits[0 : digits.length - digits.length % base.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base.length]\n        digits =\
    \ digits[0 : digits.length - digits.length % base.length]\n        digits = digits[0\
    \ : digits.length - digits.length % base.length]\n        digits = digits[0 :\
    \ digits.length - digits.length % base.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base.length]\n        digits = digits[0 : digits.length -\
    \ digits.length % base.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base.length]\n        digits = digits[0 : digits.length - digits.length %\
    \ base.length]\n        digits = digits[0 : digits.length - digits.length % base.length]\n\
    \        ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base\
    \ must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 36\n        return string(x * 2)\n    else\n        return string(x * base^2)\n\
    end\n</cell>\n<code language=julia-1.1>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.1>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.1>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should throw an error if the input number is too big or too\
    \ small.\nThe function should throw an error if the input base is invalid.\nThe\
    \ function should throw an error if the input number is negative.\nThe function\
    \ should throw an error if the input number is zero.\nThe function should throw\
    \ an error if the input number is too large.\nThe function should throw an error\
    \ if the input number is too small.\nThe function should throw an error if the\
    \ input number is too large.\nThe function should throw an error if the input\
    \ number is too small.\nThe function should throw an error if the input number\
    \ is too large.\nThe function should throw an error if the input number is too\
    \ small.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is too large.\nThe function should\
    \ throw an error if the input number is too small.\nThe function should throw\
    \ an error if the input number is too large.\nThe function should throw an error\
    \ if the input number is too small.\nThe function should throw an error if the\
    \ input number is too large.\nThe function should throw an error if the input\
    \ number is too small.\nThe function should throw an error if the input number\
    \ is too large.\nThe function should throw an error if the input number is too\
    \ small.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw an error if the input number is too large.\nThe function should\
    \ throw an error if the input number is too small.\nThe function should throw\
    \ an error if the input number is too large.\nThe function should throw an error\
    \ if the input number is too small.\nThe function should throw an error if the\
    \ input number is too large.\nThe function should throw an error if the input\
    \ number is too small.\nThe function should throw an error if the input number\
    \ is too large.\nThe function should throw an error if the input number is too\
    \ small.\nThe function should throw an error if the input number is too large.\n\
    The function should throw an error if the input number is too small.\nThe function\
    \ should throw ", "    if base < 2 || base > 36\n        error(\"Base must be\
    \ between 2 and 36\")\n    elseif base == 2\n        return string(x)\n    else\n\
    \        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 10\n        return show(base * x)\n    else\n        return show(base\
    \ * x / 10)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a string to a number.", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     digits = string(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        ", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     digits = string(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        ", " \
    \   if base < 2 || base > 36\n        error(\"Invalid base\")\n    elseif base\
    \ == 10\n        return toString(x)\n    else\n        digits = digits(x)\n  \
    \      digits = digits[digits.length - base]\n        digits = digits[0 : digits.length\
    \ - base]\n        return toString(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number.\nThe function should accept a binary number\
    \ as a string and return the decimal number.\nThe function should raise an error\
    \ if the input is not a binary number.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 bits.\nThe function should raise an error if\
    \ the input contains more than 32 ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts binary to decimal.\nThe function should take a\
    \ string as input, and return a string as output.\nThe input string should consist\
    \ of only 0s and 1s.\nThe output string should consist of only decimal digits.\n\
    The function should throw an error if the input string is not valid.\nThe function\
    \ should throw an error if the input string contains more than one binary digit.\n\
    The function should throw an error if the input string contains more than one\
    \ decimal digit.\nThe function should throw an error if the input string contains\
    \ more than one binary digit and decimal digit.\nThe function should throw an\
    \ error if the input string contains more than one binary digit and decimal digit\
    \ and leading zeroes.\nThe function should throw an error if the input string\
    \ contains more than one decimal digit and leading zeroes.\nThe function should\
    \ throw an error if the input string contains more than one decimal digit and\
    \ leading zeroes and trailing zeros.\nThe function should throw an error if the\
    \ input string contains more than one decimal digit and trailing zeros.\nThe function\
    \ should throw an error if the input string contains more than one decimal digit\
    \ and trailing zeroes and leading zeros.\nThe function should throw an error if\
    \ the input string contains more than one decimal digit and trailing zeroes and\
    \ leading zeroes and trailing zeros.\nThe function should throw an error if the\
    \ input string contains more than one decimal digit and trailing zeroes and leading\
    \ zeroes and trailing zeros.\nThe function should throw an error if the input\
    \ string contains more than one decimal digit and trailing zeroes and leading\
    \ zeroes and trailing zeroes and leading zeros.\nThe function should throw an\
    \ error if the input string contains more than one decimal digit and trailing\
    \ zeroes and leading zeroes and trailing zeroes and leading zeroes and trailing\
    \ zeros.\nThe function should throw an error if the input string contains more\
    \ than one decimal digit and trailing zeroes and leading zeroes and trailing zeroes\
    \ and leading zeroes and trailing zeroes and leading zeros.\nThe function should\
    \ throw an error if the input string contains more than one decimal digit and\
    \ trailing zeroes and leading zeroes and trailing zeroes and leading zeroes and\
    \ trailing zeroes and leading zeroes.\nThe function should throw an error if the\
    \ input string contains more than one decimal digit and trailing zeroes and leading\
    \ zeroes and trailing zeroes and leading zeroes and trailing zeroes and leading\
    \ zeroes and trailing zeroes.\nThe function should throw an error if the input\
    \ string contains more than one decimal digit and trailing zeroes and leading\
    \ zeroes and trailing zeroes and leading zeroes and trailing zeroes and leading\
    \ zero", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. \nThe input is a string containing only 0s\
    \ and 1s. \nThe output is a string containing the decimal representation of the\
    \ binary number. \nThe function should throw an error if the input string is not\
    \ valid.\nThe function should throw an error if the input string contains more\
    \ than 32 bits.\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw an error if the input string contains\
    \ invalid characters (other than 0 and 1).\nThe function should throw an error\
    \ if the input string contains invalid characters (other than 0 and 1).\nThe function\
    \ should throw an error if the input string contains invalid characters (other\
    \ than 0 and 1).\nThe function should throw ", "    if base < 10 \n        return\
    \ \"\"\n    else if base == 10 \n        return to_string(x)\n    else \n    \
    \    return change_base(x / base, base) + to_string(x) % base\nend\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary to decimal.\nThe input\
    \ is a string containing only 0s and 1s.\nThe output is the decimal equivalent\
    \ of the binary string.\nThe function should ignore leading zeros in the binary\
    \ string.\nThe function should ignore leading zeros in the decimal string.\nThe\
    \ function should ignore trailing zeros in the decimal string.\nThe function should\
    \ ignore trailing zeros in the binary string.\nThe function should ignore leading\
    \ zeros in the binary string.\nThe function should ignore leading zeros in the\
    \ decimal string.\nThe function should ignore trailing zeros in the decimal string.\n\
    The function should ignore trailing zeros in the binary string.\nThe function\
    \ should ignore leading zeros in the decimal string.\nThe function should ignore\
    \ leading zeros in the binary string.\nThe function should ignore trailing zeros\
    \ in the decimal string.\nThe function should ignore trailing zeros in the binary\
    \ string.\nThe function should ignore leading zeros in the decimal string.\nThe\
    \ function should ignore leading zeros in the binary string.\nThe function should\
    \ ignore trailing zeros in the decimal string.\nThe function should ignore trailing\
    \ zeros in the binary string.\nThe function should ignore leading zeros in the\
    \ decimal string.\nThe function should ignore leading zeros in the binary string.\n\
    The function should ignore trailing zeros in the decimal string.\nThe function\
    \ should ignore trailing zeros in the binary string.\nThe function should ignore\
    \ leading zeros in the decimal string.\nThe function should ignore leading zeros\
    \ in the binary string.\nThe function should ignore trailing zeros in the decimal\
    \ string.\nThe function should ignore trailing zeros in the binary string.\nThe\
    \ function should ignore leading zeros in the decimal string.\nThe function should\
    \ ignore leading zeros in the binary string.\nThe function should ignore trailing\
    \ zeros in the decimal string.\nThe function should ignore trailing zeros in the\
    \ binary string.\nThe function should ignore leading zeros in the decimal string.\n\
    The function should ignore leading zeros in the binary string.\nThe function should\
    \ ignore trailing zeros in the decimal string.\nThe function should ignore trailing\
    \ zeros in the binary string.\nThe function should ignore leading zeros in the\
    \ decimal string.\nThe function should ignore leading zeros in the binary string.\n\
    The function should ignore trailing zeros in the decimal string.\nThe function\
    \ should ignore trailing zeros in the binary string.\nThe function should ignore\
    \ leading zeros in the decimal string.\nThe function should ignore leading zeros\
    \ in the binary string.\nThe function should ignore trailing zeros in the decimal\
    \ string.\nThe ", "    if base < 10\n        return str((x % base) + base)\n \
    \   else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ accept two arguments: x is the number to be converted, and base is the base\
    \ of the number to be converted.\nThe function should return a string representation\
    \ of the number in base 16.\nThe function should raise an error if the base is\
    \ not 10 or 16.\nThe function should raise an error if the number is negative.\n\
    The function should raise an error if the number is zero.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.", "    if base == 10 \n        digits = \"0123456789\"\
    \n        return digits[x]\n    else \n        digits = \"0123456789ABCDEF\"\n\
    \        return digits[base*(x-1) + digits[base]]\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.4>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length", "    if base == 10 \n \
    \       digits = digits(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digit", "    if base < 10\n        return show(base * x)\n \
    \   else\n        return show(base * x) + show(x % base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16 (hexadecimal).\nThe input number x is represented as a string.\nThe output\
    \ number y is a string.\nThe output number y has the same number of characters\
    \ as x.\nThe output number y contains the characters '0' to '9' and 'A' to 'F'.\n\
    The output number y contains the characters 'a' to 'f'.\nThe output number y contains\
    \ the characters 'A' to 'F'.\nThe output number y contains only hexadecimal digits\
    \ (0-9 and A-F).\nThe input number x is less than 10.\nThe input number x is greater\
    \ than or equal to 0.\nThe input number x is equal to 0.\nThe input number x is\
    \ less than or equal to 0.\nThe input number x is greater than 0.\nThe input number\
    \ x is equal to 1.\nThe input number x is greater than 1.\nThe input number x\
    \ is equal to 2.\nThe input number x is greater than 2.\nThe input number x is\
    \ equal to 3.\nThe input number x is greater than 3.\nThe input number x is equal\
    \ to 4.\nThe input number x is greater than 4.\nThe input number x is equal to\
    \ 5.\nThe input number x is greater than 5.\nThe input number x is equal to 6.\n\
    The input number x is greater than 6.\nThe input number x is equal to 7.\nThe\
    \ input number x is greater than 7.\nThe input number x is equal to 8.\nThe input\
    \ number x is greater than 8.\nThe input number x is equal to 9.\nThe input number\
    \ x is greater than 9.\nThe input number x is equal to 10.\nThe input number x\
    \ is greater than 10.\nThe input number x is equal to 11.\nThe input number x\
    \ is greater than 11.\nThe input number x is equal to 12.\nThe input number x\
    \ is greater than 12.\nThe input number x is equal to 13.\nThe input number x\
    \ is greater than 13.\nThe input number x is equal to 14.\nThe input number x\
    \ is greater than 14.\nThe input number x is equal to 15.\nThe input number x\
    \ is greater than 15.\nThe input number x is equal to 16.\nThe input number x\
    \ is greater than 16.\nThe input number x is equal to 17.\nThe input number x\
    \ is greater than 17.\nThe input number x is equal to 18.\nThe input ", "    if\
    \ base < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2\
    \ and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 3\n        return string(x*3)\n    elseif base == 4\n        return string(x*7)\n\
    \    elseif base == 5\n        return string(x*11)\n    elseif base == 6\n   \
    \     return string(x*13)\n    elseif base == 7\n        return string(x*17)\n\
    \    elseif base == 8\n        return string(x*19)\n    elseif base == 9\n   \
    \     return string(x*23)\n    elseif base == 10\n        return string(x*29)\n\
    \    elseif base == 11\n        return string(x*37)\n    elseif base == 12\n \
    \       return string(x*43)\n    elseif base == 13\n        return string(x*51)\n\
    \    elseif base == 14\n        return string(x*59)\n    elseif base == 15\n \
    \       return string(x*67)\n    elseif base == 16\n        return string(x*75)\n\
    \    elseif base == 17\n        return string(x*83)\n    elseif base == 18\n \
    \       return string(x*91)\n    elseif base == 19\n        return string(x*99)\n\
    \    elseif base == 20\n        return string(x*107)\n    elseif base == 21\n\
    \        return string(x*117)\n    elseif base == 22\n        return string(x*127)\n\
    \    elseif base == 23\n        return string(x*137)\n    elseif base == 24\n\
    \        return string(x*147)\n    elseif base == 25\n        return string(x*157)\n\
    \    elseif base == 26\n        return string(x*167)\n    elseif base == 27\n\
    \        return string(x*177)\n    elseif base == 28\n        return string(x*187)\n\
    \    elseif base == 29\n        return string(x*197)\n    elseif base == 30\n\
    \        return string(x*207)\n    elseif base == 31\n        return string(x*217)\n\
    \    elseif base == 32\n        return string(x*227)\n    elseif base == 33\n\
    \        return string(x*237)\n    elseif base == 34\n        return string(x*247)\n\
    \    elseif base == 35\n        return string(x*257)\n    elseif base == 36\n\
    \        return string(x*267)\n    else\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't seem to work. `change_base(8, 2)` returns `\"", "    if base < 2\
    \ || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        digits =\
    \ digits(x)\n        digits = digits[digits.length - base:digits.length]\n   \
    \     digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base = base)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length]\n        return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base > 36\n    \
    \    throw(ArgumentError(\"base must be between 2 and 36\"))\n    else\n     \
    \   return str((x % base) + base)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"Invalid base\"))\n\
    \    elseif base == 10\n        return toString(x)\n    else\n        digits =\
    \ digits(x)\n        digits = digits[digits.length - base]\n        digits = digits[0\
    \ : digits.length - base]\n        return toString(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal representation of the binary number.\nThe input string may contain\
    \ leading zeros.\nThe output string may contain leading zeros.\nThe input string\
    \ may contain trailing zeros.\nThe output string may contain trailing zeros.\n\
    The input string may contain leading or trailing whitespace.\nThe output string\
    \ may contain leading or trailing whitespace.\nThe input string may contain leading\
    \ or trailing whitespace.\nThe output string may contain leading or trailing whitespace.\n\
    The input string may contain leading or trailing whitespace.\nThe output string\
    \ may contain leading or trailing whitespace.\nThe input string may contain leading\
    \ or trailing whitespace.\nThe output string may contain leading or trailing whitespace.\n\
    The input string may contain leading or trailing whitespace.\nThe output string\
    \ may contain leading or trailing whitespace.\nThe input string may contain leading\
    \ or trailing whitespace.\nThe output string may contain leading or trailing whitespace.\n\
    The input string may contain leading or trailing whitespace.\nThe output string\
    \ may contain leading or trailing whitespace.\nThe input string may contain leading\
    \ or trailing whitespace.\nThe output string may contain leading or trailing whitespace.\n\
    The input string may contain leading or trailing whitespace.\nThe output string\
    \ may contain leading or trailing whitespace.\nThe input string may contain leading\
    \ or trailing whitespace.\nThe output string may contain leading or trailing whitespace.\n\
    The input string may contain leading or trailing whitespace.\nThe output string\
    \ may contain leading or trailing whitespace.\nThe input string may contain leading\
    \ or trailing whitespace.\nThe output string may contain leading or trailing whitespace.\n\
    The input string may contain leading or trailing whitespace.\nThe output string\
    \ may contain leading or trailing whitespace.\nThe input string may contain leading\
    \ or trailing whitespace.\nThe output string may contain leading or trailing whitespace.\n\
    The input string may contain leading or trailing whitespace.\nThe output string ",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    elseif base\
    \ == 3\n        return string(x * 1000 + 100)\n    elseif base == 4\n        return\
    \ string(x * 10000 + 1000)\n    elseif base == 5\n        return string(x * 100000\
    \ + 10000)\n    elseif base == 6\n        return string(x * 1000000 + 100000)\n\
    \    elseif base == 7\n        return string(x * 10000000 + 1000000)\n    elseif\
    \ base == 8\n        return string(x * 100000000 + 10000000)\n    elseif base\
    \ == 9\n        return string(x * 1000000000 + 100000000)\n    elseif base ==\
    \ 10\n        return string(x * 10000000000 + 1000000000)\n    elseif base ==\
    \ 11\n        return string(x * 100000000000 + 10000000000)\n    elseif base ==\
    \ 12\n        return string(x * 1000000000000 + 100000000000)\n    elseif base\
    \ == 13\n        return string(x * 10000000000000 + 10000000000000)\n    elseif\
    \ base == 14\n        return string(x * 100000000000000 + 100000000000000)\n \
    \   elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n", "    if base < 2 || base > 36\n        error(\"Base\
    \ must be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        digits\
    \ = string(x%base)\n        digits = digits[2:end]\n        return digits + change_base(x/base,\
    \ base)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    change_base(number,\
    \ base)\n    Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\
    \n    >>> change_base(7, 2)\n    \"111\"\n    \"\"\"", "    if base < 10\n   \
    \     return string(x)\n    else\n        return string(x/base^base)\nend\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts a string to a number.\nThe string can contain any characters,\
    \ including spaces.\nThe function should ignore spaces.\nThe function should ignore\
    \ leading zeros.\nThe function should ignore trailing zeros.\nThe function should\
    \ ignore leading minus signs.\nThe function should ignore trailing minus signs.\n\
    The function should ignore leading plus signs.\nThe function should ignore trailing\
    \ plus signs.\nThe function should ignore leading decimal points.\nThe function\
    \ should ignore trailing decimal points.\nThe function should ignore leading exponential\
    \ notation.\nThe function should ignore trailing exponential notation.\nThe function\
    \ should ignore leading infinity.\nThe function should ignore trailing infinity.\n\
    The function should ignore leading NaN.\nThe function should ignore trailing NaN.\n\
    The function should ignore leading infinity.\nThe function should ignore trailing\
    \ infinity.\nThe function should ignore leading +Inf.\nThe function should ignore\
    \ trailing +Inf.\nThe function should ignore leading -Inf.\nThe function should\
    \ ignore trailing -Inf.\nThe function should ignore leading +Inf.\nThe function\
    \ should ignore trailing +Inf.\nThe function should ignore leading -Inf.\nThe\
    \ function should ignore trailing -Inf.\nThe function should ignore leading +Inf.\n\
    The function should ignore trailing +Inf.\nThe function should ignore leading\
    \ -Inf.\nThe function should ignore trailing -Inf.\nThe function should ignore\
    \ leading +Inf.\nThe function should ignore trailing +Inf.\nThe function should\
    \ ignore leading -Inf.\nThe function should ignore trailing -Inf.\nThe function\
    \ should ignore leading +Inf.\nThe function should ignore trailing +Inf.\nThe\
    \ function should ignore leading -Inf.\nThe function should ignore trailing -Inf.\n\
    The function should ignore leading +Inf.\nThe function should ignore trailing\
    \ +Inf.\nThe function should ignore leading -Inf.\nThe function should ignore\
    \ trailing -Inf.\nThe function should ignore leading +Inf.\nThe function should\
    \ ignore trailing +Inf.\nThe function should ignore leading -Inf.\nThe function\
    \ should ignore trailing -Inf.\nThe function should ignore leading +Inf.\nThe\
    \ function should ignore trailing +Inf.\nThe function should ignore leading -Inf.\n\
    The function should ignore trailing -Inf.\nThe function should ignore leading\
    \ +Inf.\nThe function should ", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base*base)\nend", "    if base < 2 ||\
    \ base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"))\n\
    \    elseif base == 2\n        return string(x)\n    elseif base == 3\n      \
    \  return string(x*x)\n    elseif base == 4\n        return string(x*x*x)\n  \
    \  elseif base == 5\n        return string(x*x*x*x)\n    elseif base == 6\n  \
    \      return string(x*x*x*x*x)\n    elseif base == 7\n        return string(x*x*x*x*x*x)\n\
    \    elseif base == 8\n        return string(x*x*x*x*x*x*x)\n    elseif base ==\
    \ 9\n        return string(x*x*x*x*x*x*x*x)\n    elseif base == 10\n        return\
    \ string(x*x*x*x*x*x*x*x*x)\n    else\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x::Int64)\n    else\n\
    \        return string(x::Int64 / base::Int64 * base::Int64 + base::Int64 % base)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    change_base(::Int64, ::Int64)",
  "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x/base^base, base = base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts a number to a binary string. \nThe function should\
    \ take one argument, x, and return a string representation of x.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not between 2 and 10.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not between 2 and 10.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not between 2 and 10.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not between 2 and 10.\nThe function should throw an error if the\
    \ argument is not an integer.\nThe function should throw an error if the argument\
    \ is not between 2 and 10.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw an error if the argument is not\
    \ between 2 and 10.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not between\
    \ 2 and 10.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not between 2 and 10.\n\
    The function should throw an error if the argument is not an integer.\nThe function\
    \ should throw an error if the argument is not between 2 and 10.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not between 2 and 10.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not between 2 and 10.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not between 2 and 10.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not between 2 and 10.\nThe function should throw an error if the\
    \ argument is not an integer.\nThe function should throw an error if the argument\
    \ is not between 2 and 10.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw an error if the argument is not\
    \ between 2 and 10.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not between\
    \ 2 and 10.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not between ", "    if base\
    \ < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    else\n        digits =\
    \ digits(x)\n        digits = digits[digits.length - digits.length % base]\n \
    \       digits = digits[0 : digits.length % base]\n        digits = digits + string(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length % base]\n        digits = digits[0 : digits.length\
    \ % base]\n        digits = digit", "    if base < 2 || base > 10 \n        error(\"\
    Base must be between 2 and 10\")\n    else if base == 2\n        return string(x)\n\
    \    else \n        return string(x/base^base*base)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `change_base(-10, 2)` returns\
    \ `\"-10\"` instead of `\"-101\"`.\n<|/ c |>\n<| c |>\nI fixed the negative number\
    \ issue. Thanks.\n<|/ c |>\n<| a tags=julia,string |>\n<code>", "    if base <\
    \ 2 || base > 36\n        throw(ArgumentError(\"Base must be between 2 and 36\"\
    ))\n    elseif base == 2\n        return string(x)\n    elseif base == 10\n  \
    \      return string(x*10^6)\n    elseif base == 16\n        return string(x*10^6)\n\
    \    elseif base == 8\n        return string(x*10^3)\n    elseif base == 36\n\
    \        return string(x*10^6)\n    else\n        throw(ArgumentError(\"Base must\
    \ be between 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     digits = string(x)\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[", "  \
    \  if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base^2)\nend", "    if base < 2 || base > 36\n       \
    \ throw(ArgumentError(\"base must be between 2 and 36\"))\n    elseif base ==\
    \ 2\n        return string(x)\n    else\n        return string(x * base^2)\nend",
  "    if base < 10\n        digits = digits(x)\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : ", "    if base < 10\n        return str((x % base)\
    \ + base)\n    else\n        return str((x % base) / base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise\nWrite a function that converts binary numbers to decimal numbers.",
  "    if base < 2 || base > 10 \n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    else \n        if base == 2 \n            return string(x)\n\
    \        else \n            digits = string(x)\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]\n        \
    \    digits = digits[2:end]\n            digits = digits[2:end]\n            digits\
    \ = digits[2:end]\n            digits = digits[2:end]\n            digits = digits[2:end]\n\
    \            digits = digits[2:end]\n            digits = digits[2:end]\n    \
    \        digits = digits[2:end]\n            digits = digits[2:end]", "    if\
    \ base < 2 || base > 10 \n        error(\"Invalid base\")\n    elseif base ==\
    \ 2 \n        return string(x)\n    elseif base == 10 \n        return string(x::Int64)\n\
    \    elseif base == 3 \n        return string(x::Int64 + 48)\n    elseif base\
    \ == 6 \n        return string(x::Int64 + 52)\n    elseif base == 8 \n       \
    \ return string(x::Int64 + 56)\n    elseif base == 10 \n        return string(x::Int64\
    \ + 64)\n    elseif base == 12 \n        return string(x::Int64 + 72)\n    elseif\
    \ base == 16 \n        return string(x::Int64 + 80)\n    elseif base == 20 \n\
    \        return string(x::Int64 + 88)\n    elseif base == 24 \n        return\
    \ string(x::Int64 + 96)\n    elseif base == 28 \n        return string(x::Int64\
    \ + 104)\n    elseif base == 32 \n        return string(x::Int64 + 112)\n    elseif\
    \ base == 36 \n        return string(x::Int64 + 120)\n    elseif base == 40 \n\
    \        return string(x::Int64 + 128)\n    elseif base == 48 \n        return\
    \ string(x::Int64 + 136)\n    elseif base == 56 \n        return string(x::Int64\
    \ + 144)\n    elseif base == 64 \n        return string(x::Int64 + 152)\n    elseif\
    \ base == 72 \n        return string(x::Int64 + 160)\n    elseif base == 80 \n\
    \        return string(x::Int64 + 168)\n    elseif base == 88 \n        return\
    \ string(x::Int64 + 176)\n    elseif base == 96 \n        return string(x::Int64\
    \ + 184)\n    elseif base == 104 \n        return string(x::Int64 + 192)\n   \
    \ elseif base == 112 \n        return string(x::Int64 + 200)\n    elseif base\
    \ == 120 \n        return string(x::Int64 + 208)\n    elseif base == 128 \n  \
    \      return string(x::Int64 + 216)\n    elseif base == 136 \n        return\
    \ string(x::Int64 + 224)\n    elseif base == 144 \n        return string(x::Int64\
    \ + 232)\n    elseif base == 152 \n        return string(x::Int64 + 240)\n   \
    \ elseif base == 160 \n        return string(x::Int64 + 248)\n    elseif base\
    \ == 168 \n        return string(x::Int64 + 256)\n    elseif base == 176 \n  \
    \      return string(x::Int64 + 264)\n    elseif ", "    if base == 10 \n    \
    \    digits = \"0123456789\"\n    else \n        digits = \"0123456789ABCDEF\"\
    \n    return digits[base * floor(x / base)] + digits[x % base]\nend\n</code>\n\
    <|/ a tags=julia,type-conversion,string |>\n<| c |>\nThanks for your answer. Unfortunately,\
    \ I cannot use any packages other than Base.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that does not use any packages.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately, I cannot use any packages other than Base.\n<|/ c |>\n<| c |>\n\
    I added a solution that does not use any packages.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately, I cannot use any packages other than Base.\n\
    <|/ c |>\n<| a dscore=1 |>\nI came up with a solution without using any packages.\
    \ \n<code>", "    if base < 10\n        return str(x)\n    else\n        return\
    \ change_base(x / base, base) + str(x % base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe function should\
    \ take a string as input and return an integer.\nThe function should raise an\
    \ error if the input is not binary.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than 32 bits.\nThe function should raise an error if the\
    \ input contains more than ", "    if base < 10\n        return string(x)\n  \
    \  else\n        return string(x/base^base, base = base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal representation of the binary number.\nThe function should raise\
    \ an error if the input string is not valid.\nThe function should raise an error\
    \ if the input string contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input string contains more than 10 decimal digits.\nThe\
    \ function should raise an error if the input string contains more than 10 binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 decimal digits.\nThe function should raise an error if the input string\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input string contains more than 10 decimal digits.\nThe function should\
    \ raise an error if the input string contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.", "    if base < 10\n        return show(Int(x))\n\
    \    else\n        return show(Int(x)/base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16 (hexadecimal).\nThe\
    \ function should take two arguments: an Int64 number and a Base.Real number between\
    \ 10 and 16.\nThe function should return a string representation of the number\
    \ in hexadecimal.\nThe function should return an error if the number is not between\
    \ 10 and 16.\nThe function should return an error if the number is not an Int64.\n\
    The function should return an error if the number is not an Int64 or a Base.Real.\n\
    The function should return an error if the number is not an Int64 or a Base.Real\
    \ and is not between 10 and 16.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        if base == 10\n         \
    \   return toString(x)\n        else\n            if base == 2\n             \
    \   digits = digits(x)\n                digits = digits[2:end]\n             \
    \   digits = reverse(digits)\n                digits = reverse(digits)\n     \
    \           digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = reverse(digits)\n\
    \                digits = reverse(digits)\n                digits = ", "    if\
    \ base < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2\
    \ and 36\"))\n    else\n        if base == 10\n            return toString(x)\n\
    \        else\n            digits = digits(x)\n            digits = digits[digits.length\
    \ - base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base", "    if base < 2 || base > 10\n        throw(ArgumentError(\"base must\
    \ be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x/base^base, base*base)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a number to a binary string. \nThe\
    \ function should take one argument, x, and return a string.\nThe function should\
    \ throw an error if the argument is not a number.\nThe function should throw an\
    \ error if the argument is not positive.\nThe function should throw an error if\
    \ the argument is not even.\nThe function should throw an error if the argument\
    \ is not less than 2.\nThe function should throw an error if the argument is not\
    \ greater than 10.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not an integer.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not an integer.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not an integer.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not an integer.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not an integer.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not an integer.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not an integer.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error ", " \
    \   if base < 10\n        return show(x)\n    else\n        return show(convert(x,\
    \ base))\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal.\nThe function should take two arguments: a string\
    \ of binary digits, and a base\nnumber. The function should return the decimal\
    \ number represented by the binary\nnumber. For example, if the binary number\
    \ is \"1011\", the function should return\nthe decimal number 10.", "    if base\
    \ < 10 \n        error(\"base must be less than 10\")\n    elseif base == 10\n\
    \        return toString(x)\n    else\n        digits = toString(x)\n        digits\
    \ = digits[2:end]\n        digits = digits[digits.length - base:end]\n       \
    \ return digits * base\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 10)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 11)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 12)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 13)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 14)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 15)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 16)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 17)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 18)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 19)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 20)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 21)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 22)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 23)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 24)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 25)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 26)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 27)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 28)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 29)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 30)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 31)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 32)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 33)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 34)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 35)\n</cell>\n<code language=julia-1.3>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x*base)\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ base < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2\
    \ and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n     \
    \   digits = string(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
