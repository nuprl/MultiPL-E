name: HumanEval_44_change_base
language: jl
prompt: "\"\"\"Change numerical base of input number x to base.\n    return string\
  \ representation after the conversion.\n    base numbers are less than 10.\n   \
  \ >>> change_base(8, 3)\n    \"22\"\n    >>> change_base(8, 2)\n    \"1000\"\n \
  \   >>> change_base(7, 2)\n    \"111\"\n    \"\"\"\nfunction change_base(x::Int64,\
  \ base::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
  \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
  \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
  \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
  \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\"\
  )\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7,\
  \ 8) == \"7\")\nend\n"
completions: ["    if base < 2 || base > 36\n        throw(ArgumentError(\"base must\
    \ be between 2 and 36\"))\n    else\n        if base == 10\n            return\
    \ toString(x)\n        else\n            digits = digits(x)\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base", "    if base < 2 || base > 36\n        error(\"\
    Invalid base\")\n    end\n    \n    if base == 10\n        return string(x)\n\
    \    end\n    \n    if base == 2\n        return string(x * 2)\n    end\n    \n\
    \    if base == 3\n        return string(x * 3)\n    end\n    \n    if base ==\
    \ 4\n        return string(x * 4)\n    end\n    \n    if base == 5\n        return\
    \ string(x * 5)\n    end\n    \n    if base == 6\n        return string(x * 6)\n\
    \    end\n    \n    if base == 7\n        return string(x * 7)\n    end\n    \n\
    \    if base == 8\n        return string(x * 8)\n    end\n    \n    if base ==\
    \ 9\n        return string(x * 9)\n    end\n    \n    if base == 10\n        return\
    \ string(x * 10)\n    end\n    \n    if base == 11\n        return string(x *\
    \ 11)\n    end\n    \n    if base == 12\n        return string(x * 12)\n    end\n\
    \    \n    if base == 13\n        return string(x * 13)\n    end\n    \n    if\
    \ base == 14\n        return string(x * 14)\n    end\n    \n    if base == 15\n\
    \        return string(x * 15)\n    end\n    \n    if base == 16\n        return\
    \ string(x * 16)\n    end\n    \n    if base == 17\n        return string(x *\
    \ 17)\n    end\n    \n    if base == 18\n        return string(x * 18)\n    end\n\
    \    \n    if base == 19\n        return string(x * 19)\n    end\n    \n    if\
    \ base == 20\n        return string(x * 20)\n    end\n    \n    if base == 21\n\
    \        return string(x * 21)\n    end\n    \n    if base == 22\n        return\
    \ string(x * 22)\n    end\n    \n    if base == 23\n        return string(x *\
    \ 23)\n    end\n    \n    if base == 24\n        return string(x * 24)\n    end\n\
    \    \n    if base == 25\n        return string(x * 25)\n    end\n    \n    if\
    \ base == 26\n        return string(x * 26)\n    end\n    \n    if base == 27\n\
    \        return string(x * 27)\n    end\n    \n    if base == 28\n        return\
    \ string(x * 28)\n    end\n    \n    if base == 29\n        return string(x *\
    \ 29)\n    end\n    \n    if base == 30\n        return string(x * 30)\n    end\n\
    \    \n    if base == 31\n        return string(x * 31)\n    end\n    \n    if\
    \ base == 32\n        return string(x * 32)\n    end\n    \n    if base == 33\n\
    \        return string(x", "    if base < 10\n        return show(base * x)\n\
    \    else\n        return show(base * x / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a number to a string with leading zeros.\nIf the number is negative, leading\
    \ zeros should be suppressed.\nIf the number is zero, return an empty string.\n\
    If the number is positive, convert it to its string representation with leading\
    \ zeros.\nFor example, a number 123 should be converted to \"000123\".\nWrite\
    \ a function that converts a number to a string with leading zeros.\nIf the number\
    \ is negative, leading zeros should be suppressed.\nIf the number is zero, return\
    \ an empty string.\nIf the number is positive, convert it to its string representation\
    \ with leading zeros.\nFor example, a number 123 should be converted to \"123\"\
    .\nWrite a function that converts a number to a string with leading zeros.\nIf\
    \ the number is negative, leading zeros should be suppressed.\nIf the number is\
    \ zero, return an empty string.\nIf the number is positive, convert it to its\
    \ string representation with leading zeros.\nFor example, a number 123 should\
    \ be converted to \"00123\".\nWrite a function that converts a number to a string\
    \ with leading zeros.\nIf the number is negative, leading zeros should be suppressed.\n\
    If the number is zero, return an empty string.\nIf the number is positive, convert\
    \ it to its string representation with leading zeros.\nFor example, a number 123\
    \ should be converted to \"0123\".\nWrite a function that converts a number to\
    \ a string with leading zeros.\nIf the number is negative, leading zeros should\
    \ be suppressed.\nIf the number is zero, return an empty string.\nIf the number\
    \ is positive, convert it to its string representation with leading zeros.\nFor\
    \ example, a number 123 should be converted to \"123\".\nWrite a function that\
    \ converts a number to a string with leading zeros.\nIf the number is negative,\
    \ leading zeros should be suppressed.\nIf the number is zero, return an empty\
    \ string.\nIf the number is positive, convert it to its string representation\
    \ with leading zeros.\nFor example, a number 123 should be converted to \"00123\"\
    .\nWrite a function that converts a number to a string with leading zeros.\nIf\
    \ the number is negative, leading zeros should be suppressed.\nIf the number is\
    \ zero, return an empty string.\nIf the number is positive, convert it to its\
    \ string representation with leading zeros.\nFor example, a number 123 should\
    \ be converted to \"0123\".\nWrite a function that converts a number to a string\
    \ with leading zeros.\nIf the number is negative, leading zeros should be suppressed.\n\
    If the number is zero, return an empty string.\nIf the number is positive, convert\
    \ it to its string representation with leading zeros.\nFor example, a number 123\
    \ should be converted to \"123\".\nWrite a function that converts a number to\
    \ a string with leading zeros.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.4>",
  "    if base < 10 \n        error(\"base must be less than 10\")\n    else if base\
    \ == 10 \n        return toString(x)\n    else \n        digits = toString(x)\n\
    \        digits = digits[digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = toString(digits)\n\
    \        return digits[digits.length - digits.length % base]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 8)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 0)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -1)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -4)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -5)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -6)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -7)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -8)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -9)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -10)\n</cell>", "    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length - digits.length % base]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length", "    if\
    \ base < 2 || base > 36\n        throw(ArgumentError(\"base must be between 2\
    \ and 36\"))\n    else\n        if base == 10\n            return toString(x)\n\
    \        else\n            digits = digits(x)\n            digits = digits[digits.length\
    \ - base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base]\n            digits = digits[digits.length - base]\n            digits\
    \ = digits[digits.length - base]\n            digits = digits[digits.length -\
    \ base", "    if base < 2 || base > 36\n        throw(ArgumentError(\"Base must\
    \ be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.4>",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    else\n        str = toString(x)\n        str = str[str.length\
    \ div base]\n        return str\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>", "    if base < 2 || base\
    \ > 36\n        error(\"Base must be between 2 and 36\")\n    elseif base == 2\n\
    \        return string(x)\n    elseif base == 3\n        return string(x*3)\n\
    \    elseif base == 4\n        return string(x*4)\n    elseif base == 5\n    \
    \    return string(x*5)\n    elseif base == 6\n        return string(x*6)\n  \
    \  elseif base == 7\n        return string(x*7)\n    elseif base == 8\n      \
    \  return string(x*8)\n    elseif base == 9\n        return string(x*9)\n    elseif\
    \ base == 10\n        return string(x*10)\n    elseif base == 11\n        return\
    \ string(x*11)\n    elseif base == 12\n        return string(x*12)\n    elseif\
    \ base == 13\n        return string(x*13)\n    elseif base == 14\n        return\
    \ string(x*14)\n    elseif base == 15\n        return string(x*15)\n    elseif\
    \ base == 16\n        return string(x*16)\n    elseif base == 17\n        return\
    \ string(x*17)\n    elseif base == 18\n        return string(x*18)\n    elseif\
    \ base == 19\n        return string(x*19)\n    elseif base == 20\n        return\
    \ string(x*20)\n    elseif base == 21\n        return string(x*21)\n    elseif\
    \ base == 22\n        return string(x*22)\n    elseif base == 23\n        return\
    \ string(x*23)\n    elseif base == 24\n        return string(x*24)\n    elseif\
    \ base == 25\n        return string(x*25)\n    elseif base == 26\n        return\
    \ string(x*26)\n    elseif base == 27\n        return string(x*27)\n    elseif\
    \ base == 28\n        return string(x*28)\n    elseif base == 29\n        return\
    \ string(x*29)\n    elseif base == 30\n        return string(x*30)\n    elseif\
    \ base == 31\n        return string(x*31)\n    elseif base == 32\n        return\
    \ string(x*32)\n    elseif base == 33\n        return string(x*33)\n    elseif\
    \ base == 34\n        return string(x*34)\n    elseif base == 35\n        return\
    \ string(x*35)\n    elseif base == 36\n        return string(x*36)\n    else\n\
    \        error(\"Base must be between 2 and 36\")\n    end\nend\n</code>\n<|/\
    \ a tags=julia,string |>\n<| c |>\nI believe that `string(x*base)` should be `string(x*base^-1)`\n\
    <|/ c |>\n<| a tags=julia,string |>\nI ", "    if base == 10 \n        return\
    \ toString(x)\n    else \n        return toString(x * base^digits(x))\nend", " \
    \   if base < 2 || base > 10\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x*base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a binary string. \nThe function should accept a number as an argument\
    \ and return a string.\nThe function should throw an error if the number is not\
    \ an integer.\nThe function should throw an error if the number is negative.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is greater than or equal to 32.\nThe function should\
    \ throw an error if the number is less than or equal to 0.\nThe function should\
    \ throw an error if the number is greater than or equal to 128.\nThe function\
    \ should throw an error if the number is less than or equal to 0.", "    if base\
    \ == 10 \n        digits = digits(x)\n        digits = digits[2:end]\n       \
    \ digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digit", "    if base == 10 \n        then\
    \ return String(x)\n        else return change_base(x / base, base) + String(x%base)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\nI wrote a package\
    \ for this:\nhttps://github.com/korakot/num2str\n<code>\njulia> using num2str",
  "    if base < 2 || base > 36\n        throw(ArgumentError(\"Invalid base\"))\n\
    \    \n    if x == 0\n        return \"\"\n    \n    if base == 10\n        return\
    \ to_string(x)\n    \n    digits = digits(x)\n    digits = digits[2:end]\n   \
    \ \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n \
    \   digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digit", "    if\
    \ base < 10\n        return show(base*x)\n    else\n        return show(base*(x/base))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>", "    if base == 10 \n\
    \        digits = \"0123456789\"\n    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    \n    digits = digits[base-10:base]\n    return digits[x]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary number to a decimal\
    \ number.", "    if base < 2 || base > 36\n        throw(ArgumentError(\"base\
    \ must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers.\nThe input is a\
    \ string containing only binary digits.\nThe output is a string containing the\
    \ decimal representation of the binary number.\nThe function should throw an error\
    \ if the input is not valid.\nThe function should throw an error if the input\
    \ contains more than 32 binary digits.\nThe function should throw an error if\
    \ the input contains more than 32 binary digits.\nThe function should throw an\
    \ error if the input contains more than 32 binary digits.\nThe function should\
    \ throw an error if the input contains more than 32 binary digits.\nThe function\
    \ should throw an error if the input contains more than 32 binary digits.\nThe\
    \ function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 binary digits.\n\
    The function should throw an error if the input contains more than 32 ", "   \
    \ if base < 2 || base > 10\n        throw(ArgumentError(\"base must be between\
    \ 2 and 10\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number from\
    \ base 10 to base 16. \nThe function should throw an error if the base is not\
    \ between 2 and 16.\nThe function should throw an error if the input number is\
    \ negative.\nThe function should throw an error if the input number is zero.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should ", " \
    \   if base < 2 || base > 36\n        throw(ArgumentError(\"base must be between\
    \ 2 and 36\"))\n    elseif base == 2\n        return string(x)\n    else\n   \
    \     digits = string(x)\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits["]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
