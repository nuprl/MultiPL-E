name: HumanEval_114_minSubArraySum
language: jl
prompt: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
  \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
  \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"\n\
  function minSubArraySum(nums::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
  \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
  \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
  \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10,\
  \ -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
  \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
  \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
  \ -1]) == -1)\nend\n"
completions: ["    \n    sum = 0\n    for num in nums\n        sum += num\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the squares\
    \ of the numbers in an array. For example, if the input array is [4, 9, 16, 25],\
    \ then the output should be 42.", "    sum = 0\n    for n in nums\n        sum\
    \ += n\n    end\n    return sum\nend", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    sum = 0\n    for num in nums\n        sum += num\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times the given value appears in the given array.", "    sum::Int64 = 0\n  \
    \  for i in nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n       \
    \ sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given array.", "   \
    \ \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 7\nGiven an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"",
  "    sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.", "    \n    sum =\
    \ 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given number appears\
    \ in an array.", "    \n    sum = 0\n    for n in nums\n        sum += n\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times a given value appears in an array.", "    \n   \
    \ sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that finds\
    \ the maximum sum of any non-empty sub-array of nums.", "    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of integers within a given range that add up to a specific value.", "    \n\
    \    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\nHint: Use a for loop to iterate over the sub-arrays of nums.",
  "    \n    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers less than or equal to $n$. \nExample\n\
    >>> count_positives(10)\n3\n>>> count_positives(0)\n0\n>>> count_positives(-10)\n\
    0\n>>> count_positives(1)\n1\n>>> count_positives(2)\n1\n>>> count_positives(3)\n\
    2\n>>> count_positives(4)\n2\n>>> count_positives(5)\n3\n>>> count_positives(6)\n\
    3\n>>> count_positives(7)\n3\n>>> count_positives(8)\n3\n>>> count_positives(9)\n\
    3\n>>> count_positives(10)\n3\n>>> count_positives(11)\n3\n>>> count_positives(12)\n\
    3\n>>> count_positives(13)\n3\n>>> count_positives(14)\n3\n>>> count_positives(15)\n\
    3\n>>> count_positives(16)\n3\n>>> count_positives(17)\n3\n>>> count_positives(18)\n\
    3\n>>> count_positives(19)\n3\n>>> count_positives(20)\n3\n>>> count_positives(21)\n\
    3\n>>> count_positives(22)\n3\n>>> count_positives(23)\n3\n>>> count_positives(24)\n\
    3\n>>> count_positives(25)\n3\n>>> count_positives(26)\n3\n>>> count_positives(27)\n\
    3\n>>> count_positives(28)\n3\n>>> count_positives(29)\n3\n>>> count_positives(30)\n\
    3\n>>> count_positives(31)\n3\n>>> count_positives(32)\n3\n>>> count_positives(33)\n\
    3\n>>> count_positives(34)\n3\n>>> count_positives(35)\n3\n>>> count_positives(36)\n\
    3\n>>> count_positives(37)\n3\n>>> count_positives(38)\n3\n>>> count_positives(39)\n\
    3\n>>> count_positives(40)\n3\n>>> count_positives(41)\n3\n>>> count_positives(42)\n\
    3\n>>> count_positives(43)\n3\n>>> count_positives(44)\n3\n>>> count_positives(45)\n\
    3\n>>> count_positives(46)\n3\n>>> count_positives(47)\n3\n>>> count_positives(48)\n\
    3\n>>> count_positives(49)\n3\n>>> count_positives(50)\n3\n>>> count_positives(51)\n\
    3", "    sum::Int64 = 0\n    for i in nums\n        sum += i\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint\nThe function should\
    \ return an Int64 value.", "    \n    sum = 0\n    for n in nums\n        sum\
    \ += n\n    end\n    return sum\nend", "    \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to n.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of integers in a given array that are less than a given value.", "    \n   \
    \ sum = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-array of nums.", "    \n    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given number appears in an array.", "    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ an array.", "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum sum of any non-empty sub-array of nums.", "    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    sum::Int64 = 0\n    \n    for i in nums\n        sum += i\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for x in nums\n\
    \        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.", "    \n \
    \   sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7\nGiven a binary search tree and a key, find\
    \ the node in the BST that has the\nlargest value when traversing from the root\
    \ to the node. If the node does not\nexist, return nil.\nExample\nGiven the below\
    \ binary search tree:\nNone BST", "    sum = 0\n    for n in nums\n        sum\
    \ += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", " \
    \   sum = 0\n    for num in nums\n        sum += num\n    end\n    return sum\n\
    end", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find the\
    \ minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    \n    sum::Int64 = 0\n  \
    \  \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in an array.", "    \n    sum = 0\n    for i in nums\n\
    \        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array.", "    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to n.", "    \n    sum::Int64 = 0\n    \n    for\
    \ i in nums\n        sum += i\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of times a given element appears in an array.", "    \n \
    \   sum = 0\n    for i in nums\n        sum += i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.3>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.3>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n       \
    \ sum += num\n    end\n    \n    return sum\nend", "    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum number in a given array of numbers. \nExample\n>>>\
    \ min([2, 3, 4, 1, 2, 4])\n1\n>>> min([-1, -2, -3])\n-3\n</text>\n<code language=julia-1.0>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a Julia\
    \ function minSubArraySum(nums::Vector{Int64}) which returns the minimum sum of\
    \ any non-empty sub-array of nums.", "    sum::Int64 = 0\n    \n    for num in\
    \ nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum sum of any non-empty sub-array of nums.", "    \n    sum\
    \ = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in nums.", "    \n    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given array.", "    \n  \
    \  sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend",
  "    \n    sum::Int64 = 0\n    \n    for num in nums\n        \n        if num >\
    \ 0\n            \n            sum += num\n            \n        else\n      \
    \      \n            sum -= num\n            \n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7: Find the minimum number of steps to make a list of\
    \ numbers perfectly balanced\nGiven a list of numbers, find the minimum number\
    \ of steps to make them perfectly balanced.\nExample\nInput: [1, 2, 3, 2]\nOutput:\
    \ 2\nExplanation: One way to make them perfectly balanced is by starting with\
    \ [1, 2, 3] and ending up with [1, 1, 3].", "    \n    sum = 0\n    for num in\
    \ nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that finds the maximum sum of any non-empty sub-array of nums.", "    \n   \
    \ sum = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ an array.", "    sum = 0\n    for num in nums\n        sum += num\n    end\n\
    \    return sum\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7\nGiven an array of integers nums, find the minimum\
    \ sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    sum = 0\n    for x in nums\n        sum += x\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ less than or equal to n.", "    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  sum = 0\n    for i in nums\n        sum += i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum::Int64 = 0\n    \n    for i in nums\n        sum\
    \ += i\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.1>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7", "    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.\nExample\n\
    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n\
    -6\nHint: use min() to get the minimum value in a vector.", "    \n    sum = 0\n\
    \    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-array of nums.", "    \n    sum = 0\n    for n in nums\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return\
    \ sum\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    sum::Int64 = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that finds the maximum sum\
    \ of any non-empty sub-array of nums.", "    \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of integers less than or equal to n that\
    \ are divisible by k.", "    \n    sum = 0\n    for num in nums\n        sum +=\
    \ num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    sum = 0\n    \n \
    \   for x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given array.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.4>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ times the given element appears in an array.", "    \n    sum::Int64 = 0\n \
    \   \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7\nGiven an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"", "   \
    \ \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for n\
    \ in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sum = 0\n    for x in nums\n        sum +=\
    \ x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.", "    \n \
    \   sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n \
    \   \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum sum of a given array of integers. \nThe function should take an\
    \ array of integers as an argument, and return an Int64.", "    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given array.", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that finds the maximum sum of any non-empty sub-array of nums.", "    \n   \
    \ sum = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.", "    \n    sum =\
    \ 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to n.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.", "    sum::Int64\
    \ = 0\n    for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that finds the minimum difference between two numbers.\
    \ \nExample\n>>> minDiff([2, 3, 4, 1, 2, 4], [-1, -2, -3])\n1\n>>> minDiff([-1,\
    \ -2, -3], [2, 3, 4, 1, 2, 4])\n1\n>>> minDiff([-1, -2, -3], [-1, -2, -3, 4, -1,\
    \ -2, -3])\n1\n>>> minDiff([-1, -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1])\n\
    1\n>>> minDiff([-1, -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1])\n1\n>>>\
    \ minDiff([-1, -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 1])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 1])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 2])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 3])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 4])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 5])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 6])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 7])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 8])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 9])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 10])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 11])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 12])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 13])\n1\n>>> minDiff([-1,\
    \ -2, -3], [-1, -2, -3, 4, -1, -2, -3, 1, 4, 1, 1, 2, 14])\n1\n>>> minDiff", " \
    \   \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n  \
    \  \n    return sum\nend", "    sum::Int64 = 0\n    \n    for n in nums\n    \
    \    sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the number of elements in a vector that are less\
    \ than a given value.", "    \n    sum = 0\n    for i in nums\n        sum +=\
    \ i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum sum of any non-empty sub-array of nums.", "    \n    sum::Int64\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate\
    \ through each element in the array.", "    \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum\
    \ = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 3\nGiven an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"", "   \
    \ \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.", "    \n \
    \   sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that finds\
    \ the maximum sum of any non-empty sub-array of nums.", "    \n    sum = 0\n \
    \   for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum = 0\n    \n    for x in nums\n        sum += x\n\
    \    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a given value appears in an array.", "    \n\
    \    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-array of nums.", "    sum = 0\n    for x in nums\n       \
    \ sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of integers in an array that satisfy a certain condition.\
    \ For example, if the array is [5, 3, 7, 2, 6, 8], then your function should return\
    \ 3 because there are 3 integers in the array that satisfy the condition x^2 +\
    \ x + 1 = 15. Your function should work for any array size.", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sum::Int64 = 0\n    \n    for i in nums\n\
    \        sum += i\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    sum::Int64 = 0\n\
    \    \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that finds the minimum sum of any\
    \ non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate through\
    \ the array.", "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum number in a given array of numbers.", "    \n    sum = 0\n    for\
    \ x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum::Int64 = 0\n    \n    for n in nums\n        \n        if sum > n\n\
    \            \n            sum = n\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 2\nGiven an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers less than or equal to n.", "  \
    \  \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum\
    \ of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1,\
    \ 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate\
    \ over the array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array. For example, given [1, 1, 2, 2],\
    \ return 3.", "    \n    sum = 0\n    for x in nums\n        sum += x\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the minimum sum of a\
    \ given array of integers nums.", "    \n    sum::Int64 = 0\n    \n    for n in\
    \ nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers less than or equal to n.", "  \
    \  \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times each unique element appears in an array.", "    sum::Int64 = 0\n  \
    \  for num in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ less than or equal to n.", "    \n    sum = 0\n    \n    for n in nums\n   \
    \     sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    sum = 0\n    for i in nums\n        sum += i\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ an array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    sum::Int64 = 0\n    \n    for i in nums\n        \n        if sum < i\n\
    \            sum = i\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    sum = 0\n    \n    for num in nums\n  \
    \      sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.\nExample\n\
    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n\
    -6\nHint: Use a for loop to iterate over each element in the array.", "    \n\
    \    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.", "    \n    sum =\
    \ 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum::Int64 = 0\n \
    \   \n    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to n. \nExample\n>>> count_positives(10)\n5\n>>> count_positives(0)\n\
    0\n>>> count_positives(-10)\n0\n>>> count_positives(1)\n1\n>>> count_positives(100)\n\
    3\n>>> count_positives(-100)\n0\n>>> count_positives(1000)\n2\n>>> count_positives(-1000)\n\
    0\n>>> count_positives(10000)\n1\n>>> count_positives(-10000)\n0\n>>> count_positives(100000)\n\
    1\n>>> count_positives(-100000)\n0\n>>> count_positives(1000000)\n1\n>>> count_positives(-1000000)\n\
    0\n>>> count_positives(1000000000)\n1\n>>> count_positives(-1000000000)\n0\n>>>\
    \ count_positives(1000000000000)\n1\n>>> count_positives(-1000000000000)\n0\n\
    >>> count_positives(100000000000000)\n1\n>>> count_positives(-100000000000000)\n\
    0\n>>> count_positives(1000000000000000000)\n1\n>>> count_positives(-1000000000000000000)\n\
    0\n>>> count_positives(100000000000000000000)\n1\n>>> count_positives(-100000000000000000000)\n\
    0\n>>> count_positives(10000000000000000000000)\n1\n>>> count_positives(-10000000000000000000000)\n\
    0\n>>> count_positives(1000000000000000000000000)\n1\n>>> count_positives(-1000000000000000000000000)\n\
    0\n>>> count_positives(100000000000000000000000000)\n1\n>>> count_positives(-100000000000000000000000000)\n\
    0\n>>> count_positives(10000000000000000000000000000)\n1\n>>> count_positives(-10000000000000000000000000000)\n\
    0\n>>> count_positives(1000000000000000000000000000000)\n1\n>>> count_positives(-1000000000000000000000000000000)\n\
    0\n>>> count_positives(1000000000000000000000000000000000)\n1\n>>> count_positives(-1000000000000000000000000000000000)\n\
    0\n>>> count_positives(100000000000000000000000000000000)\n1\n>>> count_positives(-100000000000000000000000000000000)\n\
    0\n>>> count_positives(10000000000000000000000000000000001)\n1\n>>> count_positives(-10000000000000000000000000000000001)\n\
    0\n>>> count_positives(1000000000000000000000000000000001)\n1\n>>> count_positives(-1000000000000000000000000000000001)\n\
    0\n>>> count_positives(10000000000000000000000000000000011)", "    \n    sum =\
    \ 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the first n positive integers.\
    \ \nExample\n>>> sumFirstN([2, 3, 1, 4, 1, 5])\n15\n>>> sumFirstN([-2, 3, 1, 4,\
    \ 1, 5])\n15\n>>> sumFirstN([2, 3, -4, 1, 5])\n15\n>>> sumFirstN([2, 3, -4, -1,\
    \ 5])\n15\n>>> sumFirstN([2, 3, -4, 1, -5])\n15\n>>> sumFirstN([2, 3, -4, 1, 5])\n\
    15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n>>> sumFirstN([2, 3, -4, 1, -5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> sumFirstN([2, 3, -4, -1, 5])\n15\n\
    >>> sumFirstN([2, 3, -4, -1, -5])\n15\n>>> ", "    sum::Int64 = 0\n    for i in\
    \ nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of positive integers less than or equal to n.", "  \
    \  \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>", "    \n    sum = 0\n    \n    for n\
    \ in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n\
    \    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector.", "  \
    \  \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend", "    \n    sum::Int64 = 0\n    \n    for n in nums\n   \
    \     sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n       \
    \ sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a given value appears in an array.", "    \n\
    \    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    sum\
    \ = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Problem 3\nGiven an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers in an\
    \ array.", "    \n    sum::Int64 = 0\n    \n    for n in nums\n        sum +=\
    \ n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>>\
    \ maxSubArraySum([2, 3, 4, 1, 2, 4])\n    9\n    >>> maxSubArraySum([-1, -2, -3])\n\
    \    6\n    \"\"\"", "    \n    sum = 0\n    \n    for num in nums\n        sum\
    \ += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given value appears in a given array.", " \
    \   \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in an array.", "    \n    sum\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ positive integers less than or equal to a given integer n.", "    \n    sum::Int64\
    \ = 0\n    \n    for i in nums\n        sum += i\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum sum of\
    \ any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop to iterate\
    \ over the sub-arrays in nums.", "    \n    sum = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers nums, find\
    \ the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>>\
    \ minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n\
    \    -6\n    \"\"\"", "    \n    sum::Int64 = 0\n    \n    for num in nums\n \
    \       sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend", "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n \
    \   end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\nend",
  "    \n    sum::Int64 = 0\n    \n    for num in nums\n        sum += num\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum sum of any non-empty sub-array of nums.", "    \n    sum = 0\n \
    \   for x in nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    sum = 0\n    for n in nums\n        sum += n\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise\nWrite a function that returns the minimum sum\
    \ of any non-empty sub-array of nums.", "    \n    sum = 0\n    \n    for x in\
    \ nums\n        \n        if sum < x\n            \n            sum = x\n    \
    \    end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>>\
    \ maxSubArraySum([2, 3, 4, 1, 2, 4])\n    9\n    >>> maxSubArraySum([-1, -2, -3])\n\
    \    3\n    \"\"\"", "    sum = 0\n    for num in nums\n        sum += num\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ integers in an array that are less than a given value.", "    \n    sum = 0\n\
    \    \n    for num in nums\n        sum += num\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given value appears in an array.", "    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend", "    sum::Int64\
    \ = 0\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that finds the minimum\
    \ sum of any non-empty sub-array of nums.", "    sum::Int64 = 0\n    for i in\
    \ nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 4\nGiven an array\
    \ of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n\
    \    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1,\
    \ -2, -3])\n    -6\n    \"\"\"", "    \n    sum = 0\n    for n in nums\n     \
    \   sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the number of positive\
    \ integers less than or equal to the sum of the numbers in the array.", "    \n\
    \    sum::Int64 = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nProblem 7\nGiven an array of integers nums, find the maximum\
    \ sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    10\n    >>> maxSubArraySum([-1, -2, -3])\n    -3\n    \"\
    \"\"", "    \n    sum = 0\n    \n    for x in nums\n        sum += x\n    end\n\
    \    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise\nWrite a function that returns the minimum sum\
    \ of any non-empty sub-array of nums.", "    sum::Int64 = 0\n    for i in nums\n\
    \        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find\
    \ the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>>\
    \ minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n\
    \    -6\n    \"\"\"", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nGiven an array\
    \ of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n\
    \    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1,\
    \ -2, -3])\n    -6\n    \"\"\"", "    \n    sum = 0\n    for num in nums\n   \
    \     sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in an array. For example, given an array [4, 9,\
    \ 16, 25], the function should return 50.", "    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    sum::Int64 = 0\n    \n    for n in nums\n        \n\
    \        if sum < n\n            sum = n\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nProblem 3\nGiven an array of integers nums, find the minimum\
    \ sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\
    \"\"", "    sum = 0\n    for n in nums\n        sum += n\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\nHint: Use a for loop\
    \ to iterate over the array.", "    \n    sum = 0\n    for x in nums\n       \
    \ sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2,\
    \ -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.", "    \n    sum = 0\n    \n \
    \   for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   sum::Int64 = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    \n    for x\
    \ in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the sum of the squares of the numbers from\
    \ 1 to n.\nExample\n>>> sumOfSquares(10)\n25\n>>> sumOfSquares(100)\n1250\n>>>\
    \ sumOfSquares(1000)\n12500\n>>> sumOfSquares(10000)\n12500500\n>>> sumOfSquares(100000)\n\
    12500500500\n>>> sumOfSquares(1000000)\n12500500500500\n>>> sumOfSquares(10000000)\n\
    12500500500500500\n>>> sumOfSquares(100000000)\n12500500500500500500\n>>> sumOfSquares(1000000000)\n\
    12500500500500500500500\n>>> sumOfSquares(10000000000)\n12500500500500500500500500\n\
    >>> sumOfSquares(100000000000)\n12500500500500500500500500500\n>>> sumOfSquares(1000000000000)\n\
    12500500500500500500500500500500\n>>> sumOfSquares(10000000000000)\n12500500500500500500500500500500500\n\
    >>> sumOfSquares(100000000000000)\n12500500500500500500500500500500500500\n>>>\
    \ sumOfSquares(1000000000000000)\n12500500500500500500500500500500500500500\n\
    >>> sumOfSquares(10000000000000000)\n12500500500500500500500500500500500500500\n\
    >>> sumOfSquares(100000000000000000)\n12500500500500500500500500500500500500500500\n\
    >>> sumOfSquares(1000000000000000000)\n12500500500500500500500500500500500500500500500\n\
    >>> sumOfSquares(10000000000000000000)\n12500500500500500500500500500500500500500500500500\n\
    >>> sumOfSquares(100000000000000000000)\n12500500500500500500500500500500500500500500500500\n\
    >>> sumOfSquares(1000000000000000000000)\n12500500500500500500500500500500500500500500500500500\n\
    >>> sumOfSquares(10000000000000000000000)\n12500", "    \n    sum = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value.", "    sum::Int64 = 0\n    for i in nums\n        sum\
    \ += i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that finds the minimum sum of a given array of integers. \nThe function should\
    \ take an array of integers as an argument and return the minimum sum of the array.",
  "    \n    sum = 0\n    for i in nums\n        sum += i\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7\nGiven an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"", "   \
    \ \n    sum = 0\n    for num in nums\n        sum += num\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n\
    <text>\nProblem 4\nGiven an array of integers nums, find the maximum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    >>> maxSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n    9\n    >>> maxSubArraySum([-1, -2, -3])\n    -3\n    \"\"\"",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem 7\nWrite a Julia function named minSubArraySum2\
    \ that takes an array of integers nums and returns the minimum sum of any non-empty\
    \ sub-array of nums.", "    \n    sum::Int64 = 0\n    \n    for num in nums\n\
    \        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in nums.",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the minimum sum of any\
    \ non-empty sub-array of nums.", "    \n    sum = 0\n    \n    for n in nums\n\
    \        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum sum of any non-empty sub-array\
    \ of nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1,\
    \ -2, -3])\n-6\n</text>", "    \n    sum = 0\n    \n    for n in nums\n      \
    \  sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum sum of any non-empty sub-array of nums.\nExample\n\
    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n\
    -6\nHint: Use a for loop and a sum variable.", "    \n    sum = 0\n    for num\
    \ in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for n in nums\n        sum += n\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given number appears in a given array.", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sum = 0\n    \n    for num in nums\n  \
    \      sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7: Find the minimum number of coins required\
    \ to make up an amount\nGiven a non-negative integer amount, find the minimum\
    \ number of coins required to make up that amount. You may assume that you have\
    \ an infinite number of coins. Each coin has a positive integer number of cents,\
    \ and is denoted cent coin. For example, 1 cent coin is represented by the integer\
    \ 1. Two coins are represented by integers 1 and 2. A quarter is represented by\
    \ the integer 3. And so on...", "    \n    sum::Int64 = 0\n    \n    for num in\
    \ nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in an array.", "    \n    sum\
    \ = 0\n    for num in nums\n        sum += num\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find the minimum sum of any non-empty sub-array of nums.\nExample\n>>> minSubArraySum([2,\
    \ 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\n</text>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for n in nums\n        sum += n\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers less\
    \ than or equal to n. \nExample\n>>> count_positives(10)\n3\n>>> count_positives(-10)\n\
    0\n>>> count_positives(0)\n0\n>>> count_positives(1)\n1\n>>> count_positives(2)\n\
    1\n>>> count_positives(3)\n2\n>>> count_positives(4)\n2\n>>> count_positives(5)\n\
    3\n>>> count_positives(6)\n3\n>>> count_positives(7)\n3\n>>> count_positives(8)\n\
    3\n>>> count_positives(9)\n3\n>>> count_positives(10)\n3\n>>> count_positives(11)\n\
    3\n>>> count_positives(12)\n3\n>>> count_positives(13)\n3\n>>> count_positives(14)\n\
    3\n>>> count_positives(15)\n3\n>>> count_positives(16)\n3\n>>> count_positives(17)\n\
    3\n>>> count_positives(18)\n3\n>>> count_positives(19)\n3\n>>> count_positives(20)\n\
    3\n>>> count_positives(21)\n3\n>>> count_positives(22)\n3\n>>> count_positives(23)\n\
    3\n>>> count_positives(24)\n3\n>>> count_positives(25)\n3\n>>> count_positives(26)\n\
    3\n>>> count_positives(27)\n3\n>>> count_positives(28)\n3\n>>> count_positives(29)\n\
    3\n>>> count_positives(30)\n3\n>>> count_positives(31)\n3\n>>> count_positives(32)\n\
    3\n>>> count_positives(33)\n3\n>>> count_positives(34)\n3\n>>> count_positives(35)\n\
    3\n>>> count_positives(36)\n3\n>>> count_positives(37)\n3\n>>> count_positives(38)\n\
    3\n>>> count_positives(39)\n3\n>>> count_positives(40)\n3\n>>> count_positives(41)\n\
    3\n>>> count_positives(42)\n3\n>>> count_positives(43)\n3\n>>> count_positives(44)\n\
    3\n>>> count_positives(45)\n3\n>>> count_positives(46)\n3\n>>> count_positives(47)\n\
    3\n>>> count_positive", "    \n    sum = 0\n    \n    for n in nums\n        sum\
    \ += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    \n    for num in nums\n        sum += num\n    end\n   \
    \ \n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times the given element appears in the given array.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
