language: jl
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits\
    \ = string(\"0\", N)\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnd_ekzsd.jl:1\nin expression starting at /tmp/tmpnd_ekzsd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for n in 1:N\n        digits[n] = digits[n-1] + digits[n-2]\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a Julia function to compute the sum of all digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmd9d4_of.jl:30\nin expression starting at\
    \ /tmp/tmpmd9d4_of.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while\
    \ N > 0\n        sum += N % 2\n        N /= 2\n    \n    return sum.to_s(2)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(5)\n</cell>\n<code language=julia-1.5>\nsolve(4)\n</cell>\n<code language=julia-1.5>\n\
    solve(3)\n</cell>\n<code language=julia-1.5>\nsolve(7)\n</cell>\n<code language=julia-1.5>\n\
    solve(6)\n</cell>\n<code language=julia-1.5>\nsolve(8)\n</cell>\n<code language=julia-1.5>\n\
    solve(9)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(11)\n</cell>\n<code language=julia-1.5>\nsolve(12)\n</cell>\n<code language=julia-1.5>\n\
    solve(13)\n</cell>\n<code language=julia-1.5>\nsolve(14)\n</cell>\n<code language=julia-1.5>\n\
    solve(15)\n</cell>\n<code language=julia-1.5>\nsolve(16)\n</cell>\n<code language=julia-1.5>\n\
    solve(17)\n</cell>\n<code language=julia-1.5>\nsolve(18)\n</cell>\n<code language=julia-1.5>\n\
    solve(19)\n</cell>\n<code language=julia-1.5>\nsolve(20)\n</cell>\n<code language=julia-1.5>\n\
    solve(21)\n</cell>\n<code language=julia-1.5>\nsolve(22)\n</cell>\n<code language=julia-1.5>\n\
    solve(23)\n</cell>\n<code language=julia-1.5>\nsolve(24)\n</cell>\n<code language=julia-1.5>\n\
    solve(25)\n</cell>\n<code language=julia-1.5>\nsolve(26)\n</cell>\n<code language=julia-1.5>\n\
    solve(27)\n</cell>\n<code language=julia-1.5>\nsolve(28)\n</cell>\n<code language=julia-1.5>\n\
    solve(29)\n</cell>\n<code language=julia-1.5>\nsolve(30)\n</cell>\n<code language=julia-1.5>\n\
    solve(31)\n</cell>\n<code language=julia-1.5>\nsolve(32)\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6tjm_zd2.jl:30\nin expression starting at\
    \ /tmp/tmp6tjm_zd2.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n  \
    \  digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] *\
    \ 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    solve(N, digits)\n    \n    Recursive function that solves the problem\
    \ of finding the sum of its digits in binary \n    \n    Variables:\n        @N\
    \ integer\n        @digits array of integers\n             Constraints: 0 \u2264\
    \ N \u2264 10000.\n    Output:\n         a string of binary number\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpglmn4byo.jl:24 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpglmn4byo.jl:24\n\
    in expression starting at /tmp/tmpglmn4byo.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return String(N)\n\
    \    \n    digits = N % 10\n    N = N / 10\n    \n    digits = solve(digits)\n\
    \    \n    return digits + String(N)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74rbvtsp.jl:1\nin expression starting at /tmp/tmp74rbvtsp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits\
    \ = string(\"0\", N)\n    \n    for d in digits[2:end]\n        digits[2] = digits[2]\
    \ + digits[1]\n        digits[1] = digits[1] * 2\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nGiven a positive integer N, return the sum of its digits in binary.\n\
    \    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"\
    110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp8nm0bj.jl:36\nin expression starting at\
    \ /tmp/tmpgp8nm0bj.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n\
    \    digits = zeros(Int, 10)\n    \n    for i = 1:10\n        digits[i] = N %\
    \ 2\n        N = N / 2\n    end\n    \n    digits[end] = N % 2\n    \n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nWrite a Julia function called solve that takes an\
    \ integer N and returns the sum of the digits of N in binary.\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zdqjpfo.jl:34\nin expression starting at\
    \ /tmp/tmp4zdqjpfo.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    digits = String[]\n  \
    \  \n    digits = digits[0..N-1]\n    \n    sum = 0\n    \n    for i in digits\n\
    \        sum = sum + i\n    \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lvp18q2.jl:33\nin expression starting at\
    \ /tmp/tmp1lvp18q2.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = digits(N)\n    \n \
    \   binary = \"\"\n    \n    for digit in digits\n        binary += digit\n  \
    \  \n    return binary\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1ywckv7.jl:1\nin expression starting at /tmp/tmpm1ywckv7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, 10)\n    \n    for i in 1:N\n        digits[i]\
    \ = digits[i-1] + N % 10\n        N = N / 10\n    end\n    \n    digits = digits[digits[end]\
    \ == 0]\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(5) == \"1010\"\n@assert solve(7) == \"11101\"\n@assert solve(9)\
    \ == \"11110\"\n@assert solve(10) == \"11111\"\n@assert solve(15) == \"111111\"\
    \n@assert solve(17) == \"1111111\"\n@assert solve(18) == \"11111110\"\n@assert\
    \ solve(20) == \"111111110\"\n@assert solve(25) == \"1111111101\"\n@assert solve(30)\
    \ == \"11111111011\"\n@assert solve(35) == \"111111110111\"\n@assert solve(40)\
    \ == \"1111111101111\"\n@assert solve(45) == \"11111111011111\"\n@assert solve(50)\
    \ == \"111111110111111\"\n@assert solve(55) == \"1111111101111111\"\n@assert solve(60)\
    \ == \"11111111011111111\"\n@assert solve(70) == \"111111110111111111\"\n@assert\
    \ solve(75) == \"1111111101111111110\"\n@assert solve(80) == \"11111111011111111110\"\
    \n@assert solve(90) == \"111111110111111111101\"\n@assert solve(100) == \"1111111101111111111010\"\
    \n@assert solve(1000) == \"11111111011111111110100\"\n@assert solve(10000) ==\
    \ \"111111110111111111101000\"\n@assert solve(100000) == \"1111111101111111111010000\"\
    \n@assert solve(1000000) == \"11111111011111111110100000\"\n@assert solve(10000000)\
    \ == \"111111110111111111101000000\"\n@assert solve(100000000) == \"1111111101111111111010000000\"\
    \n@assert solve(1000000000) == \"11111111011111111110100000000\"\n@assert solve(10000000000)\
    \ == \"111111110111111111101000000000\"\n@assert solve(100000000000) == \"1111111101111111111010000000000\"\
    \n@assert solve(1000000000000) == \"11111111011111111110100000000000\"\n@assert\
    \ solve(10000000000000) == \"111111110111111111101000000000000\"\n@assert solve(100000000000000)\
    \ == \"1111111101111111111010000000000000\"\n@assert solve(1000000000000000) ==\
    \ \"11111111011\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph561m4tt.jl:30\nin expression starting at\
    \ /tmp/tmph561m4tt.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0 \n        return \"0\"\n\
    \    if N == 1 \n        return \"1\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    digits = solve(digits)\n    \n    digits = digits + N % 10\n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n   \
    \ digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n  \
    \  digits = digits + N % 10\n    N = N / 10\n    \n    digits = \nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrrqxbq5.jl:1\nin expression starting at /tmp/tmpgrrqxbq5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n   \
    \     sum += d\n    \n    return string(digits, sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe001vemn.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe001vemn.jl:1\n\
    in expression starting at /tmp/tmpe001vemn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    return join(digits, \"\")\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(1000) == \"1\"\n@assert solve(150)\
    \ == \"110\"\n@assert solve(147) == \"1100\"\n</cell>\n<text>\nProblem 7: Binary\
    \ to Decimal\nA binary number is represented in Julia as a vector of 1s and 0s,\
    \ where each element of the vector is either 1 or 0. The binary number represented\
    \ is $10101$. How many decimal digits does it have?\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0b80grg.jl:31\nin expression starting at\
    \ /tmp/tmpc0b80grg.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    if N > 1\n     \
    \   \n        digits = floor(log10(N))\n        \n        binary = \"\"\n    \
    \    \n        for i = digits+1 downto 1 do\n            \n            binary\
    \ = string(binary, digits, digits-i) + string(i, digits)\n            \n     \
    \   end\n        \n        return binary\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\
    \    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"\
    110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc8wy9mu4.jl:34 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc8wy9mu4.jl:34\n\
    in expression starting at /tmp/tmpc8wy9mu4.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    binary\
    \ = \"\"\n    \n    for d in digits(N)\n        binary += d\n    end\n    \n \
    \   return binary\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3dw_im4o.jl:32

    '
  stdout: "test set: Error During Test at /tmp/tmp3dw_im4o.jl:35\n  Test threw exception\n\
    \  Expression: candidate(1000) == \"1\"\n  MethodError: no method matching +(::String,\
    \ ::Int64)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] solve(N::Int64)\n     @ Main /tmp/tmp3dw_im4o.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3dw_im4o.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3dw_im4o.jl:34\ntest set:\
    \ Error During Test at /tmp/tmp3dw_im4o.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(150) == \"110\"\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] solve(N::Int64)\n     @ Main /tmp/tmp3dw_im4o.jl:25\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3dw_im4o.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3dw_im4o.jl:34\ntest se"
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n   \
    \ if digits == 0\n        return \"0\"\n    \n    binary = \"\"\n    \n    while\
    \ N > 0\n        digit = N % 10\n        N = N / 10\n        binary = digit +\
    \ binary\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5570c0ts.jl:36\nin expression starting at\
    \ /tmp/tmp5570c0ts.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    digits[N] = digits[N]\
    \ + 1\n    \n    return join(digits, \"\")\nend\n</cell>\n<text>\nProblem 3\n\
    Write a Julia function that takes a positive integer N and returns the number\
    \ of digits in the binary representation of N.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bwnc8up.jl:30\nin expression starting at\
    \ /tmp/tmp4bwnc8up.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    binary\
    \ = zeros(Int, N+1)\n    binary[1] = 1\n    \n    for i = 2:N\n        binary[i]\
    \ = binary[i-1]*10 + N % 2\n        N = N/2\n    end\n    \n    return string(binary)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert\
    \ solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\
    \n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10)\
    \ == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n\
    @assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15)\
    \ == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n\
    @assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20)\
    \ == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\
    \n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25)\
    \ == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\
    \n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\n@assert solve(30)\
    \ == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32) == \"100005\"\
    \n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\n@assert solve(35)\
    \ == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37) == \"100010\"\
    \n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\n@assert solve(40)\
    \ == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42) == \"100015\"\
    \n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\n@assert solve(45)\
    \ == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47) == \"100020\"\
    \n@assert solve(48) == \"100021\"\n@assert solve(49) == \"100022\"\n@assert solve(50)\
    \ == \"100023\"\n@assert solve(51) == \"100024\"\n@assert solve(\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0o1e2xw4.jl:32\nin expression starting at\
    \ /tmp/tmp0o1e2xw4.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    binary = \"\"\n    \n    for digit\
    \ in digits\n        binary += digit\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgd0_3ije.jl:28\nin expression starting at\
    \ /tmp/tmpgd0_3ije.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = digits(N)\n    \n   \
    \ digits_str = join(digits, \"\")\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(digits_str)\n\
    \    \n    digits_str = reverse(digits_str)\n    \n    digits_str = reverse(\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7g5n1dz8.jl:116\nin expression starting at\
    \ /tmp/tmp7g5n1dz8.jl:116\n"
  stdout: ''
