language: jl
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n    \
    \    return reverse(array) \n    else \n        return array \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhnzgjc8.jl:34\nin expression starting at\
    \ /tmp/tmpvhnzgjc8.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    if sum_array % 2 == 0 \n        array.sort() \n    else \n        array.sort(reverse=true)\
    \ \n    return array \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptg65gmwm.jl:30\nin expression starting at\
    \ /tmp/tmptg65gmwm.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1 \n        array = reverse(array)\n    end\n    \n \
    \   sum_array = sum(array)\n    if sum_array % 2 == 0 \n        array = reverse(array)\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s5n3avx.jl:35\nin expression starting at\
    \ /tmp/tmp3s5n3avx.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = copy(array)\n    array.sort()\n    return array\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpnmefji2w.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpnmefji2w.jl:29\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpnmefji2w.jl:21\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnmefji2w.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnmefji2w.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnmefji2w.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([5]) == [5]\n  type Array has no field sort\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] sort_array(array::Vector{Int64})\n\
    \     @ Main /tmp/tmpnmefji2w.jl:21\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnmefji2w.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnmefji2w.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnmefji2w.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n  type Array has no field\
    \ sort\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ sort_array(array::Vector{Int64})\n     @ Main /tmp/tmpnmefji2w.jl:21\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnmefji2w.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnmefji2w.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpnmefji2w.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 3, 0, 1"
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 0 \n    \
    \    sort_array(reverse(array))\n    else\n        sort_array(array)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptih09z5q.jl:34\nin expression starting at\
    \ /tmp/tmptih09z5q.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| c |>\nThis doesn't work for me. `sort_array([2, 4, 3, 0, 1, 5, 6])` returns\
    \ `[6, 5, 4, 3, 2, 1, 0]` instead of `[0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out. Sorry for the confusion.\n<|/ c |>\n\
    <| a |>\nThe answer by is correct, but I wanted to add that you can also use the\
    \ built-in function sort! to sort in-place:\n<code>\njulia> sort!([2, 4, 3, 0,\
    \ 1, 5, 6])\n[0, 1, 2, 3, 4, 5]\n</code>\n<|/ a dscore=2 tags=sorting,arrays,julia\
    \ |>\n<| c |>\nThis doesn't work for me. `sort!([2, 4, 3, 0, 1, 5, 6])` returns\
    \ `[6, 5, 4, 3, 2, 1, 0]` instead of `[0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out. Sorry for the confusion.\n<|/ c |>\n\
    <| a |>\nThe answer by is correct, but I wanted to add that you can also use the\
    \ built-in function sort! to sort in-place:\n<code>\njulia> sort!([2, 4, 3, 0,\
    \ 1, 5, 6])\n[0, 1, 2, 3, 4, 5]\n</code>\n<|/ a tags=sorting,arrays,julia dscore=2\
    \ |>\n<| a tags=sorting,arrays,julia |>\nThe answer by is correct, but I wanted\
    \ to add that you can also use the built-in function sort! to sort in-place:\n\
    <code>\njulia> sort!([2, 4, 3, 0, 1, 5, 6])\n[0, 1, 2, 3, 4, 5]\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzw63u_m4.jl:26\nin expression starting at\
    \ /tmp/tmpzw63u_m4.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n     \
    \   sorted = sort_array(array[1:end-1]) \n        push!(sorted, array[1])\n  \
    \      return sorted \n    else\n        sorted = sort_array(array[2:end]) \n\
    \        push!(sorted, array[1])\n        return sorted \n    end\nend\n</code>\n\
    <|/ a tags=sorting,arrays,julia |>\n<| c |>\nThis doesn't seem to work. `sort_array([2,\
    \ 4, 3, 0, 1, 5, 6])` gives `[6, 5, 4, 3, 2, 1, 0]` instead of `[0, 1, 2, 3, 4,\
    \ 5]`.\n<|/ c |>\n<| c |>\nI fixed the bug, thank you for pointing out. Now it\
    \ works.\n<|/ c |>\n<| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4vmeyno.jl:38\nin expression starting at\
    \ /tmp/tmp_4vmeyno.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i \n    end\n    \n    if sum % 2 == 1 \n   \
    \     array = reverse(array) \n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9utfx_6.jl:34\nin expression starting at\
    \ /tmp/tmpj9utfx_6.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ \n    for ele in array \n        sum += ele \n    end\n    \n    if sum % 2\
    \ == 0 \n        sorted = sort_array(array[2:end]) \n        sorted[1] = array[end]\
    \ + sorted[1] \n        return sorted \n    else \n        sorted = sort_array(array[1:end-1])\
    \ \n        sorted[1] = array[end-1] + sorted[1] \n        return sorted \n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0f1j9ll.jl:39\nin expression starting at\
    \ /tmp/tmpk0f1j9ll.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        if odd \n            array = sort_array(array[1..end-1]) \n\
    \            array = [array[1], array[end], array[1]] + array[2..end] \n     \
    \   else \n            array = sort_array(array[1..end-1]) \n            array\
    \ = [array[1], array[end], array[1]] + array[2..end] \n            array = sort_array(array)\
    \ \n            array = [array[1], array[end], array[1]] + array[2..end] \n  \
    \          array = sort_array(array) \n            array = [array[1], array[end],\
    \ array[1]] + array[2..end] \n            array = sort_array(array) \n       \
    \     array = [array[1], array[end], array[1]] + array[2..end] \n            array\
    \ = sort_array(array) \n            array = [array[1], array[end], array[1]] +\
    \ array[2..end] \n            array = sort_array(array) \n            array =\
    \ [array[1], array[end], array[1]] + array[2..end] \n            array = sort_array(array)\
    \ \n            array = [array[1], array[end], array[1]] + array[2..end] \n  \
    \          array = sort_array(array) \n            array = [array[1], array[end],\
    \ array[1]] + array[2..end] \n            array = sort_array(array) \n       \
    \     array = [array[1], array[end], array[1]] + array[2..end] \n            array\
    \ = sort_array(array) \n            array = [array[1], array[end], array[1]] +\
    \ array[2..end] \n            array = sort_array(array) \n            array =\
    \ [array[1], array[end], array[1]] + array[2..end] \n            array = sort_array(array)\
    \ \n            array = [array[1], array[end], array[1]] + array[2..end] \n  \
    \          array = sort_array(array) \n            array = [array[1], array[end],\
    \ array[1]] + array[2..end] \n            array = sort_array(array) \n       \
    \     array = [array[1], array[end], array[1]] + array[2..end] \n            array\
    \ = sort_array(array) \n            array = [array[1], array[end], array[1]] +\
    \ array[2..end] \n            array = sort_array(array) \n            array =\
    \ [array[1], array[end], array[1]] + array[2..end] \n            array = sort_array(array)\
    \ \n            array = [array[1], array[end], array[1]] + array[2..end] \n  \
    \          array = sort_array(array) \n            array = [array[1], array[end],\
    \ array[1]] + array[2..end] \n            array = sort_array(array) \n       \
    \     array = [array[1], array[end], array[1]] + array[2..end\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpejv02n38.jl:20 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpejv02n38.jl:23\n\
    in expression starting at /tmp/tmpejv02n38.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnpu1fa77.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpnpu1fa77.jl:33\n  Expression: candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n   Evaluated: [5, 4, 3, 2, 1, 0] == [0,\
    \ 1, 2, 3, 4, 5]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnpu1fa77.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnpu1fa77.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnpu1fa77.jl:35\n  Expression: candidate([2, 1]) == [1, 2]\n\
    \   Evaluated: [2, 1] == [1, 2]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnpu1fa77.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnpu1fa77.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpnpu1fa77.jl:36\n  Expression: candidate([15, 42, 87, 32, 11,\
    \ 0]) == [0, 11, 15, 32, 42, 87]\n   Evaluated: [87, 42, 32, 15, 11, 0] == [0,\
    \ 11, 15, 32, 42, 87]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnpu1fa77.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnpu1fa77.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| a tags=sorting,arrays,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvgyq9v94.jl:26\nin expression starting at\
    \ /tmp/tmpvgyq9v94.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ \n    for x in array \n        sum += x \n    end\n    \n    if sum % 2 != 0\
    \ \n        sorted = reverse(array) \n    else \n        sorted = array \n   \
    \ end\n    \n    return sorted \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjcbt_nd6.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjcbt_nd6.jl:1\n\
    in expression starting at /tmp/tmpjcbt_nd6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u2c243y.jl:26\nin expression starting at\
    \ /tmp/tmp4u2c243y.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 0 \n        sort_array = array\n    else\n        sort_array\
    \ = reverse(array)\n    end\n    \n    sort_array = sort_array[1:end-1]\n    \n\
    \    return sort_array\nend\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpik2vvh1d.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpik2vvh1d.jl:1\n\
    in expression starting at /tmp/tmpik2vvh1d.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    if sum_array % 2 == 1 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 1 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 1 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 1 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 1 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 1 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 1 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 1 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 1 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 1 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 == 1 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 == 1 \n        array\
    \ = reverse(\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxtnafg8.jl:116\nin expression starting at\
    \ /tmp/tmpjxtnafg8.jl:116\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for element in array \n        sum += element \n    end\n    \n    if sum %\
    \ 2 != 0 \n        sorted = reverse(array) \n    else \n        sorted = array\
    \ \n    end \n    \n    return sorted \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsphjbp5.jl:36\nin expression starting at\
    \ /tmp/tmpcsphjbp5.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array\n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 0 \n        array = sort_array(array[2:end-1])\
    \ + array[1:end-1]\n    else\n        array = sort_array(array[2:end-1]) + array[1:end-1]\n\
    \    end\n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5])\
    \ == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1,\
    \ 2])\n\t@test(candidate([15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
    \t@test(candidate([21, 14, 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4e0d3gq8.jl:32\nin expression starting at\
    \ /tmp/tmp4e0d3gq8.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if length(array) == 0 \n        return array \n    \n    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1\n     \
    \   sort_array(reverse(array))\n    else\n        sort_array(array)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
    \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1myvx7fe.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1myvx7fe.jl:1\n\
    in expression starting at /tmp/tmp1myvx7fe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array of non-negative integers, return a copy of\
    \ the given array after sorting,\n    you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n    or sort\
    \ it in descending order if the sum( first index value, last index value) is even.\n\
    \n    Note:\n    * don't change the given array.\n\n    Examples:\n    >>> sort_array([])\n\
    \    []\n    >>> sort_array([5])\n    [5]\n    >>> sort_array([2, 4, 3, 0, 1,\
    \ 5])\n    [0, 1, 2, 3, 4, 5]\n    >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n   \
    \ [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\
    \ \n    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        even = sum(array) div 2 \n        if odd > even \n         \
    \   array = reverse(array) \n        else \n            array = reverse(array)\
    \ \n            array = reverse(array) \n            array = reverse(array) \n\
    \            array = reverse(array) \n            array = reverse(array) \n  \
    \          array = reverse(array) \n            array = reverse(array) \n    \
    \        array = reverse(array) \n            array = reverse(array) \n      \
    \      array = reverse(array) \n            array = reverse(array) \n        \
    \    array = reverse(array) \n            array = reverse(array) \n          \
    \  array = reverse(array) \n            array = reverse(array) \n            array\
    \ = reverse(array) \n            array = reverse(array) \n            array =\
    \ reverse(array) \n            array = reverse(array) \n            array = reverse(array)\
    \ \n            array = reverse(array) \n            array = reverse(array) \n\
    \            array = reverse(array) \n            array = reverse(array) \n  \
    \          array = reverse(array) \n            array = reverse(array) \n    \
    \        array = reverse(array) \n            array = reverse(array) \n      \
    \      array = reverse(array) \n            array = reverse(array) \n        \
    \    array = reverse(array) \n            array = reverse(array) \n          \
    \  array = reverse(array) \n            array = reverse(array) \n            array\
    \ = reverse(array) \n            array = reverse(array) \n            array =\
    \ reverse(array) \n            array = reverse(array) \n            array = reverse(array)\
    \ \n            array = reverse(array) \n            array = reverse(array) \n\
    \            array = reverse(array) \n            array = reverse(array) \n  \
    \          array = reverse(array) \n            array = reverse(array) \n    \
    \        array = reverse(array) \n            array = reverse(array) \n      \
    \      array = reverse(array) \n            array = reverse(array) \n        \
    \    array = reverse(array) \n            array = reverse(array) \n          \
    \  array = reverse(array) \n            array = reverse(array) \n            array\
    \ = reverse(array) \n            array = reverse(array) \n            array =\
    \ reverse(array) \n            array = reverse(array) \n            array = reverse(array)\
    \ \n            array = reverse(array) \n            array = reverse(array) \n\
    \            array = reverse(array) \n            array = reverse(array) \n  \
    \          array = reverse(array) \n            array = reverse(array) \n    \
    \        array = reverse(array) \n            array = reverse(array) \n      \
    \      array = reverse(array) \n            array = reverse(array) \n        \
    \    array = reverse(array) \n            array = reverse(array) \n          \
    \  array = reverse(array) \n            array = reverse(array) \n            array\
    \ = reverse(array) \n            array = reverse(array) \n            array =\
    \ reverse(array) \n            array = reverse(array) \n            array = reverse(array)\
    \ \n            array = reverse(array) \n            \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4, 3, 0, 1, 5]) == [0, 1,\
    \ 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1,\
    \ 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15, 42, 87, 32,\
    \ 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23, 11]) ==\
    \ [23, 21, 14, 11])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpra050fa7.jl:20 expected \"\
    end\", got \"mod\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpra050fa7.jl:23\n\
    in expression starting at /tmp/tmpra050fa7.jl:23\n"
  stdout: ''
