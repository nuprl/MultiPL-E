language: jl
name: HumanEval_120_maximum
results:
- exit_code: -1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    maximum\
    \ = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), k)\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpsmj97uhy.jl:37\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpsmj97uhy.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsmj97uhy.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsmj97uhy.jl:36\ntest set: Error
    During Test at /tmp/tmpsmj97uhy.jl:38\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpsmj97uhy.jl:28\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpsmj97uhy.jl:38 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpsmj97uhy.jl:36\ntest set: Error During Test at
    /tmp/tmpsmj97uhy.jl:39\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpsmj97uhy.jl:28\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsmj97uhy.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr) \n        error(\"k should be less than or equal to length(arr)\"\
    ) \n    else \n        maximum_rec(arr, k, 0) \n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,
    0 broken.

    in expression starting at /tmp/tmp0h1szc3i.jl:34

    '
  stdout: "test set: Error During Test at /tmp/tmp0h1szc3i.jl:37\n  Test threw exception\n\
    \  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp0h1szc3i.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0h1szc3i.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0h1szc3i.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0h1szc3i.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_rec not defined\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp0h1szc3i.jl:29\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0h1szc3i.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0h1szc3i.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0h1szc3i.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_rec\
    \ not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n \
    \    @ Main /tmp/tmp0h1szc3i.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0h1szc3i.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0h1szc3i.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0h1szc3i.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError:\
    \ maximum_rec not defined\n  Stacktrace:\n   [1] maximum"
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkh3gjxr0.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkh3gjxr0.jl:1\n\
    in expression starting at /tmp/tmpkh3gjxr0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n \
    \       maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\nend\n\
    maximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching maximum()\nClosest candidates\
    \ are:\n  maximum(!Matched::Vector{Int64}, !Matched::Int64) at /tmp/tmp5a5kguo3.jl:25\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5a5kguo3.jl:35\nin expression\
    \ starting at /tmp/tmp5a5kguo3.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        return arr\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpf1kakikb.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpf1kakikb.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf1kakikb.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf1kakikb.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpf1kakikb.jl:45\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf1kakikb.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf1kakikb.jl:43\ntest set: Error\
    \ During Test at /tmp/tmpf1kakikb.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  BoundsError: attempt to access\
    \ 4-element Vector{Int64} at index [5]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n   \
    \  @ Main /tmp/tmpf1kakikb.jl:31\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf1kakikb.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf1kakikb.jl:43\ntest set:\
    \ Error During Test at /tmp/tmpf1kakikb.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] maximum(arr::Vector{Int64}, k::Int64)\n\
    \     @ Main /tmp/tmpf1kakikb.jl:31\n   [3] macro expansion\n     @ /shared/cento"
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 2)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 10)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 34)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmppzcz7aky.jl:76

    '
  stdout: "test set: Test Failed at /tmp/tmppzcz7aky.jl:79\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzcz7aky.jl:79 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzcz7aky.jl:78\ntest set: Test\
    \ Failed at /tmp/tmppzcz7aky.jl:80\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzcz7aky.jl:80 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzcz7aky.jl:78\ntest set: Test\
    \ Failed at /tmp/tmppzcz7aky.jl:81\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzcz7aky.jl:81 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzcz7aky.jl:78\ntest set: Test\
    \ Failed at /tmp/tmppzcz7aky.jl:82\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppzcz7aky.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppzcz7aky.jl:78\ntest set: Error\
    \ During Test at /tmp/tmppzcz7aky.jl:83\n  Test threw exception\n  Expres"
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k)[end] \n    \
    \    return maximum \nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in the given array.\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmy69_1c.jl:33\nin expression starting at\
    \ /tmp/tmpsmy69_1c.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        return arr\n    else\n        maximum = arr\n       \
    \ for i in 1:k\n            maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \        end\n        return maximum\n    end\nend\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: objects of type Vector{Int64} are not callable\n\
    Use square brackets [] for indexing an Array.\nStacktrace:\n [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n   @ Main /tmp/tmp8qmtc53b.jl:31\n [2] top-level scope\n   @ /tmp/tmp8qmtc53b.jl:36\n\
    in expression starting at /tmp/tmp8qmtc53b.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ == 0 \n        return arr\n    else \n        maximum = maximum([maximum, arr[k]],\
    \ k-1)\n        return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvow_ovks.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvow_ovks.jl:1\n\
    in expression starting at /tmp/tmpvow_ovks.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum()\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5ikddj7.jl:1\nin expression starting at /tmp/tmpq5ikddj7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ <= 0\n        throw(ArgumentError(\"k must be positive\"))\n    else if length(arr)\
    \ <= k\n        throw(ArgumentError(\"k must be less than or equal to the length\
    \ of the array\"))\n    else\n        maximum = arr[k-1]\n        for i in k+1:length(arr)\n\
    \            if arr[i] > maximum\n                maximum = arr[i]\n         \
    \   end\n        end\n        return maximum\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdl97cznk.jl:28\nin expression starting at\
    \ /tmp/tmpdl97cznk.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n \
    \       maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in a given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: objects of type Vector{Int64} are not callable\n\
    Use square brackets [] for indexing an Array.\nStacktrace:\n [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n   @ Main /tmp/tmpbs_dhr6v.jl:31\n [2] top-level scope\n   @ /tmp/tmpbs_dhr6v.jl:36\n\
    in expression starting at /tmp/tmpbs_dhr6v.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n \
    \       if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 42)\nmaximum([-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 2-element Vector{Int64}\
    \ at index [6]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n   @ Main /tmp/tmp060o0guc.jl:31\n [3]\
    \ top-level scope\n   @ /tmp/tmp060o0guc.jl:42\nin expression starting at /tmp/tmp060o0guc.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        return maximum.(minimum(maximum, k)) + arr\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum number in a given\
    \ array of numbers.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zsxra6f.jl:33\nin expression starting at\
    \ /tmp/tmp6zsxra6f.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpj_5g8jqq.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpj_5g8jqq.jl:44\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_5g8jqq.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_5g8jqq.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpj_5g8jqq.jl:45\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_5g8jqq.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_5g8jqq.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpj_5g8jqq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_5g8jqq.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_5g8jqq.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpj_5g8jqq.jl:47\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj_5g8jqq.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj_5g8jqq.jl:43\ntest set: Error\
    \ During Test at /tmp/tmpj_5g8jqq.jl:48\n  Test threw exception\n  Expres"
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibkzkh2f.jl:39\nin expression starting at\
    \ /tmp/tmpibkzkh2f.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr) \n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr) \n\
    \        maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpdp0rch7p.jl:37

    '
  stdout: "test set: Test Failed at /tmp/tmpdp0rch7p.jl:40\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdp0rch7p.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdp0rch7p.jl:39\ntest set: Error\
    \ During Test at /tmp/tmpdp0rch7p.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpdp0rch7p.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdp0rch7p.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdp0rch7p.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdp0rch7p.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpdp0rch7p.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdp0rch7p.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdp0rch7p.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdp0rch7p.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8mwdf98k.jl:1\nin expression starting at /tmp/tmp8mwdf98k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr) \n        error(\"k should be less than or equal to the length\
    \ of the array\")\n    end\n    maximum = arr\n    for i = k+1:length(arr) \n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 34)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 36)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 38)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 40)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 42)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: objects of type Vector{Int64} are not callable\n\
    Use square brackets [] for indexing an Array.\nStacktrace:\n [1] maximum(arr::Vector{Int64},\
    \ k::Int64)\n   @ Main /tmp/tmpw8scivbo.jl:31\n [2] top-level scope\n   @ /tmp/tmpw8scivbo.jl:36\n\
    in expression starting at /tmp/tmpw8scivbo.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n\
    \    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the\
    \ array will be in the range of [1, 1000].\n        2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\
    \"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n \
    \       maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpqweteuh8.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpqweteuh8.jl:41\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqweteuh8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqweteuh8.jl:40\ntest set: Error\
    \ During Test at /tmp/tmpqweteuh8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([4, -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpqweteuh8.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqweteuh8.jl:42 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqweteuh8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqweteuh8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type\
    \ Vector{Int64} are not callable\n  Use square brackets [] for indexing an Array.\n\
    \  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpqweteuh8.jl:31\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqweteuh8.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqweteuh8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqweteuh8.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodError: objects\
    \ of type Vector{Int64} are not calla"
